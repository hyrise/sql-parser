#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 143
#define YY_END_OF_BUFFER 144
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[986] =
    {   0,
        0,    0,    2,    2,  144,  142,    4,    4,  142,  142,
      135,  142,  135,  135,  138,  135,  135,  135,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  135,    2,    2,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    4,  130,    0,    0,  141,    1,  138,  137,  136,
      132,  131,  129,  133,  140,  140,  140,  140,  140,  140,

      114,  140,  115,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  116,  140,  140,  117,  118,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  119,  120,  121,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  122,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  134,    2,    2,    2,    2,    2,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  139,  136,  100,  140,  101,  140,
      140,  102,  140,  103,  140,  140,  140,  140,  140,  140,
      140,  140,  104,  140,  126,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  105,  140,  140,  140,  140,  140,

      140,  140,  106,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  107,  140,  140,
      108,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      109,  140,  140,  110,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  111,  140,  140,  140,
      140,  112,  140,  140,  140,  140,  113,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  140,  140,  140,  140,  140,  140,   74,  140,
       75,  140,  140,  140,  140,   76,  140,  140,  140,  140,
       77,  140,  140,  140,   78,   79,  140,  140,  140,  140,

      140,  140,   80,   81,   82,  140,  140,   83,  140,   84,
      140,  125,  140,  140,  140,  140,  140,  140,   85,  140,
       86,   87,   88,  140,   90,  140,  140,  140,  140,  140,
       91,  140,  140,  140,  140,  140,   92,  140,  140,  140,
      140,  140,  140,  140,  140,   93,  140,  140,  140,  140,
       94,   95,   96,  140,  140,  140,  140,  140,  140,  140,
       97,  140,   98,  140,   99,  128,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       55,   56,  140,   57,  140,  140,  140,  140,  140,  140,
       58,  140,  140,  140,   59,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,   60,  140,  140,   89,  140,
       61,   62,  140,  140,  140,  140,   63,   64,   65,   66,

      140,  127,  140,  140,  140,   67,   68,  140,  140,  140,
      140,  140,   69,  140,  140,  140,  140,  140,   70,  140,
      140,  140,   71,  140,  140,  140,   72,  140,  140,   73,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

      140,   30,  140,  140,   31,  140,   32,  140,  140,   33,
       34,  140,   35,   36,   37,  140,   38,  140,  140,   40,
       41,  140,   42,   43,  140,  140,   44,  124,  140,  140,
       45,  140,  140,  140,   46,  140,   47,  123,   48,   49,
      140,   50,  140,  140,  140,   51,   52,   53,   54,  140,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

       14,   15,   16,   17,   18,  140,   19,  140,   20,   21,
       39,   22,   23,  140,   24,  140,  140,   25,   26,  140,
       27,   28,  140,  140,  140,   29,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  140,   10,  140,   11,  140,   12,  140,  140,
       13,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      140,    7,  140,    8,    9,    2,    2,    2,    2,    2,
        5,    6,    2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static const flex_int16_t yy_base[993] =
    {   0,
        0,    0,   67,    0,  523, 3916,  133,  135,  462,    0,
     3916,  463,  131,  456,  133,  132,  451,  434,  129,  129,
      137,  135,  145,  179,  127,  184,  189,  131,  144,  201,
      202,  224,  235,  230,    0,  200,  262,  305,  241,  253,
      255,  146,  366,    0,  200,  224,  391,  357,    0,  348,
      264,  327,  222,  251,  297,  294,  363,  430,  484,  536,
      584,  632,  283,  359,  680,  294,  293,  361,  422,  732,
      780,  431,  348,  435,  830,  882,  472,  530,  443,  360,
      225,  296, 3916,  279,  246, 3916, 3916,  306,  226,  207,
     3916, 3916, 3916, 3916,    0,  243,  280,  359,  438,  293,

      309,  474,    0,  395,  478,  373,  294,  473,  537,  427,
      296,  306,  353,  379,  386,  537,  426,  463,  481,  488,
      486,  490,  525,  571,  485,    0,  539,  534,  587,  538,
      550,  535,  586,  582,  596,  576,  586,  588,  584,  585,
      599,  612,  609,    0,  635,  623,  626,  644,  643,  632,
      642,  646,  684,  640,  638,  660,  660,  651,  678,  690,
      684,  682,  679,  699,  697,  694,  695,  731,  710,  696,
      716, 3916,    0,  340,    0,  206,  198,    0,    0,  335,
      190,  161,    0,    0,    0,    0,  736,  741,  745,  770,
      795,  811,  834,  869,  778,  873,  901,  799,  871,  923,

      975,  926,  829,  931,  960,  957,  934, 1025,  972,  997,
     1011, 1008, 1033, 1039, 1051, 1073, 1014,  985, 1077, 1064,
     1126, 1074, 1085, 1000, 1117, 1122, 1131, 1123, 1139, 1165,
     1161, 1179, 1177, 1187, 1189, 1171, 1220, 1215, 1225, 1231,
     1228, 1260, 1241, 1263, 1279, 1271, 1282, 1315, 1292, 1317,
     1328, 1202, 1323, 1314, 1333, 1365, 1357, 1367, 1359, 1368,
     1382, 1390, 1401,    0, 3916,  145,    0,  735,    0,  746,
      740,    0,  761,    0,  776,  792,  828, 1305,  823,  832,
      852,  849,    0,  903,    0,  910,  929, 1403,  938,  942,
      949,  989, 1058, 1079,    0, 1092, 1107, 1135, 1182, 1230,

     1260, 1327,    0, 1338, 1382, 1403, 1391, 1408, 1409, 1404,
     1405, 1409, 1417, 1415, 1426, 1431, 1433, 1441, 1419, 1427,
        0, 1424, 1442, 1439, 1445, 1458, 1453, 1440, 1442, 1443,
        0, 1454, 1451, 1451, 1467, 1472, 1477, 1465, 1464, 1468,
     1481, 1464, 1477, 1485, 1477, 1489,    0, 1472, 1478, 1480,
     1489,    0, 1486, 1483, 1496, 1508,    0, 1500, 1501, 1500,
     1519, 1509, 1503, 1503, 1511, 1518, 1525, 1516,    0,  140,
     1530, 1539, 1541, 1543, 1544, 1547, 1569, 1552, 1573, 1584,
     1598, 1587, 1581, 1606, 1617, 1595, 1603, 1619, 1627, 1649,
     1655, 1643, 1659, 1641, 1672, 1680, 1697, 1671, 1689, 1705,

     1693, 1723, 1731, 1722, 1726, 1710, 1734, 1747, 1764, 1763,
     1759, 1765, 1776, 1789, 1793, 1801, 1799, 1817, 1818, 1822,
     1830, 1833, 1839, 1847, 1851, 1861, 1852, 1885, 1891, 1900,
     1895, 1909, 1906, 1914, 1919, 1943, 1931, 1935, 1940, 1945,
     1968, 1974, 1969, 1973, 1979, 1997, 2011, 1998, 2003, 2009,
     2022, 2028, 2032, 2051, 2057, 2033, 2043, 2067, 2076, 2068,
     2072, 2097, 2101, 2100, 2122, 2116, 2130, 2135, 2139, 2151,
     2165, 2170, 1520, 1536, 1615, 1618, 1654, 1711,    0, 1792,
        0, 1789, 1862, 1886, 1896,    0, 1952, 2018, 2020, 2106,
        0, 2107, 2103, 2124,    0,    0, 2150, 2156, 2156, 2159,

     2179, 2180,    0,    0,    0, 2183, 2173,    0, 2180,    0,
     2183,    0, 2196, 2187, 2185, 2192, 2194, 2206,    0, 2202,
        0,    0,    0, 2198,    0, 2207, 2215, 2207, 2215, 2211,
        0, 2227, 2226, 2215, 2216, 2222,    0, 2237, 2241, 2230,
     2226, 2228, 2236, 2238, 2252,    0, 2254, 2254, 2259, 2251,
        0,    0, 2248, 2265, 2258, 2252, 2273, 2257, 2271, 2275,
        0, 2260,    0, 2278,    0,    0, 2284, 2293, 2287, 2292,
     2308, 2298, 2309, 2326, 2310, 2342, 2338, 2332, 2361, 2343,
     2360, 2366, 2376, 2372, 2384, 2400, 2397, 2414, 2406, 2410,
     2429, 2432, 2435, 2445, 2446, 2454, 2463, 2464, 2468, 2489,

     2486, 2480, 2494, 2498, 2519, 2508, 2517, 2534, 2523, 2538,
     2540, 2571, 2532, 2568, 2562, 2563, 2572, 2586, 2576, 2597,
     2594, 2612, 2622, 2616, 2620, 2637, 2638, 2648, 2660, 2666,
     2650, 2676, 2682, 2671, 2704, 2710, 2708, 2712, 2722, 2714,
     2726, 2736, 2738, 2750, 2754, 2762, 2764, 2768, 2790, 2776,
     2798, 2807, 2804, 2808, 2812, 2820, 2830, 2838, 2841, 2842,
        0,    0, 2296,    0, 2327, 2412, 2476, 2490, 2494, 2522,
        0, 2597, 2685, 2745,    0, 2760, 2777, 2816, 2829, 2829,
     2831, 2834, 2848, 2855, 2853,    0, 2862, 2853,    0, 2855,
        0,    0, 2857, 2874, 2862, 2871,    0,    0,    0,    0,

     2881,    0, 2886, 2880, 2869,    0,    0, 2886, 2877, 2879,
     2894, 2891,    0, 2900, 2899, 2885, 2903, 2908, 2892, 2894,
     2897, 2918,    0, 2915, 2917, 2918,    0, 2906, 2928,    0,
     2926, 2928, 2936, 2932, 2938, 2940, 2950, 2962, 2954, 2966,
     2968, 2980, 2992, 2994, 2996, 3005, 3002, 3004, 3008, 3030,
     3033, 3042, 3054, 3046, 3079, 3064, 3068, 3087, 3076, 3090,
     3082, 3092, 3116, 3098, 3108, 3133, 3121, 3124, 3130, 3142,
     3146, 3152, 3165, 3156, 3175, 3154, 3164, 3178, 3187, 3196,
     3204, 3206, 3208, 3219, 3221, 3229, 3258, 3254, 3218, 3260,
     3252, 3286, 3263, 3269, 3292, 3275, 3288, 3297, 3325, 3303,

     3010,    0, 3025, 3036, 3026, 3113,    0, 3172, 3198,    0,
        0, 3295,    0,    0,    0, 3304,    0, 3305, 3311,    0,
        0, 3307,    0,    0, 3315, 3329,    0,    0, 3325, 3338,
        0, 3321, 3337, 3320,    0, 3344, 3329,    0,    0,    0,
     3339,    0, 3351, 3353, 3336,    0,    0,    0,    0, 3350,
     3360, 3362, 3366, 3365, 3377, 3381, 3379, 3396, 3383, 3400,
     3411, 3419, 3414, 3422, 3432, 3433, 3435, 3436, 3450, 3437,
     3448, 3451, 3454, 3467, 3473, 3476, 3485, 3488, 3499, 3511,
     3489, 3502, 3510, 3521, 3525, 3542, 3539, 3527, 3543, 3551,
     3575, 3556, 3564, 3565, 3579, 3573, 3577, 3581, 3596, 3607,

        0,    0,    0,    0,    0, 3372,    0, 3476,    0,    0,
        0,    0,    0, 3530,    0, 3592, 3610,    0,    0, 3598,
        0,    0, 3602, 3609, 3618,    0, 3619, 3629, 3630, 3631,
     3633, 3652, 3635, 3668, 3647, 3664, 3665, 3669, 3670, 3673,
     3681, 3705, 3686, 3687, 3702, 3704, 3703, 3721, 3727, 3735,
     3736, 3737, 3621,    0, 3711,    0, 3725,    0, 3719, 3731,
        0, 3758, 3759, 3760, 3761, 3776, 3771, 3772, 3790, 3777,
     3793,    0, 3780,    0,    0, 3795, 3809, 3811, 3812, 3813,
        0,    0, 3814, 3826, 3916, 3891, 3895,  136, 3899, 3903,
     3907, 3911

    } ;

static const flex_int16_t yy_def[993] =
    {   0,
      985,    1,  985,    3,  985,  985,  985,  985,  985,  986,
      985,  987,  985,  985,  985,  985,  985,  985,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  985,  989,  989,  985,  989,  990,  989,  991,
      989,  989,  989,  989,  989,  989,  992,  992,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
      989,  985,  985,  986,  987,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  985,  989,  989,  989,  990,  991,  989,  989,  989,
      989,  989,  989,  989,  989,  989,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  989,  985,  985,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  989,  989,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,  988,  988,  988,  988,  988,  988,  988,  988,
      988,   58,   58,   58,   58,   58,   58,   58,   58,   58,
      988,  988,  988,  988,  988,   58,   58,   58,   58,   58,
      988,  988,   58,   58,    0,  985,  985,  985,  985,  985,
      985,  985

    } ;

static const flex_int16_t yy_nxt[3984] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   35,   42,   35,    6,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   35,   42,   35,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,

       77,   78,   79,   73,   80,   73,   44,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       73,   80,   73,   81,   82,   82,   82,   82,   87,   95,
       88,   90,   88,   91,   92,   96,  102,   97,  108,  370,
      104,  121,  109,   98,  266,   99,  110,  122,  131,  100,
      101,  132,  111,  171,  105,  112,  103,  106,  107,  113,
      370,  114,   96,  102,   97,  108,  115,  104,  121,  109,
       98,  116,   99,  110,  122,  131,  100,  101,  132,  111,
      171,  105,  112,  103,  106,  107,  113,  123,  114,  181,

      117,  174,   82,  115,  178,  124,  118,  126,  116,  119,
      369,  125,  120,  127,  128,  129,  266,  150,  133,  136,
      130,  151,  134,  137,  123,   82,   82,  117,  135,  138,
      182,  180,  124,  118,  126,   89,  119,  139,  125,  120,
      127,  128,  129,  147,  150,  133,  136,  130,  151,  134,
      137,  140,   86,  143,  148,  135,  138,  141,  142,  267,
      149,  144,  183,  184,  139,  145,  167,  164,  146,  165,
      147,  179,  166,  180,  168,  169,  170,  152,  140,  153,
      143,  148,  154,  265,  141,  142,  267,  149,  144,  155,
      156,  264,  145,  167,  164,  146,  165,   82,   82,  166,

      187,  168,  169,  170,  152,  186,  153,  213,  185,  154,
      224,  187,  268,  214,   90,   88,  155,  156,  157,  158,
      187,  223,  159,  273,  274,  160,  161,  187,  283,  292,
      187,  187,  162,  293,  213,  163,  181,  224,  187,  268,
      214,  174,   82,  182,  180,  157,  158,  187,  223,  159,
      273,  274,  160,  161,  178,  283,  292,  187,  187,  162,
      293,  173,  163,  173,  173,  187,  173,  173,  173,  173,
      173,  173,  215,  173,  173,  173,  187,  263,  225,  188,
      216,  189,  226,  269,  294,  187,  217,  190,  227,  191,
      281,  270,  187,  192,  193,  295,  187,  187,  187,  215,

      282,  296,  175,  187,  263,  225,  188,  216,  189,  226,
      269,  294,  187,  217,  190,  227,  191,  281,  270,  277,
      192,  193,  295,  187,  187,  187,  278,  282,  296,  173,
      173,  173,  172,  173,  173,  173,  173,  173,  173,  228,
      173,  173,  173,  229,  239,   94,  277,  194,  187,  230,
      302,  271,  242,  278,  272,  240,  243,  290,  291,  187,
      187,  241,   93,  261,  262,   89,  228,  195,  187,   86,
      229,  239,  187,   83,  194,  187,  230,  302,  271,  242,
      187,  272,  240,  243,  290,  291,  187,  187,  241,  187,
      261,  262,  275,  303,  195,  187,  173,  196,  256,  187,

      257,  187,  279,  258,  280,  284,  276,  187,  304,  187,
      285,  197,  305,  306,  198,  199,  187,  307,  312,  275,
      303,  187,  985,  985,  196,  256,  985,  257,  187,  279,
      258,  280,  284,  276,  985,  304,  187,  285,  197,  305,
      306,  198,  199,  259,  307,  312,  985,  187,  187,  200,
      286,  260,  297,  201,  298,  287,  308,  202,  299,  309,
      313,  288,  314,  203,  319,  300,  204,  187,  289,  301,
      259,  320,  321,  187,  187,  985,  200,  286,  260,  297,
      201,  298,  287,  308,  202,  299,  309,  313,  288,  314,
      203,  319,  300,  204,  187,  289,  301,  310,  320,  321,

      187,  187,  311,  315,  322,  323,  327,  324,  205,  325,
      206,  326,  328,  316,  329,  207,  330,  331,  317,  318,
      208,  187,  985,  332,  310,  333,  985,  334,  187,  311,
      315,  322,  323,  327,  324,  205,  325,  206,  326,  328,
      316,  329,  207,  330,  331,  317,  318,  208,  187,  187,
      332,  335,  333,  209,  334,  336,  337,  338,  341,  210,
      339,  343,  211,  342,  340,  212,  344,  348,  349,  187,
      985,  985,  985,  350,  351,  352,  187,  985,  335,  985,
      209,  985,  336,  337,  338,  341,  210,  339,  343,  211,
      342,  340,  212,  344,  348,  349,  187,  187,  218,  345,

      350,  351,  352,  353,  219,  220,  221,  355,  346,  356,
      357,  222,  358,  361,  354,  362,  347,  187,  985,  363,
      359,  985,  985,  360,  187,  218,  345,  366,  367,  368,
      353,  219,  220,  221,  355,  346,  356,  357,  222,  358,
      361,  354,  362,  347,  187,  231,  363,  359,  364,  187,
      360,  985,  473,  187,  366,  367,  368,  371,  187,  232,
      985,  365,  187,  474,  475,  233,  234,  985,  985,  187,
      985,  985,  231,  187,  476,  364,  187,  372,  187,  473,
      187,  985,  187,  985,  371,  187,  232,  187,  365,  187,
      474,  475,  233,  234,  373,  187,  187,  187,  235,  985,

      187,  476,  374,  477,  372,  187,  236,  187,  375,  187,
      237,  376,  187,  238,  187,  187,  385,  187,  985,  985,
      985,  373,  187,  985,  187,  235,  386,  478,  187,  374,
      477,  985,  187,  236,  187,  375,  187,  237,  376,  187,
      238,  377,  187,  385,  187,  244,  187,  245,  187,  378,
      246,  187,  479,  386,  478,  187,  482,  247,  248,  187,
      985,  985,  396,  187,  483,  484,  187,  187,  377,  985,
      985,  187,  244,  187,  245,  187,  378,  246,  187,  479,
      485,  985,  985,  482,  247,  248,  187,  379,  187,  396,
      187,  483,  484,  187,  187,  249,  250,  381,  187,  251,

      985,  380,  252,  253,  382,  387,  187,  485,  187,  254,
      187,  985,  255,  187,  379,  187,  985,  187,  187,  187,
      486,  985,  249,  250,  381,  383,  251,  384,  380,  252,
      253,  382,  387,  187,  487,  187,  254,  187,  187,  255,
      187,  985,  488,  187,  985,  187,  187,  486,  187,  400,
      985,  187,  383,  491,  384,  388,  394,  395,  397,  492,
      389,  487,  985,  187,  985,  187,  985,  187,  187,  488,
      187,  187,  985,  399,  187,  187,  400,  187,  187,  985,
      491,  493,  388,  394,  395,  397,  492,  389,  390,  187,
      187,  398,  187,  391,  187,  187,  406,  187,  187,  392,

      399,  187,  187,  494,  187,  985,  393,  985,  493,  187,
      985,  985,  187,  985,  187,  390,  187,  187,  398,  187,
      391,  187,  187,  406,  187,  187,  392,  407,  187,  187,
      494,  187,  409,  393,  187,  985,  187,  425,  408,  187,
      401,  187,  402,  985,  187,  187,  403,  416,  187,  187,
      187,  187,  187,  404,  407,  187,  187,  405,  187,  409,
      410,  187,  187,  985,  425,  408,  411,  401,  187,  402,
      187,  985,  187,  403,  416,  187,  187,  187,  187,  985,
      404,  187,  412,  187,  405,  413,  495,  410,  187,  187,
      187,  187,  418,  411,  187,  187,  496,  187,  417,  414,

      423,  187,  187,  187,  415,  497,  424,  985,  187,  412,
      187,  187,  413,  495,  187,  187,  985,  187,  187,  418,
      985,  187,  187,  496,  498,  417,  414,  423,  187,  187,
      985,  415,  497,  424,  187,  426,  985,  187,  187,  187,
      187,  187,  419,  187,  429,  427,  430,  428,  187,  187,
      499,  498,  420,  431,  187,  985,  187,  421,  422,  187,
      187,  187,  426,  187,  985,  432,  187,  187,  187,  419,
      187,  429,  427,  430,  428,  187,  187,  499,  187,  420,
      431,  187,  187,  187,  421,  422,  187,  187,  187,  985,
      187,  433,  432,  434,  187,  187,  187,  985,  187,  985,

      437,  436,  187,  187,  187,  187,  187,  438,  187,  187,
      985,  435,  985,  500,  187,  187,  187,  985,  433,  459,
      434,  187,  985,  187,  187,  187,  187,  437,  436,  187,
      985,  187,  187,  187,  438,  187,  439,  187,  435,  187,
      500,  187,  187,  187,  442,  443,  459,  440,  187,  444,
      985,  187,  187,  187,  501,  441,  985,  187,  187,  187,
      447,  985,  187,  439,  187,  187,  187,  985,  187,  187,
      985,  442,  443,  985,  440,  187,  444,  187,  187,  187,
      187,  501,  441,  448,  187,  187,  445,  447,  187,  187,
      502,  446,  187,  985,  449,  187,  187,  187,  452,  187,

      187,  985,  985,  450,  187,  187,  455,  187,  187,  187,
      448,  451,  453,  445,  985,  187,  187,  502,  446,  187,
      480,  449,  481,  187,  187,  452,  187,  187,  454,  187,
      450,  187,  187,  455,  187,  187,  187,  985,  451,  453,
      187,  456,  461,  187,  503,  187,  187,  480,  460,  481,
      187,  187,  187,  457,  187,  454,  187,  985,  187,  187,
      187,  187,  985,  504,  458,  187,  462,  187,  456,  461,
      187,  503,  187,  465,  187,  460,  187,  187,  187,  187,
      457,  187,  187,  467,  187,  468,  463,  187,  466,  464,
      504,  458,  187,  462,  187,  985,  187,  187,  469,  470,

      465,  187,  187,  187,  187,  187,  505,  187,  985,  187,
      467,  187,  468,  463,  472,  466,  464,  506,  187,  187,
      489,  187,  471,  187,  507,  469,  470,  187,  508,  187,
      509,  187,  187,  505,  187,  490,  510,  511,  187,  512,
      513,  472,  514,  515,  506,  187,  187,  489,  516,  471,
      517,  507,  520,  521,  187,  508,  522,  509,  518,  523,
      524,  525,  490,  510,  511,  187,  512,  513,  519,  514,
      515,  526,  527,  528,  529,  516,  530,  517,  531,  520,
      521,  532,  533,  522,  534,  518,  523,  524,  525,  535,
      536,  537,  538,  539,  540,  519,  541,  542,  526,  527,

      528,  529,  543,  530,  544,  531,  545,  546,  532,  533,
      547,  534,  548,  549,  550,  551,  535,  536,  537,  538,
      539,  540,  552,  541,  542,  553,  554,  557,  555,  543,
      556,  544,  558,  545,  546,  559,  560,  547,  561,  548,
      549,  550,  551,  562,  563,  565,  566,  187,  564,  552,
      661,  985,  553,  554,  557,  555,  567,  556,  187,  558,
      568,  187,  559,  560,  187,  561,  662,  187,  569,  187,
      562,  563,  565,  566,  187,  564,  187,  661,  187,  985,
      187,  187,  570,  567,  187,  187,  187,  568,  187,  187,
      187,  187,  985,  662,  187,  569,  187,  985,  187,  985,

      571,  187,  574,  187,  575,  187,  187,  187,  187,  570,
      187,  187,  187,  187,  576,  187,  187,  187,  187,  572,
      187,  187,  573,  187,  187,  187,  579,  571,  187,  574,
      578,  575,  187,  187,  187,  187,  580,  187,  577,  187,
      187,  576,  187,  187,  187,  187,  572,  187,  187,  573,
      187,  187,  663,  579,  187,  664,  187,  578,  586,  187,
      583,  187,  187,  580,  187,  577,  187,  187,  582,  985,
      187,  187,  187,  581,  585,  584,  187,  985,  187,  663,
      187,  187,  664,  187,  665,  586,  187,  583,  590,  187,
      985,  187,  187,  187,  588,  582,  187,  187,  985,  187,

      581,  585,  584,  187,  587,  187,  187,  187,  187,  187,
      592,  665,  985,  187,  187,  590,  187,  187,  591,  187,
      985,  588,  187,  187,  187,  589,  187,  597,  666,  985,
      187,  587,  985,  187,  187,  187,  187,  592,  593,  187,
      187,  187,  187,  187,  187,  591,  595,  187,  187,  187,
      985,  187,  589,  187,  597,  666,  596,  187,  985,  187,
      187,  187,  594,  187,  187,  593,  187,  187,  187,  187,
      187,  187,  598,  595,  187,  187,  187,  600,  187,  985,
      187,  187,  187,  596,  187,  602,  187,  187,  599,  594,
      187,  187,  601,  187,  985,  187,  187,  603,  187,  598,

      187,  187,  187,  187,  600,  667,  187,  187,  187,  187,
      187,  187,  602,  187,  668,  599,  187,  985,  187,  601,
      187,  604,  607,  187,  603,  605,  187,  187,  187,  187,
      187,  606,  667,  187,  187,  609,  187,  187,  187,  610,
      187,  668,  985,  187,  608,  187,  985,  611,  604,  607,
      612,  985,  605,  187,  187,  187,  187,  187,  606,  187,
      613,  187,  609,  187,  187,  187,  610,  187,  187,  617,
      187,  608,  614,  615,  611,  985,  187,  612,  187,  985,
      985,  187,  187,  187,  187,  985,  187,  613,  187,  187,
      985,  187,  669,  616,  187,  187,  617,  187,  187,  614,

      615,  985,  187,  187,  985,  187,  618,  619,  187,  985,
      985,  187,  187,  620,  621,  187,  187,  187,  670,  669,
      616,  985,  187,  187,  985,  187,  187,  671,  187,  187,
      985,  187,  187,  618,  619,  187,  187,  187,  623,  187,
      620,  621,  622,  187,  187,  670,  187,  624,  187,  187,
      187,  187,  187,  187,  671,  187,  187,  628,  187,  187,
      187,  626,  629,  187,  187,  623,  627,  625,  187,  622,
      187,  985,  187,  187,  624,  187,  672,  187,  187,  187,
      187,  630,  187,  187,  628,  187,  187,  187,  626,  629,
      187,  187,  634,  627,  625,  187,  187,  632,  633,  187,

      631,  985,  985,  672,  187,  187,  187,  187,  630,  187,
      187,  187,  187,  187,  187,  637,  187,  187,  187,  634,
      187,  985,  985,  187,  632,  633,  639,  631,  187,  635,
      638,  636,  187,  187,  187,  187,  985,  187,  187,  187,
      187,  187,  637,  187,  985,  187,  187,  187,  187,  187,
      187,  673,  674,  639,  985,  187,  635,  638,  636,  187,
      187,  187,  187,  640,  641,  187,  187,  187,  187,  187,
      187,  644,  187,  187,  187,  187,  187,  187,  673,  674,
      187,  643,  985,  642,  187,  647,  187,  187,  187,  187,
      640,  641,  187,  187,  187,  187,  187,  187,  644,  645,

      985,  187,  646,  985,  187,  187,  985,  187,  643,  187,
      642,  187,  647,  187,  187,  187,  187,  187,  187,  675,
      187,  187,  676,  648,  677,  985,  645,  651,  649,  646,
      650,  187,  187,  187,  187,  652,  187,  187,  187,  187,
      187,  187,  653,  985,  187,  187,  675,  187,  678,  676,
      648,  677,  187,  187,  651,  649,  187,  650,  985,  187,
      187,  187,  652,  654,  187,  187,  187,  187,  187,  653,
      655,  656,  187,  985,  187,  678,  187,  657,  679,  187,
      187,  658,  187,  187,  680,  659,  187,  187,  187,  681,
      654,  682,  683,  684,  187,  187,  685,  655,  656,  187,

      660,  686,  187,  187,  657,  679,  687,  187,  658,  187,
      688,  680,  659,  689,  187,  187,  681,  690,  682,  683,
      684,  691,  692,  685,  693,  694,  696,  660,  686,  187,
      697,  698,  699,  687,  187,  702,  695,  688,  700,  701,
      689,  703,  704,  705,  690,  706,  707,  708,  691,  692,
      709,  693,  694,  696,  710,  711,  712,  697,  698,  699,
      713,  714,  702,  695,  715,  700,  701,  716,  703,  704,
      705,  717,  706,  707,  708,  718,  719,  709,  720,  721,
      722,  710,  711,  712,  723,  724,  725,  713,  714,  726,
      727,  715,  728,  729,  716,  730,  985,  985,  717,  985,

      985,  187,  718,  719,  187,  720,  721,  722,  985,  187,
      187,  723,  724,  725,  731,  736,  726,  727,  985,  728,
      729,  187,  730,  732,  733,  187,  187,  187,  187,  734,
      187,  187,  985,  985,  801,  187,  187,  187,  735,  737,
      985,  731,  736,  187,  802,  187,  187,  187,  187,  187,
      732,  733,  187,  187,  187,  187,  734,  187,  985,  187,
      187,  801,  187,  187,  740,  735,  737,  738,  739,  187,
      187,  802,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  985,  187,  187,  742,  745,  187,  187,  985,  187,
      187,  740,  741,  187,  738,  739,  187,  187,  187,  743,

      985,  187,  187,  187,  187,  187,  187,  187,  744,  187,
      187,  742,  745,  187,  187,  746,  187,  187,  747,  741,
      187,  187,  985,  187,  187,  187,  743,  187,  187,  803,
      187,  187,  985,  985,  187,  744,  187,  187,  748,  985,
      187,  187,  746,  187,  187,  747,  187,  187,  187,  187,
      187,  187,  187,  985,  187,  985,  803,  749,  187,  753,
      750,  187,  187,  187,  187,  748,  187,  754,  751,  187,
      187,  187,  187,  187,  187,  985,  187,  752,  187,  187,
      187,  187,  187,  187,  749,  187,  753,  750,  985,  187,
      187,  187,  804,  187,  754,  751,  187,  187,  187,  187,

      187,  187,  755,  187,  752,  187,  187,  187,  187,  187,
      187,  187,  187,  985,  756,  187,  805,  187,  187,  804,
      757,  806,  985,  187,  187,  187,  187,  187,  187,  755,
      187,  187,  187,  187,  759,  187,  187,  985,  187,  807,
      187,  756,  187,  805,  187,  187,  758,  757,  806,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  761,
      187,  759,  187,  187,  760,  985,  807,  187,  762,  187,
      763,  187,  187,  758,  985,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  761,  187,  187,  187,
      764,  760,  766,  187,  985,  762,  187,  763,  187,  187,

      187,  765,  187,  187,  187,  187,  187,  187,  187,  187,
      985,  769,  187,  187,  187,  187,  187,  764,  767,  766,
      187,  768,  985,  187,  808,  985,  187,  187,  765,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  769,  187,
      187,  187,  772,  770,  771,  767,  773,  985,  768,  187,
      187,  808,  774,  187,  187,  775,  187,  187,  187,  187,
      187,  187,  985,  985,  187,  187,  187,  187,  985,  772,
      770,  771,  985,  773,  187,  187,  187,  187,  776,  774,
      187,  187,  775,  187,  187,  187,  187,  187,  187,  779,
      777,  778,  187,  187,  187,  780,  781,  187,  985,  187,

      985,  187,  187,  187,  187,  776,  985,  985,  187,  809,
      187,  985,  187,  187,  187,  187,  779,  777,  778,  187,
      187,  187,  780,  781,  187,  187,  187,  187,  985,  187,
      187,  187,  985,  784,  782,  187,  809,  786,  785,  187,
      187,  187,  783,  787,  985,  187,  187,  187,  187,  187,
      985,  187,  187,  187,  187,  789,  187,  788,  187,  187,
      784,  782,  810,  187,  786,  785,  187,  187,  187,  783,
      787,  187,  187,  187,  187,  187,  187,  790,  187,  187,
      187,  187,  789,  792,  788,  187,  187,  187,  985,  810,
      187,  187,  811,  187,  187,  791,  985,  985,  187,  187,

      187,  187,  187,  812,  790,  187,  187,  187,  187,  794,
      792,  795,  187,  187,  187,  187,  793,  985,  187,  811,
      187,  187,  791,  797,  187,  798,  187,  187,  187,  187,
      812,  985,  187,  813,  187,  187,  794,  187,  795,  796,
      187,  187,  187,  793,  187,  187,  814,  187,  187,  187,
      797,  187,  798,  799,  187,  800,  187,  187,  187,  187,
      813,  815,  187,  816,  187,  817,  796,  187,  187,  818,
      819,  187,  187,  814,  187,  187,  187,  820,  187,  187,
      799,  821,  800,  822,  187,  187,  187,  823,  815,  824,
      816,  825,  817,  826,  187,  827,  818,  819,  828,  829,

      830,  831,  187,  832,  820,  187,  187,  833,  821,  834,
      822,  835,  836,  837,  823,  838,  824,  839,  825,  840,
      826,  841,  827,  842,  843,  828,  829,  830,  831,  844,
      832,  845,  846,  847,  833,  848,  834,  849,  835,  836,
      837,  850,  838,  187,  839,  187,  840,  985,  841,  187,
      842,  843,  985,  187,  985,  852,  844,  853,  845,  846,
      847,  985,  848,  187,  849,  187,  854,  187,  850,  187,
      187,  187,  187,  187,  851,  187,  187,  187,  985,  187,
      187,  856,  852,  857,  853,  187,  985,  187,  855,  985,
      187,  187,  187,  854,  187,  985,  187,  187,  187,  187,

      187,  851,  187,  187,  187,  187,  187,  858,  856,  187,
      857,  860,  187,  187,  187,  855,  859,  187,  187,  187,
      985,  863,  187,  985,  187,  864,  187,  901,  862,  187,
      187,  187,  187,  187,  858,  985,  187,  861,  860,  187,
      187,  187,  187,  859,  187,  187,  187,  187,  863,  187,
      187,  902,  864,  903,  901,  862,  187,  904,  187,  187,
      187,  869,  865,  187,  861,  866,  187,  187,  187,  187,
      187,  187,  187,  867,  187,  868,  985,  187,  902,  187,
      903,  187,  985,  187,  904,  187,  187,  871,  869,  865,
      187,  187,  866,  187,  187,  985,  187,  187,  187,  187,

      867,  187,  868,  870,  187,  187,  187,  187,  187,  187,
      187,  985,  187,  187,  871,  875,  187,  872,  187,  187,
      187,  985,  873,  187,  187,  187,  187,  187,  187,  187,
      870,  187,  187,  187,  187,  187,  187,  905,  187,  876,
      187,  187,  875,  187,  872,  187,  187,  187,  874,  873,
      187,  187,  187,  187,  187,  985,  187,  877,  187,  187,
      187,  187,  187,  878,  905,  187,  876,  187,  187,  187,
      187,  187,  187,  187,  187,  874,  880,  187,  879,  187,
      187,  187,  187,  187,  877,  187,  187,  906,  187,  187,
      878,  187,  187,  187,  187,  882,  187,  187,  187,  985,

      187,  187,  187,  880,  187,  879,  187,  881,  187,  187,
      187,  985,  187,  187,  906,  187,  187,  883,  187,  187,
      187,  885,  882,  187,  187,  187,  884,  886,  187,  187,
      907,  187,  887,  187,  881,  187,  187,  888,  187,  187,
      187,  187,  187,  187,  883,  187,  187,  985,  885,  892,
      187,  187,  187,  884,  886,  187,  187,  907,  187,  887,
      187,  889,  187,  187,  888,  187,  187,  891,  187,  187,
      187,  187,  187,  187,  890,  187,  892,  187,  985,  985,
      187,  985,  187,  187,  894,  187,  896,  985,  889,  187,
      893,  187,  898,  187,  891,  187,  187,  187,  187,  895,

      187,  890,  187,  187,  187,  187,  187,  187,  897,  187,
      908,  894,  187,  896,  187,  985,  187,  893,  187,  898,
      187,  909,  187,  187,  187,  187,  895,  187,  899,  187,
      187,  910,  187,  187,  187,  897,  187,  908,  900,  187,
      187,  187,  187,  911,  912,  913,  914,  187,  909,  915,
      187,  916,  187,  917,  918,  899,  187,  919,  910,  920,
      921,  187,  187,  922,  923,  900,  924,  187,  925,  187,
      911,  912,  913,  914,  926,  985,  915,  927,  916,  187,
      917,  918,  929,  187,  919,  953,  920,  921,  985,  187,
      922,  923,  928,  924,  187,  925,  187,  187,  187,  187,

      187,  926,  187,  187,  927,  931,  187,  985,  930,  929,
      187,  932,  953,  187,  187,  933,  187,  187,  187,  928,
      187,  187,  985,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  931,  187,  934,  930,  187,  187,  932,  187,
      187,  187,  933,  187,  187,  187,  985,  187,  187,  187,
      935,  187,  187,  187,  187,  187,  187,  985,  187,  187,
      187,  934,  936,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  935,  187,  187,
      187,  187,  937,  187,  187,  187,  187,  187,  938,  936,
      187,  187,  187,  940,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  939,  187,  187,  187,  985,  954,  937,
      187,  187,  187,  187,  187,  938,  187,  187,  187,  187,
      940,  985,  187,  941,  942,  187,  187,  944,  187,  187,
      939,  187,  187,  187,  943,  954,  187,  187,  187,  187,
      187,  985,  187,  187,  187,  955,  187,  187,  187,  187,
      941,  942,  187,  187,  944,  187,  187,  946,  945,  187,
      187,  943,  187,  187,  187,  187,  187,  985,  187,  187,
      947,  187,  955,  187,  187,  187,  187,  949,  950,  187,
      187,  187,  187,  187,  946,  945,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  947,  187,  948,

      187,  187,  187,  187,  949,  950,  187,  187,  187,  187,
      187,  951,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  956,  187,  187,  187,  948,  957,  187,  187,
      958,  952,  959,  187,  960,  961,  187,  187,  951,  187,
      187,  187,  985,  187,  187,  187,  187,  187,  187,  956,
      187,  187,  187,  971,  957,  985,  187,  958,  952,  959,
      187,  960,  961,  187,  187,  962,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  985,  187,  985,  187,
      971,  187,  187,  187,  187,  187,  187,  187,  964,  187,
      187,  187,  962,  187,  187,  187,  187,  187,  187,  187,

      963,  187,  187,  966,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  964,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  985,  963,  187,  187,
      966,  187,  187,  187,  187,  965,  967,  187,  187,  187,
      187,  187,  187,  972,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  970,  187,  973,  974,  968,  187,  975,
      969,  985,  965,  967,  187,  187,  187,  187,  187,  187,
      972,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      970,  187,  973,  974,  968,  187,  975,  969,  187,  187,
      976,  187,  977,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  978,  187,  187,  979,
      981,  982,  983,  187,  187,  187,  187,  976,  980,  977,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  978,  187,  187,  979,  981,  982,  983,
      187,  187,  984,  187,  985,  980,  187,  985,  187,  187,
      187,  187,  985,  187,  187,  187,  187,  187,  187,  187,
      985,  985,  985,  187,  985,  985,  985,  985,  985,  984,
      187,  985,  985,  187,  985,  187,  187,  187,  187,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      187,   84,  985,  985,   84,   85,  985,   85,   85,  173,

      985,  173,  173,  176,  985,  176,  176,  177,  985,  177,
      177,  187,  985,  187,  187,    5,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985
    } ;

static const flex_int16_t yy_chk[3984] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   13,  988,
       13,   15,   15,   16,   16,   19,   20,   19,   22,  370,
       21,   25,   22,   19,  266,   19,   22,   25,   28,   19,
       19,   29,   22,   42,   21,   22,   20,   21,   21,   23,
      182,   23,   19,   20,   19,   22,   23,   21,   25,   22,
       19,   23,   19,   22,   25,   28,   19,   19,   29,   22,
       42,   21,   22,   20,   21,   21,   23,   26,   23,  181,

       24,   45,   45,   23,  177,   26,   24,   27,   23,   24,
      176,   26,   24,   27,   27,   27,   90,   36,   30,   31,
       27,   36,   30,   31,   26,   46,   46,   24,   30,   31,
       53,   53,   26,   24,   27,   89,   24,   32,   26,   24,
       27,   27,   27,   34,   36,   30,   31,   27,   36,   30,
       31,   32,   85,   33,   34,   30,   31,   32,   32,   96,
       34,   33,   54,   54,   32,   33,   40,   39,   33,   39,
       34,   51,   39,   51,   40,   41,   41,   37,   32,   37,
       33,   34,   37,   84,   32,   32,   96,   34,   33,   37,
       37,   81,   33,   40,   39,   33,   39,   82,   82,   39,

       63,   40,   41,   41,   37,   56,   37,   63,   55,   37,
       67,   66,   97,   63,   88,   88,   37,   37,   38,   38,
       63,   66,   38,  100,  101,   38,   38,   63,  107,  111,
       67,   66,   38,  112,   63,   38,   52,   67,   66,   97,
       63,  174,  174,  180,  180,   38,   38,   63,   66,   38,
      100,  101,   38,   38,   50,  107,  111,   67,   66,   38,
      112,   48,   38,   57,   57,   73,   57,   57,   57,   57,
       57,   57,   64,   57,   57,   57,   64,   80,   68,   57,
       64,   57,   68,   98,  113,   73,   64,   57,   68,   57,
      106,   98,   73,   57,   57,  114,   64,   80,   68,   64,

      106,  115,   47,   64,   80,   68,   57,   64,   57,   68,
       98,  113,   73,   64,   57,   68,   57,  106,   98,  104,
       57,   57,  114,   64,   80,   68,  104,  106,  115,   57,
       58,   58,   43,   58,   58,   58,   58,   58,   58,   69,
       58,   58,   58,   69,   72,   18,  104,   58,   72,   69,
      117,   99,   74,  104,   99,   72,   74,  110,  110,   69,
       79,   72,   17,   79,   79,   14,   69,   58,   72,   12,
       69,   72,   74,    9,   58,   72,   69,  117,   99,   74,
       79,   99,   72,   74,  110,  110,   69,   79,   72,   77,
       79,   79,  102,  118,   58,   72,   58,   59,   77,   74,

       77,   59,  105,   77,  105,  108,  102,   79,  119,   77,
      108,   59,  120,  121,   59,   59,   77,  122,  125,  102,
      118,   59,    5,    0,   59,   77,    0,   77,   59,  105,
       77,  105,  108,  102,    0,  119,   77,  108,   59,  120,
      121,   59,   59,   78,  122,  125,    0,   78,   59,   60,
      109,   78,  116,   60,  116,  109,  123,   60,  116,  123,
      127,  109,  128,   60,  130,  116,   60,   78,  109,  116,
       78,  131,  132,   60,   78,    0,   60,  109,   78,  116,
       60,  116,  109,  123,   60,  116,  123,  127,  109,  128,
       60,  130,  116,   60,   78,  109,  116,  124,  131,  132,

       60,   61,  124,  129,  133,  134,  136,  134,   61,  135,
       61,  135,  137,  129,  138,   61,  139,  140,  129,  129,
       61,   61,    0,  141,  124,  142,    0,  143,   61,  124,
      129,  133,  134,  136,  134,   61,  135,   61,  135,  137,
      129,  138,   61,  139,  140,  129,  129,   61,   61,   62,
      141,  145,  142,   62,  143,  146,  147,  148,  150,   62,
      149,  151,   62,  150,  149,   62,  152,  154,  155,   62,
        0,    0,    0,  156,  157,  158,   62,    0,  145,    0,
       62,    0,  146,  147,  148,  150,   62,  149,  151,   62,
      150,  149,   62,  152,  154,  155,   62,   65,   65,  153,

      156,  157,  158,  159,   65,   65,   65,  160,  153,  161,
      162,   65,  163,  165,  159,  166,  153,   65,    0,  167,
      164,    0,    0,  164,   65,   65,  153,  169,  170,  171,
      159,   65,   65,   65,  160,  153,  161,  162,   65,  163,
      165,  159,  166,  153,   65,   70,  167,  164,  168,   70,
      164,    0,  268,  187,  169,  170,  171,  188,  188,   70,
        0,  168,  189,  270,  271,   70,   70,    0,    0,   70,
        0,    0,   70,  187,  273,  168,   70,  189,  188,  268,
      187,    0,  189,    0,  188,  188,   70,  190,  168,  189,
      270,  271,   70,   70,  190,  195,   70,   71,   71,    0,

      187,  273,  190,  275,  189,  188,   71,  190,  191,  189,
       71,  191,  191,   71,  190,  195,  198,   71,    0,    0,
        0,  190,  195,    0,   71,   71,  198,  276,  192,  190,
      275,    0,  191,   71,  190,  191,  198,   71,  191,  191,
       71,  192,  195,  198,   71,   75,  203,   75,  192,  193,
       75,  193,  277,  198,  276,  192,  279,   75,   75,  191,
        0,    0,  203,  198,  280,  281,  203,   75,  192,    0,
        0,  193,   75,  203,   75,  192,  193,   75,  193,  277,
      282,    0,    0,  279,   75,   75,  194,  194,  199,  203,
      196,  280,  281,  203,   75,   76,   76,  196,  193,   76,

        0,  194,   76,   76,  196,  199,  194,  282,  199,   76,
      196,    0,   76,  194,  194,  199,    0,  196,  197,   76,
      284,    0,   76,   76,  196,  197,   76,  197,  194,   76,
       76,  196,  199,  194,  286,  199,   76,  196,  197,   76,
      200,    0,  287,  202,    0,  197,   76,  284,  204,  207,
        0,  207,  197,  289,  197,  200,  202,  202,  204,  290,
      200,  286,    0,  202,    0,  197,    0,  200,  204,  287,
      202,  207,    0,  206,  206,  204,  207,  205,  207,    0,
      289,  291,  200,  202,  202,  204,  290,  200,  201,  209,
      202,  205,  201,  201,  206,  204,  209,  205,  207,  201,

      206,  206,  218,  292,  205,    0,  201,    0,  291,  209,
        0,    0,  201,    0,  210,  201,  209,  224,  205,  201,
      201,  206,  218,  209,  205,  212,  201,  210,  211,  218,
      292,  217,  212,  201,  210,    0,  209,  224,  211,  201,
      208,  210,  208,    0,  224,  212,  208,  217,  211,  218,
      213,  217,  212,  208,  210,  211,  214,  208,  217,  212,
      213,  210,  208,    0,  224,  211,  214,  208,  215,  208,
      213,    0,  212,  208,  217,  211,  214,  213,  217,    0,
      208,  220,  215,  214,  208,  215,  293,  213,  215,  208,
      216,  222,  220,  214,  219,  215,  294,  213,  219,  216,

      222,  220,  223,  214,  216,  296,  223,    0,  220,  215,
      216,  222,  215,  293,  219,  215,    0,  216,  222,  220,
        0,  219,  223,  294,  297,  219,  216,  222,  220,  223,
        0,  216,  296,  223,  225,  225,    0,  216,  222,  226,
      228,  219,  221,  221,  227,  226,  227,  226,  227,  223,
      298,  297,  221,  228,  225,    0,  229,  221,  221,  226,
      228,  225,  225,  221,    0,  229,  226,  228,  227,  221,
      221,  227,  226,  227,  226,  227,  229,  298,  231,  221,
      228,  225,  230,  229,  221,  221,  226,  228,  236,    0,
      221,  230,  229,  231,  233,  227,  232,    0,  231,    0,

      234,  233,  230,  229,  234,  231,  235,  235,  236,  230,
        0,  232,    0,  299,  233,  236,  232,    0,  230,  252,
      231,  233,    0,  232,  234,  231,  235,  234,  233,  230,
        0,  234,  238,  235,  235,  236,  237,  237,  232,  252,
      299,  233,  239,  232,  240,  241,  252,  238,  240,  241,
        0,  234,  238,  235,  300,  239,    0,  237,  243,  238,
      243,    0,  239,  237,  237,  241,  252,    0,  240,  239,
        0,  240,  241,    0,  238,  240,  241,  242,  243,  238,
      244,  300,  239,  244,  237,  243,  242,  243,  246,  239,
      301,  242,  241,    0,  245,  240,  245,  242,  246,  247,

      244,    0,    0,  245,  242,  243,  249,  244,  246,  249,
      244,  245,  247,  242,    0,  246,  245,  301,  242,  247,
      278,  245,  278,  245,  242,  246,  247,  244,  248,  249,
      245,  254,  248,  249,  250,  246,  249,    0,  245,  247,
      253,  250,  254,  245,  302,  251,  247,  278,  253,  278,
      255,  254,  248,  251,  250,  248,  249,    0,  254,  248,
      253,  250,    0,  304,  251,  251,  255,  253,  250,  254,
      255,  302,  251,  257,  257,  253,  259,  255,  254,  248,
      251,  250,  256,  259,  258,  260,  256,  253,  258,  256,
      304,  251,  251,  255,  257,    0,  259,  255,  260,  261,

      257,  257,  256,  259,  258,  260,  305,  262,    0,  256,
      259,  258,  260,  256,  263,  258,  256,  306,  263,  261,
      288,  257,  262,  259,  307,  260,  261,  262,  308,  256,
      309,  258,  260,  305,  262,  288,  310,  311,  263,  312,
      313,  263,  314,  315,  306,  263,  261,  288,  316,  262,
      317,  307,  319,  320,  262,  308,  322,  309,  318,  323,
      324,  325,  288,  310,  311,  263,  312,  313,  318,  314,
      315,  326,  327,  328,  329,  316,  330,  317,  332,  319,
      320,  333,  334,  322,  335,  318,  323,  324,  325,  336,
      337,  338,  339,  340,  341,  318,  342,  343,  326,  327,

      328,  329,  344,  330,  345,  332,  346,  348,  333,  334,
      349,  335,  350,  351,  353,  354,  336,  337,  338,  339,
      340,  341,  355,  342,  343,  356,  358,  360,  359,  344,
      359,  345,  361,  346,  348,  362,  363,  349,  364,  350,
      351,  353,  354,  365,  366,  367,  368,  371,  366,  355,
      473,    0,  356,  358,  360,  359,  372,  359,  373,  361,
      374,  375,  362,  363,  376,  364,  474,  371,  375,  378,
      365,  366,  367,  368,  371,  366,  372,  473,  373,    0,
      374,  375,  377,  372,  376,  373,  377,  374,  375,  378,
      379,  376,    0,  474,  371,  375,  378,    0,  383,    0,

      379,  380,  382,  372,  382,  373,  377,  374,  375,  377,
      379,  376,  386,  377,  383,  381,  378,  379,  383,  380,
      387,  380,  381,  384,  382,  383,  386,  379,  380,  382,
      385,  382,  386,  377,  385,  381,  388,  379,  384,  386,
      387,  383,  381,  384,  389,  383,  380,  387,  380,  381,
      384,  382,  475,  386,  385,  476,  388,  385,  394,  386,
      392,  385,  381,  388,  389,  384,  390,  387,  391,    0,
      384,  389,  391,  390,  393,  392,  393,    0,  394,  475,
      392,  385,  476,  388,  477,  394,  390,  392,  398,  395,
        0,  389,  391,  390,  396,  391,  393,  396,    0,  391,

      390,  393,  392,  393,  395,  394,  399,  392,  398,  395,
      401,  477,    0,  390,  397,  398,  395,  396,  400,  391,
        0,  396,  400,  393,  396,  397,  399,  406,  478,    0,
      401,  395,    0,  399,  397,  398,  395,  401,  402,  404,
      402,  397,  400,  405,  396,  400,  404,  406,  403,  400,
        0,  407,  397,  399,  406,  478,  405,  401,    0,  404,
      402,  397,  403,  405,  408,  402,  404,  402,  403,  400,
      405,  407,  408,  404,  406,  403,  411,  410,  407,    0,
      410,  409,  412,  405,  408,  412,  404,  402,  409,  403,
      405,  408,  411,  413,    0,  403,  411,  413,  407,  408,

      410,  409,  412,  411,  410,  480,  414,  410,  409,  412,
      415,  408,  412,  413,  482,  409,  417,    0,  416,  411,
      413,  414,  417,  411,  413,  415,  414,  410,  409,  412,
      415,  416,  480,  414,  418,  419,  417,  415,  416,  420,
      413,  482,    0,  417,  418,  416,    0,  421,  414,  417,
      422,    0,  415,  414,  418,  419,  423,  415,  416,  420,
      422,  418,  419,  417,  424,  416,  420,  421,  425,  427,
      422,  418,  423,  424,  421,    0,  423,  422,  426,    0,
        0,  418,  419,  423,  424,    0,  420,  422,  425,  427,
        0,  424,  483,  426,  421,  425,  427,  422,  426,  423,

      424,    0,  428,  423,    0,  426,  428,  429,  429,    0,
        0,  424,  431,  430,  431,  425,  427,  430,  484,  483,
      426,    0,  428,  433,    0,  426,  432,  485,  429,  428,
        0,  434,  431,  428,  429,  429,  435,  430,  433,  431,
      430,  431,  432,  433,  430,  484,  432,  434,  437,  428,
      433,  434,  438,  432,  485,  429,  435,  439,  434,  431,
      436,  437,  440,  435,  430,  433,  438,  436,  437,  432,
      433,    0,  438,  432,  434,  437,  487,  439,  434,  438,
      436,  441,  440,  435,  439,  441,  443,  436,  437,  440,
      444,  442,  445,  438,  436,  437,  445,  443,  444,  438,

      442,    0,    0,  487,  439,  441,  443,  436,  441,  440,
      444,  442,  441,  443,  446,  448,  445,  444,  442,  445,
      449,    0,    0,  445,  443,  444,  450,  442,  447,  446,
      449,  447,  441,  443,  446,  448,    0,  444,  442,  451,
      449,  446,  448,  445,    0,  452,  450,  449,  447,  453,
      456,  488,  489,  450,    0,  447,  446,  449,  447,  451,
      457,  446,  448,  452,  453,  452,  451,  449,  454,  453,
      456,  457,  452,  450,  455,  447,  453,  456,  488,  489,
      457,  455,    0,  454,  458,  460,  451,  457,  454,  461,
      452,  453,  452,  459,  455,  454,  453,  456,  457,  458,

        0,  455,  459,    0,  458,  460,    0,  457,  455,  461,
      454,  458,  460,  459,  462,  454,  461,  464,  463,  490,
      459,  455,  492,  462,  493,    0,  458,  464,  463,  459,
      463,  458,  460,  466,  462,  465,  461,  464,  463,  465,
      459,  462,  466,    0,  464,  463,  490,  467,  494,  492,
      462,  493,  468,  466,  464,  463,  469,  463,    0,  465,
      466,  462,  465,  467,  464,  463,  465,  467,  470,  466,
      468,  469,  468,    0,  467,  494,  469,  470,  497,  468,
      466,  470,  471,  469,  498,  471,  465,  472,  470,  499,
      467,  500,  501,  502,  467,  470,  506,  468,  469,  468,

      472,  507,  471,  469,  470,  497,  509,  472,  470,  471,
      511,  498,  471,  513,  472,  470,  499,  514,  500,  501,
      502,  515,  516,  506,  517,  518,  520,  472,  507,  471,
      524,  526,  527,  509,  472,  529,  518,  511,  528,  528,
      513,  530,  532,  533,  514,  534,  535,  536,  515,  516,
      538,  517,  518,  520,  539,  540,  541,  524,  526,  527,
      542,  543,  529,  518,  544,  528,  528,  545,  530,  532,
      533,  547,  534,  535,  536,  548,  549,  538,  550,  553,
      554,  539,  540,  541,  555,  556,  557,  542,  543,  558,
      559,  544,  560,  562,  545,  564,    0,    0,  547,    0,

        0,  567,  548,  549,  569,  550,  553,  554,    0,  570,
      568,  555,  556,  557,  567,  572,  558,  559,    0,  560,
      562,  567,  564,  568,  569,  571,  573,  575,  567,  570,
      568,  569,    0,    0,  663,  572,  570,  568,  571,  574,
        0,  567,  572,  574,  665,  571,  573,  575,  567,  578,
      568,  569,  571,  573,  575,  577,  570,  568,    0,  576,
      580,  663,  572,  574,  578,  571,  574,  576,  577,  578,
      574,  665,  571,  573,  575,  577,  578,  581,  579,  576,
      580,    0,  577,  582,  581,  584,  576,  580,    0,  584,
      574,  578,  579,  583,  576,  577,  578,  581,  579,  582,

        0,  585,  577,  582,  581,  579,  576,  580,  583,  584,
      582,  581,  584,  583,  587,  586,  584,  586,  587,  579,
      583,  585,    0,  589,  581,  579,  582,  590,  585,  666,
      582,  588,    0,    0,  587,  583,  584,  586,  588,    0,
      583,  587,  586,  589,  586,  587,  591,  590,  585,  592,
      589,  588,  593,    0,  590,    0,  666,  591,  588,  595,
      592,  587,  594,  595,  586,  588,  591,  596,  593,  592,
      589,  596,  593,  591,  590,    0,  592,  594,  588,  593,
      597,  598,  594,  595,  591,  599,  595,  592,    0,  594,
      595,  596,  667,  591,  596,  593,  592,  602,  596,  593,

      597,  598,  600,  601,  594,  599,  600,  597,  598,  594,
      595,  603,  599,    0,  601,  604,  668,  602,  596,  667,
      603,  669,    0,  601,  602,  606,  600,  597,  598,  600,
      601,  603,  599,  600,  607,  604,  605,    0,  603,  670,
      609,  601,  604,  668,  602,  606,  605,  603,  669,  613,
      601,  608,  606,  600,  607,  610,  605,  611,  603,  609,
      609,  607,  604,  605,  608,    0,  670,  609,  610,  613,
      611,  608,  606,  605,    0,  610,  613,  611,  608,  615,
      616,  607,  610,  605,  611,  614,  609,  609,  612,  617,
      612,  608,  614,  619,    0,  610,  613,  611,  608,  615,

      616,  612,  610,  618,  611,  614,  615,  616,  612,  617,
        0,  621,  614,  619,  620,  612,  617,  612,  618,  614,
      619,  620,    0,  618,  672,    0,  615,  616,  612,  622,
      618,  621,  614,  624,  620,  612,  617,  625,  621,  623,
      619,  620,  623,  622,  622,  618,  624,    0,  620,  622,
      618,  672,  626,  624,  626,  627,  622,  625,  621,  623,
      624,  620,    0,    0,  625,  628,  623,  631,    0,  623,
      622,  622,    0,  624,  626,  627,  622,  629,  628,  626,
      624,  626,  627,  630,  625,  628,  623,  631,  634,  632,
      629,  630,  628,  632,  631,  633,  634,  629,    0,  633,

        0,  626,  627,  630,  629,  628,    0,    0,  634,  673,
      630,    0,  628,  632,  631,  634,  632,  629,  630,  633,
      632,  635,  633,  634,  629,  637,  633,  636,    0,  638,
      630,  640,    0,  637,  635,  634,  673,  639,  638,  639,
      632,  635,  636,  641,    0,  637,  633,  636,  635,  638,
        0,  640,  637,  642,  636,  643,  638,  642,  640,  639,
      637,  635,  674,  641,  639,  638,  639,  644,  635,  636,
      641,  645,  637,  642,  636,  643,  638,  644,  640,  646,
      642,  647,  643,  648,  642,  648,  639,  644,    0,  674,
      641,  645,  676,  650,  644,  647,    0,    0,  645,  646,

      642,  647,  643,  677,  644,  648,  646,  649,  647,  650,
      648,  651,  648,  650,  644,  651,  649,    0,  645,  676,
      650,  653,  647,  653,  652,  654,  646,  649,  647,  655,
      677,    0,  648,  678,  649,  651,  650,  656,  651,  652,
      650,  653,  651,  649,  652,  654,  679,  657,  653,  655,
      653,  652,  654,  656,  649,  658,  655,  656,  659,  660,
      678,  680,  651,  681,  656,  682,  652,  657,  653,  683,
      684,  652,  654,  679,  657,  658,  655,  685,  659,  660,
      656,  687,  658,  688,  656,  659,  660,  690,  680,  693,
      681,  694,  682,  695,  657,  696,  683,  684,  701,  703,

      704,  705,  658,  708,  685,  659,  660,  709,  687,  710,
      688,  711,  712,  714,  690,  715,  693,  716,  694,  717,
      695,  718,  696,  719,  720,  701,  703,  704,  705,  721,
      708,  722,  724,  725,  709,  726,  710,  728,  711,  712,
      714,  729,  715,  731,  716,  732,  717,    0,  718,  734,
      719,  720,    0,  733,    0,  735,  721,  736,  722,  724,
      725,    0,  726,  731,  728,  732,  737,  737,  729,  734,
      731,  739,  732,  733,  733,  735,  734,  736,    0,  738,
      733,  739,  735,  740,  736,  741,    0,  737,  738,    0,
      731,  739,  732,  737,  737,    0,  734,  742,  739,  738,

      733,  733,  735,  740,  736,  741,  738,  742,  739,  743,
      740,  744,  741,  745,  737,  738,  743,  742,  739,  747,
        0,  748,  746,    0,  742,  749,  738,  801,  747,  743,
      740,  744,  741,  745,  742,    0,  743,  746,  744,  747,
      745,  748,  746,  743,  742,  749,  747,  750,  748,  746,
      751,  803,  749,  804,  801,  747,  743,  805,  744,  752,
      745,  754,  750,  754,  746,  751,  747,  750,  748,  746,
      751,  753,  749,  752,  750,  753,    0,  751,  803,  752,
      804,  756,    0,  754,  805,  757,  752,  757,  754,  750,
      754,  753,  751,  759,  750,    0,  755,  751,  753,  761,

      752,  756,  753,  755,  758,  757,  752,  760,  756,  762,
      754,    0,  757,  759,  757,  764,  755,  758,  753,  761,
      759,    0,  760,  755,  758,  765,  761,  760,  756,  762,
      755,  758,  757,  763,  760,  764,  762,  806,  767,  765,
      759,  768,  764,  755,  758,  765,  761,  769,  763,  760,
      766,  758,  765,  763,  760,    0,  762,  766,  767,  770,
      763,  768,  764,  771,  806,  767,  765,  769,  768,  772,
      766,  776,  765,  774,  769,  763,  774,  766,  773,  770,
      763,  777,  773,  771,  766,  767,  770,  808,  768,  772,
      771,  776,  775,  774,  769,  778,  772,  766,  776,    0,

      774,  777,  773,  774,  779,  773,  770,  775,  777,  773,
      771,    0,  775,  780,  808,  778,  772,  779,  776,  775,
      774,  781,  778,  782,  779,  783,  780,  782,  777,  773,
      809,  779,  784,  780,  775,  789,  784,  785,  785,  775,
      780,  781,  778,  782,  779,  783,  786,    0,  781,  789,
      782,  779,  783,  780,  782,  789,  784,  809,  785,  784,
      780,  786,  789,  784,  785,  785,  786,  788,  781,  791,
      782,  788,  783,  786,  787,  787,  789,  790,    0,    0,
      793,    0,  789,  784,  791,  785,  794,    0,  786,  791,
      790,  788,  796,  786,  788,  787,  791,  790,  788,  792,

      793,  787,  787,  792,  790,  797,  794,  793,  795,  795,
      812,  791,  796,  794,  798,    0,  791,  790,  788,  796,
      800,  816,  787,  792,  790,  797,  792,  793,  798,  795,
      792,  818,  797,  794,  798,  795,  795,  812,  799,  796,
      800,  798,  799,  819,  822,  825,  826,  800,  816,  829,
      792,  830,  797,  832,  833,  798,  795,  834,  818,  836,
      837,  798,  799,  841,  843,  799,  844,  800,  845,  799,
      819,  822,  825,  826,  850,    0,  829,  851,  830,  852,
      832,  833,  854,  853,  834,  906,  836,  837,    0,  799,
      841,  843,  853,  844,  855,  845,  857,  851,  856,  852,

      859,  850,  854,  853,  851,  856,  852,    0,  855,  854,
      853,  858,  906,  858,  855,  859,  857,  860,  856,  853,
      859,  855,    0,  857,  851,  856,  852,  859,  861,  854,
      853,  863,  856,  858,  862,  855,  862,  860,  858,  864,
      858,  855,  859,  857,  860,  856,    0,  859,  861,  865,
      866,  863,  867,  868,  870,  861,  862,    0,  863,  864,
      858,  862,  868,  862,  860,  871,  864,  869,  872,  865,
      866,  873,  867,  868,  870,  861,  865,  866,  863,  867,
      868,  870,  869,  862,  874,  871,  864,  869,  872,  868,
      875,  873,  871,  876,  869,  872,  865,  866,  873,  867,

      868,  870,  877,  875,  874,  878,  881,    0,  908,  869,
      875,  874,  871,  876,  869,  872,  879,  875,  873,  882,
      876,    0,  877,  879,  880,  878,  881,  883,  880,  877,
      875,  874,  878,  881,  882,  908,  879,  875,  884,  882,
      876,    0,  885,  879,  888,  914,  882,  883,  880,  877,
      879,  880,  878,  881,  883,  880,  887,  886,  884,  886,
      889,  882,  885,  879,  888,  884,  882,    0,  890,  885,
      887,  888,  914,  892,  883,  880,  887,  893,  894,  886,
      889,  893,  894,  887,  886,  884,  886,  889,  890,  885,
      896,  888,  891,  892,  897,  890,  895,  887,  898,  891,

      892,  893,  894,  887,  893,  894,  886,  889,  893,  894,
      896,  895,  891,  899,  897,  890,  895,  896,  898,  891,
      892,  897,  916,  895,  900,  898,  891,  917,  893,  894,
      920,  900,  923,  899,  924,  925,  927,  896,  895,  891,
      899,  897,    0,  895,  900,  898,  928,  929,  930,  916,
      931,  900,  933,  953,  917,    0,  927,  920,  900,  923,
      899,  924,  925,  927,  935,  932,  928,  929,  930,  932,
      931,  900,  933,  928,  929,  930,    0,  931,    0,  933,
      953,  936,  937,  927,  935,  934,  938,  939,  940,  932,
      940,  935,  932,  928,  929,  930,  932,  931,  941,  933,

      934,  936,  937,  943,  944,  934,  938,  939,  936,  937,
      940,  935,  934,  938,  939,  940,  932,  940,  941,  945,
      947,  946,  942,  943,  944,  941,    0,  934,  936,  937,
      943,  944,  934,  938,  939,  942,  946,  940,  948,  945,
      947,  946,  942,  955,  949,  941,  945,  947,  946,  942,
      943,  944,  950,  951,  952,  957,  959,  949,  948,  960,
      950,    0,  942,  946,  949,  948,  945,  947,  946,  942,
      955,  949,  950,  951,  952,  962,  963,  964,  965,  950,
      951,  952,  957,  959,  949,  948,  960,  950,  967,  968,
      962,  949,  964,  966,  970,  962,  963,  964,  965,  950,

      951,  952,  962,  963,  964,  965,  966,  969,  967,  968,
      971,  973,  976,  966,  970,  967,  968,  962,  969,  964,
      966,  970,  962,  963,  964,  965,  977,  969,  978,  979,
      980,  983,  976,  966,  969,  967,  968,  971,  973,  976,
      966,  970,  978,  984,    0,  969,  977,    0,  978,  979,
      980,  983,    0,  977,  969,  978,  979,  980,  983,  976,
        0,    0,    0,  984,    0,    0,    0,    0,    0,  978,
      984,    0,    0,  977,    0,  978,  979,  980,  983,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      984,  986,    0,    0,  986,  987,    0,  987,  987,  989,

        0,  989,  989,  990,    0,  990,  990,  991,    0,  991,
      991,  992,    0,  992,  992,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

#line 1877 "flex_lexer.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1890 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 2176 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 986 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 985 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 129:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 136:
#line 195 "flex_lexer.l"
case 137:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2961 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 986 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 986 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 985);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 225 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

