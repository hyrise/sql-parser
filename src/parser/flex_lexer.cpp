#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 182
#define YY_END_OF_BUFFER 183
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1272] =
    {   0,
        0,    0,  179,  179,    2,    2,  183,  181,    4,    4,
      181,  181,  170,  177,  170,  170,  174,  170,  170,  170,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  170,  179,  180,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  165,    0,    1,    0,
      172,  171,  174,  167,  166,  164,  168,  176,  176,  176,

      176,  176,  176,   12,  176,  176,  176,   19,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,   70,  176,  176,   73,   82,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  100,  176,  176,  105,
      108,  109,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  144,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  169,  179,  178,    2,    2,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  175,    0,  171,    5,  176,    7,
      176,  176,   10,  176,   13,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
       34,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,   48,  176,  176,  176,  176,  176,  176,  176,  176,
      176,   58,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,   77,  176,  176,   85,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  101,
      176,  176,  176,  106,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  130,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  145,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  176,  176,  176,  176,  176,  176,  176,  176,  176,
       20,  176,   22,   23,   24,  176,  176,  176,   29,  176,
      176,   32,   35,  176,  176,  176,  176,  176,   41,  176,
      176,  176,   46,   47,  176,  176,  176,  176,  176,  176,
      176,   56,  176,  176,   60,   61,  176,  176,   65,  176,
       67,   68,  176,  176,  176,  176,  176,  176,   81,  176,
       84,   86,   87,  176,   89,  176,  176,   92,  176,  176,

      176,  176,  176,  103,  176,  176,  176,  176,  112,  176,
      176,  115,  176,  176,  176,  119,  176,  176,  176,  176,
      124,  176,  176,  176,  176,  132,  133,  176,  176,  176,
      176,  176,  140,  141,  142,  176,  147,  176,  176,  176,
      176,  176,  176,  176,  176,  156,  176,  158,  176,  160,
      161,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    6,    8,  176,   11,  176,   15,  176,
      176,  176,  176,  176,  176,  176,  176,  176,   31,  176,
      176,  176,  176,  176,   40,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,   55,   57,  176,  176,   63,
      176,   69,   71,  176,   74,   75,  176,  176,  176,  176,
       88,   90,  176,   93,   94,  176,   97,  176,  176,  176,
      176,  110,  111,  176,  176,  176,  176,  118,  176,  176,
      122,  176,  176,  176,  176,  131,  176,  176,  176,  137,
      176,  176,  176,  176,  149,  176,  176,  176,  153,  176,
      176,  176,  159,  162,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  176,   14,  176,
       17,  176,  176,  176,   25,   27,  176,   30,  176,  176,
      176,  176,   39,  176,   43,  176,   45,   49,   50,  176,
       52,  176,  176,   59,   62,   64,   66,   72,   76,  176,
      176,  176,   83,   91,   95,   98,  176,  102,  176,  107,

      176,  176,  176,  176,  120,  176,  176,  125,  127,  129,
      176,  135,  176,  138,  176,  176,  176,  176,  150,  151,
      152,  154,  176,  176,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    9,   16,   18,   21,  176,   26,   28,

      176,  176,   37,   38,  176,  176,   51,   53,   54,   78,
      176,  176,   96,   99,  176,  176,  176,  116,  117,  176,
      176,  126,  128,  176,  136,  176,  176,  176,  176,  155,
      157,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  176,   33,  176,   42,   44,  176,   80,  104,  176,
      176,  121,  123,  134,  176,  176,  176,  148,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    0,  176,  176,   79,
      176,  114,  139,  143,  176,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,    0,   36,  113,  176,    2,
        2,    2,    2,    2,    0,    0,  146,    2,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,  163,    2,    2,    0,    2,    0,    2,  173,    2,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1279] =
    {   0,
        0,    0,  653,  632,   76,    0,  610, 8316,  151,  153,
      584,    0, 8316, 8316,  149,  148,  160,  159,  583,  582,
      156,  156,  165,  181,  192,  243,  173,  220,  253,  152,
      171,  215,  245,  248,  289,  288,    0,  300,  340,  383,
      298,  322,  206,  173,  510,    0,  541,    0,  183,  247,
      526,  535,    0,    0,  239,  371,  442,  240,  513,  512,
      461,  537,  591,  643,  691,  743,  375,  449,  790,  457,
      523,  524,  525,  841,  888,  939,  539,  593,  988, 1040,
      591,  645,  657,  642,  456,  265, 8316,  525, 8316,  515,
      953,  980, 1106, 8316, 8316, 8316, 8316,    0,  249,  255,

      334,  348,  280,  305,  450,  306,  305,    0,  378,  368,
      531,  380,  443,  701,  468,  356,  371,  381,  438,  446,
      754,  439,  459,  489,  509,  526,  572,  571,  572,  582,
      579,  574,    0,  588,  596,  731,  635,  644,  631,  653,
      701,  753,  645,  650,  684,  681,  699,  699,  725,  754,
        0,  761,  746,  768,  762,  788,  801,  784,  798,  798,
      799,  800,  831,  812,  809,  819,  803,  827,  850,  840,
      852,  845,  843,  867,  862,  856,  856,  885,  920,  867,
      861,  895, 8316,    0, 8316,    0,  293,    0,  520,    0,
      506, 1116, 1126, 1137,    0,    0,    0,    0,  983, 1002,

     1027, 1123, 1174, 1126, 1170, 1220, 1173, 1213, 1226, 1258,
     1262, 1302, 1270, 1314, 1366, 1313, 1362, 1406, 1363, 1415,
     1421, 1470, 1457, 1468, 1411, 1479, 1511, 1511, 1523, 1524,
     1555, 1559, 1568, 1599, 1612, 1617, 1666, 1617, 1652, 1657,
     1686, 1734, 1786, 1684, 1712, 1778, 1787, 1827, 1830, 1851,
     1874, 1843, 1887, 1910, 1739, 1922, 1954, 1752, 1929, 1959,
     1985, 1989, 2003, 2052, 2042, 2043, 2072, 2087, 2106, 2111,
     2132, 2145, 2171, 2183, 2235, 2170, 2185, 2209, 2234, 2263,
     2234, 2287, 2288,    0, 8316,  498, 1163,    0,  899,    0,
      900,  916,    0,  934,    0,  939,  947,  936,  951,  970,

      977, 1176,  976,  974,  989,  990,  987, 1042, 1027, 1045,
     1032, 1041, 1047, 1056, 1163, 1057, 1056, 1042, 1062, 1120,
     1134,    0, 1148, 1185, 1200, 1210, 1221, 1219, 1223, 1241,
     1256, 1267, 1270, 1281, 1309, 1296, 1316, 1319, 1310, 1315,
     1324, 1321, 1360, 1363, 1365, 1417, 1350, 1359,    0, 1359,
     1386, 1414, 1421, 1463, 1421, 1423, 1420, 1458, 1462,    0,
     1517, 1515, 1516, 1518, 1536, 1553, 1552, 1592, 1558, 1565,
     1575, 1596, 1612, 1624, 1608, 1638, 1635, 1660, 1678, 1672,
     1695,    0, 1697, 1710, 1725, 1734, 1732, 1735, 1744, 1753,
     1765, 1779, 1790,    0, 1789, 1804, 1841, 1793, 1812, 1807,

     1839, 1893, 1882, 1888, 1948, 1901, 1894,    0,  465, 2353,
     2285, 2346, 2347, 2348, 2346, 2362, 2390, 2393, 2401, 2410,
     2415, 2445, 2444, 2447, 2496, 2495, 2487, 2509, 2537, 2545,
     2563, 2582, 2550, 2595, 2598, 2615, 2647, 2645, 2671, 2673,
     2697, 2709, 2711, 2737, 2750, 2755, 2763, 2791, 2789, 2798,
     2833, 2817, 2845, 2860, 2885, 2886, 2895, 2921, 2930, 2944,
     2950, 2979, 2982, 3008, 3007, 3020, 3032, 3033, 3046, 3058,
     3077, 3083, 3101, 3094, 3126, 3128, 3180, 3158, 3192, 3204,
     3218, 3226, 3244, 3262, 3269, 3283, 3297, 3308, 3322, 3337,
     3389, 3337, 3356, 3372, 3396, 3410, 3426, 3450, 3468, 3454,

     3492, 3493, 3512, 3515, 3517, 3547, 3561, 3566, 3522, 3576,
     3600, 3614, 3618, 3654, 3658, 3666, 3671, 3698, 3714, 3715,
     3716, 3761, 3759, 3760, 3804, 3803, 3800, 3844, 3852, 3855,
      462, 1899, 1901, 1920, 1925, 1973, 1980, 1997, 1993, 2009,
        0, 2022,    0,    0, 2031, 2020, 2044, 2038,    0, 2041,
     2043, 2043,    0, 2089, 2093, 2089, 2102, 2124, 2112, 2132,
     2132, 2152,    0,    0, 2150, 2158, 2183, 2185, 2219, 2227,
     2225,    0, 2218, 2241,    0,    0, 2263, 2258,    0, 2268,
        0, 2265, 2293, 2286, 2282, 2314, 2348, 2499,    0, 2355,
        0,    0,    0, 2348,    0, 2357, 2416,    0, 2417, 2612,

     2420, 2427, 2455,    0, 2473, 2475, 2464, 2518,    0, 2540,
     2547,    0, 2557, 2565, 2566,    0, 2563, 2582, 2588, 2609,
        0, 2603, 2604, 2623, 2637,    0,    0, 2651, 2659, 2657,
     2663, 2658,    0,    0, 2675, 2685,    0, 2705, 2696, 2709,
     2739, 2730, 2751, 2761, 2763,    0, 2763,    0, 2814,    0,
     2807,  461, 3890, 3893, 3915, 3918, 3937, 3944, 3956, 3972,
     3992, 3994, 4020, 3995, 4007, 4049, 4048, 4061, 4074, 4089,
     4102, 4116, 4139, 4152, 4158, 4182, 4193, 4196, 4212, 4236,
     4254, 4247, 4278, 4282, 4296, 4320, 4329, 4343, 4373, 4376,
     4397, 4398, 4424, 4426, 4452, 4450, 4474, 4486, 4504, 4512,

     4484, 4531, 4539, 4556, 4578, 4583, 4587, 4623, 4668, 4632,
     4665, 4676, 4679, 4709, 4712, 4723, 4742, 4762, 4767, 4770,
     4777, 4813, 4817, 4825, 4840, 4866, 4865, 4894, 4895, 4919,
     4920, 4933, 4948, 4973, 4978, 4987, 5002, 5027, 5028, 5036,
     5072, 5077, 5080, 5109, 5122, 5122, 5134, 5160, 5165, 5173,
     5178, 5192, 5214, 5217, 5222, 5221, 5224, 5259, 5265, 5268,
     5301, 5317, 5314, 5350, 5361, 5370, 5362, 5402, 5410, 5411,
     5424, 5445,  432,    0,    0, 2806,    0, 2850,    0, 2857,
     2846, 2875, 2882, 2901, 2891, 2896, 2905, 2925,    0, 2930,
     2938, 2973, 2981, 2998,    0, 3000, 3033, 3040, 3061, 3072,

     3067, 3091, 3093, 3108, 3124,    0,    0, 3125, 3137, 3131,
     3148,    0,    0, 3137,    0,    0, 3141, 3161, 3226, 3157,
        0,    0, 3167,    0,    0, 3170, 3160, 3186, 3183, 3207,
     3217,    0,    0, 3234, 3235, 3239, 3255,    0, 3274, 3276,
        0, 3290, 3291, 3295, 3283,    0, 3296, 3335, 3364, 3382,
     3387, 3386, 3415, 3418,    0, 3421, 3440, 3443,    0, 3433,
     3456, 3457,    0,    0,  419, 5453, 5456, 5459, 5489, 5506,
     5509, 5511, 5524, 5563, 5550, 5564, 5589, 5598, 5616, 5618,
     5642, 5650, 5664, 5676, 5691, 5702, 5704, 5716, 5730, 5745,
     5738, 5756, 5774, 5792, 5781, 5804, 5828, 5836, 5850, 5864,

     5811, 5871, 5901, 5885, 5909, 5925, 5939, 5955, 5963, 5983,
     5981, 5999, 6012, 6025, 6043, 6056, 6067, 6068, 6097, 6100,
     6103, 6121, 6145, 6149, 6163, 6174, 6188, 6213, 6214, 6212,
     6238, 6252, 6264, 6267, 6282, 6308, 6306, 6320, 6332, 6350,
     6362, 6364, 6377, 6405, 6419, 6447, 6443, 6472, 6486, 6487,
     6500, 6521, 6529, 6557, 6565, 6576,  414, 3454,    0, 3449,
        0, 3469, 3483, 3492, 3504,    0, 3516,    0, 3545, 3557,
     3562, 3557,    0, 3576,    0, 3577,    0,    0,    0, 3589,
        0, 3602, 3605,    0,    0,    0,    0,    0,    0, 3611,
     3626, 3634,    0,    0, 3617,    0, 3628,    0, 3678,    0,

     3664, 3678, 3683, 3664,    0, 3724, 3726, 3715, 3717,    0,
     3728,    0, 3738,    0, 3763, 3774, 3779, 3774,    0,    0,
        0,    0, 3786, 3813,  413, 6577, 6582, 6609, 6618, 6627,
     6638, 6647, 6663, 6672, 6681, 6705, 6721, 6735, 6729, 6759,
     6770, 6783, 6789, 6824, 6825, 6833, 6866, 6656, 6868, 6875,
     6889, 6910, 6913, 6919, 6943, 6954, 6957, 6973, 7001, 7006,
     7020, 7035, 7008, 7027, 7051, 7062, 7081, 7092, 7105, 7125,
     7130, 7144, 7149, 7184, 7185, 7183, 7194, 7227, 7230, 7236,
     7260, 7271, 7279, 7307, 7320, 7343, 7356, 7362, 7386, 7392,
     7400, 7416,  417,    0,    0,    0,    0, 3825,    0,    0,

     3827, 3837,    0,    0, 3843, 3841,    0,    0,    0,    0,
     3867, 3860,    0,    0, 3868, 3887, 3895,    0,    0, 3898,
     3910,    0,    0, 3902,    0, 3908, 3953, 3955, 3973,    0,
        0,  416, 7430, 7444, 7458, 7472, 7483, 7497, 7505, 7519,
     7531, 7533, 7545, 7557, 7559, 7571, 7583, 7585, 7607, 7615,
     7614, 7617, 7650, 7658, 7670, 7675, 7683, 7705, 7719, 7727,
     7745, 7753, 7771, 7779, 7801, 7815, 7829, 7820, 7854, 7855,
      417, 3969,    0, 3986,    0,    0, 3995,    0,    0, 4020,
     4026,    0,    0,    0, 4016, 4035, 4046,    0,  415, 7880,
     7868, 7894, 7906, 7908, 7934, 7942, 7947, 7982, 7984, 7992,

     7998, 8028, 8036, 8041, 8050, 8055,  411,  303, 4055,    0,
     4050,    0,    0,    0, 4060,  383, 8109, 8090, 8091, 8089,
     8125, 8134, 8138, 8163,  377, 4143,    0,    0, 4091,  363,
     4162, 8177, 8178, 8182,  333, 4108,    0,  330, 4111, 8212,
      331, 4100,  328, 4102,  327, 4104,  326, 4108,  309, 4137,
      283, 4139,  273, 4138,  242, 4147,  241, 4193,  239, 4195,
      226, 8316,  223,    0,  196,  191,  181,  176, 8316,    0,
     8316, 8285, 8290,  186, 8295, 8300, 8305, 8310
    } ;

static const flex_int16_t yy_def[1279] =
    {   0,
     1271,    1, 1272, 1272, 1271,    5, 1271, 1271, 1271, 1271,
     1271, 1273, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1271, 1275, 1271, 1276, 1276, 1271,
     1276, 1277, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1278, 1278,   62,   62,   62,   62,   65,   62,   65,   62,
       62,   62,   62,   62,   65,   65,   65,   62,   62,   62,
       65,   62,   62,   62, 1276, 1271, 1271, 1273, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1274, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1271, 1275, 1271, 1276, 1276, 1276, 1277, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,   62,   62,

       62,   65,   65,   65,   65,   65,   65,   62,   62,   65,
       65,   65,   62,   62,   65,   65,   65,   62,   65,   65,
       65,   62,   65,   65,   62,   62,   62,   65,   62,   62,
       65,   65,   65,   65,   62,   62,   65,   65,   62,   62,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   62,   62,   62,   62,   62,   62,
       65,   62,   62,   62,   62,   62,   62,   62,   65,   62,
       62,   62,   62, 1276, 1271, 1271, 1271, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1276, 1276, 1276,
       62,   62,   62,   62,   65,   65,   65,   65,   62,   62,
       62,   62,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   65,   62,   65,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   62,   62,   62,   62,   65,   65,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   65,   65,   62,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,
     1271, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1276,   65,   65,   62,   62,   62,   65,   62,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   62,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       65,   65,   65,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       65,   65,   65,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   65,   65,   62,   62,   62,   65,   62,
       62,   62,   62,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   65, 1271, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1276,   65,   65,   65,   65,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   62,   62,
       62,   62,   62,   62,   65,   62,   62,   62,   62,   65,
       62,   62,   62,   62,   65,   62,   62,   62,   62,   62,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   62,
       65,   65,   65,   65,   65,   65,   65,   62,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   65,   65,   65,   65,   65, 1271, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1276,   62,   62,   65,   65,   65,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   62,
       62,   62,   62,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65, 1271, 1274, 1274, 1274, 1274, 1274, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1276,   65,   65,   65,   65,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1271, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1276,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,

       65,   65,   62,   62,   62,   62, 1271, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1276,   62,   62,   62,   65,
       65,   65,   65,   62, 1271, 1271, 1274, 1274, 1274, 1276,
     1276,   62,   62,   65, 1271, 1271, 1274, 1276, 1276,   65,
     1271, 1271, 1276, 1276, 1271, 1271, 1276, 1276, 1271, 1271,
     1276, 1276, 1271, 1271, 1276, 1276, 1271, 1271, 1276, 1276,
     1271, 1271, 1276, 1276, 1271, 1276, 1271, 1276, 1271, 1276,
        0, 1271, 1271, 1271, 1271, 1271, 1271, 1271
    } ;

static const flex_int16_t yy_nxt[8393] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  187,   86,  106,  109,  138,  101,
       98,  102,  107, 1270,  110,  103,  104,  139, 1269,  182,

     1268,  111,  108,  113,  112, 1267,  128,  114,   99,  105,
      100,  115,  129,  106,  109,  138,  101,  116,  102,  107,
      117,  110,  103,  104,  139,  118,  182,  119,  111,  108,
      113,  112,  120,  128,  114,  180,  181,  121,  115,  129,
     1266,  140,  130, 1265,  116,  141,  190,  117,   86,   86,
      131,  142,  118, 1263,  119, 1261,  132,  191, 1259,  120,
      195,  196,  180,  181,  121,  122,   86,   86,  140,  130,
      146,  143,  141,  123,  288,  144,  124,  131,  142,  125,
      133,  145,  126,  132,  147,  127,  134,  135,  136, 1257,
      148,  149,  122,  137,  187,   86,  289,  146,  143, 1255,

      123,  288,  144,  124, 1226, 1226,  125,  133,  145,  126,
      155,  147,  127,  134,  135,  136,  150,  148,  149,  294,
      137,  156,  158,  289,  151, 1253,  159,  157,  152,  295,
      160,  153,  154,  175,  299,  176,  161,  155,  177, 1251,
     1249,  300, 1247,  150,  178, 1245,  294, 1243,  156,  158,
     1241,  151,  179,  159,  157,  152,  295,  160,  153,  154,
      175,  299,  176,  161,  162,  177,  163,  290,  300,  164,
      292,  178,  165,  293,  166,  291,  167,  168, 1238,  179,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      303,  162, 1235,  163,  290, 1230,  164,  292,  319,  165,

      293,  166,  291,  167,  168,  169,  308,  320,  229,  170,
      199,  301,  171,  172,  230,  199,  309,  303,  302,  173,
      199,  321,  174, 1225, 1216,  319, 1207, 1189, 1171, 1132,
     1093, 1025,  169,  308,  320,  229,  170,  199,  301,  171,
      172,  230,  199,  309,  957,  302,  173,  199,  321,  174,
      193,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  186,  186,  322,  186,  186,  186,  186,  186,  186,
      323,  231,  329,  865,  773,  199,  652,  296,  297,  232,
      186,  186,  186,  199,  310,  233,  200,  199,  201,  311,
      322,  298,  330,  239,  202,  199,  203,  323,  231,  329,

      204,  205,  199,  199,  296,  297,  232,  317,  318,  531,
      199,  310,  233,  200,  199,  201,  311,  409,  298,  330,
      239,  202,  199,  203,  408,  331,  286,  204,  205,  285,
      199,  284,  198,  197,  317,  318,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  188,  185,  332,  240,
      241,  244,  331,  199,  242,  245,  186,  186,  186,  199,
      243,  246,  333,  206,  304,  305,  306,  207,  307,  199,
      199,  199,  199,  208,  199,  332,  240,  241,  244,  199,
      199,  242,  245,  209,  199,  183,  199,  243,  246,  333,
      206,  304,  305,  306,  207,  307,  199,  199,  199,  199,

      208,  199,   97,   96,   87,  334,  199,  335,  336, 1271,
      209,  199,  186,  210,  339,  259,  340,  199,  341,  260,
      211,  199,  337,  261,  199,  338,  276,  212,  277,  262,
      213,  278,  334,  342,  335,  336,  199,  199,   47,  199,
      210,  339,  259,  340,  199,  341,  260,  211,  199,  337,
      261,  199,  338,  276,  212,  277,  262,  213,  278,   47,
      342, 1271, 1271,  199,  199,  214,  199,  279,  283,  215,
      347,  199,  199,  216,  348,  280, 1271,  349,  199,  217,
      350,  199,  218,  199,  356,  357,  281,  282,  199,  199,
     1271,  199,  214,  199,  279,  283,  215,  347,  199,  199,

      216,  348,  280,  199,  349,  199,  217,  350,  199,  218,
      199,  356,  357,  281,  282,  199,  199,  199,  199,  358,
      199,  199,  359,  312,  219,  313,  220,  199,  314, 1271,
      199,  221,  362,  351,  315,  352,  222,  199, 1271, 1271,
      360,  316, 1271,  361,  199, 1271,  358,  363,  199,  359,
      312,  219,  313,  220,  199,  314,  343, 1271,  221,  362,
      351,  315,  352,  222,  199,  223,  344,  360,  316,  199,
      361,  345,  346,  224,  363,  353,  225,  354,  324,  226,
      325,  364,  227,  343,  326,  228,  365,  366,  355,  199,
     1271,  327,  223,  344,  367,  328,  199, 1271,  345,  346,

      224,  368,  353,  225,  354,  324,  226,  325,  364,  227,
      369,  326,  228,  365,  366,  355,  199,  234,  327,  372,
      373,  367,  328,  235,  236,  237,  376,  370,  368,  379,
      238,  371,  377,  374,  383,  199, 1271,  369,  375,  385,
     1271,  386,  387,  378,  234, 1271,  372,  373,  384,  388,
      235,  236,  237,  376,  370,  380,  379,  238,  371,  377,
      374,  383,  199,  247,  381,  375,  385,  199,  386,  387,
      378,  199,  382,  389,  390,  384,  388,  248,  392,  393,
      394,  399,  380,  249,  250,  391,  400,  199, 1271,  395,
      247,  381,  397,  405,  199,  398, 1271, 1271,  199,  382,

      389,  390,  406, 1271,  248,  392,  393,  394,  399,  396,
      249,  250,  391,  400,  199,  251,  395,  407,  401,  397,
      405,  199,  398,  252,  402,  532,  533,  253,  199,  406,
      254,  255, 1271,  199, 1271, 1271,  396, 1271, 1271, 1271,
     1271, 1271,  251, 1271,  407,  401,  403, 1271,  199,  534,
      252,  402,  532,  533,  253,  199,  535,  254,  255,  404,
      199,  256,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,  257,  403,  199,  536,  534,  537,  258,  199,
      538,  539, 1271,  535,  199, 1271,  404, 1271,  256,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  257,

     1271,  199,  536,  540,  537,  258,  199,  538,  539,  199,
      541,  199,  263,  199,  264,  545,  546,  265,  199,  199,
      266, 1271,  267,  547,  268,  269, 1271,  411,  199,  199,
      540,  548,  199,  549,  199, 1271,  199,  541,  199,  263,
      199,  264,  545,  546,  265,  199,  199,  266,  199,  267,
      547,  268,  269,  199,  411,  199,  199,  199,  548,  199,
      549,  199,  270,  199,  550,  199,  271,  551,  412,  272,
      273,  552,  553,  199,  554,  199,  274,  555,  556,  275,
      199,  559,  560,  561,  199,  562,  199, 1271, 1271,  270,
      199,  550, 1271,  271,  551,  412,  272,  273,  552,  553,

      199,  554, 1271,  274,  555,  556,  275, 1271,  559,  560,
      561, 1271,  562,  199,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  193,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  413,  563,  199,  199,
      564,  199, 1271,  199,  414,  417,  199, 1271,  199, 1271,
      565,  199,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287, 1271,  413,  563,  199,  199,  564,  199,  557,
      199,  414,  417,  199,  418,  199,  415,  565,  199,  416,

      542,  422,  543,  199,  558,  199,  199,  199,  199,  199,
      199,  566, 1271,  199,  199,  199,  557,  544,  199,  199,
     1271,  418, 1271,  415,  567, 1271,  416,  542,  422,  543,
      199,  558,  199,  199,  199,  199,  199,  199,  566,  199,
      199,  199,  199,  199,  544,  199,  199,  419,  420,  423,
      568,  567,  199,  199,  569,  199,  199, 1271,  570,  199,
      199,  421,  199,  571, 1271,  199,  199,  572, 1271, 1271,
      199, 1271,  199, 1271,  419,  420,  423,  568,  573,  199,
      199,  569,  199,  199,  426,  570,  199,  199,  421,  199,
      571,  424,  199,  199,  572,  199,  431,  199,  425,  199,

      199,  574,  199,  199,  575,  573,  432,  199, 1271, 1271,
     1271,  426, 1271, 1271,  576, 1271,  199, 1271,  424, 1271,
      199, 1271,  199,  431,  199,  425, 1271,  199,  574,  199,
      199,  575,  577,  432,  199,  427,  428,  429,  578,  430,
      199,  576,  199,  199,  199,  579,  199,  199,  199,  580,
      199,  581,  440,  441,  582,  433,  583,  584,  199,  577,
      434, 1271,  427,  428,  429,  578,  430,  199, 1271,  199,
     1271,  199,  579,  199,  199,  199,  580,  199,  581,  440,
      441,  582,  433,  583,  584,  199,  585,  434,  435,  586,
      436,  587,  590,  437,  591,  199,  199,  199,  199,  438,

      592,  199,  199,  444,  442, 1271,  439,  199,  199, 1271,
     1271,  199,  593,  585, 1271,  435,  586,  436,  587,  590,
      437,  591,  199,  199,  199,  199,  438,  592,  199,  199,
      444,  442,  199,  439,  199,  199,  199,  199,  199,  593,
      445,  199,  443,  588,  594,  446,  595,  454,  199,  598,
      199,  599,  199,  589,  199,  199,  199,  199, 1271,  199,
      199,  199,  600,  199,  199, 1271,  199,  445,  199,  443,
      588,  594,  446,  595,  454,  199,  598,  199,  599,  199,
      589,  199,  199,  199,  199,  596, 1271,  199,  199,  600,
      452, 1271,  199,  199,  447,  597,  448,  199, 1271,  601,

      449,  453,  199,  199,  602,  199,  199,  450,  199,  199,
     1271,  451,  596,  199, 1271,  199,  199,  452,  455,  199,
     1271,  447,  597,  448,  199,  199,  601,  449,  453,  199,
      199,  602,  199,  199,  450,  199,  199,  199,  451,  603,
      199,  199,  199,  199,  457,  455,  199,  456,  604,  199,
      199,  199,  199,  199,  199,  605,  199,  199,  606,  458,
      459, 1271,  607, 1271,  199, 1271,  603, 1271,  199,  199,
      199,  457, 1271,  199,  456,  604,  199,  199,  199,  608,
      199,  199,  605,  199,  199,  606,  458,  459,  199,  607,
      199,  609,  199,  612,  462,  460,  199,  199,  461,  199,

      199,  199,  613,  199,  199, 1271,  608, 1271,  199,  614,
      463, 1271, 1271,  199,  610,  199, 1271,  199,  609,  199,
      612,  462,  460, 1271,  615,  461,  199,  199,  199,  613,
      199,  199,  199,  611,  199,  199,  614,  463,  199,  199,
      199,  610,  464,  199,  199,  616,  617,  199,  199,  618,
      199,  615,  470,  199,  465, 1271, 1271,  199,  199,  199,
      611,  199,  199,  199, 1271,  199,  199,  619,  620,  464,
      199,  199,  616,  617,  199,  199,  618,  199,  199,  470,
      199,  465,  471,  199,  199,  199, 1271,  199,  199,  199,
      199,  466, 1271,  199,  619,  620, 1271, 1271,  199,  199,

      621,  467, 1271,  472,  622,  199,  468,  469,  623,  471,
      199,  199,  199,  473,  199,  199,  199,  199,  466,  199,
      199,  624,  199,  479,  199,  199,  199,  621,  467,  199,
      472,  622,  199,  468,  469,  623,  625, 1271,  199,  199,
      473, 1271, 1271,  199,  199,  199,  199,  480,  624,  199,
      479,  199,  199, 1271,  626, 1271,  199,  199, 1271,  199,
      199, 1271,  627,  625,  199,  490,  474,  628,  475,  199,
      199, 1271,  199,  629,  480,  199,  630,  631,  493,  199,
      199,  626,  494, 1271,  199,  199, 1271,  199,  199,  627,
      632,  199,  490,  474,  628,  475,  199,  199,  199, 1271,

      629, 1271,  199,  630,  631,  493,  633,  199,  476,  494,
      477,  199,  199,  481,  634,  199,  635,  632,  199,  199,
      199,  478,  199,  199,  636,  199,  199,  199,  482,  641,
      637,  199,  199,  633,  642,  476, 1271,  477,  199,  638,
      481,  634,  643,  635, 1271,  199,  199,  199,  478,  199,
      199,  636, 1271,  199,  199,  482,  641,  637,  199,  199,
      199,  642,  199,  485, 1271,  199,  638,  199,  483,  643,
      199,  484,  199,  486, 1271,  199,  199,  639,  199,  640,
     1271,  644, 1271,  199,  199, 1271,  199,  199,  199,  199,
      485,  199,  199, 1271,  199,  483,  199,  199,  484,  199,

      486,  487,  199,  199,  639,  199,  640,  199,  644,  199,
      199,  199,  488,  199,  199,  199, 1271,  645,  199,  199,
      199, 1271,  199,  199, 1271, 1271,  646,  199,  487,  647,
      650, 1271,  199,  651,  199, 1271,  199, 1271,  774,  488,
      775,  199, 1271,  199,  645,  199,  199,  199,  199,  199,
      199,  489,  199,  646,  199,  199,  647,  650,  199,  199,
      651,  491,  199, 1271,  495,  774,  776,  775,  199,  199,
      199,  777,  199, 1271,  199,  199,  492,  199,  489,  199,
      199,  496,  199,  648,  199,  199, 1271,  649,  491,  199,
      199,  495,  199,  776,  497,  199,  199, 1271,  777,  498,

      199,  199, 1271,  492,  199, 1271, 1271,  199,  496, 1271,
      648,  199,  778,  499,  649,  779, 1271,  199,  199,  199,
      199,  497,  500,  780,  199,  199,  498,  199,  781,  199,
      199,  199,  502,  501,  199,  782,  199, 1271,  199,  778,
      499, 1271,  779,  199,  783,  199, 1271,  199,  199,  500,
      780,  199,  199,  784,  785,  781,  199,  199, 1271,  502,
      501,  199,  782,  199,  506,  199, 1271, 1271,  199,  199,
      199,  783,  199,  508,  786,  199,  503,  787,  507,  199,
      784,  785,  788,  789,  790,  504, 1271,  199,  199,  199,
     1271,  506,  199,  505,  509,  199,  199,  199,  199,  199,

      508,  786,  199,  503,  787,  507,  199, 1271,  199,  788,
      789,  790,  504,  199,  199,  199,  199,  199,  199,  199,
      505,  509,  791,  199,  199,  199,  510,  792,  511,  199,
     1271,  793,  199,  199,  512,  199,  199,  199, 1271, 1271,
      199,  199,  199,  794,  199,  199,  795,  199, 1271,  791,
      199,  796,  199,  510,  792,  511,  797,  199,  793,  199,
      199,  512,  798,  199,  199,  199,  513,  199,  199,  199,
      794,  515,  199,  795,  199,  199, 1271,  514,  796,  199,
     1271,  199, 1271,  797,  199,  799, 1271,  800, 1271,  798,
     1271,  199,  199,  513,  199,  801,  199,  199,  515,  199,

      520,  199,  199,  521,  514,  516,  199,  199,  199,  199,
      522,  199,  799,  199,  800,  199,  199,  199,  199,  199,
      517,  199,  801,  199,  199,  802,  803,  520,  199,  199,
      521,  199,  516,  199,  199,  199,  199,  522,  199,  523,
      199,  804,  199,  199,  199,  199,  199,  517,  199,  805,
     1271,  806,  802,  803, 1271,  199,  199,  518,  199,  807,
      528,  199,  199,  808,  199,  199,  523,  524,  804,  199,
      199,  199,  199,  525,  199, 1271,  805,  519,  806,  199,
      199,  199,  199, 1271,  518,  809,  807,  528,  199,  526,
      808,  199,  199,  199,  524,  810,  199,  199,  199,  199,

      525,  199,  527,  811,  519,  812,  199,  199,  199,  199,
      530,  199,  809,  199,  199,  199,  526,  199,  199,  813,
      199,  199,  810,  199,  199,  814,  199,  815,  529,  527,
      811,  199,  812,  199,  199, 1271,  199,  530,  199, 1271,
      199,  199,  199, 1271,  199,  199,  813, 1271,  199, 1271,
      199,  199,  814,  816,  815,  529, 1271, 1271,  199, 1271,
      199,  199,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  653,  199,  654, 1271,  199,  199,  199,  655,
      816,  199,  199,  199,  199, 1271,  199,  817,  820,  821,
      822,  199,  199,  199,  199,  199, 1271,  199, 1271,  653,

      199,  654,  199,  199,  199,  199,  655,  199,  199,  199,
      199,  199,  656,  199,  817,  820,  821,  822,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199, 1271,  199,  199,  199,  199,  657,  199,  656,
      658,  199,  823,  824, 1271,  199,  199,  199, 1271,  827,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  659,
      199,  199,  199,  199,  657,  199,  828,  658,  199,  823,
      824,  199,  199,  199,  199,  660,  827,  661,  199,  199,
      662,  199,  199,  199,  199,  829,  659,  199,  199,  199,
     1271,  199,  199,  828, 1271, 1271, 1271,  830,  199, 1271,

     1271,  831,  660,  832,  661, 1271,  199,  662,  199,  199,
     1271,  199,  829,  199,  199, 1271,  199,  199,  199,  199,
      663,  199,  664,  199,  830,  199,  199,  818,  831,  667,
      832,  199,  199,  199,  666,  199, 1271,  665,  819,  199,
      199,  199,  199,  668,  199,  199, 1271,  663,  199,  664,
      199, 1271,  199,  199,  818,  199,  667,  833,  199,  199,
      199,  666,  199,  199,  665,  819,  199,  199,  199,  199,
      668,  199,  199,  199,  834,  199,  673,  835,  669,  836,
      199,  199,  199,  199,  833,  671,  199,  837, 1271,  199,
      199,  670,  838,  199,  199, 1271,  199,  839,  199,  199,

      199,  834,  199,  673,  835,  669,  836,  199,  199,  199,
      199, 1271,  671,  199,  837,  199,  199,  199,  670,  838,
      199,  840,  672,  199,  839, 1271,  199,  199,  199,  841,
      199,  675,  842,  199, 1271,  674,  199,  843,  199,  844,
      199,  199,  199,  199,  199,  676, 1271,  845,  840,  672,
     1271,  199,  825,  826,  199,  199,  841,  199,  675,  842,
      199,  199,  674,  846,  843,  199,  844,  199,  199,  677,
      199,  678,  676,  199,  845,  199, 1271,  199,  199,  825,
      826,  199, 1271,  199,  847,  848,  679,  849,  199,  850,
      846,  199, 1271,  199,  851,  680,  677,  199,  678,  681,

      199,  199,  199,  199,  199, 1271, 1271,  199,  199,  199,
      199,  847,  848,  679,  849,  852,  850,  199,  199,  199,
      199,  851,  680,  199,  199,  853,  681,  199,  199,  854,
      199,  855,  683,  199,  199,  199,  199,  199,  682,  199,
     1271,  199,  852,  199,  199,  199,  199,  199,  684, 1271,
      199,  856,  853, 1271,  199,  199,  854,  199,  855,  683,
      199,  857,  199,  685,  199,  682,  199,  199,  199, 1271,
      199,  858,  199,  199,  199,  684,  199,  686,  856,  859,
      199,  199,  199,  199,  199,  199,  199,  860,  857,  687,
      685,  199,  861,  199,  199, 1271,  199, 1271,  858,  199,

      199,  199, 1271,  199,  686,  862,  859,  199,  199,  199,
      199, 1271,  199,  199,  860,  688,  687,  199,  199,  861,
      199,  199,  199,  199,  199, 1271,  199,  199,  199,  689,
     1271,  690,  862,  199,  199, 1271,  199,  199,  199, 1271,
      863, 1271,  688,  199,  199, 1271, 1271,  864,  199,  199,
      199,  199,  199,  958,  199, 1271,  689,  692,  690, 1271,
      199,  199,  199, 1271,  199,  199,  199,  863,  199, 1271,
      199,  693,  691,  199,  864,  199,  959,  199,  199,  199,
      958,  199,  694,  960,  692, 1271,  199,  961, 1271,  199,
      199,  199, 1271,  199, 1271,  199,  199,  962,  693,  691,

      199, 1271,  199,  959, 1271,  199,  199,  963,  199,  694,
      960,  199,  199,  199,  961,  199,  199,  199,  199,  695,
      696,  199,  199,  199,  962,  964,  965, 1271,  697, 1271,
      199,  199,  199,  199,  963,  199, 1271,  966,  199,  199,
      199,  967,  199,  199,  698, 1271,  695,  696,  199,  199,
     1271,  968,  964,  965,  199,  697,  199,  199,  199,  199,
      969,  199,  199,  199,  966,  199,  199,  199,  967, 1271,
      199,  698,  699,  700,  970,  199,  199,  199,  968,  199,
      701,  199, 1271,  199,  199, 1271,  199,  969,  199,  199,
      199, 1271,  199,  199, 1271,  971,  199,  199, 1271,  699,

      700,  970,  199,  199,  199,  199,  199,  701,  199,  199,
     1271,  199,  199,  199,  972,  199,  199, 1271,  199, 1271,
      702,  703,  971,  199,  973,  199, 1271, 1271,  199, 1271,
      974, 1271,  199,  199,  199,  199,  199,  199,  199,  199,
      704,  972,  199,  705,  199,  199,  706,  702,  703, 1271,
      199,  973,  199,  199,  199,  199,  199,  974,  707,  708,
      199,  199,  199,  199,  199,  199,  199,  704,  199,  199,
      705,  199,  709,  706,  975,  976,  199,  199,  199,  199,
      199,  199,  710,  199,  199,  707,  708,  977,  199,  199,
      199, 1271,  199,  199,  199,  199,  199, 1271,  978,  709,

      711,  975,  976,  199,  199,  199,  199, 1271,  979,  710,
      199,  199,  712, 1271,  977,  199,  199,  199,  199,  199,
      714,  199,  199,  199,  199,  978, 1271,  711,  199, 1271,
      199,  199,  980,  981,  199,  979,  199,  199,  982,  712,
      199,  199,  713,  199,  199,  199,  199,  714,  983,  199,
      199,  199,  199,  716,  199,  199,  715,  199,  199,  980,
      981,  199,  199,  199,  199,  982,  984,  199,  199,  713,
      985,  986,  199,  199,  199,  983,  987, 1271,  988,  199,
      716,  199,  989,  715,  199,  199,  719,  990,  199,  199,
      993,  199,  994,  984,  199, 1271,  995,  985,  986,  199,

      996,  199,  717,  987,  199,  988,  199, 1271,  997,  989,
      199,  199,  718,  719,  990,  199,  199,  993,  199,  994,
      720,  199,  199,  995,  998, 1271,  199,  996,  199,  717,
      199,  199, 1271,  199,  199,  997,  999,  199,  199,  718,
      199, 1271, 1271,  199,  199,  199,  721,  720,  199,  199,
      199,  998,  199,  199,  199,  199,  199,  199, 1000,  722,
     1001,  199,  199,  999,  199,  199,  991,  199,  723,  992,
      199,  199,  199,  721,  199,  199, 1002,  199, 1003,  199,
      199,  199, 1271,  199,  724, 1000,  722, 1001,  199,  199,
      199,  199,  199,  991, 1004,  723,  992,  199,  199,  199,

     1005,  199,  725, 1002,  199, 1003, 1006,  199,  199,  199,
     1271,  724, 1007, 1008,  199,  199,  199,  199,  199,  199,
     1009, 1004,  726,  199, 1010,  199, 1011, 1005,  199,  725,
      199,  199,  199, 1006,  728,  199,  199,  727,  199, 1007,
     1008,  199,  199,  199,  199,  199, 1271, 1009,  729,  726,
      199, 1010,  199, 1011,  199,  199, 1271,  199,  199,  199,
     1012,  728, 1271,  199,  727,  199, 1271,  199,  199,  199,
      199,  199,  733,  199, 1271,  729,  730,  199, 1271,  199,
     1271,  199,  199,  199, 1271,  199, 1013, 1012, 1271,  199,
      199,  199, 1271,  734,  199,  199,  199,  199, 1271,  733,

      199,  199, 1271,  730,  199,  199,  735,  199, 1271,  199,
      199,  731,  199, 1013, 1271,  199,  199,  199,  199,  199,
      734, 1271, 1014,  199,  736,  199, 1015, 1016,  199,  199,
      732,  199,  199,  735,  199,  199,  199, 1017,  731,  199,
     1018,  199,  199,  737,  199,  199,  199, 1019,  738, 1014,
      199,  736,  199, 1015, 1016,  199,  199,  732,  199,  199,
     1271,  199,  199,  199, 1017, 1020,  199, 1018,  199, 1021,
      737,  199,  199, 1022, 1019,  738, 1271,  199, 1023, 1024,
     1094, 1271,  199,  199, 1095,  199,  199,  741,  199,  199,
      199,  739, 1020,  199,  199,  199, 1021,  740,  199,  199,

     1022,  199, 1271,  199, 1096, 1023, 1024, 1094,  199, 1097,
      199, 1095,  199,  199,  741, 1271,  199,  199,  739,  743,
     1271,  199,  199,  199,  740,  199,  199,  199,  199,  199,
      199, 1096,  742, 1098, 1271,  199, 1097,  199,  199,  199,
      199,  745,  199,  199, 1099,  199,  743,  199,  744, 1100,
      199,  199,  199,  199,  199,  749,  199,  199,  199,  742,
     1098,  199,  199,  199,  199,  199,  199,  199,  745,  199,
      199, 1099,  199,  199,  199,  744, 1100,  199,  199, 1101,
      199, 1102,  749,  199,  199,  199,  746,  199,  199,  199,
      199,  199,  199,  199,  199, 1103,  199,  199, 1104, 1105,

      199, 1106,  199,  748,  199,  747, 1101,  199, 1102,  199,
      199,  199,  199,  746,  199, 1107,  199,  750,  199,  199,
      199,  199, 1103,  199,  199, 1104, 1105, 1271, 1106,  199,
      748, 1271,  747,  199,  199,  199,  199, 1108,  199,  199,
      199,  751, 1107,  199,  750,  199, 1109,  752,  199,  199,
     1110,  199, 1111,  199,  199,  753, 1112, 1113,  199,  199,
      199, 1114,  199,  199, 1108, 1271, 1271,  199,  751, 1271,
     1271, 1271,  199, 1109,  752, 1271,  199, 1110,  199, 1111,
      199,  199,  753, 1112, 1113,  199,  199,  199, 1114,  199,
      199,  199,  756,  755,  199,  754,  199,  199,  199,  199,

     1115,  199,  199,  199, 1271, 1116, 1271,  199, 1117, 1118,
     1119, 1271,  199, 1271,  199, 1271,  199,  199,  199,  756,
      755,  199,  754,  199,  199,  199,  199, 1115,  199,  199,
      199,  199, 1116,  757,  199, 1117, 1118, 1119,  199,  199,
      758,  199,  199,  199,  199,  199,  199,  199, 1120,  759,
     1121,  760,  762,  761,  199, 1122, 1271, 1123,  199,  199,
      757,  199,  199, 1124, 1271,  199, 1271,  758,  199,  199,
      199, 1125,  199,  199,  199, 1120,  759, 1121,  760,  762,
      761,  199, 1122,  763, 1123, 1126,  199,  199,  199,  199,
     1124,  199,  199,  199,  764,  199, 1127,  199, 1125,  199,

      199, 1271,  765, 1128,  199,  199, 1271,  199, 1271, 1271,
      763, 1271, 1126, 1271,  199, 1129, 1271, 1271,  199,  199,
      199,  764,  199, 1127,  199, 1130,  199,  199,  766,  765,
     1128,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  768, 1129,  199,  199,  199, 1131,  767,  199,  199,
     1271, 1172, 1130, 1173, 1271,  766, 1271, 1271, 1271, 1174,
      199, 1271,  199,  199,  199,  199,  199,  199,  768, 1175,
      199,  199,  199, 1131,  767,  199,  199,  199, 1172,  769,
     1173,  771, 1176,  770,  199,  199, 1174,  199,  199,  199,
      199, 1177,  199, 1178,  772,  199, 1175,  199, 1271, 1271,

      199, 1271, 1271, 1271,  199, 1271,  769, 1179,  771, 1176,
      770,  199,  199, 1180,  199,  199,  199,  199, 1177,  199,
     1178,  772,  199,  199,  199,  199,  199,  199,  199,  866,
      199, 1181,  867,  199, 1179,  199, 1271, 1271,  199, 1182,
     1180,  199, 1183, 1184,  199,  199, 1271, 1185,  199, 1271,
      199,  199,  199,  199,  199,  199,  866,  199, 1181,  867,
      199,  868,  199,  199,  869,  199, 1182,  199,  199, 1183,
     1184,  199,  199,  199, 1185,  199,  870,  199,  199,  871,
     1271,  199,  872,  199,  199, 1271,  199, 1186,  868,  199,
      199,  869,  199, 1271,  199, 1271, 1187, 1271, 1271, 1188,

      199, 1271,  199,  870,  199,  199,  871,  873, 1208,  872,
      199,  199,  199,  199, 1186, 1271,  199,  199,  874,  199,
      199,  199,  199, 1187,  199,  199, 1188, 1209,  199,  199,
      199,  199,  199,  199,  873, 1208, 1210,  199,  199,  199,
      199,  199,  875,  199,  199,  874,  199,  199,  199,  199,
      199,  199,  199,  199, 1209,  199,  199,  199,  199, 1211,
      199, 1212, 1213, 1210,  199,  199,  199,  199,  199,  875,
      199,  876, 1214,  199,  199,  199, 1215,  199,  199,  199,
      199, 1227,  877,  199,  199,  199, 1211,  199, 1212, 1213,
     1228,  878, 1271,  199,  199,  199, 1229,  199,  876, 1214,

      199,  199,  199, 1215,  199,  199,  199,  199, 1227,  877,
      199,  199,  199,  879,  199,  199, 1271, 1228,  878,  199,
      199,  199,  199, 1229,  199,  199, 1237,  199,  199, 1271,
     1242,  199,  199, 1244,  199,  199, 1271,  199,  199, 1246,
      879, 1248,  199,  880, 1226, 1226,  199,  199,  199,  199,
     1250,  199,  199, 1237, 1252,  199,  881, 1242, 1271,  199,
     1244,  199,  199, 1231, 1226,  199, 1246, 1254, 1248, 1256,
      880, 1271,  199, 1258,  199,  199,  199, 1250,  199,  199,
      882, 1252, 1260,  881,  199,  199, 1236,  199,  199, 1271,
     1271,  883,  199,  199, 1254, 1271, 1256,  199,  199,  199,

     1258,  199, 1271,  199, 1271, 1239,  199,  882, 1271, 1260,
     1271,  199,  199, 1236,  199,  199,  884,  199,  883,  199,
      199, 1262,  199, 1264,  199,  199,  199,  199,  199,  199,
      199,  199, 1239,  199,  887,  885,  199,  886,  199, 1271,
     1271,  199,  199,  884,  199,  199, 1271,  199, 1262,  199,
     1264, 1271,  199,  199,  199,  199,  199,  199,  199, 1271,
      199,  887,  885,  199,  886,  199, 1271, 1271,  199,  199,
     1271,  199,  199,  199,  199,  888,  199,  890,  889,  199,
     1271,  199, 1271,  199,  199, 1271, 1271,  199, 1271,  199,
     1271, 1271, 1271,  199,  199, 1271,  199, 1271,  199,  199,

      199, 1271,  888,  199,  890,  889, 1271, 1271,  199, 1271,
      199,  891, 1271,  199,  199,  199,  199,  199,  199, 1271,
      199,  199,  199,  199, 1271, 1271,  199,  199, 1271,  199,
     1271,  199, 1271, 1271, 1271, 1271,  199, 1271,  891, 1271,
      199,  199,  199, 1271,  199,  199, 1271, 1271, 1271,  199,
      199, 1271, 1271,  199,  199,  199,  199,  892,  199, 1271,
      199, 1271,  199,  199,  199,  199,  893, 1271,  199,  199,
     1271, 1271, 1271, 1271,  199, 1271,  199, 1271,  199, 1271,
      199, 1271,  199,  199,  892,  894, 1271,  199,  199,  199,
     1271,  199,  199,  893, 1271, 1271,  199, 1271,  896, 1271,

     1271,  199, 1271,  199, 1271,  199,  199, 1271,  199,  199,
      199,  199,  894,  199,  895,  199,  199, 1271,  199,  897,
     1271,  199, 1271, 1271,  898,  896, 1271, 1271,  199, 1271,
      199, 1271,  199,  199,  199,  199,  199,  199,  199, 1271,
      199,  895,  199,  199,  199,  199,  897, 1271,  199, 1271,
      199,  898,  199, 1271,  199,  199,  199,  199, 1271,  199,
      199,  199,  199, 1271,  199, 1271, 1271,  899, 1271,  199,
      199,  199,  199, 1271,  900, 1271,  199,  199,  199,  199,
      199,  199,  199,  199, 1271, 1271,  199,  199,  199,  199,
     1271, 1271, 1271, 1271,  899, 1271,  199,  199,  199,  199,

      199,  900, 1271,  199,  199,  199, 1271,  199,  901,  199,
      199, 1271,  199,  199, 1271,  199,  199,  199, 1271,  903,
      199, 1271,  199,  199,  199,  199, 1271,  199, 1271,  199,
      199,  199,  199, 1271,  199,  901, 1271,  199,  199,  199,
      199,  902,  199,  199,  199, 1271,  903,  199,  199,  199,
      199,  199, 1271, 1271, 1271, 1271,  199,  199,  199,  199,
     1271,  199, 1271, 1271,  199,  199,  199,  199,  902,  199,
     1271,  199,  199, 1271,  199,  199,  199,  199, 1271,  904,
     1271, 1271,  905, 1271,  199,  199,  199, 1271, 1271, 1271,
     1271,  199,  199,  199, 1271, 1271, 1271, 1271,  199,  199,

     1271,  199,  199,  199,  199, 1271,  904, 1271,  199,  905,
     1271,  199, 1271,  199,  199, 1271,  199,  906,  199,  199,
      199, 1271,  199,  199,  199, 1271,  908,  199,  907,  199,
     1271,  199,  199, 1271, 1271,  199, 1271, 1271, 1271, 1271,
     1271,  199, 1271,  199,  906,  199, 1271,  199, 1271,  199,
      199,  199, 1271,  908,  199,  907,  199, 1271,  199,  199,
     1271, 1271,  909,  199, 1271,  199, 1271,  199,  199, 1271,
     1271, 1271,  199, 1271, 1271, 1271, 1271,  199, 1271, 1271,
     1271, 1271, 1271,  199, 1271,  199, 1271, 1271, 1271,  909,
      199, 1271,  199, 1271,  199,  199,  910, 1271,  912,  199,

      199,  199, 1271,  199,  199,  199, 1271,  911,  199,  199,
      199,  199,  199,  199,  199, 1271,  199, 1271, 1271,  199,
     1271,  199, 1271,  910,  199,  912, 1271,  199,  199, 1271,
      199, 1271,  199, 1271,  911,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
     1271,  199,  199,  913,  199, 1271,  199,  199,  199, 1271,
     1271, 1271, 1271,  199, 1271, 1271, 1271, 1271,  199,  199,
     1271,  199,  199, 1271,  199,  914,  199,  199, 1271,  199,
      913,  199,  199,  199,  199,  199, 1271,  199,  915, 1271,
      199, 1271,  199,  199, 1271,  199,  916,  199,  199, 1271,

      199, 1271,  914,  199,  199, 1271,  199, 1271,  199,  199,
      199, 1271,  199,  199,  199,  915,  199,  917,  918,  199,
      199, 1271,  199,  916,  199,  199, 1271,  199, 1271, 1271,
      199, 1271, 1271,  199, 1271,  199, 1271,  199, 1271,  199,
      199, 1271,  919,  199,  917,  918,  199, 1271,  199,  199,
      199,  199,  199,  199, 1271,  921,  920,  199,  199, 1271,
     1271,  199,  199, 1271, 1271, 1271,  199, 1271, 1271,  919,
      199,  199, 1271,  199, 1271,  199,  199,  199,  199,  199,
      199, 1271,  921,  920,  199,  199,  199, 1271,  199,  199,
      922,  923,  199,  199, 1271,  199,  199,  199,  199, 1271,

     1271,  199,  199,  199, 1271, 1271, 1271, 1271, 1271, 1271,
     1271,  199,  199,  199, 1271, 1271, 1271,  922,  923,  199,
      199,  199,  199,  199,  199,  199, 1271, 1271,  199,  199,
      199,  199, 1271,  924,  925, 1271, 1271, 1271,  199,  199,
      199,  199, 1271, 1271, 1271,  199,  199,  199,  199,  199,
      199,  199,  199, 1271,  926,  199,  199,  199,  199,  199,
      924,  925, 1271,  927, 1271,  199,  199,  199,  199,  199,
     1271, 1271,  199,  199,  199, 1271,  199,  199,  199,  199,
     1271,  926,  199,  199,  199, 1271,  199, 1271, 1271, 1271,
      927, 1271,  199,  199,  199,  928,  199, 1271, 1271,  199,

      929,  199, 1271,  199,  199,  199,  199, 1271,  199,  199,
     1271,  199, 1271,  930,  199, 1271, 1271,  199, 1271,  199,
     1271,  199,  928,  199,  199, 1271,  199,  929,  199, 1271,
      199,  199,  199,  199, 1271,  199,  199, 1271,  199, 1271,
      930,  199, 1271, 1271,  199, 1271,  199, 1271,  199, 1271,
      199,  199, 1271,  199,  199,  199, 1271,  199,  199,  199,
      199,  931,  199,  199,  199,  199,  199,  932, 1271, 1271,
     1271, 1271,  199,  199,  199,  199, 1271,  933, 1271, 1271,
      199,  199,  199, 1271,  199,  199, 1271, 1271,  931,  199,
      199,  199, 1271,  199,  932,  934, 1271, 1271,  199,  199,

      199,  199,  199,  199,  933, 1271,  199,  199,  199,  199,
      199, 1271, 1271,  199,  935, 1271,  199, 1271,  199, 1271,
     1271, 1271,  934,  199, 1271,  199,  199, 1271, 1271,  199,
      199, 1271, 1271,  199,  199,  199, 1271,  199, 1271, 1271,
      199,  935,  199,  199,  936,  199,  937, 1271,  938,  199,
      199, 1271,  199,  199,  199,  199, 1271,  199,  199, 1271,
      199, 1271,  199, 1271,  199, 1271, 1271,  199,  199,  199,
      199,  936, 1271,  937, 1271,  938,  199, 1271, 1271,  199,
      199,  199,  199, 1271,  199,  199,  199,  199, 1271,  199,
      199,  199, 1271, 1271,  199,  199,  199,  199,  939,  940,

      199, 1271, 1271,  199,  199,  199,  199,  199,  941,  199,
      199, 1271, 1271,  199,  199, 1271, 1271,  199,  942,  199,
     1271, 1271,  199,  199,  199,  939,  940,  199,  199, 1271,
      199,  199,  199,  199, 1271,  941,  199,  199,  199, 1271,
      199,  199, 1271,  199,  199,  942,  199,  199,  199,  199,
      943,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  944, 1271,  199,  945,  199,  199,  199,  199,  199,
      199,  199, 1271, 1271,  199,  199, 1271,  943, 1271,  199,
      199,  199, 1271,  199,  199,  199,  199,  199,  944,  946,
      199,  945,  199,  199,  199,  199,  199, 1271,  199,  199,

      199,  199, 1271,  947,  199,  199, 1271, 1271,  199, 1271,
      199, 1271, 1271,  199, 1271, 1271,  946, 1271, 1271,  199,
     1271,  199, 1271, 1271, 1271,  199,  199,  199,  199, 1271,
      947,  199,  199, 1271,  199,  199,  199,  199, 1271,  949,
      199,  199, 1271,  948, 1271, 1271,  199,  199, 1271,  199,
      199, 1271,  199, 1271,  199,  950, 1271,  199, 1271,  199,
     1271,  199,  199,  199, 1271, 1271,  949, 1271,  199, 1271,
      948, 1271, 1271,  199,  199, 1271,  199,  199,  951,  199,
     1271,  199,  950,  199,  199,  199,  199,  952,  199,  199,
      199,  199,  199, 1271, 1271,  199,  199,  199,  199,  953,

      199, 1271, 1271, 1271, 1271,  951,  199,  199,  199, 1271,
      199, 1271,  199, 1271,  952,  199,  199,  199,  199,  199,
     1271, 1271,  199,  199,  199,  199,  953,  199,  199, 1271,
     1271, 1271,  199,  199,  199,  199,  199,  955,  199, 1271,
      199,  199, 1271,  199,  954, 1271,  199,  199,  199, 1271,
      199, 1271, 1271, 1271,  199,  199,  199,  199, 1271,  199,
      199, 1271, 1271,  199,  955,  199, 1271,  199,  199, 1271,
      199,  954, 1271,  199,  199,  199, 1271,  199,  199, 1271,
      199,  199, 1271,  199,  199,  956,  199,  199,  199,  199,
      199,  199,  199,  199,  199, 1271,  199,  199,  199,  199,

     1271,  199, 1271, 1271,  199,  199, 1026,  199, 1271, 1271,
     1271, 1271,  956,  199, 1271,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199, 1271,  199,  199,
     1271,  199, 1027, 1026,  199,  199,  199, 1028, 1271,  199,
     1271,  199,  199, 1271, 1271,  199, 1271,  199, 1271,  199,
      199,  199,  199, 1271,  199,  199,  199,  199, 1271, 1027,
      199,  199,  199,  199, 1028, 1029,  199, 1271,  199,  199,
      199, 1271,  199, 1271,  199, 1031,  199,  199, 1271,  199,
      199,  199,  199, 1271,  199, 1030,  199,  199, 1032,  199,
      199, 1271, 1029,  199,  199, 1271,  199,  199, 1271,  199,

      199, 1271, 1031,  199, 1271, 1271, 1271,  199, 1271,  199,
      199, 1271, 1030,  199, 1271, 1032,  199,  199, 1271, 1271,
      199,  199,  199,  199, 1033, 1271,  199,  199, 1271,  199,
     1271,  199, 1271,  199,  199, 1271,  199,  199,  199, 1034,
     1271, 1271,  199,  199, 1036, 1271,  199, 1271,  199,  199,
     1271, 1033, 1035, 1271,  199, 1271,  199, 1271,  199, 1271,
      199,  199,  199, 1271,  199,  199, 1034, 1271,  199,  199,
      199, 1036,  199,  199, 1271,  199,  199, 1271,  199, 1035,
     1037,  199, 1271, 1271, 1271, 1271,  199, 1271,  199,  199,
      199,  199, 1271, 1271,  199,  199,  199, 1271, 1039,  199,

     1038, 1271,  199,  199, 1271,  199,  199, 1037, 1271, 1271,
      199, 1271,  199,  199, 1271,  199, 1271,  199, 1271, 1271,
     1271,  199,  199,  199, 1040, 1039,  199, 1038, 1041,  199,
      199,  199,  199,  199,  199, 1271,  199,  199,  199,  199,
      199, 1271,  199, 1271, 1271, 1271, 1042, 1271,  199,  199,
      199, 1040,  199,  199, 1271, 1041,  199,  199,  199,  199,
      199,  199,  199,  199, 1045,  199,  199,  199,  199,  199,
     1271, 1043, 1271, 1042,  199,  199,  199,  199,  199,  199,
     1044, 1271, 1046,  199,  199,  199,  199,  199, 1271,  199,
      199, 1045,  199,  199, 1271,  199, 1271, 1271, 1043, 1271,

      199,  199,  199,  199,  199,  199, 1271, 1044, 1271, 1046,
      199,  199,  199,  199,  199, 1047,  199,  199,  199,  199,
      199, 1049,  199, 1271, 1271, 1271,  199,  199,  199,  199,
      199,  199, 1271, 1048, 1050, 1271, 1271,  199,  199, 1271,
      199,  199, 1047,  199, 1053,  199,  199,  199, 1049,  199,
      199,  199, 1051,  199,  199,  199,  199,  199,  199, 1271,
     1048, 1050,  199, 1271,  199,  199,  199,  199, 1271, 1271,
     1271, 1053,  199,  199,  199, 1271,  199,  199,  199, 1051,
      199,  199,  199,  199, 1271,  199,  199, 1271, 1271,  199,
      199,  199, 1271,  199,  199, 1271,  199, 1271, 1271,  199,

      199,  199, 1271,  199,  199, 1052,  199,  199, 1271,  199,
      199, 1054, 1271,  199, 1271, 1271,  199,  199,  199, 1271,
      199,  199, 1271,  199, 1271,  199, 1271,  199, 1271, 1055,
      199,  199, 1052,  199,  199, 1271,  199,  199, 1054, 1271,
     1271,  199,  199,  199,  199,  199,  199,  199, 1271,  199,
     1271, 1271,  199, 1271,  199, 1271, 1055,  199,  199, 1271,
      199,  199, 1271,  199, 1271,  199, 1056, 1271,  199,  199,
      199,  199,  199,  199,  199, 1271,  199, 1271, 1271,  199,
     1271,  199, 1271, 1271,  199,  199, 1271,  199,  199, 1271,
      199, 1271,  199, 1056, 1271,  199,  199,  199,  199,  199,

      199,  199, 1271,  199, 1057, 1271,  199, 1271,  199, 1058,
     1271,  199, 1271,  199,  199,  199,  199,  199, 1271,  199,
     1271, 1059,  199,  199, 1060,  199,  199,  199, 1271,  199,
      199, 1057, 1061, 1271,  199,  199, 1058, 1271, 1271,  199,
      199,  199, 1271,  199,  199,  199,  199,  199, 1059, 1271,
     1271, 1060,  199,  199, 1271, 1271,  199,  199,  199, 1061,
      199,  199, 1271, 1271, 1271,  199,  199, 1271, 1062, 1271,
      199,  199,  199, 1271,  199, 1271,  199, 1271,  199,  199,
     1271, 1271, 1271,  199,  199,  199, 1271,  199,  199,  199,
     1271,  199,  199, 1271, 1063, 1062,  199,  199,  199, 1271,

      199,  199,  199,  199,  199,  199, 1271,  199, 1271, 1271,
      199, 1271,  199, 1271,  199,  199,  199, 1271,  199, 1271,
     1271, 1063, 1065,  199, 1271,  199, 1271,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199, 1064,  199,  199,
      199,  199,  199,  199, 1066,  199, 1271, 1271,  199, 1065,
     1067, 1271, 1271, 1271,  199, 1271,  199,  199, 1271,  199,
      199,  199,  199,  199, 1064,  199,  199,  199, 1271,  199,
      199, 1066,  199, 1271, 1271,  199, 1271, 1067,  199, 1271,
      199,  199,  199,  199,  199,  199, 1068, 1271,  199,  199,
      199, 1271, 1271,  199,  199, 1271,  199, 1271,  199, 1271,

     1069, 1271, 1271,  199,  199,  199, 1271,  199,  199,  199,
      199,  199,  199, 1068,  199, 1271,  199,  199,  199, 1271,
      199,  199, 1271,  199,  199,  199, 1271, 1069, 1271, 1070,
      199,  199, 1271, 1271,  199,  199, 1271,  199,  199,  199,
      199,  199,  199,  199,  199,  199, 1271,  199,  199,  199,
      199,  199, 1071, 1072, 1271, 1271, 1070, 1271,  199,  199,
      199,  199, 1271, 1271, 1073,  199,  199,  199,  199,  199,
      199,  199, 1271, 1271,  199,  199,  199,  199,  199, 1071,
     1072, 1271, 1074, 1271,  199,  199,  199,  199,  199, 1075,
      199, 1073, 1271,  199,  199,  199, 1271,  199,  199, 1271,

      199,  199, 1271,  199, 1076,  199, 1271, 1271,  199, 1074,
      199,  199,  199,  199, 1271,  199, 1075,  199,  199, 1271,
      199,  199, 1271, 1271,  199,  199, 1271,  199,  199, 1271,
      199, 1076,  199, 1077,  199,  199,  199,  199,  199,  199,
      199, 1271,  199, 1271,  199,  199,  199, 1078, 1271, 1271,
      199, 1271,  199, 1271,  199,  199,  199, 1271,  199,  199,
     1077,  199, 1079,  199, 1271,  199,  199, 1271,  199,  199,
     1271,  199, 1271,  199, 1078, 1080,  199,  199,  199,  199,
      199,  199, 1271,  199, 1081,  199,  199, 1271,  199, 1079,
     1271, 1271,  199,  199, 1271,  199,  199,  199,  199,  199,

     1271, 1271, 1080,  199, 1082,  199, 1271,  199,  199,  199,
      199, 1081,  199,  199, 1271,  199, 1083,  199, 1271,  199,
     1271, 1271,  199,  199,  199,  199,  199, 1271, 1271, 1271,
     1271, 1082, 1271, 1271, 1271,  199,  199,  199,  199,  199,
      199, 1085, 1271, 1083,  199,  199, 1084, 1271, 1271,  199,
      199, 1271,  199, 1271,  199, 1271, 1271, 1271, 1271,  199,
     1271, 1271, 1271, 1271,  199,  199, 1271,  199, 1085, 1086,
     1271, 1271,  199, 1084, 1271, 1271,  199,  199,  199,  199,
      199,  199,  199,  199, 1271, 1271,  199,  199,  199, 1271,
     1271,  199,  199, 1271, 1271, 1271, 1086, 1271, 1087, 1271,

     1271, 1271,  199,  199, 1271,  199, 1271,  199,  199,  199,
      199, 1088,  199, 1089,  199,  199,  199,  199,  199,  199,
     1271, 1271,  199,  199, 1271, 1087,  199, 1271, 1271,  199,
      199, 1271,  199,  199, 1271,  199,  199, 1271, 1088,  199,
     1089, 1271, 1271,  199,  199,  199,  199, 1271, 1271,  199,
      199, 1091, 1271,  199,  199, 1271,  199,  199, 1271,  199,
      199, 1090,  199,  199,  199, 1271,  199, 1271, 1271,  199,
     1271, 1271, 1271,  199,  199, 1271, 1271, 1271, 1091, 1092,
     1271,  199, 1271,  199, 1271, 1271, 1271, 1271, 1090,  199,
      199,  199,  199,  199, 1271, 1271,  199,  199,  199, 1271,

      199,  199,  199, 1133, 1271,  199, 1092,  199,  199,  199,
      199,  199,  199,  199, 1271, 1271,  199,  199,  199,  199,
     1271,  199, 1271,  199,  199,  199, 1271,  199,  199,  199,
     1133, 1271,  199, 1271,  199,  199,  199,  199,  199,  199,
      199, 1271,  199,  199, 1134,  199, 1271, 1271,  199,  199,
      199,  199, 1271,  199,  199,  199, 1271, 1271,  199, 1271,
      199, 1271, 1135,  199, 1136, 1271, 1271,  199,  199,  199,
     1271, 1134,  199,  199,  199, 1271,  199,  199,  199, 1271,
      199,  199, 1146,  199,  199,  199,  199,  199, 1137, 1135,
      199, 1136,  199,  199,  199,  199,  199, 1271,  199,  199,

      199,  199,  199, 1138,  199,  199, 1271,  199,  199, 1146,
      199,  199,  199,  199, 1139, 1137,  199,  199, 1271,  199,
      199,  199, 1271,  199, 1271,  199,  199, 1271, 1271,  199,
     1138, 1271,  199, 1271,  199,  199, 1271, 1271,  199,  199,
      199, 1139, 1271,  199,  199,  199, 1271, 1271,  199, 1271,
      199, 1271, 1271,  199,  199, 1140,  199, 1271, 1271, 1141,
     1271,  199, 1142, 1271,  199,  199,  199,  199,  199,  199,
      199, 1271,  199, 1271,  199,  199, 1271,  199, 1271, 1271,
      199,  199, 1140,  199, 1271, 1271, 1141, 1271,  199, 1142,
     1271,  199,  199,  199,  199,  199,  199,  199, 1271,  199,

     1143,  199,  199,  199,  199,  199, 1144,  199, 1271, 1271,
      199, 1271, 1271, 1271, 1271,  199,  199, 1271,  199,  199,
     1271,  199,  199,  199,  199, 1271,  199, 1143,  199,  199,
      199,  199,  199, 1144,  199, 1271, 1271,  199, 1271, 1271,
     1271, 1271,  199,  199, 1271,  199, 1271, 1271, 1145,  199,
      199,  199, 1271, 1271, 1271,  199,  199,  199,  199,  199,
      199,  199, 1271, 1271,  199,  199,  199, 1271,  199,  199,
      199, 1271, 1271,  199, 1271, 1145, 1271, 1271,  199, 1271,
     1271, 1271, 1271, 1271,  199,  199,  199,  199, 1271, 1271,
     1271,  199,  199,  199,  199,  199,  199,  199,  199,  199,

      199,  199, 1271, 1271,  199,  199,  199, 1271,  199, 1271,
     1147,  199, 1271, 1271,  199,  199, 1271, 1271, 1271, 1271,
      199,  199,  199, 1271,  199,  199,  199, 1271,  199,  199,
     1148,  199, 1271,  199,  199,  199, 1271, 1147,  199, 1271,
     1271,  199,  199,  199, 1271,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199, 1148,  199,  199,
     1271,  199, 1271, 1271,  199, 1271, 1271, 1271, 1271, 1271,
      199, 1271,  199,  199, 1271,  199,  199,  199,  199,  199,
      199,  199,  199,  199, 1271,  199,  199,  199,  199,  199,
      199,  199,  199, 1271,  199, 1271, 1271,  199, 1271,  199,

     1271, 1271,  199,  199, 1271,  199,  199, 1271,  199, 1271,
      199, 1271, 1149,  199,  199,  199,  199,  199,  199,  199,
     1271,  199, 1271, 1271,  199, 1271,  199, 1150, 1151,  199,
     1271,  199,  199,  199, 1271,  199,  199,  199, 1271, 1149,
      199,  199,  199,  199, 1271,  199,  199,  199, 1152, 1271,
      199, 1271,  199,  199, 1150, 1151,  199, 1271,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199, 1152, 1271,  199, 1271,  199,
      199,  199, 1271,  199, 1153, 1271,  199,  199,  199,  199,
     1271,  199,  199,  199,  199,  199,  199,  199,  199,  199,

     1271, 1271,  199, 1154, 1271, 1271, 1271,  199,  199, 1271,
     1271, 1153, 1271,  199,  199, 1271,  199, 1271,  199, 1271,
     1271,  199,  199,  199,  199,  199,  199,  199, 1271,  199,
     1154, 1271,  199, 1271,  199, 1271, 1271,  199,  199, 1271,
      199,  199, 1271,  199, 1271,  199, 1155, 1271,  199, 1271,
      199,  199,  199,  199,  199, 1156, 1157, 1271, 1271,  199,
      199,  199, 1271, 1271,  199,  199,  199,  199, 1271, 1271,
      199,  199,  199, 1155,  199,  199,  199,  199,  199,  199,
      199, 1271, 1156, 1157, 1271,  199, 1271,  199,  199, 1271,
     1158, 1271, 1271,  199, 1271,  199, 1271,  199,  199, 1271,

     1271,  199,  199,  199, 1271, 1271,  199,  199, 1159, 1160,
      199,  199,  199, 1271,  199,  199,  199, 1158,  199, 1271,
      199,  199,  199, 1161, 1271, 1271, 1271,  199,  199,  199,
      199,  199, 1271, 1271, 1162, 1159, 1160,  199,  199,  199,
     1271,  199,  199,  199, 1271,  199, 1271,  199,  199, 1271,
     1161, 1271, 1271, 1271,  199,  199,  199,  199,  199, 1271,
      199, 1162,  199,  199, 1271, 1163,  199,  199, 1271,  199,
      199,  199,  199, 1271, 1271,  199,  199, 1271, 1271, 1271,
     1271,  199, 1271, 1271, 1271, 1271, 1271,  199, 1271,  199,
      199, 1271, 1163, 1164,  199,  199,  199,  199,  199,  199,

      199, 1165,  199,  199,  199,  199,  199, 1271,  199, 1271,
     1271,  199,  199, 1271,  199, 1271,  199, 1271, 1271,  199,
     1164, 1271,  199, 1271,  199, 1271, 1271,  199, 1165, 1166,
     1271,  199,  199,  199, 1271, 1271, 1271, 1271,  199,  199,
      199,  199,  199,  199, 1167, 1271,  199,  199, 1271, 1271,
     1271,  199,  199,  199, 1271,  199, 1166, 1271, 1271, 1271,
      199, 1271, 1271, 1271, 1271,  199, 1271,  199, 1271,  199,
     1271, 1167, 1271, 1271,  199, 1271,  199, 1271,  199,  199,
      199, 1271,  199,  199, 1168, 1271, 1271,  199,  199,  199,
     1271,  199,  199, 1271, 1271,  199,  199,  199, 1271, 1271,

     1271,  199,  199,  199, 1271,  199, 1271,  199, 1271, 1271,
      199, 1168, 1271, 1271, 1271,  199,  199, 1271,  199,  199,
     1271,  199,  199,  199,  199,  199,  199,  199,  199,  199,
     1271,  199,  199,  199,  199,  199, 1271,  199, 1271, 1169,
      199, 1271, 1271, 1271, 1271,  199,  199, 1271,  199, 1170,
     1271,  199,  199,  199,  199, 1271,  199, 1271,  199,  199,
      199,  199,  199,  199,  199,  199, 1169,  199, 1271, 1271,
      199, 1271,  199, 1271, 1271,  199, 1170,  199,  199,  199,
     1271, 1271, 1271,  199,  199, 1271, 1271, 1271,  199,  199,
      199,  199,  199,  199, 1271, 1271, 1271,  199,  199, 1271,

     1271, 1271,  199,  199,  199,  199,  199,  199, 1271, 1190,
     1271,  199,  199,  199, 1271, 1271,  199,  199,  199,  199,
      199, 1271, 1271,  199, 1271,  199, 1271,  199, 1271,  199,
      199,  199,  199,  199,  199,  199, 1190, 1271, 1271,  199,
      199,  199, 1271,  199,  199, 1191,  199, 1271, 1271,  199,
      199,  199, 1271, 1192,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199, 1271,  199, 1271,  199,  199,  199,
      199,  199, 1191, 1271, 1271,  199,  199,  199,  199,  199,
     1192,  199,  199, 1193,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199, 1271,

     1194,  199,  199,  199,  199,  199,  199,  199,  199,  199,
     1193,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199, 1271,  199, 1271, 1271, 1194,  199,  199,
      199,  199,  199,  199,  199, 1271,  199,  199,  199, 1195,
      199,  199,  199,  199,  199,  199,  199, 1196,  199,  199,
      199,  199,  199,  199,  199, 1271,  199,  199,  199,  199,
      199,  199,  199, 1271,  199, 1271, 1195, 1271,  199, 1271,
      199, 1271,  199, 1271, 1196, 1271,  199,  199,  199,  199,
      199,  199, 1271,  199,  199,  199,  199, 1271,  199,  199,
      199,  199, 1271,  199, 1271,  199, 1198, 1197,  199, 1271,

      199,  199, 1271,  199, 1271,  199,  199, 1271, 1271,  199,
      199, 1199,  199,  199, 1271, 1271,  199,  199,  199,  199,
      199,  199,  199, 1198, 1197,  199, 1271,  199,  199,  199,
      199,  199,  199,  199, 1271,  199,  199, 1271, 1199, 1271,
      199,  199, 1271,  199, 1271,  199,  199, 1271,  199,  199,
     1271,  199, 1271,  199, 1271,  199,  199,  199,  199, 1201,
     1200, 1271,  199,  199, 1271,  199, 1271, 1271,  199, 1271,
     1271,  199,  199,  199, 1271,  199,  199, 1271,  199,  199,
      199,  199,  199,  199,  199, 1271, 1201, 1200, 1271,  199,
      199,  199,  199, 1271, 1271, 1271, 1271,  199,  199,  199,

      199,  199,  199, 1271, 1271,  199,  199,  199,  199,  199,
      199, 1271, 1202, 1271, 1271,  199,  199,  199,  199, 1271,
     1271, 1271, 1271, 1271,  199,  199,  199,  199,  199, 1271,
     1271,  199,  199, 1271,  199, 1271,  199,  199, 1271, 1202,
     1203,  199,  199, 1271,  199,  199, 1206,  199, 1271, 1204,
      199,  199,  199, 1271,  199,  199,  199, 1271,  199,  199,
     1271,  199, 1271, 1271,  199,  199,  199, 1203,  199, 1271,
     1205, 1271,  199, 1206,  199,  199, 1204,  199,  199, 1271,
      199,  199,  199,  199,  199,  199,  199, 1271,  199, 1271,
      199,  199,  199,  199,  199, 1271, 1271, 1205,  199, 1271,

      199,  199,  199, 1271,  199, 1271,  199,  199,  199, 1271,
      199,  199,  199, 1271,  199, 1271,  199,  199,  199, 1217,
      199,  199, 1271, 1271,  199,  199,  199,  199,  199, 1271,
      199,  199,  199,  199,  199, 1218,  199,  199,  199, 1271,
      199,  199,  199,  199,  199, 1271, 1217,  199, 1271, 1271,
     1271,  199,  199,  199,  199, 1271, 1271,  199, 1271,  199,
      199,  199, 1218,  199,  199,  199, 1271,  199,  199,  199,
      199,  199,  199,  199, 1271, 1219, 1271,  199,  199,  199,
      199,  199, 1271,  199, 1271, 1271, 1271,  199,  199, 1271,
     1271,  199, 1271,  199, 1271,  199, 1271,  199, 1271,  199,

      199, 1271, 1219, 1271,  199,  199, 1271,  199,  199, 1271,
      199, 1271,  199, 1271, 1271,  199, 1271,  199,  199, 1221,
      199, 1220, 1271, 1271,  199,  199, 1271,  199,  199,  199,
     1271,  199,  199,  199, 1271,  199, 1271,  199,  199,  199,
     1271, 1271, 1271,  199,  199,  199, 1221, 1271, 1220, 1271,
     1271,  199,  199, 1271,  199,  199,  199, 1271,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199, 1271,
      199,  199,  199,  199, 1271, 1271,  199,  199, 1223, 1271,
     1224,  199, 1222, 1271, 1271,  199,  199,  199,  199,  199,
      199,  199, 1271,  199,  199,  199,  199, 1271,  199,  199,

      199,  199, 1271,  199,  199, 1223, 1271, 1224,  199, 1222,
     1231, 1226,  199,  199,  199, 1271, 1232,  199,  199, 1271,
      199,  199,  199,  199,  199, 1271,  199,  199,  199, 1233,
     1271, 1271, 1271, 1271,  199,  199,  199,  199, 1271,  199,
     1271, 1271, 1271, 1232,  199,  199, 1271,  199,  199,  199,
     1271,  199, 1271,  199,  199,  199, 1233, 1271,  199, 1271,
      199,  199,  199,  199,  199,  199,  199,  199, 1271,  199,
      199,  199,  199,  199,  199, 1271, 1271, 1271,  199,  199,
     1271, 1271,  199,  199, 1271,  199, 1271,  199, 1271,  199,
     1271, 1271,  199,  199,  199, 1271,  199,  199,  199, 1234,

      199,  199, 1271,  199,  199,  199,  199,  199,  199,  199,
      199, 1271, 1271,  199,  199,  199,  199, 1240, 1271, 1271,
      199, 1271,  199,  199,  199, 1271, 1234,  199, 1271, 1271,
      199,  199, 1271, 1271,  199,  199,  199, 1271, 1271, 1271,
      199,  199,  199, 1271, 1240,  199, 1271,  199, 1271,  199,
      199,  199,  199, 1271,  199, 1271, 1271,  199, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271,  199, 1271,  199, 1271, 1271, 1271, 1271,  199,
     1271, 1271, 1271, 1271,  199,   46,   46,   46,   46,   46,
       88, 1271, 1271,   88,   88,  184,  184,  184, 1271,  184,

      186, 1271,  186,  186,  186,  189, 1271,  189,  189,  189,
      199, 1271,  199,  199,  199,    7, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271

    } ;

static const flex_int16_t yy_chk[8393] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   49,   49,   22,   23,   30,   21,
     1274,   21,   22, 1268,   23,   21,   21,   31, 1267,   44,

     1266,   23,   22,   24,   23, 1265,   27,   24,   21,   22,
       21,   24,   27,   22,   23,   30,   21,   24,   21,   22,
       24,   23,   21,   21,   31,   25,   44,   25,   23,   22,
       24,   23,   25,   27,   24,   43,   43,   25,   24,   27,
     1263,   32,   28, 1261,   24,   32,   55,   24,   50,   50,
       28,   32,   25, 1259,   25, 1257,   28,   55, 1255,   25,
       58,   58,   43,   43,   25,   26,   86,   86,   32,   28,
       34,   33,   32,   26,   99,   33,   26,   28,   32,   26,
       29,   33,   26,   28,   34,   26,   29,   29,   29, 1253,
       34,   34,   26,   29,  187,  187,  100,   34,   33, 1251,

       26,   99,   33,   26, 1208, 1208,   26,   29,   33,   26,
       36,   34,   26,   29,   29,   29,   35,   34,   34,  103,
       29,   36,   38,  100,   35, 1249,   38,   36,   35,  104,
       38,   35,   35,   41,  106,   41,   38,   36,   41, 1247,
     1245,  107, 1243,   35,   42, 1241,  103, 1238,   36,   38,
     1235,   35,   42,   38,   36,   35,  104,   38,   35,   35,
       41,  106,   41,   38,   39,   41,   39,  101,  107,   39,
      102,   42,   39,  102,   39,  101,   39,   39, 1230,   42,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
      110,   39, 1225,   39,  101, 1216,   39,  102,  116,   39,

      102,   39,  101,   39,   39,   40,  112,  117,   67,   40,
       67,  109,   40,   40,   67,   67,  112,  110,  109,   40,
       67,  118,   40, 1207, 1189,  116, 1171, 1132, 1093, 1025,
      957,  865,   40,  112,  117,   67,   40,   67,  109,   40,
       40,   67,   67,  112,  773,  109,   40,   67,  118,   40,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   61,   61,  119,   61,   61,   61,   61,   61,   61,
      120,   68,  122,  652,  531,   68,  409,  105,  105,   68,
       61,   61,   61,   70,  113,   68,   61,   70,   61,  113,
      119,  105,  123,   70,   61,   68,   61,  120,   68,  122,

       61,   61,   68,   70,  105,  105,   68,  115,  115,  286,
       70,  113,   68,   61,   70,   61,  113,  191,  105,  123,
       70,   61,   68,   61,  189,  124,   90,   61,   61,   88,
       70,   85,   60,   59,  115,  115,   61,   62,   62,   52,
       62,   62,   62,   62,   62,   62,   51,   47,  125,   71,
       72,   73,  124,   71,   72,   73,   62,   62,   62,   71,
       72,   73,  126,   62,  111,  111,  111,   62,  111,   71,
       72,   73,   77,   62,   77,  125,   71,   72,   73,   77,
       71,   72,   73,   62,   77,   45,   71,   72,   73,  126,
       62,  111,  111,  111,   62,  111,   71,   72,   73,   77,

       62,   77,   20,   19,   11,  127,   77,  128,  129,    7,
       62,   77,   62,   63,  131,   78,  132,   63,  134,   78,
       63,   63,  130,   78,   81,  130,   81,   63,   81,   78,
       63,   81,  127,  135,  128,  129,   81,   63,    4,   78,
       63,  131,   78,  132,   63,  134,   78,   63,   63,  130,
       78,   81,  130,   81,   63,   81,   78,   63,   81,    3,
      135,    0,    0,   81,   63,   64,   78,   82,   84,   64,
      137,   82,   84,   64,  138,   82,    0,  139,   84,   64,
      140,   82,   64,   83,  143,  144,   83,   83,   84,   64,
        0,   82,   64,   83,   82,   84,   64,  137,   82,   84,

       64,  138,   82,   83,  139,   84,   64,  140,   82,   64,
       83,  143,  144,   83,   83,   84,   64,   65,   82,  145,
       83,   65,  146,  114,   65,  114,   65,   65,  114,    0,
       83,   65,  148,  141,  114,  141,   65,   65,    0,    0,
      147,  114,    0,  147,   65,    0,  145,  149,   65,  146,
      114,   65,  114,   65,   65,  114,  136,    0,   65,  148,
      141,  114,  141,   65,   65,   66,  136,  147,  114,   66,
      147,  136,  136,   66,  149,  142,   66,  142,  121,   66,
      121,  150,   66,  136,  121,   66,  152,  153,  142,   66,
        0,  121,   66,  136,  154,  121,   66,    0,  136,  136,

       66,  155,  142,   66,  142,  121,   66,  121,  150,   66,
      156,  121,   66,  152,  153,  142,   66,   69,  121,  158,
      159,  154,  121,   69,   69,   69,  160,  157,  155,  162,
       69,  157,  161,  159,  164,   69,    0,  156,  159,  165,
        0,  166,  167,  161,   69,    0,  158,  159,  164,  168,
       69,   69,   69,  160,  157,  163,  162,   69,  157,  161,
      159,  164,   69,   74,  163,  159,  165,   74,  166,  167,
      161,   74,  163,  169,  170,  164,  168,   74,  171,  172,
      173,  176,  163,   74,   74,  170,  177,   74,    0,  174,
       74,  163,  175,  180,   74,  175,    0,    0,   74,  163,

      169,  170,  181,    0,   74,  171,  172,  173,  176,  174,
       74,   74,  170,  177,   74,   75,  174,  182,  178,  175,
      180,   75,  175,   75,  178,  289,  291,   75,   75,  181,
       75,   75,    0,   75,    0,    0,  174,    0,    0,    0,
        0,    0,   75,    0,  182,  178,  179,    0,   75,  292,
       75,  178,  289,  291,   75,   75,  294,   75,   75,  179,
       75,   76,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   76,  179,   76,  296,  292,  297,   76,   76,
      298,  299,    0,  294,   76,    0,  179,    0,   76,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   76,

        0,   76,  296,  300,  297,   76,   76,  298,  299,  199,
      301,   76,   79,  199,   79,  303,  304,   79,   79,  199,
       79,    0,   79,  305,   79,   79,    0,  200,  200,  199,
      300,  306,  200,  307,   79,    0,  199,  301,  200,   79,
      199,   79,  303,  304,   79,   79,  199,   79,  200,   79,
      305,   79,   79,  201,  200,  200,  199,  201,  306,  200,
      307,   79,   80,  201,  308,  200,   80,  309,  201,   80,
       80,  310,  311,  201,  312,  200,   80,  313,  314,   80,
      201,  316,  317,  318,  201,  319,   80,    0,    0,   80,
      201,  308,    0,   80,  309,  201,   80,   80,  310,  311,

      201,  312,    0,   80,  313,  314,   80,    0,  316,  317,
      318,    0,  319,   80,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  202,  320,  202,  204,
      321,  204,    0,  202,  202,  204,  204,    0,  202,    0,
      323,  204,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,    0,  202,  320,  202,  204,  321,  204,  315,
      202,  202,  204,  204,  205,  202,  203,  323,  204,  203,

      302,  207,  302,  205,  315,  205,  207,  203,  207,  203,
      205,  324,    0,  207,  203,  205,  315,  302,  207,  203,
        0,  205,    0,  203,  325,    0,  203,  302,  207,  302,
      205,  315,  205,  207,  203,  207,  203,  205,  324,  208,
      207,  203,  205,  208,  302,  207,  203,  206,  206,  208,
      326,  325,  209,  206,  327,  206,  209,    0,  328,  208,
      206,  206,  209,  329,    0,  206,  208,  330,    0,    0,
      208,    0,  209,    0,  206,  206,  208,  326,  331,  209,
      206,  327,  206,  209,  211,  328,  208,  206,  206,  209,
      329,  210,  206,  210,  330,  211,  213,  211,  210,  209,

      213,  332,  211,  210,  333,  331,  213,  211,    0,    0,
        0,  211,    0,    0,  334,    0,  213,    0,  210,    0,
      210,    0,  211,  213,  211,  210,    0,  213,  332,  211,
      210,  333,  335,  213,  211,  212,  212,  212,  336,  212,
      214,  334,  212,  213,  214,  337,  216,  212,  216,  338,
      214,  339,  216,  216,  340,  214,  341,  342,  216,  335,
      214,    0,  212,  212,  212,  336,  212,  214,    0,  212,
        0,  214,  337,  216,  212,  216,  338,  214,  339,  216,
      216,  340,  214,  341,  342,  216,  343,  214,  215,  344,
      215,  345,  347,  215,  348,  217,  219,  217,  219,  215,

      350,  215,  217,  219,  217,    0,  215,  217,  219,    0,
        0,  215,  351,  343,    0,  215,  344,  215,  345,  347,
      215,  348,  217,  219,  217,  219,  215,  350,  215,  217,
      219,  217,  218,  215,  217,  219,  218,  225,  215,  351,
      220,  225,  218,  346,  352,  221,  353,  225,  220,  355,
      220,  356,  218,  346,  221,  220,  221,  225,    0,  218,
      220,  221,  357,  218,  225,    0,  221,  220,  225,  218,
      346,  352,  221,  353,  225,  220,  355,  220,  356,  218,
      346,  221,  220,  221,  225,  354,    0,  220,  221,  357,
      223,    0,  223,  221,  222,  354,  222,  223,    0,  358,

      222,  224,  223,  224,  359,  226,  222,  222,  224,  226,
        0,  222,  354,  224,    0,  226,  222,  223,  226,  223,
        0,  222,  354,  222,  223,  226,  358,  222,  224,  223,
      224,  359,  226,  222,  222,  224,  226,  227,  222,  361,
      224,  227,  226,  222,  228,  226,  228,  227,  362,  229,
      230,  228,  226,  229,  230,  363,  228,  227,  364,  229,
      230,    0,  365,    0,  227,    0,  361,    0,  227,  229,
      230,  228,    0,  228,  227,  362,  229,  230,  228,  366,
      229,  230,  363,  228,  227,  364,  229,  230,  231,  365,
      231,  367,  232,  369,  232,  231,  229,  230,  231,  232,

      231,  233,  370,  233,  232,    0,  366,    0,  233,  371,
      233,    0,    0,  233,  368,  231,    0,  231,  367,  232,
      369,  232,  231,    0,  372,  231,  232,  231,  233,  370,
      233,  232,  234,  368,  234,  233,  371,  233,  235,  234,
      233,  368,  235,  236,  234,  373,  374,  236,  235,  375,
      238,  372,  238,  236,  236,    0,    0,  238,  235,  234,
      368,  234,  238,  236,    0,  235,  234,  376,  377,  235,
      236,  234,  373,  374,  236,  235,  375,  238,  239,  238,
      236,  236,  239,  240,  238,  235,    0,  240,  239,  238,
      236,  237,    0,  240,  376,  377,    0,    0,  239,  237,

      378,  237,    0,  240,  379,  239,  237,  237,  380,  239,
      240,  237,  241,  241,  240,  239,  241,  244,  237,  244,
      240,  381,  241,  244,  244,  239,  237,  378,  237,  244,
      240,  379,  241,  237,  237,  380,  383,    0,  237,  241,
      241,    0,    0,  241,  244,  245,  244,  245,  381,  241,
      244,  244,  245,    0,  384,    0,  244,  245,    0,  241,
      242,    0,  385,  383,  242,  255,  242,  386,  242,  255,
      242,    0,  245,  387,  245,  255,  388,  389,  258,  245,
      242,  384,  258,    0,  245,  255,    0,  242,  258,  385,
      390,  242,  255,  242,  386,  242,  255,  242,  258,    0,

      387,    0,  255,  388,  389,  258,  391,  242,  243,  258,
      243,  246,  255,  246,  392,  258,  393,  390,  246,  243,
      247,  243,  247,  246,  395,  258,  243,  247,  247,  398,
      396,  243,  247,  391,  399,  243,    0,  243,  246,  396,
      246,  392,  400,  393,    0,  246,  243,  247,  243,  247,
      246,  395,    0,  243,  247,  247,  398,  396,  243,  247,
      248,  399,  248,  249,    0,  249,  396,  248,  248,  400,
      249,  248,  248,  250,    0,  249,  252,  397,  252,  397,
        0,  401,    0,  252,  250,    0,  250,  248,  252,  248,
      249,  250,  249,    0,  248,  248,  250,  249,  248,  248,

      250,  251,  249,  252,  397,  252,  397,  251,  401,  251,
      252,  250,  253,  250,  251,  252,    0,  402,  250,  251,
      253,    0,  253,  250,    0,    0,  403,  253,  251,  404,
      406,    0,  253,  407,  251,    0,  251,    0,  532,  253,
      533,  251,    0,  254,  402,  254,  251,  253,  256,  253,
      254,  254,  256,  403,  253,  254,  404,  406,  256,  253,
      407,  256,  259,    0,  259,  532,  534,  533,  256,  259,
      254,  535,  254,    0,  259,  256,  257,  254,  254,  256,
      257,  260,  254,  405,  257,  256,    0,  405,  256,  259,
      257,  259,  260,  534,  260,  256,  259,    0,  535,  260,

      257,  259,    0,  257,  260,    0,    0,  257,  260,    0,
      405,  257,  536,  261,  405,  537,    0,  257,  261,  260,
      261,  260,  262,  538,  262,  261,  260,  257,  539,  262,
      261,  260,  263,  262,  262,  540,  263,    0,  263,  536,
      261,    0,  537,  263,  542,  261,    0,  261,  263,  262,
      538,  262,  261,  545,  546,  539,  262,  261,    0,  263,
      262,  262,  540,  263,  265,  263,    0,    0,  265,  266,
      263,  542,  265,  266,  547,  263,  264,  548,  265,  266,
      545,  546,  550,  551,  552,  264,    0,  264,  265,  266,
        0,  265,  264,  264,  267,  265,  266,  264,  267,  265,

      266,  547,  267,  264,  548,  265,  266,    0,  267,  550,
      551,  552,  264,  268,  264,  265,  266,  268,  267,  264,
      264,  267,  554,  268,  264,  267,  268,  555,  269,  267,
        0,  556,  269,  268,  270,  267,  269,  270,    0,    0,
      268,  270,  269,  557,  268,  267,  558,  270,    0,  554,
      268,  559,  269,  268,  555,  269,  560,  270,  556,  269,
      268,  270,  561,  269,  270,  271,  271,  271,  270,  269,
      557,  272,  271,  558,  270,  272,    0,  271,  559,  269,
        0,  272,    0,  560,  270,  562,    0,  565,    0,  561,
        0,  272,  271,  271,  271,  566,  276,  273,  272,  271,

      276,  273,  272,  276,  271,  273,  276,  273,  272,  274,
      277,  277,  562,  274,  565,  277,  276,  273,  272,  274,
      274,  277,  566,  276,  273,  567,  568,  276,  273,  274,
      276,  277,  273,  276,  273,  278,  274,  277,  277,  278,
      274,  569,  277,  276,  273,  278,  274,  274,  277,  570,
        0,  571,  567,  568,    0,  278,  274,  275,  277,  573,
      281,  275,  278,  574,  281,  275,  278,  279,  569,  279,
      281,  275,  278,  279,  279,    0,  570,  275,  571,  279,
      281,  275,  278,    0,  275,  577,  573,  281,  275,  280,
      574,  281,  275,  280,  279,  578,  279,  281,  275,  280,

      279,  279,  280,  580,  275,  582,  279,  281,  275,  280,
      283,  411,  577,  282,  283,  411,  280,  282,  283,  583,
      280,  411,  578,  282,  283,  584,  280,  585,  282,  280,
      580,  411,  582,  282,  283,    0,  280,  283,  411,    0,
      282,  283,  411,    0,  282,  283,  583,    0,  411,    0,
      282,  283,  584,  586,  585,  282,    0,    0,  411,    0,
      282,  283,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  412,  413,  414,    0,  412,  413,  414,  415,
      586,  415,  412,  413,  414,    0,  415,  587,  590,  594,
      596,  415,  412,  413,  414,  416,    0,  416,    0,  412,

      413,  414,  416,  412,  413,  414,  415,  416,  415,  412,
      413,  414,  417,  415,  587,  590,  594,  596,  415,  412,
      413,  414,  416,  417,  416,  417,  418,  419,  418,  416,
      417,  419,    0,  418,  416,  417,  420,  419,  418,  417,
      420,  421,  597,  599,    0,  421,  420,  419,    0,  601,
      417,  421,  417,  418,  419,  418,  420,  417,  419,  421,
      418,  421,  417,  420,  419,  418,  602,  420,  421,  597,
      599,  422,  421,  420,  419,  422,  601,  423,  421,  423,
      424,  422,  424,  420,  423,  603,  421,  424,  421,  423,
        0,  422,  424,  602,    0,    0,    0,  605,  422,    0,

        0,  606,  422,  607,  423,    0,  423,  424,  422,  424,
        0,  423,  603,  427,  424,    0,  423,  427,  422,  424,
      425,  426,  425,  427,  605,  426,  425,  588,  606,  427,
      607,  426,  425,  427,  426,  428,    0,  425,  588,  428,
      427,  426,  425,  428,  427,  428,    0,  425,  426,  425,
      427,    0,  426,  425,  588,  428,  427,  608,  426,  425,
      427,  426,  428,  429,  425,  588,  428,  429,  426,  425,
      428,  430,  428,  429,  610,  430,  433,  611,  429,  613,
      433,  430,  428,  429,  608,  431,  433,  614,    0,  431,
      429,  430,  615,  431,  429,    0,  433,  617,  430,  431,

      429,  610,  430,  433,  611,  429,  613,  433,  430,  431,
      429,    0,  431,  433,  614,  432,  431,  432,  430,  615,
      431,  618,  432,  433,  617,    0,  431,  432,  434,  619,
      434,  435,  620,  435,    0,  434,  431,  622,  435,  623,
      434,  436,  432,  435,  432,  436,    0,  624,  618,  432,
        0,  436,  600,  600,  432,  434,  619,  434,  435,  620,
      435,  436,  434,  625,  622,  435,  623,  434,  436,  437,
      435,  438,  436,  437,  624,  438,    0,  437,  436,  600,
      600,  438,    0,  437,  628,  629,  438,  630,  436,  631,
      625,  438,    0,  437,  632,  439,  437,  439,  438,  440,

      437,  439,  438,  440,  437,    0,    0,  439,  438,  440,
      437,  628,  629,  438,  630,  635,  631,  439,  438,  440,
      437,  632,  439,  441,  439,  636,  440,  441,  439,  638,
      440,  639,  442,  441,  439,  442,  440,  443,  441,  442,
        0,  443,  635,  441,  439,  442,  440,  443,  443,    0,
      441,  640,  636,    0,  441,  442,  638,  443,  639,  442,
      441,  641,  442,  444,  443,  441,  442,  444,  443,    0,
      441,  642,  442,  444,  443,  443,  445,  446,  640,  643,
      445,  446,  442,  444,  443,  446,  445,  644,  641,  447,
      444,  446,  645,  447,  444,    0,  445,    0,  642,  447,

      444,  446,    0,  445,  446,  647,  643,  445,  446,  447,
      444,    0,  446,  445,  644,  448,  447,  448,  446,  645,
      447,  448,  449,  445,  449,    0,  447,  448,  446,  449,
        0,  450,  647,  450,  449,    0,  447,  448,  450,    0,
      649,    0,  448,  450,  448,    0,    0,  651,  448,  449,
      452,  449,  452,  776,  448,    0,  449,  452,  450,    0,
      450,  449,  452,    0,  448,  450,  451,  649,  451,    0,
      450,  453,  451,  451,  651,  453,  778,  452,  451,  452,
      776,  453,  454,  780,  452,    0,  454,  781,    0,  452,
      454,  453,    0,  451,    0,  451,  454,  782,  453,  451,

      451,    0,  453,  778,    0,  451,  454,  783,  453,  454,
      780,  455,  456,  454,  781,  455,  456,  454,  453,  455,
      456,  455,  456,  454,  782,  784,  785,    0,  457,    0,
      457,  455,  456,  454,  783,  457,    0,  786,  455,  456,
      457,  787,  455,  456,  458,    0,  455,  456,  455,  456,
        0,  788,  784,  785,  458,  457,  458,  457,  455,  456,
      790,  458,  457,  459,  786,  459,  458,  457,  787,    0,
      459,  458,  459,  460,  791,  459,  461,  460,  788,  460,
      461,  458,    0,  458,  460,    0,  461,  790,  458,  460,
      459,    0,  459,  458,    0,  792,  461,  459,    0,  459,

      460,  791,  459,  461,  460,  462,  460,  461,  463,  462,
        0,  460,  463,  461,  793,  462,  460,    0,  463,    0,
      462,  463,  792,  461,  794,  462,    0,    0,  463,    0,
      796,    0,  462,  465,  464,  463,  462,  465,  464,  463,
      464,  793,  462,  465,  464,  463,  466,  462,  463,    0,
      466,  794,  462,  465,  464,  463,  466,  796,  467,  468,
      465,  464,  467,  468,  465,  464,  466,  464,  467,  468,
      465,  464,  469,  466,  797,  798,  469,  466,  467,  468,
      465,  464,  469,  466,  470,  467,  468,  799,  470,  467,
      468,    0,  469,  466,  470,  467,  468,    0,  800,  469,

      470,  797,  798,  469,  470,  467,  468,    0,  801,  469,
      471,  470,  471,    0,  799,  470,  472,  471,  472,  469,
      474,  470,  471,  472,  474,  800,    0,  470,  472,    0,
      474,  470,  802,  803,  473,  801,  473,  471,  804,  471,
      474,  473,  473,  472,  471,  472,  473,  474,  805,  471,
      472,  474,  475,  476,  476,  472,  475,  474,  476,  802,
      803,  473,  475,  473,  476,  804,  808,  474,  473,  473,
      809,  810,  475,  473,  476,  805,  811,    0,  814,  475,
      476,  476,  817,  475,  478,  476,  478,  818,  478,  475,
      820,  476,  823,  808,  478,    0,  826,  809,  810,  475,

      827,  476,  477,  811,  478,  814,  477,    0,  828,  817,
      477,  478,  477,  478,  818,  478,  477,  820,  479,  823,
      479,  478,  479,  826,  829,    0,  477,  827,  479,  477,
      480,  478,    0,  477,  480,  828,  830,  477,  479,  477,
      480,    0,    0,  477,  481,  479,  480,  479,  481,  479,
      480,  829,  482,  477,  481,  479,  482,  480,  831,  481,
      834,  480,  482,  830,  481,  479,  819,  480,  482,  819,
      483,  481,  482,  480,  483,  481,  835,  480,  836,  482,
      483,  481,    0,  482,  484,  831,  481,  834,  484,  482,
      483,  481,  484,  819,  837,  482,  819,  483,  484,  482,

      839,  483,  485,  835,  485,  836,  840,  483,  484,  485,
        0,  484,  842,  843,  485,  484,  486,  483,  486,  484,
      844,  837,  486,  486,  845,  484,  847,  839,  486,  485,
      487,  485,  487,  840,  488,  484,  485,  487,  488,  842,
      843,  485,  487,  486,  488,  486,    0,  844,  489,  486,
      486,  845,  489,  847,  488,  486,    0,  487,  489,  487,
      848,  488,    0,  490,  487,  488,    0,  490,  489,  487,
      492,  488,  492,  490,    0,  489,  490,  492,    0,  489,
        0,  488,  492,  490,    0,  489,  849,  848,    0,  493,
      490,  493,    0,  493,  490,  489,  493,  492,    0,  492,

      490,  493,    0,  490,  492,  494,  494,  494,    0,  492,
      490,  491,  494,  849,    0,  491,  493,  494,  493,  491,
      493,    0,  850,  493,  495,  491,  851,  852,  493,  495,
      491,  495,  494,  494,  494,  491,  495,  853,  491,  494,
      854,  495,  491,  496,  494,  496,  491,  856,  497,  850,
      496,  495,  491,  851,  852,  496,  495,  491,  495,  497,
        0,  497,  491,  495,  853,  857,  497,  854,  495,  858,
      496,  497,  496,  860,  856,  497,    0,  496,  861,  862,
      958,    0,  496,  498,  960,  498,  497,  500,  497,  500,
      498,  498,  857,  497,  500,  498,  858,  499,  497,  500,

      860,  499,    0,  499,  962,  861,  862,  958,  499,  963,
      498,  960,  498,  499,  500,    0,  500,  498,  498,  502,
        0,  500,  498,  502,  499,  501,  500,  501,  499,  502,
      499,  962,  501,  964,    0,  499,  963,  501,  503,  502,
      499,  504,  503,  505,  965,  504,  502,  505,  503,  967,
      502,  504,  501,  505,  501,  509,  502,  509,  503,  501,
      964,  504,  509,  505,  501,  503,  502,  509,  504,  503,
      505,  965,  504,  506,  505,  503,  967,  506,  504,  969,
      505,  970,  509,  506,  509,  503,  506,  507,  504,  509,
      505,  507,  508,  506,  509,  971,  508,  507,  972,  974,

      506,  976,  508,  508,  506,  507,  969,  507,  970,  510,
      506,  510,  508,  506,  507,  980,  510,  510,  507,  508,
      506,  510,  971,  508,  507,  972,  974,    0,  976,  508,
      508,    0,  507,  511,  507,  511,  510,  982,  510,  508,
      511,  511,  980,  510,  510,  511,  983,  512,  510,  512,
      990,  513,  991,  513,  512,  513,  992,  995,  513,  512,
      511,  997,  511,  513,  982,    0,    0,  511,  511,    0,
        0,    0,  511,  983,  512,    0,  512,  990,  513,  991,
      513,  512,  513,  992,  995,  513,  512,  514,  997,  514,
      513,  515,  516,  515,  514,  514,  516,  517,  515,  514,

      999,  517,  516,  515,    0, 1001,    0,  517, 1002, 1003,
     1004,    0,  516,    0,  514,    0,  514,  517,  515,  516,
      515,  514,  514,  516,  517,  515,  514,  999,  517,  516,
      515,  518, 1001,  518,  517, 1002, 1003, 1004,  518,  516,
      519,  520,  521,  518,  517,  520,  521,  519, 1006,  519,
     1007,  520,  521,  520,  519, 1008,    0, 1009,  518,  519,
      518,  520,  521, 1011,    0,  518,    0,  519,  520,  521,
      518, 1013,  520,  521,  519, 1006,  519, 1007,  520,  521,
      520,  519, 1008,  522, 1009, 1015,  519,  522,  520,  521,
     1011,  522,  523,  524,  523,  524, 1016,  522, 1013,  523,

      524,    0,  524, 1017,  523,  524,    0,  522,    0,    0,
      522,    0, 1015,    0,  522, 1018,    0,    0,  522,  523,
      524,  523,  524, 1016,  522, 1023,  523,  524,  525,  524,
     1017,  523,  524,  527,  522,  527,  526,  525,  526,  525,
      527,  527, 1018,  526,  525,  527, 1024,  526,  526,  525,
        0, 1098, 1023, 1101,    0,  525,    0,    0,    0, 1102,
      527,    0,  527,  526,  525,  526,  525,  527,  527, 1105,
      526,  525,  527, 1024,  526,  526,  525,  528, 1098,  528,
     1101,  529, 1106,  528,  528,  529, 1102,  529,  530,  528,
      530, 1111,  529, 1112,  530,  530, 1105,  529,    0,    0,

      530,    0,    0,    0,  528,    0,  528, 1115,  529, 1106,
      528,  528,  529, 1116,  529,  530,  528,  530, 1111,  529,
     1112,  530,  530,  653,  529,  653,  654,  530,  654,  653,
      653, 1117,  654,  654, 1115,  653,    0,    0,  654, 1120,
     1116,  655, 1121, 1124,  656,  655,    0, 1126,  656,    0,
      653,  655,  653,  654,  656,  654,  653,  653, 1117,  654,
      654,  655,  653,  657,  656,  654, 1120,  657,  655, 1121,
     1124,  656,  655,  657, 1126,  656,  657,  658,  655,  658,
        0,  656,  659,  657,  658,    0,  659, 1127,  655,  658,
      657,  656,  659,    0,  657,    0, 1128,    0,    0, 1129,

      657,    0,  659,  657,  658,  660,  658,  660, 1172,  659,
      657,  658,  660,  659, 1127,    0,  658,  660,  661,  659,
      662,  664,  661, 1128,  662,  664, 1129, 1174,  661,  659,
      662,  664,  660,  665,  660, 1172, 1177,  665,  661,  660,
      662,  664,  663,  665,  660,  661,  663,  662,  664,  661,
      663,  662,  664,  665, 1174,  661,  663,  662,  664, 1180,
      665, 1181, 1185, 1177,  665,  661,  663,  662,  664,  663,
      665,  666, 1186,  663,  667,  666, 1187,  663,  667,  666,
      665, 1209,  667,  663,  667,  666, 1180,  668, 1181, 1185,
     1211,  668,    0,  663,  667,  666, 1215,  668,  666, 1186,

      669,  667,  666, 1187,  669,  667,  666,  668, 1209,  667,
      669,  667,  666,  669,  668,  670,    0, 1211,  668,  670,
      669,  667,  666, 1215,  668,  670, 1229,  669,  671,    0,
     1236,  669,  671, 1239,  668,  670,    0,  669,  671, 1242,
      669, 1244,  670,  671, 1226, 1226,  670,  669,  671,  672,
     1246,  672,  670, 1229, 1248,  671,  672, 1236,    0,  671,
     1239,  672,  670, 1231, 1231,  671, 1242, 1250, 1244, 1252,
      671,    0,  673, 1254,  673,  671,  672, 1246,  672,  673,
      673, 1248, 1256,  672,  673,  674, 1226,  674,  672,    0,
        0,  675,  674,  675, 1250,    0, 1252,  674,  675,  673,

     1254,  673,    0,  675,    0, 1231,  673,  673,    0, 1256,
        0,  673,  674, 1226,  674,  676,  676,  676,  675,  674,
      675, 1258,  676, 1260,  674,  675,  677,  676,  677,  678,
      675,  678, 1231,  677,  679,  677,  678,  678,  677,    0,
        0,  678,  676,  676,  676,  679,    0,  679, 1258,  676,
     1260,    0,  679,  677,  676,  677,  678,  679,  678,    0,
      677,  679,  677,  678,  678,  677,    0,    0,  678,  680,
        0,  680,  679,  682,  679,  680,  680,  682,  681,  679,
        0,  680,    0,  682,  679,    0,    0,  681,    0,  681,
        0,    0,    0,  682,  681,    0,  680,    0,  680,  681,

      682,    0,  680,  680,  682,  681,    0,    0,  680,    0,
      682,  683,    0,  683,  681,  684,  681,  684,  683,    0,
      682,  681,  684,  683,    0,    0,  681,  684,    0,  685,
        0,  685,    0,    0,    0,    0,  685,    0,  683,    0,
      683,  685,  684,    0,  684,  683,    0,    0,    0,  684,
      683,    0,    0,  686,  684,  686,  685,  686,  685,    0,
      686,    0,  687,  685,  687,  686,  687,    0,  685,  687,
        0,    0,    0,    0,  687,    0,  688,    0,  688,    0,
      686,    0,  686,  688,  686,  688,    0,  686,  688,  687,
        0,  687,  686,  687,    0,    0,  687,    0,  690,    0,

        0,  687,    0,  688,    0,  688,  689,    0,  689,  690,
      688,  690,  688,  689,  689,  688,  690,    0,  689,  691,
        0,  690,    0,    0,  692,  690,    0,    0,  692,    0,
      691,    0,  691,  689,  692,  689,  690,  691,  690,    0,
      689,  689,  691,  690,  692,  689,  691,    0,  690,    0,
      693,  692,  694,    0,  693,  692,  694,  691,    0,  691,
      693,  692,  694,    0,  691,    0,    0,  694,    0,  691,
      693,  692,  694,    0,  695,    0,  696,  693,  695,  694,
      696,  693,  695,  694,    0,    0,  696,  693,  695,  694,
        0,    0,    0,    0,  694,    0,  696,  693,  695,  694,

      697,  695,    0,  696,  697,  695,    0,  696,  698,  695,
      697,    0,  698,  696,    0,  695,  698,  701,    0,  701,
      697,    0,  698,  696,  701,  695,    0,  697,    0,  701,
      699,  697,  698,    0,  699,  698,    0,  697,  700,  698,
      699,  699,  700,  698,  701,    0,  701,  697,  700,  698,
      699,  701,    0,    0,    0,    0,  701,  699,  700,  698,
        0,  699,    0,    0,  702,  700,  702,  699,  699,  700,
        0,  702,  703,    0,  703,  700,  702,  699,    0,  703,
        0,    0,  704,    0,  703,  700,  704,    0,    0,    0,
        0,  702,  704,  702,    0,    0,    0,    0,  702,  703,

        0,  703,  704,  702,  705,    0,  703,    0,  705,  704,
        0,  703,    0,  704,  705,    0,  706,  705,  706,  704,
      707,    0,  707,  706,  705,    0,  707,  707,  706,  704,
        0,  705,  707,    0,    0,  705,    0,    0,    0,    0,
        0,  705,    0,  706,  705,  706,    0,  707,    0,  707,
      706,  705,    0,  707,  707,  706,  708,    0,  708,  707,
        0,    0,  708,  708,    0,  710,    0,  710,  708,    0,
        0,    0,  710,    0,    0,    0,    0,  710,    0,    0,
        0,    0,    0,  708,    0,  708,    0,    0,    0,  708,
      708,    0,  710,    0,  710,  708,  709,    0,  711,  710,

      711,  709,    0,  709,  710,  711,    0,  709,  709,  712,
      711,  712,  713,  709,  713,    0,  712,    0,    0,  713,
        0,  712,    0,  709,  713,  711,    0,  711,  709,    0,
      709,    0,  711,    0,  709,  709,  712,  711,  712,  713,
      709,  713,  714,  712,  714,  715,  713,  715,  712,  714,
        0,  713,  715,  715,  714,    0,  716,  715,  716,    0,
        0,    0,    0,  716,    0,    0,    0,    0,  716,  714,
        0,  714,  715,    0,  715,  717,  714,  717,    0,  715,
      715,  714,  717,  716,  715,  716,    0,  717,  718,    0,
      716,    0,  718,  719,    0,  716,  720,  719,  718,    0,

      720,    0,  717,  719,  717,    0,  720,    0,  718,  717,
      721,    0,  721,  719,  717,  718,  720,  721,  721,  718,
      719,    0,  721,  720,  719,  718,    0,  720,    0,    0,
      719,    0,    0,  720,    0,  718,    0,  721,    0,  721,
      719,    0,  722,  720,  721,  721,  722,    0,  722,  721,
      723,  724,  723,  722,    0,  724,  723,  723,  722,    0,
        0,  724,  723,    0,    0,    0,  725,    0,    0,  722,
      725,  724,    0,  722,    0,  722,  725,  723,  724,  723,
      722,    0,  724,  723,  723,  722,  725,    0,  724,  723,
      726,  727,  726,  725,    0,  727,  726,  725,  724,    0,

        0,  727,  726,  725,    0,    0,    0,    0,    0,    0,
        0,  727,  726,  725,    0,    0,    0,  726,  727,  726,
      728,  729,  727,  726,  728,  729,    0,    0,  727,  726,
      728,  729,    0,  728,  729,    0,    0,    0,  727,  726,
      728,  729,    0,    0,    0,  730,  731,  728,  729,  730,
      731,  728,  729,    0,  731,  730,  731,  728,  729,  732,
      728,  729,    0,  732,    0,  730,  731,  728,  729,  732,
        0,    0,  730,  731,  733,    0,  730,  731,  733,  732,
        0,  731,  730,  731,  733,    0,  732,    0,    0,    0,
      732,    0,  730,  731,  733,  734,  732,    0,    0,  734,

      735,  733,    0,  734,  735,  733,  732,    0,  735,  734,
        0,  733,    0,  736,  735,    0,    0,  736,    0,  734,
        0,  733,  734,  736,  735,    0,  734,  735,  737,    0,
      734,  735,  737,  736,    0,  735,  734,    0,  737,    0,
      736,  735,    0,    0,  736,    0,  734,    0,  737,    0,
      736,  735,    0,  738,  739,  737,    0,  738,  739,  737,
      736,  738,  740,  738,  739,  737,  740,  739,    0,    0,
        0,    0,  740,  738,  739,  737,    0,  740,    0,    0,
      738,  739,  740,    0,  738,  739,    0,    0,  738,  740,
      738,  739,    0,  740,  739,  741,    0,    0,  741,  740,

      738,  739,  741,  742,  740,    0,  743,  742,  741,  740,
      743,    0,    0,  742,  743,    0,  743,    0,  741,    0,
        0,    0,  741,  742,    0,  741,  743,    0,    0,  741,
      742,    0,    0,  743,  742,  741,    0,  743,    0,    0,
      742,  743,  744,  743,  744,  741,  745,    0,  746,  744,
      742,    0,  746,  743,  744,  745,    0,  745,  746,    0,
      747,    0,  745,    0,  747,    0,    0,  745,  746,  744,
      747,  744,    0,  745,    0,  746,  744,    0,    0,  746,
      747,  744,  745,    0,  745,  746,  748,  747,    0,  745,
      748,  747,    0,    0,  745,  746,  748,  747,  749,  750,

      749,    0,    0,  750,  751,  749,  748,  747,  751,  750,
      749,    0,    0,  748,  751,    0,    0,  748,  752,  750,
        0,    0,  752,  748,  751,  749,  750,  749,  752,    0,
      750,  751,  749,  748,    0,  751,  750,  749,  752,    0,
      753,  751,    0,  754,  753,  752,  750,  754,  755,  752,
      753,  751,  755,  754,  756,  752,  756,  757,  755,  757,
      753,  756,    0,  754,  757,  752,  756,  753,  755,  757,
      754,  753,    0,    0,  754,  755,    0,  753,    0,  755,
      754,  756,    0,  756,  757,  755,  757,  753,  756,  759,
      754,  757,  758,  756,  758,  755,  757,    0,  759,  758,

      759,  760,    0,  760,  758,  759,    0,    0,  760,    0,
      759,    0,    0,  760,    0,    0,  759,    0,    0,  758,
        0,  758,    0,    0,    0,  759,  758,  759,  760,    0,
      760,  758,  759,    0,  761,  760,  761,  759,    0,  762,
      760,  761,    0,  761,    0,    0,  761,  763,    0,  763,
      762,    0,  762,    0,  763,  763,    0,  762,    0,  763,
        0,  761,  762,  761,    0,    0,  762,    0,  761,    0,
      761,    0,    0,  761,  763,    0,  763,  762,  764,  762,
        0,  763,  763,  764,  762,  764,  763,  765,  767,  762,
      764,  765,  767,    0,    0,  764,  766,  765,  767,  766,

      766,    0,    0,    0,    0,  764,  766,  765,  767,    0,
      764,    0,  764,    0,  765,  767,  766,  764,  765,  767,
        0,    0,  764,  766,  765,  767,  766,  766,  768,    0,
        0,    0,  768,  766,  765,  767,  769,  770,  768,    0,
      769,  770,    0,  766,  768,    0,  769,  770,  768,    0,
      771,    0,    0,    0,  771,  768,  769,  770,    0,  768,
      771,    0,    0,  769,  770,  768,    0,  769,  770,    0,
      771,  768,    0,  769,  770,  768,    0,  771,  772,    0,
      772,  771,    0,  769,  770,  772,  866,  771,  866,  867,
      772,  867,  868,  866,  868,    0,  867,  771,  866,  868,

        0,  867,    0,    0,  868,  772,  868,  772,    0,    0,
        0,    0,  772,  866,    0,  866,  867,  772,  867,  868,
      866,  868,  869,  867,  869,  866,  868,    0,  867,  869,
        0,  868,  870,  868,  869,  871,  870,  872,    0,  871,
        0,  872,  870,    0,    0,  871,    0,  872,    0,  869,
      873,  869,  870,    0,  873,  871,  869,  872,    0,  870,
      873,  869,  871,  870,  872,  873,  871,    0,  872,  870,
      873,    0,  871,    0,  872,  875,  875,  873,    0,  870,
      875,  873,  871,    0,  872,  874,  875,  873,  876,  874,
      876,    0,  873,  874,  876,    0,  875,  873,    0,  874,

      876,    0,  875,  875,    0,    0,    0,  875,    0,  874,
      876,    0,  874,  875,    0,  876,  874,  876,    0,    0,
      874,  876,  877,  875,  877,    0,  874,  876,    0,  877,
        0,  878,    0,  878,  877,    0,  874,  876,  878,  878,
        0,    0,  879,  878,  880,    0,  879,    0,  880,  877,
        0,  877,  879,    0,  880,    0,  877,    0,  878,    0,
      878,  877,  879,    0,  880,  878,  878,    0,  881,  879,
      878,  880,  881,  879,    0,  880,  882,    0,  881,  879,
      882,  880,    0,    0,    0,    0,  882,    0,  881,  879,
      883,  880,    0,    0,  883,  881,  882,    0,  884,  881,

      883,    0,  884,  882,    0,  881,  884,  882,    0,    0,
      883,    0,  884,  882,    0,  881,    0,  883,    0,    0,
        0,  883,  884,  882,  885,  884,  885,  883,  886,  884,
      887,  885,  886,  884,  887,    0,  885,  883,  886,  884,
      887,    0,  888,    0,    0,    0,  888,    0,  886,  884,
      887,  885,  888,  885,    0,  886,  889,  887,  885,  886,
      889,  887,  888,  885,  891,  886,  889,  887,  891,  888,
        0,  889,    0,  888,  891,  886,  889,  887,  890,  888,
      890,    0,  892,  889,  891,  890,  892,  889,    0,  888,
      890,  891,  892,  889,    0,  891,    0,    0,  889,    0,

      893,  891,  892,  889,  893,  890,    0,  890,    0,  892,
      893,  891,  890,  892,  895,  893,  895,  890,  894,  892,
      893,  895,  894,    0,    0,    0,  895,  893,  894,  892,
      896,  893,    0,  894,  896,    0,    0,  893,  894,    0,
      896,  895,  893,  895,  901,  894,  901,  893,  895,  894,
      896,  901,  897,  895,  897,  894,  901,  896,  897,    0,
      894,  896,  898,    0,  897,  894,  898,  896,    0,    0,
        0,  901,  898,  901,  897,    0,  899,  896,  901,  897,
      899,  897,  898,  901,    0,  897,  899,    0,    0,  898,
      900,  897,    0,  898,  900,    0,  899,    0,    0,  898,

      900,  897,    0,  899,  902,  900,  902,  899,    0,  898,
      900,  902,    0,  899,    0,    0,  902,  900,  904,    0,
      904,  900,    0,  899,    0,  904,    0,  900,    0,  903,
      904,  902,  900,  902,  903,    0,  903,  900,  902,    0,
        0,  903,  905,  902,  905,  904,  903,  904,    0,  905,
        0,    0,  904,    0,  905,    0,  903,  904,  906,    0,
      906,  903,    0,  903,    0,  906,  906,    0,  903,  905,
      906,  905,  907,  903,  907,    0,  905,    0,    0,  907,
        0,  905,    0,    0,  907,  906,    0,  906,  908,    0,
      908,    0,  906,  906,    0,  908,  909,  906,  909,  907,

      908,  907,    0,  909,  909,    0,  907,    0,  909,  910,
        0,  907,    0,  910,  911,  908,  911,  908,    0,  910,
        0,  911,  908,  909,  911,  909,  911,  908,    0,  910,
      909,  909,  912,    0,  912,  909,  910,    0,    0,  912,
      910,  911,    0,  911,  912,  913,  910,  913,  911,    0,
        0,  911,  913,  911,    0,    0,  910,  913,  914,  912,
      914,  912,    0,    0,    0,  914,  912,    0,  915,    0,
      914,  912,  913,    0,  913,    0,  915,    0,  915,  913,
        0,    0,    0,  915,  913,  914,    0,  914,  915,  916,
        0,  916,  914,    0,  918,  915,  916,  914,  918,    0,

      917,  916,  917,  915,  918,  915,    0,  917,    0,    0,
      915,    0,  917,    0,  918,  915,  916,    0,  916,    0,
        0,  918,  920,  916,    0,  918,    0,  917,  916,  917,
      919,  918,  919,  920,  917,  920,  921,  919,  921,  917,
      920,  918,  919,  921,  921,  920,    0,    0,  921,  920,
      922,    0,    0,    0,  922,    0,  922,  919,    0,  919,
      920,  922,  920,  921,  919,  921,  922,  920,    0,  919,
      921,  921,  920,    0,    0,  921,    0,  922,  923,    0,
      923,  922,  924,  922,  924,  923,  923,    0,  922,  924,
      923,    0,    0,  922,  924,    0,  925,    0,  925,    0,

      926,    0,    0,  925,  926,  923,    0,  923,  925,  924,
      926,  924,  923,  923,  927,    0,  924,  923,  927,    0,
      926,  924,    0,  925,  927,  925,    0,  926,    0,  927,
      925,  926,    0,    0,  927,  925,    0,  926,  930,  928,
      929,  927,  930,  928,  929,  927,    0,  926,  930,  928,
      929,  927,  928,  929,    0,    0,  927,    0,  930,  928,
      929,  927,    0,    0,  931,  930,  928,  929,  931,  930,
      928,  929,    0,    0,  931,  930,  928,  929,  932,  928,
      929,    0,  932,    0,  931,  930,  928,  929,  932,  934,
      933,  931,    0,  934,  933,  931,    0,  934,  932,    0,

      933,  931,    0,  934,  935,  932,    0,    0,  935,  932,
      933,  931,  935,  934,    0,  932,  934,  933,  935,    0,
      934,  933,    0,    0,  934,  932,    0,  933,  935,    0,
      934,  935,  937,  936,  936,  935,  937,  933,  936,  935,
      934,    0,  937,    0,  936,  935,  938,  937,    0,    0,
      938,    0,  937,    0,  936,  935,  938,    0,  939,  937,
      936,  936,  939,  937,    0,  936,  938,    0,  939,  937,
        0,  936,    0,  938,  937,  940,  940,  938,  939,  937,
      940,  936,    0,  938,  941,  939,  940,    0,  941,  939,
        0,    0,  941,  938,    0,  939,  940,  942,  941,  942,

        0,    0,  940,  940,  942,  939,    0,  940,  941,  942,
      943,  941,  943,  940,    0,  941,  943,  943,    0,  941,
        0,    0,  943,  940,  942,  941,  942,    0,    0,    0,
        0,  942,    0,    0,    0,  941,  942,  943,  944,  943,
      944,  945,    0,  943,  943,  944,  944,    0,    0,  943,
      944,    0,  945,    0,  945,    0,    0,    0,    0,  945,
        0,    0,    0,    0,  945,  944,    0,  944,  945,  946,
        0,    0,  944,  944,    0,    0,  947,  944,  947,  945,
      946,  945,  946,  947,    0,    0,  945,  946,  947,    0,
        0,  945,  946,    0,    0,    0,  946,    0,  948,    0,

        0,    0,  948,  947,    0,  947,    0,  946,  948,  946,
      947,  949,  949,  950,  946,  947,  949,  950,  948,  946,
        0,    0,  949,  950,    0,  948,  951,    0,    0,  948,
      951,    0,  949,  950,    0,  948,  951,    0,  949,  949,
      950,    0,    0,  949,  950,  948,  951,    0,    0,  949,
      950,  953,    0,  951,  952,    0,  952,  951,    0,  949,
      950,  952,  953,  951,  953,    0,  952,    0,    0,  953,
        0,    0,    0,  951,  953,    0,    0,    0,  953,  954,
        0,  952,    0,  952,    0,    0,    0,    0,  952,  953,
      954,  953,  954,  952,    0,    0,  953,  954,  955,    0,

      955,  953,  954, 1026,    0,  955,  954, 1026, 1027,  956,
      955,  956, 1027, 1026,    0,    0,  956,  954, 1027,  954,
        0,  956,    0, 1026,  954,  955,    0,  955, 1027,  954,
     1026,    0,  955,    0, 1026, 1027,  956,  955,  956, 1027,
     1026,    0, 1028,  956, 1028, 1027,    0,    0,  956, 1028,
     1026, 1029,    0, 1029, 1028, 1027,    0,    0, 1029,    0,
     1030,    0, 1030, 1029, 1031,    0,    0, 1030, 1031, 1028,
        0, 1028, 1030, 1032, 1031,    0, 1028, 1032, 1029,    0,
     1029, 1028, 1048, 1032, 1031, 1029, 1048, 1030, 1032, 1030,
     1029, 1031, 1048, 1032, 1030, 1031, 1033,    0, 1033, 1030,

     1032, 1031, 1048, 1033, 1032, 1034,    0, 1034, 1033, 1048,
     1032, 1031, 1034, 1048, 1035, 1032, 1035, 1034,    0, 1048,
     1032, 1035,    0, 1033,    0, 1033, 1035,    0,    0, 1048,
     1033,    0, 1034,    0, 1034, 1033,    0,    0, 1036, 1034,
     1036, 1035,    0, 1035, 1034, 1036,    0,    0, 1035,    0,
     1036,    0,    0, 1035, 1037, 1037, 1037,    0,    0, 1038,
        0, 1037, 1039,    0, 1039, 1036, 1037, 1036, 1038, 1039,
     1038,    0, 1036,    0, 1039, 1038,    0, 1036,    0,    0,
     1038, 1037, 1037, 1037,    0,    0, 1038,    0, 1037, 1039,
        0, 1039, 1040, 1037, 1040, 1038, 1039, 1038,    0, 1040,

     1040, 1039, 1038, 1041, 1040, 1041, 1042, 1038,    0,    0,
     1041,    0,    0,    0,    0, 1041, 1042,    0, 1042, 1040,
        0, 1040, 1043, 1042, 1043,    0, 1040, 1040, 1042, 1043,
     1041, 1040, 1041, 1042, 1043,    0,    0, 1041,    0,    0,
        0,    0, 1041, 1042,    0, 1042,    0,    0, 1044, 1043,
     1042, 1043,    0,    0,    0, 1042, 1043, 1044, 1045, 1044,
     1045, 1043,    0,    0, 1044, 1045, 1046,    0, 1046, 1044,
     1045,    0,    0, 1046,    0, 1044,    0,    0, 1046,    0,
        0,    0,    0,    0, 1044, 1045, 1044, 1045,    0,    0,
        0, 1044, 1045, 1046, 1049, 1046, 1044, 1045, 1049, 1047,

     1046, 1047,    0,    0, 1049, 1046, 1047,    0, 1050,    0,
     1050, 1047,    0,    0, 1049, 1050,    0,    0,    0,    0,
     1050, 1049, 1051,    0, 1051, 1049, 1047,    0, 1047, 1051,
     1051, 1049,    0, 1047, 1051, 1050,    0, 1050, 1047,    0,
        0, 1049, 1050, 1052,    0, 1052, 1053, 1050, 1053, 1051,
     1052, 1051, 1054, 1053, 1054, 1052, 1051, 1051, 1053, 1054,
        0, 1051,    0,    0, 1054,    0,    0,    0,    0,    0,
     1052,    0, 1052, 1053,    0, 1053, 1055, 1052, 1055, 1054,
     1053, 1054, 1052, 1055,    0, 1053, 1054, 1056, 1055, 1056,
     1057, 1054, 1057,    0, 1056,    0,    0, 1057,    0, 1056,

        0,    0, 1057, 1055,    0, 1055, 1058,    0, 1058,    0,
     1055,    0, 1058, 1058, 1056, 1055, 1056, 1057, 1058, 1057,
        0, 1056,    0,    0, 1057,    0, 1056, 1059, 1060, 1057,
        0, 1059, 1060, 1058,    0, 1058, 1060, 1059,    0, 1058,
     1058, 1063, 1060, 1063,    0, 1058, 1061, 1059, 1063,    0,
     1061,    0, 1060, 1063, 1059, 1060, 1061,    0, 1059, 1060,
     1064, 1062, 1064, 1060, 1059, 1062, 1061, 1064, 1063, 1060,
     1063, 1062, 1064, 1061, 1059, 1063,    0, 1061,    0, 1060,
     1063, 1062,    0, 1061, 1065,    0, 1065, 1064, 1062, 1064,
        0, 1065, 1062, 1061, 1064, 1066, 1065, 1066, 1062, 1064,

        0,    0, 1066, 1067,    0,    0,    0, 1066, 1062,    0,
        0, 1065,    0, 1065, 1067,    0, 1067,    0, 1065,    0,
        0, 1067, 1066, 1065, 1066, 1068, 1067, 1068,    0, 1066,
     1067,    0, 1068,    0, 1066,    0,    0, 1068, 1069,    0,
     1069, 1067,    0, 1067,    0, 1069, 1069,    0, 1067,    0,
     1069, 1070, 1068, 1067, 1068, 1070, 1071,    0,    0, 1068,
     1071, 1070,    0,    0, 1068, 1069, 1071, 1069,    0,    0,
     1072, 1070, 1069, 1069, 1072, 1073, 1071, 1069, 1070, 1073,
     1072,    0, 1070, 1071,    0, 1073,    0, 1071, 1070,    0,
     1072,    0,    0, 1071,    0, 1073,    0, 1072, 1070,    0,

        0, 1072, 1073, 1071,    0,    0, 1073, 1072, 1074, 1075,
     1074, 1075, 1073,    0, 1074, 1075, 1076, 1072, 1076,    0,
     1074, 1075, 1073, 1076,    0,    0,    0, 1077, 1076, 1077,
     1074, 1075,    0,    0, 1077, 1074, 1075, 1074, 1075, 1077,
        0, 1074, 1075, 1076,    0, 1076,    0, 1074, 1075,    0,
     1076,    0,    0,    0, 1077, 1076, 1077, 1074, 1075,    0,
     1078, 1077, 1078, 1079,    0, 1079, 1077, 1078,    0, 1080,
     1079, 1080, 1078,    0,    0, 1079, 1080,    0,    0,    0,
        0, 1080,    0,    0,    0,    0,    0, 1078,    0, 1078,
     1079,    0, 1079, 1081, 1078, 1081, 1080, 1079, 1080, 1078,

     1081, 1083, 1079, 1080, 1082, 1081, 1082,    0, 1080,    0,
        0, 1082, 1083,    0, 1083,    0, 1082,    0,    0, 1083,
     1081,    0, 1081,    0, 1083,    0,    0, 1081, 1083, 1084,
        0, 1082, 1081, 1082,    0,    0,    0,    0, 1082, 1083,
     1084, 1083, 1084, 1082, 1085,    0, 1083, 1084,    0,    0,
        0, 1083, 1084, 1085,    0, 1085, 1084,    0,    0,    0,
     1085,    0,    0,    0,    0, 1085,    0, 1084,    0, 1084,
        0, 1085,    0,    0, 1084,    0, 1086,    0, 1086, 1084,
     1085,    0, 1085, 1086, 1086,    0,    0, 1085, 1086, 1087,
        0, 1087, 1085,    0,    0, 1088, 1087, 1088,    0,    0,

        0, 1087, 1088, 1086,    0, 1086,    0, 1088,    0,    0,
     1086, 1086,    0,    0,    0, 1086, 1087,    0, 1087, 1089,
        0, 1089, 1088, 1087, 1088, 1090, 1089, 1090, 1087, 1088,
        0, 1089, 1090, 1091, 1088, 1091,    0, 1090,    0, 1091,
     1091,    0,    0,    0,    0, 1091, 1089,    0, 1089, 1092,
        0, 1092, 1090, 1089, 1090,    0, 1092,    0, 1089, 1090,
     1091, 1092, 1091, 1133, 1090, 1133, 1091, 1091,    0,    0,
     1133,    0, 1091,    0,    0, 1133, 1092, 1134, 1092, 1134,
        0,    0,    0, 1092, 1134,    0,    0,    0, 1092, 1134,
     1133, 1135, 1133, 1135,    0,    0,    0, 1133, 1135,    0,

        0,    0, 1133, 1135, 1134, 1136, 1134, 1136,    0, 1137,
        0, 1134, 1136, 1137,    0,    0, 1134, 1136, 1135, 1137,
     1135,    0,    0, 1138,    0, 1135,    0, 1138,    0, 1137,
     1135, 1139, 1136, 1138, 1136, 1139, 1137,    0,    0, 1136,
     1137, 1139,    0, 1138, 1136, 1140, 1137,    0,    0, 1140,
     1138, 1139,    0, 1141, 1138, 1140, 1137, 1141, 1139, 1142,
     1138, 1141, 1139, 1142,    0, 1140,    0, 1141, 1139, 1142,
     1138, 1143, 1140,    0,    0, 1143, 1140, 1141, 1139, 1142,
     1141, 1143, 1140, 1144, 1141, 1145, 1142, 1144, 1141, 1145,
     1142, 1143, 1140, 1144, 1141, 1145, 1142, 1146, 1143,    0,

     1145, 1146, 1143, 1144, 1141, 1145, 1142, 1146, 1143, 1147,
     1144, 1148, 1145, 1147, 1144, 1148, 1145, 1146, 1143, 1147,
     1144, 1148, 1145,    0, 1146,    0,    0, 1145, 1146, 1147,
     1144, 1148, 1145, 1149, 1146,    0, 1147, 1149, 1148, 1150,
     1147, 1150, 1148, 1149, 1146, 1150, 1147, 1151, 1148, 1151,
     1152, 1150, 1152, 1149, 1151,    0, 1147, 1152, 1148, 1151,
     1149, 1150, 1152,    0, 1149,    0, 1150,    0, 1150,    0,
     1149,    0, 1150,    0, 1151,    0, 1151, 1152, 1150, 1152,
     1149, 1151,    0, 1153, 1152, 1153, 1151,    0, 1150, 1152,
     1153, 1154,    0, 1154,    0, 1153, 1155, 1154, 1154,    0,

     1155, 1156,    0, 1154,    0, 1156, 1155,    0,    0, 1157,
     1153, 1156, 1153, 1157,    0,    0, 1155, 1153, 1154, 1157,
     1154, 1156, 1153, 1155, 1154, 1154,    0, 1155, 1156, 1157,
     1154, 1158, 1156, 1155,    0, 1158, 1157,    0, 1156,    0,
     1157, 1158,    0, 1155,    0, 1159, 1157,    0, 1156, 1159,
        0, 1158,    0, 1160,    0, 1159, 1157, 1160, 1158, 1160,
     1159,    0, 1158, 1160,    0, 1159,    0,    0, 1158,    0,
        0, 1161, 1159, 1160,    0, 1161, 1159,    0, 1158, 1162,
     1160, 1161, 1159, 1162, 1160,    0, 1160, 1159,    0, 1162,
     1160, 1161, 1159,    0,    0,    0,    0, 1163, 1161, 1162,

     1160, 1163, 1161,    0,    0, 1164, 1162, 1163, 1161, 1164,
     1162,    0, 1163,    0,    0, 1164, 1162, 1163, 1161,    0,
        0,    0,    0,    0, 1163, 1164, 1162, 1165, 1163,    0,
        0, 1165, 1164,    0, 1163,    0, 1164, 1165,    0, 1163,
     1165, 1166, 1164,    0, 1163, 1166, 1168, 1165,    0, 1166,
     1168, 1166, 1164,    0, 1165, 1167, 1168,    0, 1165, 1167,
        0, 1166,    0,    0, 1165, 1167, 1168, 1165, 1166,    0,
     1167,    0, 1166, 1168, 1165, 1167, 1166, 1168, 1166,    0,
     1169, 1170, 1167, 1168, 1169, 1170, 1167,    0, 1166,    0,
     1169, 1170, 1167, 1168, 1191,    0,    0, 1167, 1191,    0,

     1169, 1170, 1167,    0, 1191,    0, 1190, 1169, 1170,    0,
     1190, 1169, 1170,    0, 1191,    0, 1190, 1169, 1170, 1190,
     1192, 1191,    0,    0, 1192, 1191, 1190, 1169, 1170,    0,
     1192, 1191, 1193, 1190, 1194, 1192, 1193, 1190, 1194,    0,
     1192, 1191, 1193, 1190, 1194,    0, 1190, 1192,    0,    0,
        0, 1192, 1193, 1190, 1194,    0,    0, 1192,    0, 1193,
     1195, 1194, 1192, 1193, 1195, 1194,    0, 1192, 1196, 1193,
     1195, 1194, 1196, 1197,    0, 1195,    0, 1197, 1196, 1193,
     1195, 1194,    0, 1197,    0,    0,    0, 1195, 1196,    0,
        0, 1195,    0, 1197,    0, 1196,    0, 1195,    0, 1196,

     1197,    0, 1195,    0, 1197, 1196,    0, 1195, 1198,    0,
     1197,    0, 1198,    0,    0, 1196,    0, 1199, 1198, 1199,
     1197, 1198,    0,    0, 1199, 1200,    0, 1200, 1198, 1199,
        0, 1201, 1200, 1201,    0, 1198,    0, 1200, 1201, 1198,
        0,    0,    0, 1201, 1199, 1198, 1199,    0, 1198,    0,
        0, 1199, 1200,    0, 1200, 1198, 1199,    0, 1201, 1200,
     1201, 1202, 1203, 1202, 1200, 1201, 1203, 1204, 1202,    0,
     1201, 1204, 1203, 1202,    0,    0, 1205, 1204, 1204,    0,
     1205, 1206, 1203,    0,    0, 1206, 1205, 1204, 1202, 1203,
     1202, 1206,    0, 1203, 1204, 1202, 1205,    0, 1204, 1203,

     1202, 1206,    0, 1205, 1204, 1204,    0, 1205, 1206, 1203,
     1217, 1217, 1206, 1205, 1204,    0, 1218, 1219, 1206,    0,
     1218, 1219, 1220, 1205, 1220,    0, 1218, 1219, 1206, 1220,
        0,    0,    0,    0, 1220, 1217, 1218, 1219,    0, 1217,
        0,    0,    0, 1218, 1219, 1217,    0, 1218, 1219, 1220,
        0, 1220,    0, 1218, 1219, 1217, 1220,    0, 1221,    0,
     1221, 1220, 1217, 1218, 1219, 1221, 1217, 1222,    0, 1222,
     1221, 1223, 1217, 1223, 1222,    0,    0,    0, 1223, 1222,
        0,    0, 1217, 1223,    0, 1221,    0, 1221,    0, 1224,
        0,    0, 1221, 1224, 1222,    0, 1222, 1221, 1223, 1224,

     1223, 1222,    0, 1232, 1233, 1223, 1222, 1232, 1233, 1224,
     1223,    0,    0, 1232, 1233, 1234, 1224, 1234,    0,    0,
     1224,    0, 1234, 1232, 1233,    0, 1224, 1234,    0,    0,
     1232, 1233,    0,    0, 1232, 1233, 1224,    0,    0,    0,
     1232, 1233, 1234,    0, 1234, 1240,    0, 1240,    0, 1234,
     1232, 1233, 1240,    0, 1234,    0,    0, 1240,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1240,    0, 1240,    0,    0,    0,    0, 1240,
        0,    0,    0,    0, 1240, 1272, 1272, 1272, 1272, 1272,
     1273,    0,    0, 1273, 1273, 1275, 1275, 1275,    0, 1275,

     1276,    0, 1276, 1276, 1276, 1277,    0, 1277, 1277, 1277,
     1278,    0, 1278, 1278, 1278, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2945 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2959 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3246 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1272 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1271 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 164:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 171:
#line 237 "flex_lexer.l"
case 172:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 173:
YY_RULE_SETUP
#line 247 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 252 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 262 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 268 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 273 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 274 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 275 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 276 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 277 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 279 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 281 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4241 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1272 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1272 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1271);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 281 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

