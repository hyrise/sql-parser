#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 187
#define YY_END_OF_BUFFER 188
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1344] =
    {   0,
        0,    0,  184,  184,    2,    2,  188,  186,    4,    4,
      186,  186,  175,  182,  175,  175,  179,  175,  175,  175,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  175,  184,  185,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  170,    0,    1,    0,
      177,  176,  179,  172,  171,  169,  173,  181,  181,  181,

      181,  181,  181,   12,  181,  181,  181,   19,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,   72,  181,  181,   75,   84,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  102,  181,  181,
      107,  110,  111,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  147,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  174,  184,  183,    2,    2,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  180,    0,  176,    5,
      181,    7,  181,  181,   10,  181,   13,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,   34,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,   49,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,   60,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
       79,  181,  181,   87,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  103,  181,  181,  181,  108,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  133,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  148,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  181,  181,  181,  181,  181,  181,  181,  181,  181,
       20,  181,   22,   23,   24,  181,  181,  181,   29,  181,
      181,  181,   32,   35,  181,  181,  181,  181,  181,   41,
      181,  181,  181,   46,   47,  181,  181,  181,  181,  181,
      181,  181,  181,   57,  181,  181,  181,   62,   63,  181,
      181,   67,  181,   69,   70,  181,  181,  181,  181,  181,

      181,   83,  181,   86,   88,   89,  181,   91,  181,  181,
       94,  181,  181,  181,  181,  181,  105,  181,  181,  181,
      181,  114,  181,  181,  117,  181,  181,  181,  181,  122,
      181,  181,  181,  181,  127,  181,  181,  181,  181,  135,
      136,  181,  181,  181,  181,  181,  143,  144,  145,  181,
      150,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      160,  181,  162,  181,  164,  165,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    6,    8,  181,   11,  181,   15,  181,

      181,  181,  181,  181,  181,  181,  181,  181,   31,  181,
      181,  181,  181,  181,  181,   40,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,   56,   58,  181,
      181,  181,   65,  181,   71,   73,  181,   76,   77,  181,
      181,  181,  181,   90,   92,  181,   95,   96,  181,   99,
      181,  181,  181,  181,  112,  113,  181,  181,  181,  181,
      181,  121,  181,  181,  125,  181,  181,  181,  181,  134,
      181,  181,  181,  140,  181,  181,  181,  181,  181,  153,
      181,  181,  181,  157,  181,  181,  181,  163,  166,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  181,   14,  181,
       17,  181,  181,  181,   25,   27,  181,   30,  181,  181,

      181,  181,  181,   39,  181,   43,  181,   45,  181,   50,
       51,  181,   53,  181,  181,  181,   61,   64,   66,   68,
       74,   78,  181,  181,  181,   85,   93,   97,  100,  181,
      104,  181,  109,  181,  181,  181,  181,  181,  123,  181,
      181,  128,  130,  132,  181,  138,  181,  141,  181,  181,
      181,  181,  181,  154,  155,  156,  158,  181,  181,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    9,   16,   18,   21,  181,   26,   28,
      181,  181,  181,   37,   38,  181,  181,  181,   52,   54,
       55,  181,   80,  181,  181,   98,  101,  181,  181,  181,
      181,  119,  120,  181,  181,  129,  131,  181,  139,  181,
      181,  181,  181,  181,  159,  161,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  181,    0,   33,  181,   42,   44,   48,  181,  181,
       82,  106,  181,  181,  181,  124,  126,  137,  181,  181,
      181,  151,  181,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  181,    0,  181,
       59,   81,  181,  116,  118,  142,  146,  181,  152,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    0,    0,   36,  115,  181,    2,    2,

        2,    2,    2,    2,    0,    0,  167,  149,    2,    2,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,  168,    2,    2,    0,    2,    0,    2,
      178,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1351] =
    {   0,
        0,    0,  852,  842,   76,    0,  842, 8757,  151,  153,
      786,    0, 8757, 8757,  149,  148,  160,  159,  777,  775,
      156,  156,  165,  210,  202,  255,  151,  163,  265,  152,
      171,  215,  218,  244,  295,  257,    0,  309,  349,  392,
      163,  279,  226,  180,  676,    0,  741,    0,  237,  251,
      696,  702,    0,    0,  243,  378,  451,  237,  682,  680,
      470,  546,  600,  652,  700,  752,  384,  458,  795,  466,
      532,  533,  534,  846,  895,  944,  547,  602,  990, 1042,
      307,  650,  587,  651,  596,  301, 8757,  666, 8757,  636,
     1107, 1117, 1128, 8757, 8757, 8757, 8757,    0,  218,  243,

      300,  328,  250,  305,  379,  315,  319,    0,  376,  354,
      694,  389,  345,  440,  710,  387,  388,  436,  439,  476,
      463,  763,  460,  465,  480,  542,  481,  501,  521,  535,
      591,  539,  546,    0,  584,  581,  627,  592,  607,  637,
      657,  658,  717,  646,  658,  686,  681,  734,  705,  720,
      717,    0,  751,  739,  757,  745,  764,  766,  755,  802,
      770,  799,  770,  812,  811,  804,  816,  800,  822,  823,
      842,  824,  818,  817,  856,  861,  858,  856,  860,  880,
      870,  859,  879, 8757,    0, 8757,    0,  396,    0,  631,
        0,  614, 1138, 1148, 1159,    0,    0,    0,    0,  906,

      942,  955, 1015, 1156, 1034, 1155, 1202, 1152, 1040, 1195,
     1199, 1232, 1272, 1257, 1272, 1301, 1353, 1350, 1361, 1388,
     1402, 1451, 1420, 1500, 1423, 1472, 1499, 1515, 1540, 1534,
     1554, 1559, 1575, 1569, 1588, 1611, 1613, 1628, 1677, 1644,
     1667, 1679, 1720, 1768, 1820, 1718, 1746, 1812, 1821, 1861,
     1864, 1885, 1908, 1877, 1921, 1944, 1746, 1956, 1988, 1786,
     1963, 1993, 2019, 2023, 2037, 2086, 2076, 2077, 2106, 2121,
     2140, 2145, 2166, 2179, 2205, 2217, 1699, 2268, 2204, 2219,
     2260, 2277, 2303, 2312, 2325,    0, 8757,  601, 2390,    0,
      882,    0,  903,  910,    0,  925,    0,  912,  925,  916,

      932,  938,  943, 1158,  945,  948,  968,  965,  979, 1008,
      991,  993, 1008,  995, 1005, 1050, 1062, 1210, 1061, 1157,
     1145, 1170, 1196, 1220, 1213,    0, 1231, 1229, 1262, 1248,
     1256, 1256, 1256, 1271, 1279, 1286, 1287, 1292, 1307, 1318,
     1301, 1320, 1321, 1311, 1316, 1325, 1324, 1339, 1346, 1347,
     1383, 1339, 1370,    0, 1370, 1401, 1409, 1415, 1457, 1415,
     1422, 1430, 1432, 1439,    0, 1466, 1460, 1455, 1461, 1478,
     1496, 1499, 1612, 1526, 1663, 1537, 1564, 1566, 1603, 1599,
     1634, 1635, 1629, 1646, 1671, 1707,    0, 1704, 1717, 1732,
     1764, 1760, 1766, 1777, 1774, 1782, 1801, 1814,    0, 1811,

     1916, 1812, 1875, 1815, 1836, 1829, 1826, 1852, 1856, 1919,
     1928, 1935, 1933,    0,  600, 2400, 2393, 2394, 2395, 2396,
     2319, 2430, 2438, 2439, 2450, 2478, 2486, 2491, 2493, 2507,
     2556, 2532, 2557, 2570, 2606, 2582, 2618, 2616, 2647, 2659,
     2661, 2675, 2700, 2718, 2715, 2750, 2759, 2768, 2794, 2809,
     2807, 2812, 2848, 2857, 2862, 2892, 2864, 2867, 2907, 2918,
     2918, 2940, 2959, 2967, 2975, 3005, 3018, 3019, 3054, 3066,
     3067, 3079, 3101, 3120, 3123, 3125, 3149, 3161, 3173, 3188,
     3192, 3216, 3217, 3236, 3261, 3313, 3239, 3275, 3310, 3274,
     3335, 3338, 3363, 3370, 3384, 3398, 3409, 3423, 3438, 3490,

     3438, 3540, 3473, 3516, 3457, 3568, 3527, 3576, 3589, 3612,
     3624, 3629, 3632, 3637, 3673, 3678, 3681, 3680, 3688, 3724,
     3728, 3737, 3770, 3773, 3790, 3793, 3819, 3822, 3842, 3847,
     3844, 3892, 3863, 3891, 3919, 3933, 3947, 3963, 3977, 4001,
      582, 1935, 1961, 1959, 1971, 1982, 2011, 2023, 2022, 2036,
        0, 2047,    0,    0, 2056, 2053, 2058, 2069,    0, 2070,
     2076, 2091, 2077,    0, 2123, 2127, 2123, 2136, 2158, 2146,
     2166, 2166, 2177,    0,    0, 2194, 2184, 2207, 2217, 2219,
     2247, 2253, 2253,    0, 2242, 2248, 2263,    0,    0, 2266,
     2260,    0, 2273,    0, 2269, 2291, 2280, 2300, 2318, 2323,

     2454,    0, 2330,    0,    0,    0, 2326,    0, 2335, 2344,
        0, 2401, 2394, 2399, 2398, 2458,    0, 2467, 2493, 2490,
     2495,    0, 2502, 2515,    0, 2524, 2562, 2566, 2564,    0,
     2560, 2599, 2600, 2623,    0, 2616, 2622, 2642, 2644,    0,
        0, 2639, 2664, 2668, 2674, 2666,    0,    0, 2664, 2671,
        0, 2715, 2701, 2715, 2710, 2733, 2719, 2737, 2758, 2770,
        0, 2758,    0, 2776,    0, 2794,  544, 4012, 4015, 4040,
     4059, 4062, 4069, 4064, 4105, 4113, 4116, 4125, 4154, 4155,
     4173, 4195, 4207, 4208, 4209, 4237, 4244, 4261, 4262, 4287,
     4287, 4303, 4334, 4345, 4369, 4387, 4395, 4412, 4428, 4431,

     4437, 4461, 4475, 4489, 4503, 4517, 4533, 4559, 4550, 4576,
     4584, 4598, 4610, 4612, 4624, 4642, 4656, 4654, 4661, 4691,
     4697, 4708, 4709, 4743, 4751, 4754, 4799, 4795, 4796, 4837,
     4840, 4841, 4881, 4884, 4885, 4924, 4929, 4932, 4931, 4934,
     4974, 4974, 4982, 5018, 5026, 5027, 5056, 5068, 5071, 5080,
     5109, 5110, 5128, 5154, 5162, 5163, 5176, 5202, 5204, 5228,
     5216, 5250, 5255, 5259, 5272, 5294, 5302, 5301, 5307, 5326,
     5348, 5351, 5356, 5370, 5358, 5377, 5401, 5407, 5415, 5431,
     5450, 5464, 5461, 5492, 5504, 5509, 5543, 5544, 5545, 5557,
     5558, 5589,  543,    0,    0, 2802,    0, 2824,    0, 2828,

     2818, 2841, 2843, 2872, 2897, 2892, 2905, 2924,    0, 2921,
     2927, 2925, 2965, 2962, 2970,    0, 2968, 2964, 2971, 2990,
     2987, 3004, 3005, 3007, 3009, 3025, 3047,    0,    0, 3030,
     3043, 3062, 3067, 3089,    0,    0, 3097,    0,    0, 3100,
     3117, 3141, 3129,    0,    0, 3138,    0,    0, 3141, 3164,
     3191, 3176, 3212, 3230,    0,    0, 3253, 3240, 3270, 3278,
     3284,    0, 3300, 3303,    0, 3329, 3333, 3344, 3334,    0,
     3350, 3362, 3372, 3360, 3374, 3384, 3412, 3426, 3419,    0,
     3441, 3462, 3462,    0, 3463, 3499, 3501,    0,    0,  536,
     5592, 5593, 5633, 5634, 5645, 5646, 5684, 5685, 5703, 5698,

     5738, 5730, 5753, 5770, 5773, 5778, 5772, 5792, 5822, 5831,
     5829, 5830, 5856, 5880, 5881, 5885, 5905, 5910, 5929, 5944,
     5958, 5931, 5970, 5984, 5983, 5992, 6018, 6033, 6033, 6037,
     6075, 6078, 6079, 6119, 6122, 6123, 6163, 6171, 6176, 6187,
     6217, 6218, 6231, 6259, 6262, 6270, 6275, 6306, 6317, 6330,
     6358, 6361, 6372, 6378, 6412, 6420, 6448, 6456, 6470, 6482,
     6494, 6506, 6524, 6536, 6550, 6564, 6538, 6562, 6603, 6594,
     6601, 6619, 6637, 6661, 6667, 6680, 6691, 6718, 6720, 6744,
     6752, 6754, 6773, 6797, 6794, 6803,  526, 3499,    0, 3492,
        0, 3493, 3506, 3497, 3502,    0, 3524,    0, 3525, 3536,

     3555, 3559, 3555,    0, 3575,    0, 3586,    0, 3579,    0,
        0, 3589,    0, 3591, 3598, 3614,    0,    0,    0,    0,
        0,    0, 3625, 3643, 3694,    0,    0, 3713,    0, 3725,
        0, 3740,    0, 3725, 3737, 3741, 3749, 3741,    0, 3783,
     3793, 3782, 3784,    0, 3796,    0, 3827,    0, 3843, 3880,
     3889, 3878, 3896,    0,    0,    0,    0, 3895, 3909,  525,
     6832, 6841, 6839, 6848, 6857, 6850, 6886, 6893, 6901, 6902,
     6937, 6943, 6946, 6988, 6984, 6997, 7028, 7039, 7042, 7070,
     7083, 7084, 7114, 7125, 7127, 7136, 7161, 7170, 7172, 7190,
     7214, 7222, 7236, 7244, 7258, 7266, 7280, 7292, 7294, 7316,

     7179, 7321, 7335, 7351, 7365, 7359, 7389, 7409, 7412, 7414,
     7417, 7453, 7462, 7471, 7469, 7497, 7505, 7513, 7516, 7546,
     7549, 7565, 7593, 7596, 7626, 7629, 7637, 7640, 7670, 7673,
     7681, 7684,  529,    0,    0,    0,    0, 3918,    0,    0,
      436, 3921, 3934,    0,    0, 3931, 3921, 3939,    0,    0,
        0, 3937,    0, 3973, 3968,    0,    0, 3972, 3990, 3990,
     3996,    0,    0, 3991, 4010,    0,    0, 4015,    0, 4025,
     4046, 4055, 4073, 4080,    0,    0,  527, 7717, 7725, 7726,
     7761, 7769, 7774, 7783, 7815, 7813, 7828, 7827, 7853, 7866,
     7867, 7879, 7891, 7892, 7917, 7926, 7927, 7967, 7968, 7971,

     8009, 8012, 8020, 8029, 8054, 8055, 8063, 8096, 8107, 8110,
     8138, 8151, 8154, 8162, 8197, 8200, 8217, 8220, 8225, 8249,
      526, 4091, 4203,    0, 4107,    0,    0,    0, 4128, 4119,
        0,    0, 4154, 4161, 4169,    0,    0,    0, 4167, 4195,
     4219,    0, 4250,  524, 8261, 4327, 8273, 8275, 8287, 8299,
     8311, 8323, 8341, 8349, 8367, 8389, 8394, 8398, 8424, 8438,
     8442, 8467, 8481, 8486, 8489, 8511,  514,  438, 4249, 4273,
        0,    0, 4291,    0,    0,    0,    0, 4305,    0,  506,
     8549, 4309, 8530, 8535, 8564, 8537, 8556, 8580, 8591, 8599,
     8619, 8624,  470, 4354, 4302,    0,    0, 4322,  468, 4380,

     4317, 8638, 8643, 8645,  465, 4340, 8757,    0,  418, 4349,
        0, 8653,  418, 4344,  390, 4377,  388, 4379,  386, 4387,
      347, 4421,  343, 4426,  338, 4445,  335, 4449,  334, 4459,
      332, 4461,  303, 8757,  293,    0,  299,  286,  248,  243,
     8757,    0, 8757, 8726, 8731,  201, 8736, 8741, 8746, 8751
    } ;

static const flex_int16_t yy_def[1351] =
    {   0,
     1343,    1, 1344, 1344, 1343,    5, 1343, 1343, 1343, 1343,
     1343, 1345, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1343, 1347, 1343, 1348, 1348, 1343,
     1348, 1349, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1350, 1350,   62,   62,   62,   63,   65,   62,   65,   62,
       62,   62,   62,   63,   63,   63,   62,   62,   62,   62,
       65,   62,   62,   62, 1348, 1343, 1343, 1345, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1346, 1346, 1346,

     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1343, 1347, 1343, 1348, 1348, 1348, 1349,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,   62,

       62,   62,   65,   65,   65,   65,   65,   65,   62,   62,
       65,   65,   65,   62,   62,   62,   65,   65,   65,   62,
       65,   65,   65,   62,   65,   65,   62,   65,   62,   65,
       62,   62,   65,   65,   65,   65,   62,   62,   65,   65,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   62,   62,   62,   62,
       62,   62,   65,   62,   62,   62,   63,   62,   62,   62,
       65,   62,   62,   62,   62, 1348, 1343, 1343, 1343, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,

     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,

     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1348, 1348, 1348,   62,   62,   62,   62,
       65,   65,   65,   65,   62,   62,   62,   62,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   62,
       65,   65,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   65,   65,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   65,
       65,   65,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   65,   65,   65,   62,   62,   62,   62,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   65,   65,   62,   62,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,
     1343, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,

     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1348,   65,   65,   62,
       62,   62,   65,   62,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   62,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   62,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   65,   65,   62,   62,   62,   65,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   65, 1343, 1346, 1346, 1346, 1346, 1346, 1346, 1346,

     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1348,
       65,   65,   65,   65,   62,   62,   62,   62,   62,   62,

       62,   65,   65,   62,   62,   62,   65,   62,   62,   62,
       65,   62,   62,   62,   62,   65,   62,   62,   62,   62,
       62,   65,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   62,   65,   65,
       65,   65,   65,   65,   65,   62,   65,   65,   65,   65,
       65,   65,   65,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   65,   65,   65,   65,   65, 1343, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,

     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1348,
       62,   62,   65,   65,   65,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       65,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65, 1343, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1348,   65,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   65,   65,   65,   65,   65,

       65,   65,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   62,   62,   62,   62,
     1343, 1346, 1343, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1348,   62, 1348,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   65,   65,
       65,   62,   62,   62,   62,   62, 1343, 1346, 1343, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1348,
       62, 1348,   62,   62,   62,   65,   65,   65,   65,   65,
       62,   62, 1343, 1343, 1343, 1346, 1346, 1346, 1348, 1348,

     1348,   62,   62,   65, 1343, 1343, 1343, 1346, 1348, 1348,
     1348,   65, 1343, 1343, 1348, 1348, 1343, 1343, 1348, 1348,
     1343, 1343, 1348, 1348, 1343, 1343, 1348, 1348, 1343, 1343,
     1348, 1348, 1343, 1343, 1348, 1348, 1343, 1348, 1343, 1348,
     1343, 1348,    0, 1343, 1343, 1343, 1343, 1343, 1343, 1343
    } ;

static const flex_int16_t yy_nxt[8834] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  129,  131,  106,  109,  139,  101,
      130,  102,  107,  132,  110,  103,  104,  140,  176,  133,

      177,  111,  108,  178,  112,   98,  183,  113,   99,  105,
      100,  129,  131,  106,  109,  139,  101,  130,  102,  107,
      132,  110,  103,  104,  140,  176,  133,  177,  111,  108,
      178,  112,  114,  183,  113,  119,  115,  120,  188,   86,
      116,  141,  121,  290,  144,  142,  117,  122,  145,  118,
      191,  143,   86,   86,  146,  181,  182,  196,  197,  114,
     1342,  192,  119,  115,  120, 1341,  147,  116,  141,  121,
      290,  144,  142,  117,  122,  145,  118,  123,  143,  156,
      148,  146,  181,  182,  291,  124,  149,  150,  125,  296,
      157,  126,  134,  147,  127, 1340,  158,  128,  135,  136,

      137,  179,   86,   86,  123,  138,  156,  148, 1339,  180,
     1338,  291,  124,  149,  150,  125,  296,  157,  126,  134,
     1337,  127,  151,  158,  128,  135,  136,  137,  179,  297,
      152,  159,  138,  292,  153,  160,  180,  154,  155,  161,
      200,  293,  278,  301,  279,  162, 1335,  280, 1333,  151,
      294, 1331,  200,  295, 1329,  302,  297,  152,  159, 1327,
      292,  153,  160, 1325,  154,  155,  161,  200,  293,  278,
      301,  279,  162,  163,  280,  164,  305,  294,  165,  200,
      295,  166,  302,  167,  312,  168,  169,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  188,   86, 1323,

      163, 1321,  164,  305, 1319,  165,  298,  299,  166,  303,
      167,  312,  168,  169,  170,  310,  304,  231,  171,  200,
      300,  172,  173,  232,  200,  311,  320,  321,  174,  200,
      322,  175, 1317,  298,  299, 1315,  303, 1223, 1223, 1294,
     1294,  170,  310,  304,  231,  171,  200,  300,  172,  173,
      232,  200,  311,  320,  321,  174,  200,  322,  175,  194,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      187,  187,  323,  187,  187,  187,  187,  187,  187,  324,
      233,  313, 1313, 1309,  200, 1305,  314,  327,  234,  187,
      187,  187,  200,  333,  235,  201,  200,  202,  334,  323,

      325,  326,  241,  203,  200,  204,  324,  233,  313,  205,
      206,  200,  200,  314,  327,  234,  335,  338, 1299,  200,
      333,  235,  201,  200,  202,  334, 1293,  325,  326,  241,
      203,  200,  204, 1280,  339, 1267,  205,  206, 1244,  200,
     1221, 1177, 1133,  335,  338,  187,  187,  187, 1060,  187,
      187,  187,  187,  187,  187,  987,  890,  340,  242,  243,
      246,  339,  200,  244,  247,  187,  187,  187,  200,  245,
      248,  341,  207,  200,  344,  336,  208,  200,  200,  200,
      200,  337,  209,  200,  340,  242,  243,  246,  345,  200,
      244,  247,  210,  200,  793,  200,  245,  248,  341,  207,

      200,  344,  336,  208,  200,  200,  200,  200,  337,  209,
      200,  667,  541,  200,  346,  345,  283,  284,  347,  210,
      200,  187,  211,  200,  261,  415,  200,  352,  262,  212,
      200,  342,  263,  200,  343,  414,  213,  353,  264,  214,
      200,  346,  215,  283,  284,  347,  200,  288,  200,  211,
      200,  261,  348,  200,  352,  262,  212,  200,  342,  263,
      200,  343,  349,  213,  353,  264,  214,  350,  351,  215,
      287,  286,  281,  200,  216,  200,  200,  285,  217,  348,
      282,  200,  218,  354,  355,  361,  200,  200,  219,  349,
      356,  220,  357,  362,  350,  351,  200,  200,  200,  281,

      199,  216,  198,  200,  285,  217,  187,  282,  200,  218,
      354,  355,  361,  200,  200,  219,  189,  356,  220,  357,
      362,  363,  364,  200,  200,  200,  200,  306,  307,  308,
      200,  309,  315,  221,  316,  222,  200,  317,  367,  358,
      223,  359,  368,  318,  369,  224,  200,  186,  363,  364,
      319,  184,  360,  200,  306,  307,  308,  200,  309,  315,
      221,  316,  222,  200,  317,  367,  358,  223,  359,  368,
      318,  369,  224,  200,  225,  365,  370,  319,  366,  360,
      371,  200,  226,  372,  373,  227,  374,  328,  228,  329,
      377,  229,  375,  330,  230,   97,  376,   96,  381,  384,

      331,  225,  365,  370,  332,  366,   87,  371,  200,  226,
      372,  373,  227,  374,  328,  228,  329,  377,  229,  375,
      330,  230,  236,  376,  378,  381,  384,  331,  237,  238,
      239,  332,  382,  388,  390,  240,  385,  379,  391,  392,
      200, 1343,  380,  383,  393,  386,  394,  389,   47,  236,
      397,  378,  398,  387,  399,  237,  238,  239,   47,  382,
      388,  390,  240,  385,  379,  391,  392,  200,  249,  380,
      383,  393,  386,  394,  389,  200,  395,  397,  400,  398,
      387,  399,  250,  405,  402,  200,  406,  396,  251,  252,
     1343,  403, 1343,  407,  404,  249,  411, 1343,  401,  408,

      412,  413,  200,  395, 1343,  400,  409, 1343,  542,  250,
      405,  402,  200,  406,  396,  251,  252,  200,  403,  410,
      407,  404,  253,  411,  200,  401,  408,  412,  413,  543,
      254,  200,  200,  409,  255,  542,  200,  256,  257, 1343,
     1343, 1343,  200,  544,  200, 1343,  410,  545,  546,  253,
     1343,  200,  200, 1343, 1343,  547,  543,  254,  200,  200,
      548,  255,  549,  200,  256,  257,  258,  417,  200,  200,
      544,  550,  200,  200,  545,  546,  551,  259,  200,  200,
      200,  200,  547,  260,  555,  200,  200,  548,  200,  549,
      556,  200, 1343,  258,  417,  200,  418, 1343,  550,  200,

      200,  200,  557,  551,  259,  200,  558,  200,  200, 1343,
      260,  555,  200,  200,  265,  200,  266,  556,  200,  267,
      200, 1343,  268,  418,  269,  559,  270,  271,  200,  557,
      560,  561,  562,  558,  563,  564,  200, 1343,  565, 1343,
     1343,  265, 1343,  266, 1343, 1343,  267,  200,  419,  268,
      200,  269,  559,  270,  271,  200,  420,  560,  561,  562,
      200,  563,  564,  200,  272,  565,  200,  200,  273,  200,
      200,  274,  275,  423,  200,  419,  429,  200,  276,  200,
      566,  277,  200,  420,  567,  570,  200,  200,  200, 1343,
     1343,  272, 1343,  200,  200,  273,  200,  200,  274,  275,

      423,  200, 1343,  429, 1343,  276,  200,  566,  277, 1343,
     1343,  567,  570,  200, 1343,  200,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,   92,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  194,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  421,  424,
      428,  422,  552,  571,  553,  200,  572,  200,  200,  200,
      200,  200,  200,  573, 1343,  200,  200,  200, 1343,  554,

      200,  200, 1343, 1343, 1343,  421,  424,  428,  422,  552,
      571,  553,  200,  572,  200,  200,  200,  200,  200,  200,
      573,  200,  200,  200,  200,  200,  554,  200,  200,  425,
      426,  200,  430,  574,  200,  200,  568,  200, 1343,  431,
     1343,  200,  200,  427,  200, 1343,  575,  200,  200,  576,
     1343,  569,  200,  577,  432,  578,  425,  426,  200,  430,
      574,  200,  200,  568,  200,  200,  431,  200,  200,  200,
      427,  200,  200,  575,  200, 1343,  576,  200,  569, 1343,
      577,  432,  578,  437, 1343, 1343,  579,  200,  580,  581,
     1343, 1343,  200,  438,  200,  582,  583,  584,  200,  200,

     1343,  585,  200,  200,  200,  433,  434,  435,  200,  436,
      437,  439,  200,  579,  200,  580,  581,  200,  200,  586,
      438,  587,  582,  583,  584,  200,  588,  200,  585,  200,
      200,  200,  433,  434,  435,  200,  436,  200,  439,  200,
      589,  590,  440,  591,  200,  200,  586,  441,  587,  592,
     1343,  593,  594,  588,  200,  595, 1343,  596,  200, 1343,
      597, 1343, 1343, 1343,  200,  598, 1343,  589,  590,  440,
      591, 1343,  599,  600,  441,  442,  592,  443,  593,  594,
      444,  603,  595,  200,  596,  200,  445,  597,  200,  447,
      448, 1343,  598,  446,  200,  200,  200, 1343,  200,  599,

      600,  200,  442,  449,  443,  604,  200,  444,  603,  601,
      200,  605,  200,  445,  200,  200,  447,  448,  200,  602,
      446,  200,  200,  200,  450,  200, 1343,  606,  200, 1343,
      449, 1343,  604,  200,  200,  200,  601,  200,  605,  607,
      608,  200,  451,  611,  454,  200,  602,  200, 1343, 1343,
      612,  450, 1343,  200,  606,  200,  460, 1343,  200, 1343,
      200,  200,  200,  200,  200,  200,  607,  608,  200,  451,
      611,  454,  613,  614,  200,  452,  453,  612, 1343,  609,
      200,  615,  200,  460,  200,  200,  200,  200,  616,  610,
      200,  200,  200,  617,  618,  200,  200, 1343, 1343,  613,

      614,  619,  452,  453,  620,  461,  609,  200,  615, 1343,
     1343,  200,  200,  200, 1343,  616,  610,  200,  200, 1343,
      617,  618,  621,  200,  455,  200,  456, 1343,  619,  200,
      457,  620,  461, 1343,  200,  462,  200,  458,  622,  200,
     1343,  459, 1343, 1343,  200,  200,  200, 1343,  463,  621,
      200,  455,  200,  456,  464,  200,  200,  457, 1343, 1343,
      200,  625,  462,  200,  458,  622,  200,  466,  459,  200,
      200,  628,  200,  200,  200,  463,  465,  200, 1343,  200,
      200,  464,  200, 1343,  200,  200,  200,  200,  625,  200,
      467, 1343,  629,  200,  466,  468,  200,  200,  628,  630,

      200,  200,  200,  465,  471,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  469,  200,  467,  470,  629,
      200,  200,  468,  200, 1343,  631,  630,  200,  200,  200,
      472,  471,  200,  200,  623,  200,  200,  200, 1343,  200,
      632,  200,  469,  473,  200,  470,  200,  200,  200,  200,
      200,  200,  631,  624,  200,  200,  200,  472,  200,  200,
      200,  623, 1343,  633,  200,  474,  200,  632,  634,  635,
      473,  200,  636,  200,  200, 1343,  200,  200,  200,  479,
      624,  200, 1343,  200,  200,  200,  200,  626, 1343,  200,
      633,  200,  474,  200, 1343,  634,  635,  480, 1343,  636,

      627,  200,  475,  200,  200,  200,  479,  637, 1343,  200,
      200,  200,  476,  200,  626,  200,  200,  477,  478, 1343,
      200,  527,  200, 1343,  480,  481, 1343,  627,  200,  475,
      200, 1343,  200,  638,  637,  200,  200,  200,  200,  476,
      200,  528,  200,  639,  477,  478,  200,  482,  527,  200,
      200,  200,  481,  200, 1343,  200,  200,  488,  200, 1343,
      638,  640,  200,  200, 1343,  200,  200, 1343,  528,  641,
      639, 1343,  499,  200,  482, 1343,  200,  200,  200,  200,
      200,  489,  200,  200,  488,  200,  200, 1343,  640, 1343,
      200,  200,  200,  200,  200, 1343,  641,  642,  200,  499,

      483,  643,  484,  200,  200, 1343,  200,  644,  489,  200,
      645,  646,  502,  200,  200, 1343,  503, 1343,  200,  200,
     1343,  200,  200,  647,  642,  200, 1343,  483,  643,  484,
     1343,  200,  200, 1343,  644, 1343,  648,  645,  646,  502,
      649,  200,  485,  503,  486,  200,  650,  490,  653,  200,
      647,  656,  200,  200,  200,  487,  200,  200,  657,  200,
      200,  200,  491,  648,  658,  200,  200,  649,  659,  485,
     1343,  486,  200,  650,  490,  653,  660, 1343,  656,  200,
      200,  200,  487,  200,  200,  657, 1343,  200,  200,  491,
     1343,  658,  200,  200,  200,  659,  200,  494, 1343,  200,

      661,  200,  492,  660,  200,  493,  200,  495, 1343,  200,
      200,  654,  200,  655, 1343, 1343, 1343,  200,  200, 1343,
      200,  200,  200,  200,  494,  200,  200,  661,  200,  492,
      200,  200,  493,  200,  495,  496,  200,  200,  654,  200,
      655,  200,  651,  200,  200,  200,  497,  200,  200,  200,
     1343,  652,  200,  200,  200, 1343,  200,  200, 1343, 1343,
      662,  200,  496,  663,  665, 1343,  200,  664,  200,  651,
      200, 1343,  666,  497,  794,  200, 1343,  200,  652,  200,
      200,  200,  200,  200,  200,  498,  200,  662,  200,  200,
      663,  665,  200,  200,  664,  500,  200, 1343,  504,  666,

      795,  794,  200,  200,  200,  796,  200, 1343,  200,  200,
      501,  200,  498,  200,  200,  505,  200,  797,  200,  200,
     1343,  798,  500,  200,  200,  504,  200,  795,  506,  200,
      200, 1343,  796,  507,  200,  200, 1343,  501,  200, 1343,
     1343,  200,  505, 1343,  797,  200,  799,  508,  798,  800,
     1343,  200,  200,  200,  200,  506,  509,  801,  200,  200,
      507,  200,  802,  200,  200,  200,  511,  510,  200,  803,
      200, 1343,  200,  799,  508, 1343,  800,  200,  804,  200,
     1343,  200,  200,  509,  801,  200,  200,  805,  806,  802,
      200,  200, 1343,  511,  510,  200,  803,  200,  515,  200,

     1343, 1343,  200,  200,  200,  804,  200,  517,  807,  200,
      512,  808,  516,  200,  805,  806,  809,  810,  811,  513,
     1343,  200,  200,  200, 1343,  515,  200,  514,  518,  200,
      200,  200,  200,  200,  517,  807,  200,  512,  808,  516,
      200, 1343,  200,  809,  810,  811,  513,  200,  200,  200,
      200,  200,  200,  200,  514,  518,  812,  200,  200,  200,
      519,  813,  520,  200, 1343,  814,  200,  200,  521,  200,
      200,  200, 1343, 1343,  200,  200,  200,  815,  200,  200,
      816,  200, 1343,  812,  200,  817,  200,  519,  813,  520,
      818,  200,  814,  200,  200,  521,  819,  200,  200,  200,

      522,  200,  200,  200,  815,  524,  200,  816,  200,  200,
      820,  523,  817,  200, 1343,  200, 1343,  818,  200,  821,
     1343,  822, 1343,  819, 1343,  200,  200,  522,  200,  532,
      200,  200,  524,  200,  200,  200,  200,  820,  523,  525,
      200,  200,  200,  200,  823,  200,  821,  200,  822,  533,
      200,  200,  200,  200,  526,  200,  532,  200,  200,  824,
      825,  200,  200,  200, 1343,  200,  525,  200,  200,  826,
      200,  823,  200, 1343,  200,  827,  533,  200,  200,  828,
      200,  526,  200,  829,  830,  831,  824,  825,  832, 1343,
      200,  529,  200,  534,  200,  200,  826,  833,  530,  535,

      200,  531,  827,  536,  200,  200,  828,  200,  834,  835,
      829,  830,  831,  200,  200,  832,  537,  836,  529,  837,
      534,  200,  200,  200,  833,  530,  535,  200,  531,  538,
      536,  200,  200,  200,  200,  834,  835, 1343,  200,  200,
      200,  200,  200,  537,  836,  838,  837,  540,  200,  200,
      200,  200,  670,  539,  200,  200,  538,  839,  200,  200,
      200,  200,  840,  843,  200,  200,  200,  844,  845,  200,
      846,  200,  838, 1343,  540,  200,  200, 1343,  200,  670,
      539,  200,  200, 1343,  839,  200,  200, 1343,  200,  840,
      843,  200, 1343, 1343,  844,  845, 1343,  846,  200,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  200,
      668,  200,  669,  200,  200,  200,  200,  847,  850,  200,
      200,  200,  200, 1343,  848,  849, 1343,  851, 1343,  200,
      200,  200,  200, 1343, 1343, 1343,  200,  668,  200,  669,
      200,  200,  200,  200,  847,  850,  200,  200,  200,  200,
      671,  848,  849,  200,  851,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200, 1343,  200,  200,
      200, 1343,  841,  200,  200, 1343,  672,  671,  852, 1343,
      200,  853,  200,  842, 1343, 1343,  200,  200,  200,  200,

      200,  200,  200,  200,  200,  200,  200,  200,  673,  841,
      200,  200,  200,  672,  200,  852,  200,  200,  853,  854,
      842,  675,  200,  200,  200, 1343,  676,  200,  200,  855,
      674,  200,  200,  200,  856,  673,  857,  200,  200,  200,
      677,  200,  200,  200,  200,  858,  854,  200,  675,  200,
      859,  200,  200,  676,  200,  200,  855,  674,  200,  200,
      200,  856,  200,  857,  200,  200, 1343,  677,  200,  200,
     1343,  681,  858, 1343,  200, 1343, 1343,  859,  200,  200,
      678, 1343,  679,  200,  860,  200,  200,  200,  861,  200,
      862, 1343,  200,  200,  863,  200,  200,  680,  681,  682,

      200, 1343,  200,  200,  683,  200,  200,  678,  200,  679,
      200,  860,  200,  200,  200,  861,  200,  862,  200,  200,
      200,  863, 1343,  200,  680, 1343,  682,  200,  685,  200,
      200,  683,  200,  200, 1343,  200,  200, 1343,  864,  200,
      686,  865,  200,  200,  200,  200,  866,  684,  200,  200,
      867,  200,  200, 1343,  200,  685,  687,  868, 1343,  200,
     1343,  200, 1343,  200,  200,  864,  869,  686,  865,  200,
      870,  200,  871,  866,  684,  200,  200,  867,  200,  200,
      200,  200,  200,  687,  868,  689,  688,  200,  200,  200,
      872,  200,  200,  869,  200,  200,  200,  870,  873,  871,

      874,  690,  875, 1343,  876,  200,  200,  200,  691,  200,
      200,  877,  689,  688,  200,  200,  200,  872, 1343,  200,
      200,  200,  200,  200, 1343,  873,  200,  874,  690,  875,
      692,  876,  200,  200, 1343,  691,  200,  200,  877,  878,
      693,  694,  200,  879,  200,  200,  200,  200,  200, 1343,
      880,  200,  881,  200,  200,  882,  695,  692, 1343, 1343,
      883,  200, 1343,  200,  200,  884,  878,  693,  694, 1343,
      879,  200,  200,  200,  696,  200,  200,  880,  200,  881,
      200,  200,  882,  695,  885,  697,  200,  883,  200,  200,
     1343,  200,  884, 1343,  200,  200,  200, 1343,  200,  886,

      887,  696,  888,  200,  200,  200, 1343,  200, 1343,  698,
     1343,  885,  697,  200,  200, 1343,  200,  699, 1343, 1343,
      200,  200,  200,  200,  200,  200,  886,  887, 1343,  888,
      200,  200,  200,  701,  889,  200,  698,  200,  200,  200,
      200,  200,  200,  200,  699,  200,  700,  200,  702,  988,
      989,  200, 1343,  200,  990,  200, 1343,  200,  200,  991,
      701,  889,  200,  992,  200,  200,  200,  200,  993,  200,
      200, 1343,  200,  700,  200,  702,  988,  989,  200,  703,
      200,  990,  200,  200,  200,  200,  991,  200,  704, 1343,
      992, 1343,  200,  200,  200,  993,  994,  200,  200,  200,

      707,  200,  200,  200,  706,  200,  703,  200,  200,  200,
      200,  200,  200, 1343,  200,  704,  705, 1343,  200,  200,
      200,  200,  200,  994,  200,  200,  200,  707,  200,  200,
      200,  706,  995,  996,  200,  200,  200, 1343,  200,  200,
      200,  997,  200,  705,  710,  200,  708,  200,  200,  200,
      998,  200,  200,  200,  200,  200,  999, 1000,  709,  995,
      996, 1001,  711,  200,  200,  200,  200,  200,  997,  200,
      200,  710, 1343,  708,  200,  200,  200,  998,  200,  200,
      200,  200, 1343,  999, 1000,  709,  200, 1002, 1001,  711,
      200,  200,  712,  200,  200, 1003, 1004,  200, 1005,  200,

      200,  713,  200,  200,  200, 1006, 1007,  200,  200,  714,
      200, 1343,  200,  200, 1002,  200, 1008, 1009, 1343,  712,
      200,  200, 1003, 1004, 1343, 1005,  200,  200,  713,  200,
     1010,  200, 1006, 1007,  200,  200,  714,  200,  715,  200,
      200,  716,  200, 1008, 1009,  200, 1011,  200, 1012, 1013,
      200,  200,  200,  200,  200, 1014, 1343, 1010,  200,  200,
     1343,  717, 1343,  200,  200,  715, 1343,  200,  716, 1343,
     1343, 1015,  200, 1011, 1016, 1012, 1013,  200,  200,  200,
      200,  200, 1014,  718, 1017,  200,  200,  200,  717,  200,
      200,  200,  200,  200,  200, 1018,  719,  200, 1015,  200,

     1343, 1016,  200,  200, 1343,  200, 1343, 1019,  720,  200,
      718, 1017,  200,  200,  200,  200,  200, 1020,  721,  200,
      200,  200, 1018,  719,  200,  200,  200,  200, 1343,  200,
      200,  200,  200,  722, 1019,  720,  200,  200, 1021,  200,
      200, 1022,  200, 1023, 1020,  721,  200,  200, 1343,  724,
      200,  725,  200,  200,  200,  200,  723, 1343,  200,  200,
      722,  200, 1026, 1027,  200, 1021,  200, 1028, 1022,  200,
     1023,  200, 1343,  200,  200,  726,  724,  200,  725,  200,
      200, 1024,  200,  723, 1025,  200,  200,  727,  200, 1026,
     1027,  200, 1343,  200, 1028,  200,  200,  728,  200,  200,

     1343, 1343,  726,  200, 1029, 1343,  200,  200, 1024,  200,
     1343, 1025,  200, 1030,  727,  729, 1343, 1031,  200,  200,
     1343,  200,  200,  730,  728,  200,  200,  200,  200, 1343,
      200, 1029,  200,  200,  200, 1343,  200,  200, 1343, 1343,
     1030, 1032,  729,  732, 1031, 1343,  200,  200,  200,  200,
      730,  200,  200,  200,  200,  200,  200,  731, 1343,  200,
      200,  200,  200,  200,  200,  200,  733,  737, 1032,  200,
      732, 1033,  200, 1343,  200,  200,  200, 1343,  200, 1034,
      200, 1035,  200,  200,  731,  200,  734,  200,  200,  200,
      200,  200,  200,  733,  737, 1036,  200,  200, 1033,  200,

      200,  200,  200,  738,  200,  200, 1034,  200, 1035,  200,
      200,  200,  200,  734,  200,  740, 1343, 1037,  200, 1343,
      200,  200, 1036, 1038,  200, 1343, 1039,  200,  200, 1343,
      738,  200,  200, 1040,  200,  735,  200,  200,  200,  200,
      200, 1343,  740,  200, 1037,  736,  200,  200,  200,  200,
     1038, 1041,  739, 1039, 1343, 1042,  200, 1343, 1343,  200,
     1040,  200,  735,  200,  200,  200,  200,  200,  200, 1043,
      200,  200,  736,  200,  200, 1044,  200,  741, 1041,  739,
     1045,  200, 1042,  200,  200,  742,  200, 1046,  200,  200,
     1343,  200,  200,  200, 1047,  200, 1043, 1343,  200,  200,

     1048,  200, 1044,  743,  741,  200, 1343, 1045,  200,  200,
      200,  200,  742, 1049, 1046,  200,  200,  200, 1343,  200,
      200, 1047, 1343,  744,  200, 1050,  200, 1048, 1343,  200,
      743,  200,  200,  200, 1051,  746,  200,  200,  745,  200,
     1049, 1343,  200,  200,  200,  200,  200, 1343, 1052,  747,
      744,  200, 1050,  200, 1053,  200,  200, 1343,  200,  200,
      200, 1051,  746, 1343,  200,  745,  200, 1054,  200,  200,
      200,  200,  200,  751,  200, 1052,  747,  748,  200, 1343,
      200, 1053,  200,  200,  200, 1343,  200, 1055, 1056, 1343,
      756,  200,  200, 1343, 1054,  200,  200,  200,  200, 1343,

      751,  200,  200, 1057,  748,  200,  200,  754,  200, 1343,
      200,  200,  749,  200, 1055, 1056,  200,  756,  200,  200,
      200, 1058, 1343, 1059,  200, 1134,  200, 1135, 1136,  200,
     1057,  750, 1137,  200,  754,  200,  200, 1343, 1138,  749,
      200, 1343, 1139,  200,  755,  200, 1343,  200, 1058,  200,
     1059,  200, 1134,  200, 1135, 1136,  200, 1140,  750, 1137,
      200,  200,  200,  200,  752, 1138, 1141,  200,  758, 1139,
     1142,  755,  200,  200, 1343,  200,  200,  753,  200, 1143,
      200, 1343, 1343,  200, 1140,  200, 1343,  200,  200,  200,
      757,  752, 1144, 1141,  200,  758, 1145, 1142, 1146,  200,

      200,  200,  200,  200,  753,  759, 1143,  200,  200,  200,
     1147,  200,  200,  200, 1148, 1149,  200,  757, 1343, 1144,
     1343,  200,  760, 1145,  200, 1146, 1150, 1343,  200,  200,
      200, 1343,  759, 1343,  200,  200,  200, 1147,  200, 1151,
      200, 1148, 1149,  200, 1152,  200, 1343,  200,  200,  760,
      762,  200,  761, 1150,  200,  200,  200,  200,  764,  200,
      200,  200,  200,  200, 1153,  763, 1151,  200,  200, 1154,
      200, 1152,  200,  200,  200,  200, 1343,  762,  200,  761,
     1343,  200,  200,  200,  200,  764,  200,  200, 1343,  200,
      200, 1153,  763, 1343,  200,  200, 1154,  200, 1343,  200,

      200, 1343,  200,  200,  200,  200, 1343,  200,  200,  200,
      200,  200,  765,  768,  200,  200, 1155,  200,  767,  200,
      200,  200,  766,  200,  200,  200,  200,  200,  200,  769,
      200,  200, 1343,  200,  200,  200,  200, 1343,  200,  765,
      768,  200,  200, 1155,  200,  767,  200,  200,  200,  766,
      200,  200,  200, 1156,  200,  200,  769,  200, 1157,  200,
      200,  771, 1158,  200,  200,  770, 1159, 1160,  200,  200,
      200, 1161,  200,  200,  772, 1162, 1343,  200, 1343, 1343,
     1156, 1343,  200, 1343,  200, 1157,  200, 1163,  771, 1158,
      200,  200,  770, 1159, 1160,  200,  200,  200, 1161,  200,

      200,  772, 1162,  200,  200,  200,  200, 1164,  774,  200,
      200,  773, 1343,  200, 1163,  200,  775, 1165,  200,  200,
      200, 1343, 1166,  200, 1167, 1343,  200, 1343, 1343,  200,
      200, 1168,  200,  200, 1164,  774,  200,  200,  773,  200,
      200, 1343,  200,  775, 1165,  200,  200,  200,  777, 1166,
      200, 1167,  200,  200,  776,  200,  200,  778, 1168,  200,
     1169, 1343,  200,  200,  200, 1170,  200,  200,  200, 1343,
      200, 1343,  200,  200,  200,  777, 1343,  200,  779,  200,
      782,  776,  200,  780,  778,  781,  200, 1169,  200,  200,
      200,  200, 1170,  200,  200,  200,  200,  200,  784,  200,

      200,  200, 1171,  200,  200,  779, 1343,  782,  200, 1343,
      780, 1343,  781, 1172,  783,  200, 1343,  200,  200, 1173,
      200, 1174,  200,  200,  200,  784,  200, 1343,  200, 1171,
      200,  200, 1343,  785, 1175,  200,  200, 1343,  200, 1343,
     1172,  783, 1176,  786, 1222,  200, 1173, 1224, 1174,  200,
     1343,  200,  200,  200,  200,  200, 1225, 1226,  200,  200,
      785, 1175, 1227,  200,  200,  200,  200, 1228,  200, 1176,
      786, 1222, 1229,  200, 1224, 1343, 1343,  787,  200,  200,
      200,  200,  200, 1225, 1226, 1343,  200,  200,  788, 1227,
     1343,  200,  200,  200, 1228,  200,  200, 1230,  789, 1229,

      200, 1231,  790,  200,  787,  200,  791,  200,  200,  200,
      200, 1232,  200, 1343,  200,  788, 1233,  200, 1343,  200,
     1343, 1343,  200,  200, 1230,  789, 1234, 1343, 1231,  790,
      200, 1235, 1236,  791,  200,  200,  200,  200, 1232,  200,
      792,  200, 1237, 1233,  200,  200,  200,  200,  200,  200,
      200,  891,  200, 1234,  892,  200, 1238,  200, 1235, 1236,
      200,  200, 1343,  200, 1239, 1343,  200,  792,  200, 1237,
      200, 1343,  200,  200,  200,  200,  200,  200,  891,  200,
     1240,  892,  200, 1238,  200,  200,  893,  200,  200,  200,
      897, 1239,  200,  200,  200,  200, 1241,  200,  200, 1242,

      200,  895,  200,  200,  896,  894, 1243, 1240,  200,  200,
      200, 1343,  200,  893,  200,  200,  200,  897, 1343,  200,
     1343,  200,  200, 1241, 1343,  200, 1242,  200,  895,  200,
     1268,  896,  894, 1243, 1343,  200,  200,  200,  200,  899,
      898,  200,  200,  200, 1343,  200,  200,  900, 1270,  200,
      200,  200,  200, 1343, 1343,  200, 1271, 1268, 1343,  200,
     1272,  200,  200, 1343, 1343,  200,  899,  898, 1343,  200,
      200,  200,  200,  200,  900, 1270,  200,  200,  200,  200,
      200,  200,  200, 1271,  200,  200,  200, 1272,  200,  200,
      200,  200, 1343, 1273, 1343,  901, 1274, 1275,  200,  200,

      200,  200, 1343,  200, 1223, 1223, 1343,  200,  200,  200,
     1343,  200,  200, 1276, 1343, 1343, 1343,  200,  200,  200,
     1273,  200,  901, 1274, 1275,  200,  200,  200,  200,  902,
      200,  200, 1277,  200,  200,  200,  200,  903,  200,  200,
     1276,  200, 1269,  200,  200,  200,  200,  904,  200, 1278,
     1343, 1343,  200,  200,  200,  200,  902, 1343,  200, 1277,
      200,  200,  200,  200,  903,  200,  200,  200,  200, 1269,
      200,  200,  200,  200,  904, 1279, 1278,  200,  905,  200,
      200,  200,  200,  200,  906, 1295, 1343,  907,  200,  200,
      200,  200,  200, 1343,  200, 1343, 1343,  200,  200, 1296,

      200, 1343, 1279,  908,  200,  905,  200,  200,  200, 1343,
      200,  906, 1295,  200,  907,  200,  200,  200,  200,  200,
      909, 1343,  200,  200,  200,  200, 1296,  200, 1246, 1223,
      908, 1297,  200,  200,  200,  200,  200,  910,  200, 1343,
      200, 1298, 1343,  200,  200, 1301, 1307,  909,  200,  200,
      200, 1343, 1343, 1343,  200, 1294, 1294, 1308, 1297,  200,
      200, 1311, 1314,  200,  910,  200, 1282,  200, 1298,  200,
      200, 1316, 1301, 1307,  200,  200,  911, 1343,  200,  200,
      200, 1300, 1294, 1318, 1308,  200,  912, 1343, 1311, 1314,
      200,  913, 1343, 1282,  200, 1343,  200, 1306, 1316, 1343,

     1343,  200,  200,  911,  200,  200,  200,  200, 1343,  200,
     1318, 1343,  200,  912,  200, 1343, 1320,  200,  913,  915,
      200, 1343,  200, 1310, 1306, 1322,  914,  200,  200,  200,
      200,  200,  200, 1324, 1343,  200,  200, 1343,  200, 1343,
      200,  200,  916, 1320, 1343, 1343,  915,  200,  200,  200,
     1310, 1326, 1322,  914,  200,  200, 1328,  200,  200,  200,
     1324,  917,  200,  200,  200,  200,  200,  200,  200,  916,
      200,  200,  200,  200, 1343,  200,  200,  200, 1326, 1343,
     1330, 1343,  200, 1328, 1332,  200,  918, 1334,  917, 1336,
      200,  200, 1343,  200,  200,  200,  200,  200,  200,  200,

      200,  200, 1343,  200,  200, 1343,  200, 1330,  200,  200,
      200, 1332,  919,  918, 1334,  200, 1336, 1343, 1343, 1343,
      200,  200,  200,  200,  200, 1343,  920, 1343,  200,  200,
     1343, 1343, 1343,  200,  200,  200,  200,  200,  200,  919,
     1343, 1343,  200,  200, 1343,  921, 1343,  200,  200,  200,
      200,  200,  200,  920, 1343,  923,  200,  200,  922, 1343,
     1343,  200,  200,  200, 1343,  200,  200, 1343,  200, 1343,
      200, 1343,  921,  200, 1343,  200,  925,  200,  200,  200,
      200,  924,  923, 1343,  200,  922,  200, 1343, 1343,  200,
     1343, 1343,  200,  200,  200,  200,  200, 1343, 1343,  200,

      200, 1343,  200,  925,  200,  200,  200,  200,  924, 1343,
      200, 1343,  200,  200,  200, 1343, 1343, 1343, 1343,  200,
      200,  200,  200,  200,  200,  926,  200, 1343,  200,  200,
      200,  200,  928,  200,  927, 1343,  200,  200,  200,  200,
      200,  200,  200, 1343,  200, 1343,  200,  200,  200,  200,
      200,  200,  926, 1343,  200,  200,  200,  200,  200,  928,
      200,  927, 1343,  200,  929,  200, 1343,  200,  200,  200,
      200,  200,  200,  200, 1343,  200, 1343,  200,  200, 1343,
      200,  200,  200,  200,  200,  200,  200,  200,  200, 1343,
      200,  929,  200,  930,  200,  200,  931,  200, 1343,  200,

      200,  200,  200, 1343, 1343,  200,  200,  200, 1343,  200,
     1343,  200, 1343,  200, 1343,  200, 1343,  200, 1343,  200,
      930,  200, 1343,  931,  200, 1343,  200,  200,  200,  200,
      200,  200,  200,  200,  933,  200,  200,  932,  200,  200,
     1343, 1343,  200, 1343,  200,  200, 1343, 1343,  934, 1343,
     1343,  200, 1343,  200,  200,  200, 1343,  200,  200,  200,
     1343,  933,  200,  200,  932,  200,  200, 1343, 1343,  200,
     1343,  200,  200, 1343, 1343,  934,  200, 1343,  200, 1343,
     1343,  200,  200,  200,  200, 1343,  200,  200,  935,  200,
      936,  200, 1343,  937,  200, 1343,  200, 1343, 1343,  200,

     1343, 1343, 1343,  200, 1343,  200, 1343, 1343, 1343, 1343,
      200,  200, 1343,  200,  200,  935,  200,  936,  200, 1343,
      937,  200, 1343,  200, 1343, 1343,  200,  938,  200,  940,
      200,  200,  200, 1343,  200,  200,  200, 1343,  939,  200,
      200,  200, 1343, 1343,  200, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343,  938,  200,  940,  200,  200,  200,
     1343,  200,  200,  200, 1343,  939,  200,  200,  200, 1343,
      200,  200,  200,  200,  200,  200,  200,  200, 1343, 1343,
      200,  200,  200, 1343, 1343,  200,  200, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343,  200, 1343,  200,

      200,  200,  200,  200,  200, 1343, 1343,  200,  200,  200,
     1343, 1343,  200,  200,  200, 1343,  200,  200,  942,  200,
      200,  200,  941, 1343,  200,  200,  200, 1343, 1343,  200,
      200, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343,  200, 1343,  200,  200,  942,  200,  200,  200,  941,
      943,  200,  200,  200,  200,  200,  200,  200,  944,  200,
      200, 1343,  200,  947,  200,  200,  200,  200,  200,  200,
      200,  945,  946, 1343,  200,  200,  200,  943,  200,  200,
     1343,  200,  200, 1343, 1343,  944,  200,  200, 1343,  200,
      947,  200,  200,  200,  200,  200,  200,  200,  945,  946,

      200,  200,  200,  200,  949,  200,  200,  200,  200,  200,
      200, 1343,  200,  948,  200, 1343, 1343, 1343,  200,  200,
      200, 1343, 1343, 1343, 1343, 1343, 1343,  200,  200, 1343,
     1343,  949, 1343, 1343,  200,  200,  200,  200, 1343,  200,
      948,  200,  950, 1343,  200,  200,  200,  200,  200, 1343,
     1343, 1343,  951,  200,  200,  200,  200,  200, 1343, 1343,
     1343, 1343,  200,  200,  200, 1343,  952, 1343, 1343,  950,
     1343,  200,  200,  200, 1343,  200, 1343, 1343, 1343,  951,
      200,  200,  200,  200,  200, 1343,  200, 1343, 1343,  200,
      200,  200,  200,  952,  200,  953, 1343,  200,  200,  200,

      200,  200,  200, 1343,  200,  954,  200,  200, 1343,  200,
      955, 1343, 1343,  200,  200, 1343,  200,  200, 1343,  200,
     1343,  200,  953, 1343,  200,  200,  200, 1343,  200,  200,
     1343,  200,  954,  200,  200,  200,  956,  955, 1343,  200,
      200,  200, 1343,  200,  200,  200,  200, 1343, 1343, 1343,
      957, 1343, 1343,  200,  200,  200,  200, 1343,  200, 1343,
     1343, 1343,  200,  956,  200, 1343,  200,  200, 1343, 1343,
     1343, 1343,  200,  200,  200, 1343,  958,  957, 1343, 1343,
      200,  200,  200,  200,  200,  200, 1343, 1343,  959,  200,
      200,  200,  200,  200, 1343, 1343, 1343, 1343,  200,  200,

      200,  200,  200,  958, 1343, 1343,  200,  200,  200,  200,
      960,  200,  200, 1343, 1343,  959,  200,  200, 1343,  200,
      200, 1343,  200, 1343, 1343,  200,  200,  200,  200,  200,
      200, 1343,  200,  200,  200,  200,  200,  960,  200,  200,
      200,  961,  200, 1343, 1343,  962,  200, 1343,  200,  200,
      200,  963,  200, 1343,  200,  200, 1343,  200,  200,  200,
     1343,  200,  200, 1343,  200,  200, 1343,  200,  961,  200,
     1343, 1343,  962,  200,  200,  200,  200,  200,  963,  200,
      200,  200, 1343,  966,  964,  200,  200, 1343,  200,  200,
      965,  200,  200, 1343,  200,  200,  200, 1343,  967,  200,

      200,  200,  200,  200,  200, 1343, 1343,  200,  200, 1343,
      966,  964, 1343,  200, 1343,  200, 1343,  965,  200,  200,
      200,  200,  200,  200,  200,  967,  200,  200,  200,  200,
      200,  200,  200,  969,  968,  200,  200,  200,  200, 1343,
      200,  200, 1343,  200, 1343,  200,  200,  200,  200, 1343,
     1343,  200,  200,  200, 1343,  200,  970,  200, 1343,  200,
      969,  968,  200,  200,  200,  200, 1343,  200,  200, 1343,
      200, 1343,  200,  200,  971,  200, 1343,  200,  200,  200,
      200,  200,  200,  970,  200, 1343,  200,  972, 1343,  200,
     1343,  200,  200,  200,  200, 1343,  200,  200,  973,  200,

      200,  971,  200,  200,  200,  200,  200, 1343,  200,  200,
      200,  200,  200,  200,  972, 1343,  200,  974,  200,  200,
      200,  200,  200,  200,  200,  973, 1343,  200, 1343,  200,
      200,  975, 1343,  200,  200, 1343,  200,  200, 1343,  200,
      200,  200,  200,  200,  974, 1343,  200,  200,  200,  200,
      200, 1343,  200, 1343, 1343,  200, 1343,  976,  975, 1343,
      200,  200, 1343,  200,  200, 1343,  977,  200,  200,  200,
     1343,  200, 1343,  200,  200,  200,  200,  200, 1343,  200,
     1343, 1343,  200,  200,  976,  200,  979,  200, 1343, 1343,
      200,  200,  978,  977,  200,  200,  200,  200,  200,  200,

     1343,  200,  980,  200,  200, 1343,  200, 1343, 1343,  200,
      200, 1343,  200,  979, 1343, 1343, 1343,  200, 1343,  978,
      981,  200,  200,  200,  200,  200,  200,  200,  200,  980,
      982,  200,  200,  200,  200,  200,  200,  200,  983,  200,
      200, 1343, 1343, 1343, 1343,  200, 1343,  981, 1343, 1343,
      200, 1343,  200, 1343,  200,  200, 1343,  982, 1343,  200,
     1343,  200,  200, 1343,  200,  983,  200,  200, 1343,  200,
      200,  200,  200,  200,  200,  200, 1343,  200, 1343,  200,
      200,  200,  200,  985,  200, 1343,  984,  200,  200,  200,
      200,  200, 1343,  200,  200, 1343,  200,  200,  200, 1343,

      200,  200,  200,  200,  200, 1343,  200,  200,  200, 1343,
      985,  200, 1343,  984,  200,  200,  200,  200,  200, 1343,
      200,  200,  200, 1343,  200,  200,  200,  200,  200,  986,
      200,  200,  200,  200,  200, 1343, 1343,  200,  200, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,  200,
     1343,  200,  200,  200,  200,  200,  986, 1343, 1343,  200,
      200,  200, 1343, 1343,  200,  200,  200,  200,  200,  200,
     1343, 1062,  200,  200,  200,  200,  200, 1343,  200,  200,
     1061,  200,  200, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343,  200,  200,  200,  200,  200,  200, 1343, 1062,  200,

      200,  200,  200,  200, 1343,  200,  200, 1061,  200,  200,
     1063,  200, 1343, 1343,  200,  200, 1343, 1343,  200,  200,
      200,  200, 1343, 1066,  200, 1065, 1064, 1343,  200,  200,
      200,  200, 1343,  200,  200, 1343, 1343, 1063,  200,  200,
     1343,  200,  200, 1343,  200, 1343, 1343,  200,  200,  200,
     1066,  200, 1065, 1064, 1343,  200,  200,  200,  200, 1343,
      200,  200, 1067,  200,  200, 1068,  200, 1343,  200, 1343,
      200,  200, 1343, 1343,  200,  200,  200, 1343, 1343, 1343,
     1343, 1343, 1343, 1343,  200, 1343,  200, 1343,  200, 1067,
      200,  200, 1068,  200, 1069,  200,  200,  200,  200, 1071,

      200,  200,  200,  200,  200,  200, 1070, 1072,  200,  200,
     1343,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200, 1069, 1073,  200,  200,  200, 1071,  200,  200, 1343,
      200,  200,  200, 1070, 1072,  200,  200, 1343,  200,  200,
     1343,  200, 1343,  200,  200,  200,  200, 1343,  200, 1073,
     1343,  200,  200, 1075, 1343,  200, 1077,  200, 1074, 1343,
      200,  200, 1076, 1343,  200,  200,  200,  200,  200,  200,
     1343, 1343, 1343, 1343,  200,  200,  200,  200, 1343,  200,
     1075, 1343,  200, 1077,  200, 1074,  200,  200,  200, 1076,
     1343,  200,  200,  200,  200,  200,  200, 1343, 1343, 1343,

     1343,  200,  200,  200,  200, 1343,  200,  200, 1343,  200,
     1078,  200, 1343,  200, 1343, 1343,  200,  200,  200,  200,
     1080, 1343, 1079, 1343, 1343,  200,  200,  200, 1343,  200,
      200, 1081, 1343,  200,  200,  200,  200, 1078,  200, 1343,
     1082,  200, 1343,  200,  200,  200,  200, 1080, 1343, 1079,
     1343,  200,  200,  200,  200, 1083,  200,  200, 1081,  200,
     1343, 1343,  200,  200,  200,  200,  200, 1082,  200, 1343,
      200, 1086, 1343,  200,  200,  200,  200, 1343,  200, 1343,
      200, 1343, 1083,  200,  200, 1084,  200, 1343,  200, 1343,
      200,  200,  200,  200,  200, 1343,  200,  200, 1086, 1085,

     1087,  200,  200,  200,  200, 1343,  200,  200, 1088,  200,
      200,  200, 1084,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200, 1343, 1343, 1085, 1087,  200,  200,
      200,  200, 1343,  200, 1343, 1088,  200,  200,  200, 1343,
      200,  200, 1343,  200,  200,  200,  200,  200,  200,  200,
     1343, 1343, 1343, 1343,  200,  200,  200,  200, 1343,  200,
     1343, 1343, 1089,  200,  200,  200, 1091, 1343,  200,  200,
      200,  200,  200,  200, 1090,  200, 1343, 1092,  200,  200,
     1343,  200,  200, 1343, 1343, 1343,  200, 1343, 1343, 1089,
      200,  200, 1343, 1091, 1343,  200,  200,  200, 1343,  200,

      200, 1090, 1343, 1093, 1092,  200,  200, 1343,  200,  200,
      200,  200,  200,  200,  200,  200, 1343, 1343,  200,  200,
      200, 1343, 1343,  200,  200, 1343, 1343, 1343, 1343, 1343,
     1093, 1343, 1343, 1343, 1343,  200, 1343,  200,  200,  200,
      200,  200,  200, 1343, 1343,  200,  200,  200, 1343, 1343,
      200,  200,  200, 1343,  200,  200,  200,  200,  200,  200,
     1094, 1343,  200,  200,  200, 1343, 1343,  200,  200, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,  200,
     1343,  200,  200,  200,  200,  200,  200, 1094, 1343,  200,
      200,  200, 1343, 1343,  200,  200,  200, 1096,  200, 1343,

     1343,  200, 1343,  200, 1095, 1343, 1343,  200,  200,  200,
     1343,  200, 1343, 1343, 1343, 1343, 1097,  200, 1343, 1098,
     1099,  200,  200,  200, 1096,  200, 1343,  200,  200, 1343,
      200, 1095,  200, 1343,  200,  200,  200, 1343,  200, 1343,
     1343, 1343, 1343, 1097,  200, 1343, 1098, 1099,  200,  200,
      200,  200,  200,  200,  200, 1343, 1100,  200,  200,  200,
     1343, 1343,  200,  200,  200, 1343,  200, 1343, 1343, 1343,
     1343,  200, 1343, 1343, 1343, 1343,  200,  200,  200,  200,
      200, 1343, 1343, 1100,  200,  200, 1343, 1343, 1343,  200,
      200,  200,  200,  200,  200,  200, 1101,  200,  200,  200,

      200, 1343,  200,  200,  200, 1343,  200,  200,  200, 1343,
      200, 1343, 1343, 1343, 1343, 1102,  200, 1343, 1343,  200,
      200,  200,  200, 1101,  200, 1343,  200,  200, 1103,  200,
     1343,  200, 1343,  200,  200,  200, 1343,  200, 1343,  200,
     1343,  200, 1102,  200, 1343, 1343,  200,  200, 1343, 1343,
      200,  200,  200, 1343, 1343, 1103, 1343,  200, 1104, 1105,
     1343, 1343,  200,  200, 1343,  200,  200, 1343,  200, 1343,
      200, 1343, 1343,  200, 1343,  200, 1343,  200,  200,  200,
     1343, 1343, 1343, 1343,  200, 1104, 1105, 1343, 1343,  200,
      200,  200,  200,  200,  200, 1343,  200,  200,  200, 1106,

     1343,  200,  200,  200, 1107,  200,  200,  200,  200, 1343,
     1343, 1343,  200, 1343,  200, 1343, 1343,  200,  200, 1343,
      200,  200, 1343,  200,  200,  200, 1106, 1343,  200, 1343,
      200, 1107,  200,  200,  200,  200, 1343, 1343,  200,  200,
     1343,  200,  200, 1343,  200, 1109,  200, 1343,  200, 1343,
      200,  200, 1343, 1108, 1343, 1343,  200, 1343,  200, 1343,
     1343, 1343, 1343, 1343, 1343,  200,  200, 1343, 1343,  200,
     1343, 1343, 1109,  200,  200,  200, 1343,  200,  200, 1343,
     1108, 1343,  200,  200,  200,  200,  200, 1110, 1343, 1343,
     1343, 1343,  200,  200,  200, 1111,  200, 1343, 1343, 1343,

      200,  200,  200, 1343, 1343,  200,  200, 1343, 1112,  200,
     1343,  200,  200,  200, 1110, 1343,  200, 1343,  200,  200,
      200,  200, 1111,  200, 1113, 1343, 1343,  200,  200,  200,
      200, 1343,  200,  200, 1343, 1112,  200, 1343, 1343,  200,
      200, 1343,  200,  200, 1343,  200, 1114,  200, 1343, 1343,
      200, 1113,  200, 1343,  200,  200, 1343,  200, 1115,  200,
      200, 1343,  200,  200,  200, 1343,  200,  200,  200,  200,
      200, 1343,  200, 1114,  200, 1116,  200,  200, 1343,  200,
      200,  200,  200, 1343,  200, 1115,  200,  200,  200,  200,
      200,  200, 1118,  200,  200,  200,  200,  200,  200,  200,

      200,  200, 1116,  200, 1343, 1117, 1343,  200,  200,  200,
      200,  200, 1343,  200, 1343,  200, 1120,  200, 1343, 1118,
      200,  200, 1343,  200,  200,  200, 1343,  200, 1119,  200,
      200, 1343, 1117,  200,  200,  200,  200,  200, 1343,  200,
      200, 1121, 1343, 1120, 1343, 1343,  200,  200, 1343,  200,
     1343,  200,  200, 1343,  200, 1119,  200,  200, 1122,  200,
      200,  200, 1343,  200,  200, 1343,  200,  200, 1121, 1343,
      200, 1343,  200,  200, 1343, 1343,  200,  200, 1123,  200,
     1343,  200,  200, 1124, 1343, 1122,  200, 1343, 1343, 1125,
     1343,  200, 1343, 1343,  200, 1343,  200,  200, 1343,  200,

      200,  200,  200, 1343,  200, 1123,  200,  200, 1343,  200,
     1124, 1343,  200,  200, 1343, 1126, 1125, 1343, 1343, 1343,
      200,  200, 1343,  200,  200,  200,  200,  200,  200,  200,
     1343,  200, 1343,  200,  200, 1343,  200, 1343, 1343,  200,
      200, 1343, 1126, 1343, 1127, 1128,  200,  200,  200, 1343,
      200,  200,  200,  200,  200, 1343,  200, 1343,  200, 1343,
     1343, 1343, 1343,  200,  200, 1343,  200, 1343, 1343, 1343,
     1129, 1127, 1128,  200,  200,  200, 1343,  200,  200, 1343,
      200,  200,  200,  200, 1343, 1343, 1343,  200,  200,  200,
      200,  200, 1343,  200, 1130, 1131, 1343, 1129,  200,  200,

     1343,  200, 1343, 1343, 1343,  200,  200,  200,  200,  200,
     1343, 1343, 1343,  200,  200,  200,  200,  200,  200, 1132,
     1343, 1130, 1131, 1343, 1343,  200,  200,  200, 1343,  200,
      200, 1343,  200,  200,  200,  200,  200,  200,  200,  200,
      200, 1343,  200,  200, 1343,  200, 1132, 1343,  200, 1343,
     1343, 1343, 1343, 1343,  200, 1343,  200,  200, 1178,  200,
     1343,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200, 1343, 1179,  200, 1181,  200,  200,  200,
      200,  200, 1343,  200,  200, 1178,  200,  200,  200,  200,
      200, 1343, 1180,  200,  200,  200,  200,  200,  200,  200,

     1343, 1179,  200, 1181,  200,  200,  200,  200,  200, 1343,
      200,  200,  200,  200,  200,  200,  200,  200, 1343, 1180,
      200, 1343,  200,  200,  200, 1343,  200, 1182,  200,  200,
     1343, 1343,  200, 1183,  200, 1184,  200,  200,  200,  200,
     1343,  200,  200,  200, 1343, 1343,  200,  200, 1343,  200,
     1343, 1343, 1343,  200, 1182,  200, 1343, 1343, 1343,  200,
     1183,  200, 1184,  200,  200,  200, 1343, 1343,  200,  200,
      200, 1343,  200,  200,  200, 1343,  200,  200,  200,  200,
     1186,  200,  200,  200, 1185, 1343,  200, 1343,  200, 1343,
     1343,  200, 1343, 1343, 1343, 1343, 1343,  200, 1343,  200,

     1343, 1343, 1343,  200,  200,  200,  200, 1186,  200,  200,
      200, 1185, 1187,  200, 1343,  200, 1343, 1188,  200,  200,
     1343,  200, 1343,  200,  200, 1343, 1343, 1343,  200,  200,
      200, 1343,  200,  200, 1343, 1343, 1343,  200, 1189, 1187,
     1343, 1343,  200, 1343, 1188, 1343,  200, 1343,  200, 1343,
      200,  200, 1343, 1343, 1343,  200,  200,  200, 1343,  200,
      200,  200, 1190,  200,  200, 1189, 1343, 1343,  200,  200,
     1343, 1343,  200,  200,  200,  200, 1343,  200, 1343,  200,
     1343, 1343,  200, 1343,  200, 1343, 1343,  200,  200, 1190,
      200, 1343, 1343, 1343, 1191,  200, 1343, 1343, 1343,  200,

      200,  200,  200,  200,  200,  200,  200, 1343, 1343,  200,
      200,  200, 1343, 1343,  200,  200,  200,  200,  200, 1192,
     1343, 1191, 1343,  200,  200, 1343, 1343, 1343,  200,  200,
      200, 1343,  200, 1343, 1343, 1343, 1343,  200, 1343, 1343,
     1343, 1343,  200,  200,  200,  200, 1192,  200, 1343,  200,
      200,  200, 1343, 1193,  200,  200,  200,  200,  200,  200,
      200, 1343,  200,  200, 1343,  200,  200, 1343, 1343, 1343,
      200, 1343,  200,  200,  200, 1343,  200, 1343, 1343, 1343,
     1193,  200,  200, 1343,  200,  200,  200,  200, 1343,  200,
      200, 1343,  200,  200,  200, 1343, 1194,  200,  200,  200,

      200,  200, 1196,  200, 1343,  200,  200, 1343,  200,  200,
      200, 1195,  200, 1343,  200,  200,  200, 1343,  200, 1200,
      200,  200, 1343, 1194,  200,  200,  200, 1343,  200, 1196,
      200, 1343,  200,  200, 1343,  200,  200,  200, 1195,  200,
      200,  200,  200,  200,  200,  200, 1200,  200,  200, 1343,
      200,  200,  200,  200, 1343, 1343, 1343, 1343,  200, 1343,
      200, 1343,  200,  200, 1343, 1343,  200,  200,  200, 1343,
      200,  200,  200, 1343,  200,  200, 1343,  200, 1343,  200,
      200, 1343,  200, 1343,  200,  200, 1343,  200,  200,  200,
      200, 1343,  200,  200,  200,  200,  200,  200, 1343,  200,

     1343,  200,  200, 1343,  200, 1197, 1198,  200, 1343,  200,
      200,  200,  200, 1343, 1199,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200, 1343,  200, 1343,  200,  200,
      200,  200, 1197, 1198, 1343, 1343, 1343,  200,  200,  200,
      200, 1199,  200,  200, 1343,  200,  200,  200, 1343,  200,
     1343,  200,  200,  200,  200,  200,  200,  200, 1343, 1343,
     1343,  200,  200, 1343, 1343,  200,  200,  200, 1201,  200,
      200, 1343, 1343,  200, 1343,  200, 1343, 1343, 1343,  200,
      200,  200, 1343,  200,  200, 1343,  200, 1202,  200,  200,
     1343,  200,  200,  200,  200, 1201,  200,  200,  200,  200,

      200, 1343,  200, 1343,  200,  200, 1343,  200, 1343, 1343,
      200,  200, 1343,  200, 1202, 1343, 1343, 1343,  200,  200,
     1343,  200,  200,  200,  200,  200,  200,  200, 1343,  200,
     1203,  200,  200, 1343,  200,  200, 1343,  200,  200, 1204,
     1206, 1343, 1205,  200,  200,  200, 1343,  200,  200,  200,
      200,  200, 1343,  200, 1343,  200,  200, 1203,  200, 1343,
      200,  200,  200, 1207, 1343,  200, 1204, 1206, 1343, 1205,
      200,  200,  200, 1343,  200,  200, 1343,  200, 1343,  200,
      200, 1343,  200,  200, 1343,  200, 1208,  200,  200,  200,
     1207, 1343,  200, 1343, 1343, 1209, 1343,  200,  200,  200,

     1343,  200,  200, 1343,  200, 1343,  200,  200,  200, 1210,
      200, 1343, 1343, 1208,  200,  200,  200,  200, 1343,  200,
     1343, 1343, 1209, 1343,  200,  200,  200, 1343,  200,  200,
      200,  200,  200, 1343,  200,  200, 1210, 1211,  200, 1343,
      200,  200,  200, 1343,  200,  200,  200, 1343, 1212,  200,
      200,  200, 1343,  200, 1343, 1343,  200,  200,  200,  200,
     1343,  200, 1343, 1343, 1211,  200, 1343,  200, 1343,  200,
     1343, 1343,  200,  200, 1343, 1212,  200,  200,  200, 1213,
      200,  200,  200,  200,  200,  200,  200, 1214,  200,  200,
     1343,  200, 1343, 1343,  200, 1343, 1343, 1343,  200, 1343,

      200, 1343, 1343, 1343, 1343,  200, 1213, 1343,  200,  200,
      200,  200, 1343,  200, 1214, 1215,  200, 1343,  200, 1343,
     1216,  200, 1343, 1343, 1343,  200,  200,  200,  200,  200,
     1343,  200,  200,  200, 1343, 1343,  200,  200,  200, 1343,
     1343,  200, 1215, 1343, 1343, 1343, 1343, 1216, 1343, 1343,
     1343, 1343, 1343,  200, 1218,  200,  200, 1343,  200,  200,
      200,  200,  200,  200,  200,  200,  200, 1217,  200,  200,
      200,  200,  200,  200,  200,  200, 1343,  200, 1343, 1343,
      200, 1218,  200, 1343, 1343,  200,  200, 1343,  200,  200,
     1343,  200, 1343,  200, 1217, 1343,  200,  200,  200,  200,

      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200, 1343,  200,  200,  200,  200,  200, 1220,  200,  200,
     1219,  200, 1343, 1343,  200, 1343,  200, 1343, 1343,  200,
      200, 1343,  200,  200, 1343,  200, 1343,  200, 1343, 1343,
      200,  200,  200,  200, 1220,  200,  200, 1219,  200, 1343,
      200,  200,  200,  200, 1343, 1343,  200,  200,  200,  200,
      200,  200,  200, 1343, 1343,  200,  200, 1343, 1343, 1343,
      200,  200, 1343, 1343, 1343, 1343, 1343,  200, 1343,  200,
     1343, 1343, 1343, 1343,  200,  200,  200,  200,  200,  200,
     1343, 1343,  200,  200,  200, 1245,  200,  200,  200,  200,

      200,  200, 1343, 1343,  200,  200,  200, 1343, 1343,  200,
      200, 1343, 1343,  200, 1343,  200, 1246, 1223, 1343,  200,
      200,  200, 1245,  200, 1343, 1343,  200,  200,  200,  200,
     1343,  200,  200,  200, 1343, 1343,  200,  200, 1343, 1247,
      200,  200,  200,  200, 1343,  200,  200,  200, 1343,  200,
     1248,  200, 1343,  200,  200, 1343,  200,  200,  200,  200,
     1343,  200, 1343,  200,  200, 1343, 1247, 1343,  200, 1343,
      200, 1343,  200,  200,  200, 1343,  200, 1248,  200,  200,
      200,  200, 1343,  200,  200,  200,  200, 1343,  200,  200,
      200,  200, 1249,  200, 1343, 1343,  200,  200, 1343,  200,

      200,  200,  200,  200, 1343,  200,  200, 1251, 1250,  200,
      200, 1343,  200,  200, 1343,  200,  200,  200,  200, 1249,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200, 1343,  200, 1343, 1251, 1250,  200,  200,  200,  200,
      200, 1343,  200,  200,  200,  200, 1343,  200,  200,  200,
     1343, 1343,  200,  200,  200,  200, 1343, 1343, 1343,  200,
      200, 1252,  200,  200,  200,  200,  200,  200, 1343, 1343,
      200,  200,  200, 1343,  200, 1343, 1343, 1343, 1343, 1343,
      200, 1343, 1343, 1343, 1343, 1343,  200,  200, 1252,  200,
      200, 1253, 1343,  200,  200, 1343, 1343, 1343,  200,  200,

      200, 1254,  200,  200,  200, 1343,  200,  200,  200, 1343,
     1343,  200,  200,  200, 1343, 1343,  200, 1343, 1253, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343,  200, 1254,  200,
      200,  200, 1343,  200,  200,  200, 1343, 1343,  200,  200,
      200, 1343,  200,  200,  200,  200, 1256,  200, 1343,  200,
      200, 1255,  200, 1343,  200,  200,  200,  200, 1343,  200,
     1343, 1343, 1343, 1343, 1343, 1257,  200, 1343, 1343,  200,
     1343,  200,  200, 1256,  200,  200,  200,  200, 1255,  200,
     1343,  200,  200,  200,  200, 1343,  200,  200,  200, 1258,
      200, 1343, 1257,  200,  200,  200,  200, 1343,  200,  200,

      200, 1343,  200,  200, 1343, 1343, 1343, 1343,  200, 1343,
     1343, 1343, 1343, 1343,  200,  200, 1258,  200, 1343, 1343,
     1343,  200,  200,  200, 1343,  200,  200,  200, 1343,  200,
      200,  200, 1343, 1343, 1343,  200,  200, 1259, 1343, 1260,
      200,  200,  200,  200, 1343,  200, 1343,  200, 1343, 1343,
      200, 1343,  200, 1343, 1343,  200,  200, 1343,  200, 1343,
     1343, 1343, 1343,  200, 1259, 1343, 1260,  200,  200,  200,
      200,  200,  200,  200,  200, 1343, 1343,  200,  200,  200,
     1343, 1343,  200,  200,  200, 1343,  200,  200, 1343,  200,
     1343,  200, 1261, 1343,  200,  200,  200,  200,  200,  200,

      200, 1262,  200, 1343, 1343,  200, 1343,  200, 1343, 1343,
      200,  200, 1343,  200,  200, 1343,  200, 1343,  200, 1261,
     1343,  200,  200,  200,  200, 1343,  200, 1343, 1262,  200,
      200, 1263,  200,  200,  200,  200, 1343,  200, 1343, 1343,
      200, 1264,  200, 1265, 1343,  200, 1266,  200, 1343, 1343,
      200,  200, 1343,  200, 1343,  200,  200,  200, 1263,  200,
      200,  200,  200,  200,  200, 1343,  200,  200, 1264,  200,
     1265,  200,  200, 1266,  200,  200, 1343,  200,  200,  200,
      200, 1343,  200,  200, 1343,  200, 1343,  200,  200, 1343,
      200,  200, 1343,  200, 1343,  200, 1343,  200,  200,  200,

     1281,  200,  200,  200, 1343,  200,  200,  200, 1343,  200,
     1343,  200,  200,  200,  200, 1343, 1283,  200,  200,  200,
     1343,  200,  200,  200,  200,  200,  200, 1281,  200,  200,
      200, 1343,  200,  200,  200,  200,  200,  200,  200, 1343,
      200,  200, 1343, 1283,  200,  200,  200,  200,  200,  200,
      200, 1284,  200,  200, 1343, 1343,  200,  200, 1343,  200,
      200, 1343,  200, 1343,  200, 1343, 1343,  200,  200,  200,
     1343,  200,  200, 1343,  200,  200,  200,  200, 1284,  200,
      200, 1343, 1285, 1343,  200,  200,  200,  200, 1343, 1343,
     1343, 1343, 1343,  200,  200,  200,  200,  200,  200, 1343,

     1343, 1343,  200,  200,  200, 1343,  200, 1343, 1343, 1285,
     1343, 1343,  200,  200,  200,  200, 1343, 1343, 1343,  200,
      200, 1343,  200, 1343,  200,  200, 1288,  200, 1286, 1287,
      200,  200, 1343,  200,  200,  200, 1343, 1343,  200,  200,
      200, 1343,  200,  200, 1343, 1343,  200, 1343, 1343, 1343,
     1343, 1343,  200, 1288,  200, 1286, 1287,  200,  200,  200,
      200,  200,  200, 1343,  200,  200,  200, 1343, 1343,  200,
      200,  200, 1343,  200, 1343,  200, 1343,  200,  200, 1343,
     1343, 1343,  200,  200,  200, 1343,  200,  200, 1343, 1343,
     1343,  200, 1343,  200, 1343, 1343,  200,  200,  200, 1343,

      200, 1343,  200,  200,  200,  200, 1343,  200, 1343,  200,
      200,  200,  200, 1289,  200,  200, 1291,  200, 1290,  200,
      200, 1343,  200, 1343,  200,  200, 1343,  200, 1343, 1343,
      200, 1343,  200, 1343,  200,  200, 1292,  200,  200,  200,
     1289,  200,  200, 1291,  200, 1290,  200,  200, 1343,  200,
     1300, 1294,  200, 1343,  200, 1343, 1302,  200, 1343,  200,
      200,  200,  200, 1292,  200,  200,  200, 1343,  200, 1343,
      200,  200,  200, 1343,  200,  200,  200, 1303, 1343,  200,
     1343,  200,  200, 1302,  200,  200, 1343,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,

      200,  200,  200,  200, 1303, 1343,  200, 1343,  200,  200,
      200, 1343,  200,  200, 1343,  200,  200,  200,  200, 1343,
      200,  200,  200,  200,  200,  200,  200,  200,  200, 1343,
     1343,  200,  200, 1343,  200, 1343,  200,  200, 1343,  200,
      200, 1343,  200, 1343,  200,  200, 1343,  200, 1343,  200,
      200,  200,  200,  200,  200, 1304, 1343, 1343,  200,  200,
      200,  200, 1343,  200,  200,  200,  200, 1343,  200,  200,
      200,  200,  200,  200,  200, 1343,  200,  200,  200,  200,
     1312,  200, 1304, 1343,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200, 1343,  200,  200,  200,  200, 1343,

      200,  200, 1343, 1343, 1343,  200,  200, 1312, 1343, 1343,
     1343,  200,  200,  200, 1343,  200,  200,  200, 1343, 1343,
      200, 1343, 1343, 1343, 1343,  200,   46,   46,   46,   46,
       46,   88, 1343, 1343,   88,   88,  185,  185,  185, 1343,
      185,  187, 1343,  187,  187,  187,  190, 1343,  190,  190,
      190,  200, 1343,  200,  200,  200,    7, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343
    } ;

static const flex_int16_t yy_chk[8834] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   27,   28,   22,   23,   30,   21,
       27,   21,   22,   28,   23,   21,   21,   31,   41,   28,

       41,   23,   22,   41,   23, 1346,   44,   23,   21,   22,
       21,   27,   28,   22,   23,   30,   21,   27,   21,   22,
       28,   23,   21,   21,   31,   41,   28,   41,   23,   22,
       41,   23,   24,   44,   23,   25,   24,   25,   49,   49,
       24,   32,   25,   99,   33,   32,   24,   25,   33,   24,
       55,   32,   50,   50,   33,   43,   43,   58,   58,   24,
     1340,   55,   25,   24,   25, 1339,   34,   24,   32,   25,
       99,   33,   32,   24,   25,   33,   24,   26,   32,   36,
       34,   33,   43,   43,  100,   26,   34,   34,   26,  103,
       36,   26,   29,   34,   26, 1338,   36,   26,   29,   29,

       29,   42,   86,   86,   26,   29,   36,   34, 1337,   42,
     1335,  100,   26,   34,   34,   26,  103,   36,   26,   29,
     1333,   26,   35,   36,   26,   29,   29,   29,   42,  104,
       35,   38,   29,  101,   35,   38,   42,   35,   35,   38,
       81,  101,   81,  106,   81,   38, 1331,   81, 1329,   35,
      102, 1327,   81,  102, 1325,  107,  104,   35,   38, 1323,
      101,   35,   38, 1321,   35,   35,   38,   81,  101,   81,
      106,   81,   38,   39,   81,   39,  110,  102,   39,   81,
      102,   39,  107,   39,  113,   39,   39,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,  188,  188, 1319,

       39, 1317,   39,  110, 1315,   39,  105,  105,   39,  109,
       39,  113,   39,   39,   40,  112,  109,   67,   40,   67,
      105,   40,   40,   67,   67,  112,  116,  116,   40,   67,
      117,   40, 1313,  105,  105, 1309,  109, 1141, 1141, 1268,
     1268,   40,  112,  109,   67,   40,   67,  105,   40,   40,
       67,   67,  112,  116,  116,   40,   67,  117,   40,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       61,   61,  118,   61,   61,   61,   61,   61,   61,  119,
       68,  114, 1305, 1299,   68, 1293,  114,  121,   68,   61,
       61,   61,   70,  123,   68,   61,   70,   61,  124,  118,

      120,  120,   70,   61,   68,   61,  119,   68,  114,   61,
       61,   68,   70,  114,  121,   68,  125,  127, 1280,   70,
      123,   68,   61,   70,   61,  124, 1267,  120,  120,   70,
       61,   68,   61, 1244,  128, 1221,   61,   61, 1177,   70,
     1133, 1060,  987,  125,  127,   61,   62,   62,  890,   62,
       62,   62,   62,   62,   62,  793,  667,  129,   71,   72,
       73,  128,   71,   72,   73,   62,   62,   62,   71,   72,
       73,  130,   62,   77,  132,  126,   62,   77,   71,   72,
       73,  126,   62,   77,  129,   71,   72,   73,  133,   71,
       72,   73,   62,   77,  541,   71,   72,   73,  130,   62,

       77,  132,  126,   62,   77,   71,   72,   73,  126,   62,
       77,  415,  288,   83,  135,  133,   83,   83,  136,   62,
       77,   62,   63,   83,   78,  192,   63,  138,   78,   63,
       63,  131,   78,   83,  131,  190,   63,  139,   78,   63,
       83,  135,   63,   83,   83,  136,   63,   90,   78,   63,
       83,   78,  137,   63,  138,   78,   63,   63,  131,   78,
       83,  131,  137,   63,  139,   78,   63,  137,  137,   63,
       88,   85,   82,   63,   64,   78,   82,   84,   64,  137,
       82,   84,   64,  140,  141,  144,   82,   84,   64,  137,
      142,   64,  142,  145,  137,  137,   82,   84,   64,   82,

       60,   64,   59,   82,   84,   64,   52,   82,   84,   64,
      140,  141,  144,   82,   84,   64,   51,  142,   64,  142,
      145,  146,  147,   82,   84,   64,   65,  111,  111,  111,
       65,  111,  115,   65,  115,   65,   65,  115,  149,  143,
       65,  143,  150,  115,  151,   65,   65,   47,  146,  147,
      115,   45,  143,   65,  111,  111,  111,   65,  111,  115,
       65,  115,   65,   65,  115,  149,  143,   65,  143,  150,
      115,  151,   65,   65,   66,  148,  153,  115,  148,  143,
      154,   66,   66,  155,  156,   66,  157,  122,   66,  122,
      159,   66,  158,  122,   66,   20,  158,   19,  161,  163,

      122,   66,  148,  153,  122,  148,   11,  154,   66,   66,
      155,  156,   66,  157,  122,   66,  122,  159,   66,  158,
      122,   66,   69,  158,  160,  161,  163,  122,   69,   69,
       69,  122,  162,  165,  166,   69,  164,  160,  167,  168,
       69,    7,  160,  162,  169,  164,  170,  165,    4,   69,
      172,  160,  173,  164,  174,   69,   69,   69,    3,  162,
      165,  166,   69,  164,  160,  167,  168,   69,   74,  160,
      162,  169,  164,  170,  165,   74,  171,  172,  175,  173,
      164,  174,   74,  177,  176,   74,  178,  171,   74,   74,
        0,  176,    0,  179,  176,   74,  181,    0,  175,  179,

      182,  183,   74,  171,    0,  175,  180,    0,  291,   74,
      177,  176,   74,  178,  171,   74,   74,   75,  176,  180,
      179,  176,   75,  181,   75,  175,  179,  182,  183,  293,
       75,   75,  200,  180,   75,  291,  200,   75,   75,    0,
        0,    0,  200,  294,   75,    0,  180,  296,  298,   75,
        0,   75,  200,    0,    0,  299,  293,   75,   75,  200,
      300,   75,  301,  200,   75,   75,   76,  201,  201,  200,
      294,  302,  201,   76,  296,  298,  303,   76,  201,  200,
       76,  202,  299,   76,  305,  202,   76,  300,  201,  301,
      306,  202,    0,   76,  201,  201,  202,    0,  302,  201,

       76,  202,  307,  303,   76,  201,  308,   76,  202,    0,
       76,  305,  202,   76,   79,  201,   79,  306,  202,   79,
       79,    0,   79,  202,   79,  309,   79,   79,  202,  307,
      310,  311,  312,  308,  313,  314,   79,    0,  315,    0,
        0,   79,    0,   79,    0,    0,   79,   79,  203,   79,
      203,   79,  309,   79,   79,  203,  203,  310,  311,  312,
      203,  313,  314,   79,   80,  315,  209,  205,   80,  205,
      209,   80,   80,  205,  205,  203,  209,  203,   80,  205,
      316,   80,  203,  203,  317,  319,  209,  203,   80,    0,
        0,   80,    0,  209,  205,   80,  205,  209,   80,   80,

      205,  205,    0,  209,    0,   80,  205,  316,   80,    0,
        0,  317,  319,  209,    0,   80,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  204,  206,
      208,  204,  304,  320,  304,  208,  321,  208,  206,  204,
      206,  204,  208,  322,    0,  206,  204,  208,    0,  304,

      206,  204,    0,    0,    0,  204,  206,  208,  204,  304,
      320,  304,  208,  321,  208,  206,  204,  206,  204,  208,
      322,  210,  206,  204,  208,  210,  304,  206,  204,  207,
      207,  210,  211,  323,  211,  207,  318,  207,    0,  211,
        0,  210,  207,  207,  211,    0,  324,  207,  210,  325,
        0,  318,  210,  327,  212,  328,  207,  207,  210,  211,
      323,  211,  207,  318,  207,  212,  211,  212,  210,  207,
      207,  211,  212,  324,  207,    0,  325,  212,  318,    0,
      327,  212,  328,  214,    0,    0,  329,  214,  330,  331,
        0,    0,  212,  214,  212,  332,  333,  334,  215,  212,

        0,  335,  215,  214,  212,  213,  213,  213,  215,  213,
      214,  215,  213,  329,  214,  330,  331,  213,  215,  336,
      214,  337,  332,  333,  334,  215,  338,  216,  335,  215,
      214,  216,  213,  213,  213,  215,  213,  216,  215,  213,
      339,  340,  216,  341,  213,  215,  336,  216,  337,  342,
        0,  343,  344,  338,  216,  345,    0,  346,  216,    0,
      347,    0,    0,    0,  216,  348,    0,  339,  340,  216,
      341,    0,  349,  350,  216,  217,  342,  217,  343,  344,
      217,  352,  345,  218,  346,  218,  217,  347,  217,  218,
      218,    0,  348,  217,  219,  218,  219,    0,  217,  349,

      350,  219,  217,  219,  217,  353,  219,  217,  352,  351,
      218,  355,  218,  217,  220,  217,  218,  218,  220,  351,
      217,  219,  218,  219,  220,  217,    0,  356,  219,    0,
      219,    0,  353,  219,  220,  221,  351,  221,  355,  357,
      358,  220,  221,  360,  223,  220,  351,  221,    0,    0,
      361,  220,    0,  223,  356,  223,  225,    0,  225,    0,
      223,  220,  221,  225,  221,  223,  357,  358,  225,  221,
      360,  223,  362,  363,  221,  222,  222,  361,    0,  359,
      223,  364,  223,  225,  222,  225,  222,  223,  366,  359,
      225,  222,  223,  367,  368,  225,  222,    0,    0,  362,

      363,  369,  222,  222,  370,  226,  359,  226,  364,    0,
        0,  222,  226,  222,    0,  366,  359,  226,  222,    0,
      367,  368,  371,  222,  224,  227,  224,    0,  369,  227,
      224,  370,  226,    0,  226,  227,  224,  224,  372,  226,
        0,  224,    0,    0,  226,  227,  224,    0,  228,  371,
      228,  224,  227,  224,  228,  228,  227,  224,    0,    0,
      228,  374,  227,  224,  224,  372,  229,  230,  224,  230,
      229,  376,  227,  224,  230,  228,  229,  228,    0,  230,
      231,  228,  228,    0,  231,  232,  229,  228,  374,  232,
      231,    0,  377,  229,  230,  232,  230,  229,  376,  378,

      231,  230,  234,  229,  234,  232,  230,  231,  233,  234,
      233,  231,  232,  229,  234,  233,  232,  231,  233,  377,
      233,  235,  232,  235,    0,  379,  378,  231,  235,  234,
      235,  234,  232,  235,  373,  233,  234,  233,    0,  237,
      380,  234,  233,  237,  236,  233,  236,  233,  235,  237,
      235,  236,  379,  373,  238,  235,  236,  235,  238,  237,
      235,  373,    0,  381,  238,  238,  237,  380,  382,  383,
      237,  236,  384,  236,  238,    0,  237,  240,  236,  240,
      373,  238,    0,  236,  240,  238,  237,  375,    0,  240,
      381,  238,  238,  241,    0,  382,  383,  241,    0,  384,

      375,  238,  239,  241,  240,  242,  240,  385,    0,  242,
      239,  240,  239,  241,  375,  242,  240,  239,  239,    0,
      241,  277,  239,    0,  241,  242,    0,  375,  277,  239,
      241,    0,  242,  386,  385,  277,  242,  239,  277,  239,
      241,  277,  242,  388,  239,  239,  243,  243,  277,  239,
      243,  246,  242,  246,    0,  277,  243,  246,  246,    0,
      386,  389,  277,  246,    0,  277,  243,    0,  277,  390,
      388,    0,  257,  243,  243,    0,  257,  243,  246,  247,
      246,  247,  257,  243,  246,  246,  247,    0,  389,    0,
      246,  247,  257,  243,  244,    0,  390,  391,  244,  257,

      244,  392,  244,  257,  244,    0,  247,  393,  247,  257,
      394,  395,  260,  247,  244,    0,  260,    0,  247,  257,
        0,  244,  260,  396,  391,  244,    0,  244,  392,  244,
        0,  244,  260,    0,  393,    0,  397,  394,  395,  260,
      398,  244,  245,  260,  245,  248,  400,  248,  402,  260,
      396,  404,  248,  245,  249,  245,  249,  248,  405,  260,
      245,  249,  249,  397,  406,  245,  249,  398,  407,  245,
        0,  245,  248,  400,  248,  402,  408,    0,  404,  248,
      245,  249,  245,  249,  248,  405,    0,  245,  249,  249,
        0,  406,  245,  249,  250,  407,  250,  251,    0,  251,

      409,  250,  250,  408,  251,  250,  250,  252,    0,  251,
      254,  403,  254,  403,    0,    0,    0,  254,  252,    0,
      252,  250,  254,  250,  251,  252,  251,  409,  250,  250,
      252,  251,  250,  250,  252,  253,  251,  254,  403,  254,
      403,  253,  401,  253,  254,  252,  255,  252,  253,  254,
        0,  401,  252,  253,  255,    0,  255,  252,    0,    0,
      410,  255,  253,  411,  412,    0,  255,  411,  253,  401,
      253,    0,  413,  255,  542,  253,    0,  256,  401,  256,
      253,  255,  258,  255,  256,  256,  258,  410,  255,  256,
      411,  412,  258,  255,  411,  258,  261,    0,  261,  413,

      543,  542,  258,  261,  256,  544,  256,    0,  261,  258,
      259,  256,  256,  258,  259,  262,  256,  545,  259,  258,
        0,  546,  258,  261,  259,  261,  262,  543,  262,  258,
      261,    0,  544,  262,  259,  261,    0,  259,  262,    0,
        0,  259,  262,    0,  545,  259,  547,  263,  546,  548,
        0,  259,  263,  262,  263,  262,  264,  549,  264,  263,
      262,  259,  550,  264,  263,  262,  265,  264,  264,  552,
      265,    0,  265,  547,  263,    0,  548,  265,  555,  263,
        0,  263,  265,  264,  549,  264,  263,  556,  557,  550,
      264,  263,    0,  265,  264,  264,  552,  265,  267,  265,

        0,    0,  267,  268,  265,  555,  267,  268,  558,  265,
      266,  560,  267,  268,  556,  557,  561,  562,  563,  266,
        0,  266,  267,  268,    0,  267,  266,  266,  269,  267,
      268,  266,  269,  267,  268,  558,  269,  266,  560,  267,
      268,    0,  269,  561,  562,  563,  266,  270,  266,  267,
      268,  270,  269,  266,  266,  269,  565,  270,  266,  269,
      270,  566,  271,  269,    0,  567,  271,  270,  272,  269,
      271,  272,    0,    0,  270,  272,  271,  568,  270,  269,
      569,  272,    0,  565,  270,  570,  271,  270,  566,  271,
      571,  272,  567,  271,  270,  272,  572,  271,  272,  273,

      273,  273,  272,  271,  568,  274,  273,  569,  272,  274,
      573,  273,  570,  271,    0,  274,    0,  571,  272,  576,
        0,  577,    0,  572,    0,  274,  273,  273,  273,  279,
      279,  275,  274,  273,  279,  275,  274,  573,  273,  275,
      279,  275,  274,  276,  578,  280,  576,  276,  577,  280,
      279,  275,  274,  276,  276,  280,  279,  279,  275,  579,
      580,  279,  275,  276,    0,  280,  275,  279,  275,  581,
      276,  578,  280,    0,  276,  582,  280,  279,  275,  583,
      276,  276,  280,  585,  586,  587,  579,  580,  590,    0,
      276,  278,  280,  281,  278,  281,  581,  591,  278,  281,

      281,  278,  582,  282,  278,  281,  583,  282,  593,  595,
      585,  586,  587,  282,  278,  590,  282,  596,  278,  597,
      281,  278,  281,  282,  591,  278,  281,  281,  278,  283,
      282,  278,  281,  283,  282,  593,  595,    0,  284,  283,
      282,  278,  284,  282,  596,  598,  597,  285,  284,  283,
      282,  285,  421,  284,  421,  285,  283,  599,  284,  421,
      283,  285,  600,  603,  421,  284,  283,  607,  609,  284,
      610,  285,  598,    0,  285,  284,  283,    0,  285,  421,
      284,  421,  285,    0,  599,  284,  421,    0,  285,  600,
      603,  421,    0,    0,  607,  609,    0,  610,  285,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  417,
      418,  419,  420,  417,  418,  419,  420,  612,  614,  417,
      418,  419,  420,    0,  613,  613,    0,  615,    0,  417,
      418,  419,  420,    0,    0,    0,  417,  418,  419,  420,
      417,  418,  419,  420,  612,  614,  417,  418,  419,  420,
      423,  613,  613,  422,  615,  422,  417,  418,  419,  420,
      422,  423,  424,  423,  424,  422,  425,    0,  423,  424,
      425,    0,  601,  423,  424,    0,  425,  423,  616,    0,
      422,  618,  422,  601,    0,    0,  425,  422,  423,  424,

      423,  424,  422,  425,  426,  423,  424,  425,  426,  601,
      423,  424,  427,  425,  426,  616,  427,  428,  618,  619,
      601,  428,  427,  425,  426,    0,  429,  428,  429,  620,
      427,  426,  427,  429,  621,  426,  623,  428,  429,  427,
      430,  426,  430,  427,  428,  624,  619,  430,  428,  427,
      626,  426,  430,  429,  428,  429,  620,  427,  432,  427,
      429,  621,  432,  623,  428,  429,    0,  430,  432,  430,
        0,  432,  624,    0,  430,    0,    0,  626,  432,  430,
      431,    0,  431,  433,  627,  432,  431,  433,  628,  432,
      629,    0,  431,  433,  631,  432,  434,  431,  432,  433,

      434,    0,  431,  433,  434,  432,  434,  431,  436,  431,
      433,  627,  436,  431,  433,  628,  434,  629,  436,  431,
      433,  631,    0,  434,  431,    0,  433,  434,  436,  431,
      433,  434,  435,  434,    0,  436,  435,    0,  632,  436,
      437,  633,  435,  434,  437,  436,  634,  435,  437,  438,
      636,  438,  435,    0,  437,  436,  438,  637,    0,  435,
        0,  438,    0,  435,  437,  632,  638,  437,  633,  435,
      639,  437,  642,  634,  435,  437,  438,  636,  438,  435,
      439,  437,  439,  438,  637,  440,  439,  439,  438,  440,
      643,  437,  439,  638,  441,  440,  441,  639,  644,  642,

      645,  441,  646,    0,  649,  440,  441,  439,  442,  439,
      442,  650,  440,  439,  439,  442,  440,  643,    0,  439,
      442,  441,  440,  441,    0,  644,  443,  645,  441,  646,
      443,  649,  440,  441,    0,  442,  443,  442,  650,  652,
      444,  445,  442,  653,  444,  445,  443,  442,  444,    0,
      654,  445,  655,  443,  444,  656,  445,  443,    0,    0,
      657,  445,    0,  443,  444,  658,  652,  444,  445,    0,
      653,  444,  445,  443,  446,  444,  446,  654,  445,  655,
      446,  444,  656,  445,  659,  447,  446,  657,  445,  447,
        0,  444,  658,    0,  448,  447,  446,    0,  448,  660,

      662,  446,  664,  446,  448,  447,    0,  446,    0,  448,
        0,  659,  447,  446,  448,    0,  447,  449,    0,    0,
      449,  448,  447,  446,  449,  448,  660,  662,    0,  664,
      449,  448,  447,  451,  666,  450,  448,  451,  452,  450,
      449,  448,  452,  451,  449,  450,  450,  449,  452,  796,
      798,  449,    0,  451,  800,  450,    0,  449,  452,  801,
      451,  666,  450,  802,  451,  452,  450,  449,  803,  452,
      451,    0,  450,  450,  453,  452,  796,  798,  453,  454,
      451,  800,  450,  454,  453,  452,  801,  454,  455,    0,
      802,    0,  455,  454,  453,  803,  804,  457,  455,  457,

      458,  453,  458,  454,  457,  453,  454,  458,  455,  457,
      454,  453,  458,    0,  454,  455,  456,    0,  456,  455,
      454,  453,  456,  804,  457,  455,  457,  458,  456,  458,
      454,  457,  805,  806,  458,  455,  457,    0,  456,  458,
      459,  807,  459,  456,  461,  456,  459,  459,  461,  456,
      808,  460,  459,  460,  461,  456,  810,  811,  460,  805,
      806,  812,  462,  460,  461,  456,  462,  459,  807,  459,
      462,  461,    0,  459,  459,  461,  462,  808,  460,  459,
      460,  461,    0,  810,  811,  460,  462,  813,  812,  462,
      460,  461,  463,  462,  463,  814,  815,  462,  817,  463,

      464,  464,  464,  462,  463,  818,  819,  464,  465,  465,
      465,    0,  464,  462,  813,  465,  820,  821,    0,  463,
      465,  463,  814,  815,    0,  817,  463,  464,  464,  464,
      822,  463,  818,  819,  464,  465,  465,  465,  466,  464,
      466,  467,  465,  820,  821,  466,  823,  465,  824,  825,
      466,  467,  468,  467,  468,  826,    0,  822,  467,  468,
        0,  468,    0,  467,  468,  466,    0,  466,  467,    0,
        0,  827,  466,  823,  830,  824,  825,  466,  467,  468,
      467,  468,  826,  469,  831,  467,  468,  469,  468,  469,
      467,  468,  470,  471,  469,  832,  470,  471,  827,  469,

        0,  830,  470,  471,    0,  472,    0,  833,  471,  472,
      469,  831,  470,  471,  469,  472,  469,  834,  472,  470,
      471,  469,  832,  470,  471,  472,  469,  473,    0,  470,
      471,  473,  472,  473,  833,  471,  472,  473,  837,  470,
      471,  840,  472,  841,  834,  472,  474,  473,    0,  475,
      474,  476,  472,  475,  473,  476,  474,    0,  473,  475,
      473,  476,  843,  846,  473,  837,  474,  849,  840,  475,
      841,  476,    0,  474,  473,  477,  475,  474,  476,  477,
      475,  842,  476,  474,  842,  477,  475,  478,  476,  843,
      846,  478,    0,  474,  849,  477,  475,  478,  476,  479,

        0,    0,  477,  479,  850,    0,  477,  478,  842,  479,
        0,  842,  477,  851,  478,  479,    0,  852,  478,  479,
        0,  480,  477,  480,  478,  481,  479,  481,  480,    0,
      479,  850,  481,  480,  478,    0,  479,  481,    0,    0,
      851,  853,  479,  483,  852,    0,  479,  483,  480,  482,
      480,  482,  481,  483,  481,  480,  482,  482,    0,  481,
      480,  482,  484,  483,  481,  487,  484,  487,  853,  487,
      483,  854,  484,    0,  483,  487,  482,    0,  482,  857,
      483,  858,  484,  482,  482,  487,  485,  485,  482,  484,
      483,  485,  487,  484,  487,  859,  487,  485,  854,  484,

      490,  488,  487,  488,  490,  488,  857,  485,  858,  484,
      490,  488,  487,  485,  485,  490,    0,  860,  485,    0,
      490,  488,  859,  861,  485,    0,  863,  490,  488,    0,
      488,  490,  488,  864,  485,  486,  489,  490,  488,  486,
      489,    0,  490,  486,  860,  486,  489,  490,  488,  486,
      861,  866,  489,  863,    0,  867,  489,    0,    0,  486,
      864,  491,  486,  489,  492,  491,  486,  489,  492,  868,
      486,  491,  486,  489,  492,  869,  486,  491,  866,  489,
      871,  491,  867,  489,  492,  493,  486,  872,  491,  493,
        0,  492,  491,  493,  873,  492,  868,    0,  491,  493,

      874,  492,  869,  494,  491,  494,    0,  871,  491,  493,
      494,  492,  493,  875,  872,  494,  493,  495,    0,  495,
      493,  873,    0,  495,  495,  876,  493,  874,    0,  495,
      494,  496,  494,  496,  877,  497,  493,  494,  496,  497,
      875,    0,  494,  496,  495,  497,  495,    0,  878,  498,
      495,  495,  876,  498,  879,  497,  495,    0,  496,  498,
      496,  877,  497,    0,  499,  496,  497,  881,  499,  498,
      496,  501,  497,  501,  499,  878,  498,  499,  501,    0,
      498,  879,  497,  501,  499,    0,  498,  882,  883,    0,
      505,  499,  505,    0,  881,  499,  498,  505,  501,    0,

      501,  499,  505,  885,  499,  501,  503,  503,  503,    0,
      501,  499,  500,  503,  882,  883,  500,  505,  503,  505,
      500,  886,    0,  887,  505,  988,  500,  990,  992,  505,
      885,  500,  993,  503,  503,  503,  500,    0,  994,  500,
      503,    0,  995,  500,  504,  503,    0,  500,  886,  504,
      887,  504,  988,  500,  990,  992,  504,  997,  500,  993,
      507,  504,  507,  500,  502,  994,  999,  507,  507,  995,
     1000,  504,  507,  502,    0,  502,  504,  502,  504, 1001,
      502,    0,    0,  504,  997,  502,    0,  507,  504,  507,
      506,  502, 1002,  999,  507,  507, 1003, 1000, 1005,  507,

      502,  506,  502,  506,  502,  508, 1001,  502,  506,  508,
     1007,  508,  502,  506, 1009, 1012,  508,  506,    0, 1002,
        0,  508,  509, 1003,  509, 1005, 1014,    0,  506,  509,
      506,    0,  508,    0,  509,  506,  508, 1007,  508, 1015,
      506, 1009, 1012,  508, 1016,  510,    0,  510,  508,  509,
      511,  509,  510, 1014,  511,  512,  509,  510,  513,  512,
      511,  509,  513,  514, 1023,  512, 1015,  514,  513, 1024,
      511, 1016,  510,  514,  510,  512,    0,  511,  513,  510,
        0,  511,  512,  514,  510,  513,  512,  511,    0,  513,
      514, 1023,  512,    0,  514,  513, 1024,  511,    0,  515,

      514,    0,  512,  515,  516,  513,    0,  517,  516,  515,
      514,  517,  515,  518,  516,  518, 1025,  517,  517,  515,
      518,  519,  516,  519,  516,  518,  515,  517,  519,  519,
      515,  516,    0,  519,  517,  516,  515,    0,  517,  515,
      518,  516,  518, 1025,  517,  517,  515,  518,  519,  516,
      519,  516,  518, 1028,  517,  519,  519,  520, 1030,  520,
      519,  521, 1032,  521,  520,  520, 1034, 1035,  521,  520,
      522, 1036,  522,  521,  522, 1037,    0,  522,    0,    0,
     1028,    0,  522,    0,  520, 1030,  520, 1038,  521, 1032,
      521,  520,  520, 1034, 1035,  521,  520,  522, 1036,  522,

      521,  522, 1037,  523,  522,  523,  524, 1040,  524,  522,
      523,  523,    0,  524, 1038,  523,  525, 1041,  524,  526,
      525,    0, 1042,  526, 1043,    0,  525,    0,    0,  526,
      523, 1045,  523,  524, 1040,  524,  525,  523,  523,  526,
      524,    0,  523,  525, 1041,  524,  526,  525,  528, 1042,
      526, 1043,  527,  525,  527,  528,  526,  528, 1045,  527,
     1047,    0,  528,  525,  527, 1049,  526,  528,  529,    0,
      531,    0,  529,  530,  531,  528,    0,  530,  529,  527,
      531,  527,  528,  530,  528,  530,  527, 1047,  529,  528,
      531,  527, 1049,  530,  528,  529,  533,  531,  533,  529,

      530,  531, 1050,  533,  530,  529,    0,  531,  533,    0,
      530,    0,  530, 1051,  532,  529,    0,  531,  532, 1052,
      530, 1053,  532,  533,  534,  533,  534,    0,  532, 1050,
      533,  534,    0,  534, 1058,  533,  534,    0,  532,    0,
     1051,  532, 1059,  535, 1138,  532, 1052, 1142, 1053,  532,
        0,  534,  535,  534,  535,  532, 1143, 1146,  534,  535,
      534, 1058, 1147,  534,  535,  532,  536, 1148,  536, 1059,
      535, 1138, 1152,  536, 1142,    0,    0,  536,  536,  535,
      537,  535,  537, 1143, 1146,    0,  535,  537,  537, 1147,
        0,  535,  537,  536, 1148,  536,  538, 1154,  538, 1152,

      536, 1155,  538,  538,  536,  536,  539,  537,  538,  537,
      539, 1158,  539,    0,  537,  537, 1159,  539,    0,  537,
        0,    0,  539,  538, 1154,  538, 1160,    0, 1155,  538,
      538, 1161, 1164,  539,  540,  538,  540,  539, 1158,  539,
      540,  540, 1165, 1159,  539,  668,  540,  668,  669,  539,
      669,  668,  668, 1160,  669,  669, 1168,  668, 1161, 1164,
      669,  540,    0,  540, 1170,    0,  670,  540,  540, 1165,
      670,    0,  668,  540,  668,  669,  670,  669,  668,  668,
     1171,  669,  669, 1168,  668,  671,  670,  669,  672,  671,
      674, 1170,  672,  670,  674,  671, 1172,  670,  672, 1173,

      674,  672,  673,  670,  673,  671, 1174, 1171,  672,  673,
      674,    0,  671,  670,  673,  672,  671,  674,    0,  672,
        0,  674,  671, 1172,    0,  672, 1173,  674,  672,  673,
     1222,  673,  671, 1174,    0,  672,  673,  674,  675,  676,
      675,  673,  677,  676,    0,  675,  677,  678, 1225,  676,
      675,  678,  677,    0,    0,  678, 1229, 1222,    0,  676,
     1230,  678,  677,    0,    0,  675,  676,  675,    0,  677,
      676,  678,  675,  677,  678, 1225,  676,  675,  678,  677,
      679,  680,  678, 1229,  679,  680,  676, 1230,  678,  677,
      679,  680,    0, 1233,    0,  681, 1234, 1235,  678,  681,

      679,  680,    0,  681, 1223, 1223,    0,  679,  680,  681,
        0,  679,  680, 1239,    0,    0,    0,  679,  680,  681,
     1233,  682,  681, 1234, 1235,  682,  681,  679,  680,  682,
      681,  682, 1240,  683,  684,  685,  681,  683,  684,  685,
     1239,  682, 1223,  683,  684,  685,  681,  684,  682, 1241,
        0,    0,  682,  683,  684,  685,  682,    0,  682, 1240,
      683,  684,  685,  686,  683,  684,  685,  686,  682, 1223,
      683,  684,  685,  686,  684, 1243, 1241,  687,  686,  687,
      683,  684,  685,  686,  687, 1269,    0,  688,  689,  687,
      686,  688,  689,    0,  686,    0,    0,  688,  689, 1270,

      686,    0, 1243,  689,  687,  686,  687,  688,  689,    0,
      686,  687, 1269,  690,  688,  689,  687,  690,  688,  689,
      691,    0,  691,  690,  688,  689, 1270,  691, 1246, 1246,
      689, 1273,  691,  690,  688,  689,  692,  692,  692,    0,
      690, 1278,    0,  692,  690, 1282, 1295,  691,  692,  691,
      690,    0,    0,    0,  691, 1294, 1294, 1298, 1273,  691,
      690, 1301, 1306,  692,  692,  692, 1246,  693, 1278,  693,
      692, 1310, 1282, 1295,  693,  692,  693,    0,  694,  693,
      694, 1300, 1300, 1314, 1298,  694,  694,    0, 1301, 1306,
      694,  695,    0, 1246,  693,    0,  693, 1294, 1310,    0,

        0,  693,  695,  693,  695,  694,  693,  694,    0,  695,
     1314,    0,  694,  694,  695,    0, 1316,  694,  695,  697,
      696,    0,  696, 1300, 1294, 1318,  696,  696,  697,  695,
      697,  695,  696, 1320,    0,  697,  695,    0,  698,    0,
      697,  695,  698, 1316,    0,    0,  697,  696,  698,  696,
     1300, 1322, 1318,  696,  696,  697, 1324,  697,  698,  696,
     1320,  699,  697,  699,  700,  698,  700,  697,  699,  698,
      701,  700,  701,  699,    0,  698,  700,  701, 1322,    0,
     1326,    0,  701, 1324, 1328,  698,  702, 1330,  699, 1332,
      699,  700,    0,  700,  702,  699,  702,  701,  700,  701,

      699,  702,    0,  700,  701,    0,  702, 1326,  703,  701,
      703, 1328,  703,  702, 1330,  703, 1332,    0,    0,    0,
      703,  702,  704,  702,  704,    0,  704,    0,  702,  704,
        0,    0,    0,  702,  704,  703,  705,  703,  705,  703,
        0,    0,  703,  705,    0,  705,    0,  703,  705,  704,
      706,  704,  706,  704,    0,  707,  704,  706,  706,    0,
        0,  704,  706,  705,    0,  705,  707,    0,  707,    0,
      705,    0,  705,  707,    0,  705,  709,  706,  707,  706,
      709,  708,  707,    0,  706,  706,  709,    0,    0,  706,
        0,    0,  708,  707,  708,  707,  709,    0,    0,  708,

      707,    0,  710,  709,  708,  707,  710,  709,  708,    0,
      711,    0,  710,  709,  711,    0,    0,    0,    0,  708,
      711,  708,  710,  709,  712,  711,  708,    0,  712,  710,
      711,  708,  713,  710,  712,    0,  713,  711,  714,  710,
      713,  711,  714,    0,  712,    0,  713,  711,  714,  710,
      715,  712,  711,    0,  715,  712,  713,  711,  714,  713,
      715,  712,    0,  713,  716,  714,    0,  713,  716,  714,
      715,  712,  716,  713,    0,  714,    0,  715,  716,    0,
      718,  715,  717,  713,  718,  714,  717,  715,  716,    0,
      718,  716,  717,  717,  719,  716,  719,  715,    0,  716,

      718,  719,  717,    0,    0,  716,  719,  718,    0,  717,
        0,  718,    0,  717,    0,  716,    0,  718,    0,  717,
      717,  719,    0,  719,  720,    0,  720,  718,  719,  717,
      721,  720,  721,  719,  722,  723,  720,  721,  722,  723,
        0,    0,  721,    0,  722,  723,    0,    0,  723,    0,
        0,  720,    0,  720,  722,  723,    0,  721,  720,  721,
        0,  722,  723,  720,  721,  722,  723,    0,    0,  721,
        0,  722,  723,    0,    0,  723,  724,    0,  724,    0,
        0,  722,  723,  724,  725,    0,  725,  726,  724,  726,
      725,  725,    0,  726,  726,    0,  725,    0,    0,  726,

        0,    0,    0,  724,    0,  724,    0,    0,    0,    0,
      724,  725,    0,  725,  726,  724,  726,  725,  725,    0,
      726,  726,    0,  725,    0,    0,  726,  727,  728,  729,
      728,  729,  727,    0,  727,  728,  729,    0,  727,  727,
      728,  729,    0,    0,  727,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  727,  728,  729,  728,  729,  727,
        0,  727,  728,  729,    0,  727,  727,  728,  729,    0,
      730,  727,  730,  731,  732,  731,  732,  730,    0,    0,
      731,  732,  730,    0,    0,  731,  732,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  730,    0,  730,

      731,  732,  731,  732,  730,    0,    0,  731,  732,  730,
        0,    0,  731,  732,  733,    0,  733,  734,  735,  734,
      735,  733,  733,    0,  734,  735,  733,    0,    0,  734,
      735,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  733,    0,  733,  734,  735,  734,  735,  733,  733,
      736,  734,  735,  733,  736,  737,  734,  735,  738,  737,
      736,    0,  738,  740,  739,  737,  739,  740,  738,  740,
      736,  739,  739,    0,  740,  737,  739,  736,  738,  740,
        0,  736,  737,    0,    0,  738,  737,  736,    0,  738,
      740,  739,  737,  739,  740,  738,  740,  736,  739,  739,

      742,  740,  737,  739,  742,  738,  740,  741,  743,  741,
      742,    0,  743,  741,  741,    0,    0,    0,  743,  741,
      742,    0,    0,    0,    0,    0,    0,  742,  743,    0,
        0,  742,    0,    0,  741,  743,  741,  742,    0,  743,
      741,  741,  744,    0,  744,  743,  741,  742,  744,    0,
        0,    0,  745,  746,  744,  743,  745,  746,    0,    0,
        0,    0,  745,  746,  744,    0,  746,    0,    0,  744,
        0,  744,  745,  746,    0,  744,    0,    0,    0,  745,
      746,  744,  747,  745,  746,    0,  747,    0,    0,  745,
      746,  744,  747,  746,  748,  747,    0,  749,  748,  745,

      746,  749,  747,    0,  748,  749,  750,  749,    0,  747,
      750,    0,    0,  747,  748,    0,  750,  749,    0,  747,
        0,  748,  747,    0,  749,  748,  750,    0,  749,  747,
        0,  748,  749,  750,  749,  751,  752,  750,    0,  751,
      752,  748,    0,  750,  749,  751,  752,    0,    0,    0,
      753,    0,    0,  750,  753,  751,  752,    0,  753,    0,
        0,    0,  751,  752,  753,    0,  751,  752,    0,    0,
        0,    0,  751,  752,  753,    0,  754,  753,    0,    0,
      754,  753,  751,  752,  754,  753,    0,    0,  755,  756,
      754,  753,  755,  756,    0,    0,    0,    0,  755,  756,

      754,  753,  757,  754,    0,    0,  757,  754,  755,  756,
      757,  754,  757,    0,    0,  755,  756,  754,    0,  755,
      756,    0,  757,    0,    0,  755,  756,  754,  758,  757,
      759,    0,  758,  757,  759,  755,  756,  757,  758,  757,
      759,  758,  761,    0,    0,  759,  761,    0,  758,  757,
      759,  760,  761,    0,  760,  758,    0,  759,  760,  758,
        0,  759,  761,    0,  760,  758,    0,  759,  758,  761,
        0,    0,  759,  761,  760,  758,  762,  759,  760,  761,
      762,  760,    0,  764,  762,  760,  762,    0,  763,  761,
      763,  760,  764,    0,  764,  763,  762,    0,  765,  764,

      763,  760,  765,  762,  764,    0,    0,  762,  765,    0,
      764,  762,    0,  762,    0,  763,    0,  763,  765,  764,
      766,  764,  763,  762,  766,  765,  764,  763,  767,  765,
      766,  764,  767,  769,  768,  765,  768,  769,  767,    0,
      766,  768,    0,  769,    0,  765,  768,  766,  767,    0,
        0,  766,  770,  769,    0,  767,  770,  766,    0,  767,
      769,  768,  770,  768,  769,  767,    0,  766,  768,    0,
      769,    0,  770,  768,  771,  767,    0,  772,  771,  770,
      769,  772,  773,  770,  771,    0,  773,  772,    0,  770,
        0,  775,  773,  775,  771,    0,  774,  772,  775,  770,

      774,  771,  773,  775,  772,  771,  774,    0,  772,  773,
      776,  771,  776,  773,  772,    0,  774,  776,  775,  773,
      775,  771,  776,  774,  772,  775,    0,  774,    0,  773,
      775,  778,    0,  774,  777,    0,  777,  776,    0,  776,
      778,  777,  778,  774,  776,    0,  777,  778,  779,  776,
      779,    0,  778,    0,    0,  779,    0,  779,  778,    0,
      779,  777,    0,  777,  780,    0,  780,  778,  777,  778,
        0,  780,    0,  777,  778,  779,  780,  779,    0,  778,
        0,    0,  779,  781,  779,  781,  782,  779,    0,    0,
      781,  780,  781,  780,  783,  781,  783,  782,  780,  782,

        0,  783,  783,  780,  782,    0,  783,    0,    0,  782,
      781,    0,  781,  782,    0,    0,    0,  781,    0,  781,
      784,  783,  781,  783,  782,  784,  782,  784,  783,  783,
      785,  782,  784,  783,  785,  786,  782,  784,  786,  786,
      785,    0,    0,    0,    0,  786,    0,  784,    0,    0,
      785,    0,  784,    0,  784,  786,    0,  785,    0,  784,
        0,  785,  786,    0,  784,  786,  786,  785,    0,  787,
      788,  789,  786,  787,  788,  789,    0,  785,    0,  787,
      788,  789,  786,  790,  791,    0,  788,  790,  791,  787,
      788,  789,    0,  790,  791,    0,  787,  788,  789,    0,

      787,  788,  789,  790,  791,    0,  787,  788,  789,    0,
      790,  791,    0,  788,  790,  791,  787,  788,  789,    0,
      790,  791,  792,    0,  792,  891,  892,  891,  892,  792,
      790,  791,  891,  892,  792,    0,    0,  891,  892,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  792,
        0,  792,  891,  892,  891,  892,  792,    0,    0,  891,
      892,  792,    0,    0,  891,  892,  893,  894,  893,  894,
        0,  895,  896,  893,  894,  895,  896,    0,  893,  894,
      893,  895,  896,    0,    0,    0,    0,    0,    0,    0,
        0,  895,  896,  893,  894,  893,  894,    0,  895,  896,

      893,  894,  895,  896,    0,  893,  894,  893,  895,  896,
      897,  898,    0,    0,  897,  898,    0,    0,  895,  896,
      897,  898,    0,  900,  900,  899,  898,    0,  900,  899,
      897,  898,    0,  899,  900,    0,    0,  897,  898,  899,
        0,  897,  898,    0,  900,    0,    0,  897,  898,  899,
      900,  900,  899,  898,    0,  900,  899,  897,  898,    0,
      899,  900,  901,  902,  901,  902,  899,    0,  901,    0,
      902,  900,    0,    0,  901,  902,  899,    0,    0,    0,
        0,    0,    0,    0,  901,    0,  903,    0,  903,  901,
      902,  901,  902,  903,  903,  901,  904,  902,  903,  905,

      904,  901,  902,  905,  906,  907,  904,  907,  906,  905,
        0,  901,  907,  903,  906,  903,  904,  907,  908,  905,
      903,  903,  908,  904,  906,  903,  905,  904,  908,    0,
      905,  906,  907,  904,  907,  906,  905,    0,  908,  907,
        0,  906,    0,  904,  907,  908,  905,    0,  909,  908,
        0,  906,  909,  910,    0,  908,  912,  910,  909,    0,
      912,  910,  911,    0,  911,  908,  912,  910,  909,  911,
        0,    0,    0,    0,  911,  909,  912,  910,    0,  909,
      910,    0,  913,  912,  910,  909,  913,  912,  910,  911,
        0,  911,  913,  912,  910,  909,  911,    0,    0,    0,

        0,  911,  913,  912,  910,    0,  914,  915,    0,  913,
      914,  915,    0,  913,    0,    0,  914,  915,  916,  913,
      916,    0,  915,    0,    0,  916,  914,  915,    0,  913,
      916,  917,    0,  914,  915,  917,  918,  914,  915,    0,
      918,  917,    0,  914,  915,  916,  918,  916,    0,  915,
        0,  917,  916,  914,  915,  919,  918,  916,  917,  919,
        0,    0,  917,  918,  922,  919,  922,  918,  917,    0,
      920,  922,    0,  918,  920,  919,  922,    0,  917,    0,
      920,    0,  919,  918,  921,  920,  919,    0,  921,    0,
      920,  922,  919,  922,  921,    0,  923,  920,  922,  921,

      923,  920,  919,  922,  921,    0,  923,  920,  924,  925,
      924,  921,  920,  925,  924,  921,  923,  920,  926,  925,
      924,  921,  926,  923,    0,    0,  921,  923,  926,  925,
      924,  921,    0,  923,    0,  924,  925,  924,  926,    0,
      925,  924,    0,  923,  927,  926,  925,  924,  927,  926,
        0,    0,    0,    0,  927,  926,  925,  924,    0,  928,
        0,    0,  927,  928,  927,  926,  929,    0,  929,  928,
      930,  927,  930,  929,  928,  927,    0,  930,  929,  928,
        0,  927,  930,    0,    0,    0,  928,    0,    0,  927,
      928,  927,    0,  929,    0,  929,  928,  930,    0,  930,

      929,  928,    0,  931,  930,  929,  928,    0,  931,  930,
      931,  932,  933,  932,  933,  931,    0,    0,  932,  933,
      931,    0,    0,  932,  933,    0,    0,    0,    0,    0,
      931,    0,    0,    0,    0,  931,    0,  931,  932,  933,
      932,  933,  931,    0,    0,  932,  933,  931,    0,    0,
      932,  933,  934,    0,  934,  935,  936,  935,  936,  934,
      934,    0,  935,  936,  934,    0,    0,  935,  936,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  934,
        0,  934,  935,  936,  935,  936,  934,  934,    0,  935,
      936,  934,    0,    0,  935,  936,  937,  938,  937,    0,

        0,  938,    0,  937,  937,    0,    0,  938,  937,  939,
        0,  939,    0,    0,    0,    0,  939,  938,    0,  939,
      940,  939,  940,  937,  938,  937,    0,  940,  938,    0,
      937,  937,  940,    0,  938,  937,  939,    0,  939,    0,
        0,    0,    0,  939,  938,    0,  939,  940,  939,  940,
      941,  942,  941,  942,  940,    0,  943,  941,  942,  940,
        0,    0,  941,  942,  943,    0,  943,    0,    0,    0,
        0,  943,    0,    0,    0,    0,  943,  941,  942,  941,
      942,    0,    0,  943,  941,  942,    0,    0,    0,  941,
      942,  943,  944,  943,  944,  945,  946,  945,  943,  944,

      946,    0,  945,  943,  944,    0,  946,  945,  947,    0,
      947,    0,    0,    0,    0,  947,  946,    0,    0,  944,
      947,  944,  945,  946,  945,    0,  944,  946,  948,  945,
        0,  944,    0,  946,  945,  947,    0,  947,    0,  948,
        0,  948,  947,  946,    0,    0,  948,  947,    0,    0,
      949,  948,  949,    0,    0,  948,    0,  949,  949,  950,
        0,    0,  949,  950,    0,  950,  948,    0,  948,    0,
      950,    0,    0,  948,    0,  950,    0,  949,  948,  949,
        0,    0,    0,    0,  949,  949,  950,    0,    0,  949,
      950,  951,  950,  951,  952,    0,  952,  950,  951,  951,

        0,  952,  950,  951,  954,  953,  952,  953,  954,    0,
        0,    0,  953,    0,  954,    0,    0,  953,  951,    0,
      951,  952,    0,  952,  954,  951,  951,    0,  952,    0,
      951,  954,  953,  952,  953,  954,    0,    0,  955,  953,
        0,  954,  955,    0,  953,  956,  956,    0,  955,    0,
      956,  954,    0,  955,    0,    0,  956,    0,  955,    0,
        0,    0,    0,    0,    0,  955,  956,    0,    0,  955,
        0,    0,  956,  956,  957,  955,    0,  956,  957,    0,
      955,    0,  958,  956,  957,  955,  958,  957,    0,    0,
        0,    0,  958,  956,  957,  958,  959,    0,    0,    0,

      959,  957,  958,    0,    0,  957,  959,    0,  960,  958,
        0,  957,  960,  958,  957,    0,  959,    0,  960,  958,
      961,  957,  958,  959,  961,    0,    0,  959,  960,  958,
      961,    0,  962,  959,    0,  960,  962,    0,    0,  960,
      961,    0,  962,  959,    0,  960,  963,  961,    0,    0,
      963,  961,  962,    0,  963,  960,    0,  961,  964,  962,
      963,    0,  964,  962,  967,    0,  964,  961,  967,  962,
      963,    0,  964,  963,  967,  965,  965,  963,    0,  962,
      965,  963,  964,    0,  967,  964,  965,  963,  968,  964,
      966,  967,  968,  964,  966,  967,  965,  963,  968,  964,

      966,  967,  965,  965,    0,  966,    0,  965,  968,  964,
      966,  967,    0,  965,    0,  968,  970,  966,    0,  968,
      970,  966,    0,  965,  970,  968,    0,  966,  969,  969,
      970,    0,  966,  969,  971,  968,  971,  966,    0,  969,
      970,  971,    0,  970,    0,    0,  971,  970,    0,  969,
        0,  970,  972,    0,  972,  969,  969,  970,  972,  972,
      969,  971,    0,  971,  972,    0,  969,  970,  971,    0,
      973,    0,  973,  971,    0,    0,  969,  973,  973,  972,
        0,  972,  973,  974,    0,  972,  972,    0,    0,  975,
        0,  972,    0,    0,  974,    0,  974,  973,    0,  973,

      975,  974,  975,    0,  973,  973,  974,  975,    0,  973,
      974,    0,  975,  976,    0,  976,  975,    0,    0,    0,
      976,  974,    0,  974,  977,  976,  977,  975,  974,  975,
        0,  977,    0,  974,  975,    0,  977,    0,    0,  975,
      976,    0,  976,    0,  978,  979,  979,  976,  978,    0,
      979,  977,  976,  977,  978,    0,  979,    0,  977,    0,
        0,    0,    0,  977,  978,    0,  979,    0,    0,    0,
      980,  978,  979,  979,  980,  978,    0,  979,  981,    0,
      980,  978,  981,  979,    0,    0,    0,  982,  981,  982,
      980,  978,    0,  979,  982,  983,    0,  980,  981,  982,

        0,  980,    0,    0,    0,  981,  983,  980,  983,  981,
        0,    0,    0,  983,  982,  981,  982,  980,  983,  984,
        0,  982,  983,    0,    0,  981,  982,  985,    0,  985,
      984,    0,  984,  983,  985,  983,  986,  984,  986,  985,
      983,    0,  984,  986,    0,  983,  984,    0,  986,    0,
        0,    0,    0,    0,  985,    0,  985,  984, 1061,  984,
        0,  985, 1061,  986,  984,  986,  985, 1062, 1061,  984,
      986, 1062, 1063,    0, 1063,  986, 1066, 1062, 1061, 1063,
     1066, 1064,    0, 1064, 1063, 1061, 1066, 1062, 1064, 1061,
     1065,    0, 1065, 1064, 1062, 1061, 1066, 1065, 1062, 1063,

        0, 1063, 1065, 1066, 1062, 1061, 1063, 1066, 1064,    0,
     1064, 1063, 1067, 1066, 1062, 1064, 1067, 1065,    0, 1065,
     1064,    0, 1067, 1066, 1065,    0, 1068, 1067, 1068, 1065,
        0,    0, 1067, 1068, 1069, 1070, 1069, 1070, 1068, 1067,
        0, 1069, 1070, 1067,    0,    0, 1069, 1070,    0, 1067,
        0,    0,    0, 1068, 1067, 1068,    0,    0,    0, 1067,
     1068, 1069, 1070, 1069, 1070, 1068,    0,    0, 1069, 1070,
     1071,    0, 1071, 1069, 1070,    0, 1072, 1071, 1072, 1073,
     1073, 1073, 1071, 1072, 1072,    0, 1073,    0, 1072,    0,
        0, 1073,    0,    0,    0,    0,    0, 1071,    0, 1071,

        0,    0,    0, 1072, 1071, 1072, 1073, 1073, 1073, 1071,
     1072, 1072, 1074, 1073,    0, 1072,    0, 1075, 1073, 1075,
        0, 1074,    0, 1074, 1075,    0,    0,    0, 1074, 1075,
     1076,    0, 1076, 1074,    0,    0,    0, 1076, 1076, 1074,
        0,    0, 1076,    0, 1075,    0, 1075,    0, 1074,    0,
     1074, 1075,    0,    0,    0, 1074, 1075, 1076,    0, 1076,
     1074, 1077, 1078, 1077, 1076, 1076,    0,    0, 1077, 1076,
        0,    0, 1078, 1077, 1078, 1079,    0, 1079,    0, 1078,
        0,    0, 1079,    0, 1078,    0,    0, 1079, 1077, 1078,
     1077,    0,    0,    0, 1080, 1077,    0,    0,    0, 1078,

     1077, 1078, 1079, 1080, 1079, 1080, 1078,    0,    0, 1079,
     1080, 1078,    0,    0, 1079, 1080, 1081, 1082, 1081, 1082,
        0, 1080,    0, 1081, 1082,    0,    0,    0, 1081, 1082,
     1080,    0, 1080,    0,    0,    0,    0, 1080,    0,    0,
        0,    0, 1080, 1081, 1082, 1081, 1082, 1083,    0, 1083,
     1081, 1082,    0, 1085, 1083, 1081, 1082, 1085, 1084, 1083,
     1084,    0, 1086, 1085,    0, 1084, 1086,    0,    0,    0,
     1084,    0, 1086, 1085, 1083,    0, 1083,    0,    0,    0,
     1085, 1083, 1086,    0, 1085, 1084, 1083, 1084,    0, 1086,
     1085,    0, 1084, 1086, 1087,    0, 1087, 1084, 1089, 1086,

     1085, 1087, 1089, 1088,    0, 1088, 1087,    0, 1089, 1086,
     1088, 1088, 1101,    0, 1101, 1088, 1090,    0, 1089, 1101,
     1090, 1087,    0, 1087, 1101, 1089, 1090,    0, 1087, 1089,
     1088,    0, 1088, 1087,    0, 1089, 1090, 1088, 1088, 1101,
     1091, 1101, 1088, 1090, 1091, 1089, 1101, 1090, 1092,    0,
     1091, 1101, 1092, 1090,    0,    0,    0,    0, 1092,    0,
     1091,    0, 1093, 1090,    0,    0, 1093, 1091, 1092,    0,
     1094, 1091, 1093,    0, 1094, 1092,    0, 1091,    0, 1092,
     1094,    0, 1093,    0, 1095, 1092,    0, 1091, 1095, 1093,
     1094,    0, 1096, 1093, 1095, 1092, 1096, 1094,    0, 1093,

        0, 1094, 1096,    0, 1095, 1096, 1097, 1094,    0, 1093,
     1097, 1095, 1096,    0, 1098, 1095, 1097, 1094, 1098, 1096,
     1099, 1095, 1098, 1096, 1099,    0, 1097,    0, 1098, 1096,
     1099, 1095, 1096, 1097,    0,    0,    0, 1097, 1098, 1096,
     1099, 1098, 1100, 1097,    0, 1098, 1100, 1099,    0, 1098,
        0, 1099, 1100, 1097, 1102, 1098, 1102, 1099,    0,    0,
        0, 1102, 1100,    0,    0, 1098, 1102, 1099, 1103, 1100,
     1103,    0,    0, 1100,    0, 1103,    0,    0,    0, 1100,
     1103, 1102,    0, 1102, 1104,    0, 1104, 1105, 1102, 1100,
        0, 1104, 1106, 1102, 1106, 1103, 1104, 1103, 1105, 1106,

     1105,    0, 1103,    0, 1106, 1105,    0, 1103,    0,    0,
     1105, 1104,    0, 1104, 1105,    0,    0,    0, 1104, 1106,
        0, 1106, 1107, 1104, 1107, 1105, 1106, 1105,    0, 1107,
     1107, 1106, 1105,    0, 1107, 1108,    0, 1105, 1109, 1108,
     1110,    0, 1109, 1111, 1110, 1108,    0, 1111, 1109, 1107,
     1110, 1107,    0, 1111,    0, 1108, 1107, 1107, 1109,    0,
     1110, 1107, 1108, 1111,    0, 1109, 1108, 1110,    0, 1109,
     1111, 1110, 1108,    0, 1111, 1109,    0, 1110,    0, 1112,
     1111,    0, 1108, 1112,    0, 1109, 1113, 1110, 1113, 1112,
     1111,    0, 1113,    0,    0, 1114,    0, 1114, 1113, 1112,

        0, 1114, 1115,    0, 1115,    0, 1112, 1114, 1113, 1115,
     1112,    0,    0, 1113, 1115, 1113, 1112, 1114,    0, 1113,
        0,    0, 1114,    0, 1114, 1113, 1112,    0, 1114, 1115,
     1116, 1115, 1116,    0, 1114, 1113, 1115, 1116, 1117,    0,
     1117, 1115, 1116,    0, 1114, 1117, 1118,    0, 1118, 1119,
     1117, 1119,    0, 1118,    0,    0, 1119, 1116, 1118, 1116,
        0, 1119,    0,    0, 1116, 1117,    0, 1117,    0, 1116,
        0,    0, 1117, 1118,    0, 1118, 1119, 1117, 1119, 1120,
     1118, 1120, 1121, 1119, 1121, 1118, 1120, 1122, 1119, 1121,
        0, 1120,    0,    0, 1121,    0,    0,    0, 1122,    0,

     1122,    0,    0,    0,    0, 1122, 1120,    0, 1120, 1121,
     1122, 1121,    0, 1120, 1122, 1123, 1121,    0, 1120,    0,
     1124, 1121,    0,    0,    0, 1122, 1123, 1122, 1123, 1124,
        0, 1124, 1122, 1123,    0,    0, 1124, 1122, 1123,    0,
        0, 1124, 1123,    0,    0,    0,    0, 1124,    0,    0,
        0,    0,    0, 1123, 1126, 1123, 1124,    0, 1124, 1125,
     1123, 1125, 1126, 1124, 1126, 1123, 1125, 1125, 1124, 1126,
     1127, 1125, 1127, 1128, 1126, 1128,    0, 1127,    0,    0,
     1128, 1126, 1127,    0,    0, 1128, 1125,    0, 1125, 1126,
        0, 1126,    0, 1125, 1125,    0, 1126, 1127, 1125, 1127,

     1128, 1126, 1128, 1129, 1127, 1129, 1130, 1128, 1130, 1127,
     1129,    0, 1128, 1130, 1131, 1129, 1131, 1132, 1130, 1132,
     1131, 1131,    0,    0, 1132,    0, 1131,    0,    0, 1132,
     1129,    0, 1129, 1130,    0, 1130,    0, 1129,    0,    0,
     1130, 1131, 1129, 1131, 1132, 1130, 1132, 1131, 1131,    0,
     1178, 1132, 1178, 1131,    0,    0, 1132, 1178, 1179, 1180,
     1179, 1180, 1178,    0,    0, 1179, 1180,    0,    0,    0,
     1179, 1180,    0,    0,    0,    0,    0, 1178,    0, 1178,
        0,    0,    0,    0, 1178, 1179, 1180, 1179, 1180, 1178,
        0,    0, 1179, 1180, 1181, 1182, 1181, 1179, 1180, 1182,

     1183, 1181,    0,    0, 1183, 1182, 1181,    0,    0, 1184,
     1183,    0,    0, 1184,    0, 1182, 1185, 1185,    0, 1184,
     1183, 1181, 1182, 1181,    0,    0, 1182, 1183, 1181, 1184,
        0, 1183, 1182, 1181,    0,    0, 1184, 1183,    0, 1186,
     1184, 1185, 1182, 1186,    0, 1185, 1184, 1183,    0, 1186,
     1187, 1185,    0, 1188, 1187,    0, 1184, 1188, 1187, 1186,
        0, 1185,    0, 1188, 1187,    0, 1186,    0, 1185,    0,
     1186,    0, 1185, 1188, 1187,    0, 1186, 1187, 1185, 1189,
     1188, 1187,    0, 1189, 1188, 1187, 1186,    0, 1185, 1189,
     1188, 1187, 1190, 1191,    0,    0, 1190, 1191,    0, 1189,

     1188, 1187, 1190, 1191,    0, 1192, 1189, 1192, 1191, 1192,
     1189,    0, 1190, 1191,    0, 1192, 1189, 1193, 1194, 1190,
     1191, 1193, 1194, 1190, 1191, 1192, 1189, 1193, 1194, 1190,
     1191,    0, 1192,    0, 1192, 1191, 1192, 1193, 1194, 1190,
     1191,    0, 1192, 1195, 1193, 1194,    0, 1195, 1193, 1194,
        0,    0, 1192, 1195, 1193, 1194,    0,    0,    0, 1196,
     1197, 1196, 1197, 1195, 1193, 1194, 1196, 1197,    0,    0,
     1195, 1196, 1197,    0, 1195,    0,    0,    0,    0,    0,
     1195,    0,    0,    0,    0,    0, 1196, 1197, 1196, 1197,
     1195, 1198,    0, 1196, 1197,    0,    0,    0, 1196, 1197,

     1198, 1199, 1198, 1199, 1200,    0, 1200, 1198, 1199,    0,
        0, 1200, 1198, 1199,    0,    0, 1200,    0, 1198,    0,
        0,    0,    0,    0,    0,    0,    0, 1198, 1199, 1198,
     1199, 1200,    0, 1200, 1198, 1199,    0,    0, 1200, 1198,
     1199,    0, 1201, 1200, 1201, 1202, 1203, 1202,    0, 1201,
     1203, 1202, 1202,    0, 1201, 1204, 1203, 1202,    0, 1204,
        0,    0,    0,    0,    0, 1204, 1203,    0,    0, 1201,
        0, 1201, 1202, 1203, 1202, 1204, 1201, 1203, 1202, 1202,
        0, 1201, 1204, 1203, 1202,    0, 1204, 1205, 1206, 1205,
     1206,    0, 1204, 1203, 1205, 1206, 1207,    0, 1207, 1205,

     1206,    0, 1204, 1207,    0,    0,    0,    0, 1207,    0,
        0,    0,    0,    0, 1205, 1206, 1205, 1206,    0,    0,
        0, 1205, 1206, 1207,    0, 1207, 1205, 1206,    0, 1208,
     1207, 1208,    0,    0,    0, 1207, 1208, 1208,    0, 1209,
     1209, 1208, 1209, 1210,    0, 1210,    0, 1209,    0,    0,
     1210,    0, 1209,    0,    0, 1210, 1208,    0, 1208,    0,
        0,    0,    0, 1208, 1208,    0, 1209, 1209, 1208, 1209,
     1210, 1211, 1210, 1211, 1209,    0,    0, 1210, 1211, 1209,
        0,    0, 1210, 1211, 1212,    0, 1212, 1213,    0, 1213,
        0, 1212, 1212,    0, 1213, 1214, 1212, 1214, 1211, 1213,

     1211, 1214, 1214,    0,    0, 1211,    0, 1214,    0,    0,
     1211, 1212,    0, 1212, 1213,    0, 1213,    0, 1212, 1212,
        0, 1213, 1214, 1212, 1214,    0, 1213,    0, 1214, 1214,
     1215, 1215, 1215, 1216, 1214, 1216,    0, 1215,    0,    0,
     1216, 1216, 1215, 1217,    0, 1216, 1218, 1217,    0,    0,
     1218, 1219,    0, 1217,    0, 1219, 1218, 1215, 1215, 1215,
     1216, 1219, 1216, 1217, 1215,    0, 1218, 1216, 1216, 1215,
     1217, 1219, 1216, 1218, 1217, 1220,    0, 1218, 1219, 1220,
     1217,    0, 1219, 1218,    0, 1220,    0, 1245, 1219,    0,
     1217, 1245,    0, 1218,    0, 1220,    0, 1245, 1219, 1247,

     1245, 1248, 1220, 1247,    0, 1248, 1220, 1245,    0, 1247,
        0, 1248, 1220, 1249, 1245,    0, 1248, 1249, 1245, 1247,
        0, 1248, 1220, 1249, 1245, 1250, 1247, 1245, 1248, 1250,
     1247,    0, 1248, 1249, 1245, 1250, 1247, 1251, 1248,    0,
     1249, 1251,    0, 1248, 1249, 1250, 1247, 1251, 1248, 1252,
     1249, 1252, 1250, 1252,    0,    0, 1250, 1251,    0, 1252,
     1249,    0, 1250,    0, 1251,    0,    0, 1253, 1251, 1252,
        0, 1253, 1250,    0, 1251, 1254, 1252, 1253, 1252, 1254,
     1252,    0, 1253,    0, 1251, 1254, 1252, 1253,    0,    0,
        0,    0,    0, 1255, 1253, 1254, 1252, 1255, 1253,    0,

        0,    0, 1254, 1255, 1253,    0, 1254,    0,    0, 1253,
        0,    0, 1254, 1255, 1253, 1256,    0,    0,    0, 1256,
     1255,    0, 1254,    0, 1255, 1256, 1258, 1257, 1256, 1257,
     1255, 1258,    0, 1258, 1257, 1256,    0,    0, 1258, 1257,
     1255,    0, 1256, 1258,    0,    0, 1256,    0,    0,    0,
        0,    0, 1256, 1258, 1257, 1256, 1257, 1259, 1258, 1259,
     1258, 1257, 1256,    0, 1259, 1258, 1257,    0,    0, 1259,
     1258, 1260,    0, 1260,    0, 1261,    0, 1261, 1260,    0,
        0,    0, 1261, 1260, 1259,    0, 1259, 1261,    0,    0,
        0, 1259,    0, 1262,    0,    0, 1259, 1262, 1260,    0,

     1260,    0, 1261, 1262, 1261, 1260,    0, 1263,    0, 1261,
     1260, 1263, 1264, 1262, 1261, 1265, 1264, 1263, 1263, 1265,
     1262,    0, 1264,    0, 1262, 1265,    0, 1263,    0,    0,
     1262,    0, 1264,    0, 1263, 1265, 1266, 1266, 1263, 1264,
     1262, 1266, 1265, 1264, 1263, 1263, 1265, 1266,    0, 1264,
     1281, 1281, 1265,    0, 1263,    0, 1283, 1266,    0, 1264,
     1283, 1284, 1265, 1266, 1266, 1284, 1283,    0, 1266,    0,
     1286, 1284, 1286,    0, 1266, 1281, 1283, 1286,    0, 1281,
        0, 1284, 1286, 1283, 1266, 1281,    0, 1283, 1284, 1287,
     1285, 1287, 1284, 1283, 1285, 1281, 1287, 1286, 1284, 1286,

     1285, 1287, 1281, 1283, 1286,    0, 1281,    0, 1284, 1286,
     1285,    0, 1281, 1288,    0, 1288, 1287, 1285, 1287,    0,
     1288, 1285, 1281, 1287, 1289, 1288, 1289, 1285, 1287,    0,
        0, 1289, 1290,    0, 1290,    0, 1289, 1285,    0, 1290,
     1288,    0, 1288,    0, 1290, 1291,    0, 1288,    0, 1291,
     1292, 1289, 1288, 1289, 1292, 1291,    0,    0, 1289, 1290,
     1292, 1290,    0, 1289, 1302, 1291, 1290,    0, 1302, 1303,
     1292, 1290, 1291, 1303, 1302,    0, 1291, 1292, 1304, 1303,
     1304, 1292, 1291,    0, 1302, 1304, 1312, 1292, 1312, 1303,
     1304, 1302, 1291, 1312,    0, 1302, 1303, 1292, 1312,    0,

     1303, 1302,    0,    0,    0, 1304, 1303, 1304,    0,    0,
        0, 1302, 1304, 1312,    0, 1312, 1303, 1304,    0,    0,
     1312,    0,    0,    0,    0, 1312, 1344, 1344, 1344, 1344,
     1344, 1345,    0,    0, 1345, 1345, 1347, 1347, 1347,    0,
     1347, 1348,    0, 1348, 1348, 1348, 1349,    0, 1349, 1349,
     1349, 1350,    0, 1350, 1350, 1350, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 3065 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 3079 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3366 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1344 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1343 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(ENCODING)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 169:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 176:
#line 242 "flex_lexer.l"
case 177:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 178:
YY_RULE_SETUP
#line 252 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 257 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 267 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 273 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 278 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 279 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 280 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 281 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 282 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 284 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 286 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4387 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1344 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1344 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1343);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 286 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

