#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[938] =
    {   0,
        0,    0,    2,    2,  137,  135,    4,    4,  135,  135,
      128,  135,  128,  128,  131,  128,  128,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      128,    2,    2,    3,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  123,    0,
        0,  134,    1,  131,  130,  129,  125,  124,  126,  133,
      133,  133,  133,  133,  133,  114,  133,  115,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  116,
      133,  133,  117,  118,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  119,  120,  121,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  122,  133,  133,  133,  133,  133,
      133,  133,  133,  127,    2,    2,    2,    2,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  132,  129,  100,  133,  101,  133,  133,  102,
      133,  103,  133,  133,  133,  133,  133,  133,  133,  133,
      104,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  105,  133,  133,  133,  133,  133,  133,  106,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  107,  133,  133,  108,  133,  133,  133,  133,
      133,  133,  133,  133,  109,  133,  133,  110,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  111,
      133,  133,  133,  133,  112,  133,  133,  133,  133,  113,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  133,  133,
      133,  133,  133,  133,   73,  133,   74,  133,  133,  133,
      133,   75,  133,  133,  133,  133,   76,  133,  133,  133,
       77,   78,  133,  133,  133,  133,  133,   79,   80,   81,
      133,  133,   82,  133,   83,  133,  133,  133,  133,  133,
      133,  133,   84,  133,   85,   86,   87,  133,   89,  133,

      133,  133,  133,   90,  133,  133,  133,  133,  133,   91,
       92,  133,  133,  133,  133,  133,  133,  133,   93,  133,
      133,  133,  133,   94,   95,   96,  133,  133,  133,  133,
      133,  133,  133,   97,  133,   98,  133,   99,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   54,   55,
      133,   56,  133,  133,  133,  133,  133,  133,   57,  133,
      133,  133,   58,  133,  133,  133,  133,  133,  133,  133,
      133,  133,   59,  133,  133,   88,  133,   60,   61,  133,
      133,  133,  133,   62,   63,   64,   65,  133,  133,  133,
       66,   67,  133,  133,  133,  133,  133,   68,  133,  133,
      133,  133,   69,  133,  133,  133,   70,  133,  133,  133,
       71,  133,  133,   72,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      133,   30,  133,  133,   31,  133,   32,  133,  133,   33,
       34,  133,   35,   36,   37,  133,   38,  133,   39,   40,
      133,   41,   42,  133,  133,   43,  133,  133,   44,  133,
      133,  133,   45,  133,   46,   47,   48,  133,   49,  133,

      133,  133,   50,   51,   52,   53,  133,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   14,   15,   16,   17,   18,  133,
       19,  133,   20,   21,   22,   23,  133,   24,  133,  133,
       25,   26,  133,   27,   28,  133,  133,  133,   29,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,  133,   10,  133,   11,  133,   12,
      133,  133,   13,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  133,    7,  133,    8,    9,    2,    2,    2,
        2,    2,    5,    6,    2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static const flex_int16_t yy_base[945] =
    {   0,
        0,    0,   67,    0,  433, 3713,  133,  135,  418,    0,
     3713,  410,  131,  401,  133,  132,  384,  129,  129,  137,
      135,  145,  179,  127,  184,  189,  131,  144,  201,  200,
      224,  193,  230,    0,  208,  246,  289,  241,  284,  287,
      320,    0,  200,  229,  363,  341,    0,  322,  268,  314,
      271,  271,  303,  347,  414,  468,  520,  568,  616,  274,
      343,  664,  345,  278,  406,  364,  716,  764,  422,  324,
      419,  814,  866,  465,  424,  480,  223,  311, 3713,  272,
      265, 3713, 3713,  312,  259,  207, 3713, 3713, 3713,    0,
      147,  203,  343,  353,  229,  250,  352,    0,  418,  463,

      421,  283,  317,  518,  504,  346,  376,  413,  431,  442,
      531,  453,  462,  467,  479,  484,  486,  520,  540,    0,
      522,  517,  564,  529,  535,  550,  570,  566,  587,  567,
      575,  571,  576,  585,  598,  595,    0,  604,  593,  604,
      626,  624,  625,  623,  624,  626,  621,  627,  646,  651,
      643,  662,  662,  666,  665,  663,  676,  683,  682,  680,
      702,  690,  678, 3713,    0,  325,    0,  206,  198,    0,
        0,  331,  190,  161,    0,    0,    0,  704,  728,  725,
      761,  806,  769,  820,  857,  766,  868,  871,  900,  894,
      908,  960,  912,  942,  944,  801,  946,  970,  998,  979,

      992, 1000, 1004, 1030, 1033, 1035, 1054,  854, 1044, 1058,
     1107, 1083, 1084,  916, 1014, 1112, 1140, 1046, 1108, 1126,
     1137, 1151, 1166, 1174, 1150, 1183, 1180, 1191, 1192, 1216,
     1214, 1206, 1229, 1237, 1248, 1254, 1246, 1280, 1282, 1278,
     1245, 1283, 1288, 1312, 1333, 1321, 1334, 1336, 1331, 1322,
     1357,    0, 3713,  145,    0,  694,    0,  695,  689,    0,
      723,    0,  720,  717,  737,  758,  731,  755,  814,  805,
        0,  822,  816,  842, 1072,  858,  860,  877,  925,  913,
      930,    0,  952,  976, 1099, 1084, 1095, 1142,    0, 1164,
     1183, 1227, 1244, 1287, 1292, 1304, 1337, 1356, 1356, 1373,

     1374, 1375, 1376, 1366, 1376,    0, 1372, 1388, 1386, 1392,
     1396, 1392, 1379, 1380,    0, 1390, 1385, 1391, 1406, 1407,
     1412, 1401, 1400, 1408, 1424, 1411, 1425, 1429, 1430,    0,
     1413, 1421, 1424, 1433,    0, 1430, 1427, 1435, 1445,    0,
     1437, 1438, 1439, 1455, 1443, 1443, 1442, 1446, 1461, 1459,
        0,  140, 1464, 1465, 1480, 1482, 1483, 1493, 1498, 1495,
     1496, 1508, 1524, 1534, 1536, 1547, 1550, 1564, 1548, 1549,
     1565, 1586, 1587, 1590, 1598, 1601, 1603, 1620, 1619, 1622,
     1636, 1624, 1654, 1641, 1653, 1657, 1665, 1670, 1686, 1675,
     1691, 1716, 1694, 1708, 1724, 1742, 1727, 1729, 1732, 1740,

     1758, 1745, 1773, 1757, 1781, 1770, 1794, 1807, 1815, 1810,
     1802, 1816, 1799, 1824, 1840, 1850, 1848, 1852, 1869, 1873,
     1874, 1878, 1906, 1861, 1904, 1890, 1915, 1918, 1923, 1932,
     1940, 1949, 1919, 1961, 1958, 1971, 1957, 1975, 1992, 2003,
     2006, 1994, 2011, 2009, 2037, 2034, 2059, 2060, 1501, 1526,
     1588, 1642, 1663, 1726,    0, 1790,    0, 1848, 1914, 1921,
     1983,    0, 2028, 2028, 2031, 2052,    0, 2053, 2061, 2059,
        0,    0, 2056, 2058, 2054, 2059, 2081,    0,    0,    0,
     2087, 2074,    0, 2079,    0, 2079, 2091, 2085, 2081, 2089,
     2090, 2106,    0, 2098,    0,    0,    0, 2094,    0, 2104,

     2113, 2100, 2104,    0, 2122, 2121, 2109, 2110, 2116,    0,
        0, 2130, 2132, 2123, 2120, 2119, 2129, 2141,    0, 2142,
     2139, 2145, 2142,    0,    0, 2140, 2158, 2148, 2143, 2166,
     2148, 2163, 2167,    0, 2152,    0, 2171,    0, 2180, 2188,
     2176, 2177, 2199, 2182, 2191, 2210, 2205, 2214, 2231, 2240,
     2236, 2242, 2259, 2248, 2265, 2274, 2276, 2290, 2298, 2304,
     2299, 2300, 2322, 2328, 2314, 2343, 2344, 2332, 2353, 2354,
     2372, 2376, 2362, 2377, 2378, 2402, 2388, 2407, 2411, 2428,
     2432, 2440, 2416, 2444, 2446, 2450, 2456, 2474, 2461, 2485,
     2482, 2484, 2486, 2490, 2520, 2495, 2514, 2523, 2538, 2524,

     2528, 2539, 2556, 2560, 2564, 2574, 2582, 2598, 2572, 2588,
     2593, 2606, 2612, 2610, 2614, 2628, 2638, 2647, 2644, 2650,
     2666, 2676, 2652, 2662, 2668, 2680, 2690, 2692,    0,    0,
     2195,    0, 2245, 2254, 2309, 2300, 2346, 2394,    0, 2396,
     2403, 2530,    0, 2563, 2591, 2698, 2701, 2687, 2689, 2692,
     2710, 2709,    0, 2716, 2707,    0, 2706,    0,    0, 2707,
     2724, 2712, 2723,    0,    0,    0,    0, 2736, 2731, 2720,
        0,    0, 2736, 2725, 2727, 2742, 2740,    0, 2750, 2735,
     2753, 2758, 2741, 2743, 2743, 2764,    0, 2764, 2767, 2768,
        0, 2756, 2776,    0, 2774, 2776, 2784, 2780, 2786, 2788,

     2790, 2809, 2814, 2792, 2820, 2828, 2842, 2826, 2830, 2843,
     2859, 2844, 2854, 2872, 2878, 2880, 2884, 2896, 2882, 2908,
     2913, 2897, 2932, 2918, 2922, 2936, 2934, 2948, 2950, 2946,
     2967, 2971, 2972, 2980, 2982, 2986, 2988, 2990, 2996, 3011,
     3021, 3005, 3022, 3020, 3050, 3039, 3045, 3060, 3062, 3075,
     3064, 3078, 3090, 3093, 3119, 3094, 3096, 3124, 3108, 3127,
     2775,    0, 2789, 2912, 3016, 3029,    0, 3087, 3084,    0,
        0, 3131,    0,    0,    0, 3130,    0, 3123,    0,    0,
     3113,    0,    0, 3121, 3136,    0, 3135, 3152,    0, 3134,
     3150, 3132,    0, 3155, 3144,    0,    0, 3155,    0, 3168,

     3171, 3153,    0,    0,    0,    0, 3163, 3172, 3173, 3178,
     3181, 3182, 3183, 3184, 3215, 3206, 3207, 3212, 3218, 3224,
     3236, 3237, 3241, 3246, 3249, 3247, 3250, 3252, 3255, 3260,
     3278, 3281, 3286, 3303, 3304, 3289, 3314, 3292, 3295, 3320,
     3345, 3332, 3335, 3344, 3368, 3349, 3357, 3358, 3374, 3363,
     3366, 3387, 3397, 3399,    0,    0,    0,    0,    0, 3294,
        0, 3296,    0,    0,    0,    0, 3323,    0, 3385, 3400,
        0,    0, 3388,    0,    0, 3395, 3401, 3411,    0, 3412,
     3420, 3422, 3423, 3428, 3441, 3431, 3445, 3453, 3454, 3456,
     3457, 3491, 3466, 3482, 3479, 3485, 3490, 3508, 3494, 3507,

     3520, 3531, 3525, 3536, 3456,    0, 3482,    0, 3502,    0,
     3499, 3519,    0, 3544, 3548, 3561, 3553, 3569, 3565, 3570,
     3587, 3574, 3577,    0, 3565,    0,    0, 3593, 3599, 3610,
     3602, 3611,    0,    0, 3615, 3623, 3713, 3688, 3692,  136,
     3696, 3700, 3704, 3708
    } ;

static const flex_int16_t yy_def[945] =
    {   0,
      937,    1,  937,    3,  937,  937,  937,  937,  937,  938,
      937,  939,  937,  937,  937,  937,  937,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      937,  941,  941,  937,  941,  942,  941,  943,  941,  941,
      941,  941,  941,  944,  944,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  941,  937,  937,  938,
      939,  937,  937,  937,  937,  937,  937,  937,  937,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  937,  941,  941,  941,  942,  943,  941,
      941,  941,  941,  941,  941,  941,  941,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  941,  937,  937,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      941,  941,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,  940,  940,  940,  940,  940,  940,
      940,  940,  940,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  940,  940,  940,  940,  940,   55,   55,   55,
       55,   55,  940,  940,   55,   55,    0,  937,  937,  937,
      937,  937,  937,  937
    } ;

static const flex_int16_t yy_nxt[3781] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   11,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   34,   34,   34,    6,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   34,   34,   34,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   47,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       74,   75,   76,   70,   70,   70,   42,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       70,   70,   70,   77,   78,   78,   78,   78,   83,   90,
       84,   86,   84,   87,   88,   91,   97,   92,  103,  352,
       99,  116,  104,   93,  254,   94,  105,  117,  125,   95,
       96,  126,  106,  255,  100,  107,   98,  101,  102,  108,
      352,  109,   91,   97,   92,  103,  110,   99,  116,  104,
       93,  111,   94,  105,  117,  125,   95,   96,  126,  106,
      255,  100,  107,   98,  101,  102,  108,  118,  109,  173,

      112,  166,   78,  110,  170,  119,  113,  120,  111,  114,
      351,  136,  115,  121,  122,  123,  254,  130,  127,  137,
      124,  131,  128,  138,  118,  143,  139,  112,  129,  144,
       78,   78,  119,  113,  120,  256,  114,  132,  136,  115,
      121,  122,  123,  140,  130,  127,  137,  124,  131,  128,
      138,  133,  143,  139,  141,  129,  144,  134,  135,  261,
      142,  145,  256,  146,  132,  262,  147,  157,   85,  158,
      140,   82,  159,  148,  149,  171,  253,  172,  133,  174,
      172,  141,  175,  176,  134,  135,  261,  142,  145,  252,
      146,  178,  262,  147,  157,  214,  158,  160,  204,  159,

      148,  149,  150,  151,  205,  161,  152,  162,  163,  153,
      154,  178,   78,   78,  177,  178,  155,  271,  178,  156,
       86,   84,  214,  173,  160,  204,  166,   78,  170,  150,
      151,  205,  161,  152,  162,  163,  153,  154,  178,  174,
      172,  178,  178,  155,  271,  165,  156,  165,  165,  272,
      165,  165,  165,  165,  165,  165,  206,  165,  165,  165,
      178,  178,  178,  179,  207,  180,  259,  257,  178,  260,
      263,  181,  213,  182,  167,  258,  272,  183,  184,  279,
      178,  218,  178,  206,  264,  219,  164,  178,  178,  178,
      179,  207,  180,  259,  257,   89,  260,  263,  181,  213,

      182,  178,  258,  280,  183,  184,  279,  178,  218,  178,
       85,  264,  219,  165,  165,  165,   82,  165,  165,  165,
      165,  165,  165,  215,  165,  165,  165,  216,  178,   79,
      280,  185,  937,  217,  937,  228,  231,  248,  269,  178,
      232,  178,  265,  178,  281,  249,  229,  282,  270,  266,
      215,  186,  230,  937,  216,  937,  178,  283,  185,  178,
      217,  178,  228,  231,  248,  269,  178,  232,  178,  265,
      178,  281,  249,  229,  282,  270,  266,  288,  186,  230,
      165,  187,  178,  178,  283,  178,  178,  267,  178,  268,
      937,  245,  289,  246,  290,  188,  247,  178,  189,  190,

      250,  251,  178,  291,  288,  178,  937,  937,  187,  178,
      937,  292,  178,  293,  267,  937,  268,  178,  245,  289,
      246,  290,  188,  247,  178,  189,  190,  250,  251,  178,
      291,  273,  178,  191,  277,  278,  274,  192,  292,  937,
      293,  193,  275,  298,  178,  299,  284,  194,  285,  276,
      195,  294,  286,  937,  295,  304,  305,  178,  273,  287,
      191,  277,  278,  274,  192,  937,  296,  937,  193,  275,
      298,  297,  299,  284,  194,  285,  276,  195,  294,  286,
      300,  295,  304,  305,  178,  178,  287,  306,  307,  308,
      301,  309,  196,  296,  197,  302,  303,  312,  297,  198,

      310,  313,  311,  314,  199,  178,  937,  300,  315,  316,
      937,  317,  178,  318,  306,  307,  308,  301,  309,  196,
      319,  197,  302,  303,  312,  320,  198,  310,  313,  311,
      314,  199,  178,  178,  321,  315,  316,  200,  317,  322,
      318,  323,  327,  201,  328,  324,  202,  319,  331,  203,
      329,  325,  320,  178,  937,  937,  326,  332,  330,  333,
      178,  321,  937,  937,  200,  334,  322,  335,  323,  327,
      201,  328,  324,  202,  937,  331,  203,  329,  325,  338,
      178,  178,  208,  326,  332,  330,  333,  336,  209,  210,
      211,  339,  334,  340,  335,  212,  341,  342,  337,  344,

      343,  178,  937,  345,  346,  937,  338,  349,  178,  208,
      350,  449,  450,  451,  336,  209,  210,  211,  339,  347,
      340,  178,  212,  341,  342,  337,  344,  343,  178,  220,
      345,  346,  348,  178,  349,  937,  452,  350,  449,  450,
      451,  178,  178,  221,  353,  178,  347,  453,  178,  222,
      223,  937,  454,  178,  937,  937,  220,  354,  937,  348,
      178,  455,  178,  452,  458,  178,  937,  937,  178,  178,
      221,  353,  178,  456,  453,  457,  222,  223,  178,  454,
      178,  178,  224,  178,  354,  355,  178,  459,  455,  178,
      225,  458,  178,  356,  226,  937,  937,  227,  178,  359,

      456,  178,  457,  178,  937,  178,  178,  937,  178,  224,
      178,  937,  355,  178,  459,  937,  937,  225,  178,  357,
      356,  226,  358,  178,  227,  178,  359,  460,  178,  233,
      178,  234,  379,  178,  235,  360,  461,  178,  178,  462,
      463,  236,  237,  178,  937,  178,  357,  937,  937,  358,
      178,  178,  937,  937,  460,  464,  233,  178,  234,  379,
      937,  235,  360,  461,  178,  178,  462,  463,  236,  237,
      178,  178,  937,  467,  178,  361,  937,  468,  178,  238,
      239,  937,  464,  240,  178,  178,  241,  242,  178,  362,
      937,  178,  363,  243,  178,  365,  244,  366,  178,  364,

      467,  178,  361,  178,  468,  178,  238,  239,  178,  469,
      240,  178,  178,  241,  242,  178,  362,  367,  178,  363,
      243,  178,  365,  244,  366,  178,  364,  368,  369,  178,
      178,  178,  178,  178,  937,  178,  469,  178,  178,  470,
      370,  471,  375,  376,  367,  178,  937,  472,  937,  178,
      937,  937,  178,  404,  368,  369,  178,  937,  178,  178,
      178,  178,  380,  178,  178,  473,  470,  370,  471,  375,
      376,  378,  178,  371,  472,  377,  178,  178,  372,  178,
      404,  178,  937,  178,  373,  381,  178,  178,  178,  380,
      178,  374,  473,  474,  937,  937,  178,  178,  378,  937,

      371,  937,  377,  386,  178,  372,  178,  178,  178,  178,
      178,  373,  381,  382,  178,  383,  178,  178,  374,  384,
      474,  178,  387,  178,  178,  937,  385,  388,  389,  178,
      386,  178,  405,  937,  178,  178,  178,  178,  937,  937,
      382,  178,  383,  178,  178,  937,  384,  178,  178,  387,
      178,  178,  178,  385,  388,  389,  178,  390,  178,  405,
      391,  178,  178,  178,  178,  396,  392,  178,  178,  393,
      178,  178,  178,  937,  178,  178,  410,  178,  178,  178,
      394,  178,  937,  178,  390,  395,  397,  391,  178,  465,
      178,  178,  396,  392,  178,  178,  393,  178,  178,  178,

      178,  178,  178,  410,  466,  403,  937,  394,  178,  402,
      178,  937,  395,  397,  475,  476,  465,  937,  178,  477,
      178,  178,  178,  398,  178,  178,  937,  178,  178,  178,
      937,  466,  403,  399,  411,  406,  402,  407,  400,  401,
      937,  475,  476,  178,  178,  178,  477,  178,  178,  178,
      398,  178,  178,  408,  178,  409,  178,  178,  412,  478,
      399,  411,  406,  178,  407,  400,  401,  178,  178,  413,
      178,  178,  178,  937,  178,  414,  178,  178,  937,  415,
      408,  178,  409,  178,  178,  412,  478,  178,  178,  479,
      178,  178,  416,  937,  178,  178,  413,  178,  937,  417,

      178,  178,  414,  178,  178,  420,  415,  480,  178,  178,
      178,  178,  418,  937,  178,  178,  479,  178,  178,  416,
      178,  419,  937,  178,  178,  425,  417,  178,  178,  178,
      178,  178,  420,  421,  480,  178,  178,  422,  178,  418,
      423,  481,  937,  178,  178,  424,  178,  178,  419,  426,
      178,  178,  425,  178,  178,  178,  178,  937,  178,  431,
      421,  427,  436,  178,  422,  178,  178,  423,  481,  428,
      178,  178,  424,  178,  178,  429,  426,  482,  178,  937,
      178,  178,  178,  178,  430,  178,  431,  937,  427,  436,
      178,  178,  178,  178,  432,  178,  428,  178,  178,  178,

      178,  178,  429,  434,  482,  178,  433,  483,  437,  178,
      178,  430,  178,  484,  435,  178,  438,  178,  178,  178,
      178,  432,  178,  937,  178,  178,  178,  178,  937,  178,
      434,  937,  178,  433,  483,  437,  485,  442,  178,  447,
      484,  435,  178,  438,  178,  439,  178,  178,  445,  178,
      178,  178,  178,  178,  440,  443,  178,  441,  178,  178,
      444,  446,  937,  485,  442,  178,  447,  937,  178,  486,
      178,  178,  439,  178,  178,  445,  178,  178,  178,  487,
      178,  440,  443,  488,  441,  178,  178,  444,  446,  448,
      489,  490,  491,  492,  178,  178,  486,  178,  178,  494,

      178,  178,  495,  493,  496,  497,  487,  498,  499,  500,
      488,  501,  502,  503,  504,  505,  448,  489,  490,  491,
      492,  178,  506,  507,  508,  509,  494,  511,  512,  495,
      493,  496,  497,  513,  498,  499,  500,  514,  501,  502,
      503,  504,  505,  515,  510,  516,  517,  518,  519,  506,
      507,  508,  509,  520,  511,  512,  521,  522,  523,  524,
      513,  525,  526,  527,  514,  528,  530,  529,  531,  532,
      515,  510,  516,  517,  518,  519,  533,  534,  535,  538,
      520,  178,  539,  521,  522,  523,  524,  536,  525,  526,
      527,  537,  528,  530,  529,  531,  532,  178,  937,  540,

      178,  178,  178,  533,  534,  535,  538,  541,  178,  539,
      178,  542,  178,  178,  536,  178,  937,  178,  537,  178,
      178,  937,  937,  543,  178,  178,  540,  178,  178,  178,
      178,  629,  178,  178,  541,  178,  937,  178,  542,  178,
      178,  178,  178,  544,  178,  178,  178,  178,  545,  546,
      543,  547,  178,  178,  937,  937,  630,  178,  629,  178,
      178,  178,  178,  550,  178,  178,  552,  178,  178,  548,
      544,  178,  178,  178,  937,  545,  546,  937,  547,  549,
      178,  178,  178,  630,  178,  178,  178,  178,  178,  553,
      550,  178,  178,  552,  178,  551,  548,  937,  178,  554,

      178,  178,  178,  178,  555,  557,  549,  178,  178,  178,
      937,  178,  178,  178,  178,  558,  553,  560,  178,  556,
      178,  937,  551,  178,  178,  631,  554,  178,  178,  178,
      178,  555,  557,  559,  178,  178,  562,  178,  178,  178,
      178,  564,  558,  937,  560,  178,  556,  178,  561,  563,
      178,  178,  631,  178,  178,  937,  178,  178,  178,  178,
      559,  178,  178,  562,  178,  178,  178,  178,  564,  565,
      178,  178,  566,  178,  568,  561,  563,  567,  178,  632,
      178,  937,  178,  178,  178,  178,  178,  178,  178,  571,
      178,  178,  178,  633,  178,  569,  565,  178,  178,  566,

      178,  568,  178,  178,  567,  178,  632,  178,  178,  178,
      570,  178,  178,  937,  178,  574,  571,  178,  178,  178,
      633,  178,  569,  178,  572,  178,  937,  937,  178,  178,
      178,  178,  937,  178,  178,  178,  573,  570,  178,  178,
      575,  178,  574,  634,  178,  178,  579,  937,  937,  580,
      178,  572,  178,  178,  578,  178,  576,  581,  178,  178,
      178,  178,  178,  573,  178,  577,  178,  575,  178,  178,
      634,  178,  178,  579,  178,  582,  580,  178,  584,  178,
      178,  578,  178,  576,  581,  583,  178,  587,  178,  178,
      178,  178,  577,  178,  178,  178,  178,  937,  178,  585,

      937,  178,  582,  635,  178,  584,  178,  178,  937,  178,
      178,  178,  583,  586,  587,  588,  178,  178,  178,  178,
      937,  178,  178,  589,  178,  178,  585,  178,  590,  591,
      635,  178,  178,  178,  178,  592,  178,  178,  178,  178,
      586,  178,  588,  178,  178,  178,  178,  178,  594,  593,
      589,  178,  178,  178,  178,  590,  591,  178,  178,  178,
      178,  178,  592,  178,  937,  597,  178,  178,  178,  598,
      595,  178,  937,  636,  178,  594,  593,  178,  178,  178,
      178,  596,  599,  937,  178,  178,  178,  178,  178,  178,
      178,  178,  597,  605,  178,  178,  598,  595,  178,  601,

      636,  600,  602,  603,  178,  178,  178,  607,  596,  599,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  604,
      605,  178,  178,  178,  606,  178,  601,  178,  600,  602,
      603,  937,  608,  178,  607,  178,  178,  178,  178,  937,
      178,  178,  178,  178,  637,  937,  604,  937,  178,  178,
      178,  606,  178,  638,  178,  178,  178,  178,  609,  608,
      178,  937,  178,  178,  610,  937,  178,  178,  178,  178,
      178,  637,  611,  612,  616,  178,  178,  178,  178,  178,
      638,  937,  178,  178,  178,  609,  178,  178,  178,  613,
      614,  610,  178,  178,  178,  178,  178,  615,  178,  611,

      612,  616,  178,  937,  178,  178,  937,  621,  178,  178,
      937,  178,  178,  178,  639,  178,  613,  614,  617,  178,
      178,  178,  178,  178,  615,  178,  178,  937,  178,  178,
      618,  178,  619,  620,  621,  178,  178,  622,  178,  178,
      178,  639,  623,  178,  937,  617,  178,  178,  178,  937,
      178,  178,  640,  178,  178,  178,  178,  618,  178,  619,
      620,  641,  937,  642,  622,  643,  625,  178,  644,  623,
      178,  178,  624,  178,  178,  178,  178,  178,  178,  640,
      628,  178,  645,  646,  647,  626,  648,  649,  641,  627,
      642,  650,  643,  625,  651,  644,  178,  178,  178,  624,

      652,  178,  653,  178,  178,  654,  655,  628,  656,  645,
      646,  647,  626,  648,  649,  657,  627,  658,  650,  659,
      660,  651,  663,  178,  178,  661,  664,  652,  665,  653,
      666,  667,  654,  655,  668,  656,  662,  669,  670,  671,
      672,  673,  657,  674,  658,  675,  659,  660,  676,  663,
      677,  678,  661,  664,  679,  665,  680,  666,  667,  681,
      682,  668,  683,  662,  669,  670,  671,  672,  673,  684,
      674,  685,  675,  686,  687,  676,  688,  677,  678,  689,
      690,  679,  691,  680,  692,  693,  681,  682,  694,  683,
      937,  937,  937,  178,  178,  937,  684,  178,  685,  700,

      686,  687,  937,  688,  937,  178,  689,  690,  178,  691,
      695,  692,  693,  697,  698,  694,  178,  178,  696,  178,
      178,  178,  178,  701,  178,  178,  700,  178,  178,  699,
      937,  178,  178,  761,  937,  178,  178,  695,  937,  702,
      697,  698,  178,  178,  178,  696,  178,  178,  178,  178,
      701,  178,  178,  178,  178,  178,  699,  178,  178,  178,
      761,  703,  762,  178,  937,  178,  702,  705,  178,  178,
      937,  763,  704,  178,  178,  178,  178,  178,  178,  178,
      178,  707,  178,  706,  178,  178,  178,  709,  703,  762,
      937,  178,  178,  178,  705,  178,  178,  708,  763,  704,

      178,  937,  178,  178,  178,  710,  178,  178,  707,  178,
      706,  178,  178,  178,  709,  178,  178,  178,  178,  711,
      178,  178,  937,  178,  708,  764,  765,  178,  712,  178,
      937,  178,  710,  937,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  711,  715,  178,  178,
      713,  178,  764,  765,  178,  712,  714,  717,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  937,  178,  178,
      178,  178,  178,  766,  715,  716,  178,  713,  178,  178,
      178,  178,  937,  714,  717,  718,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      766,  937,  716,  720,  719,  722,  178,  178,  178,  178,
      937,  767,  718,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  768,  178,  178,  178,  769,  178,  721,
      720,  719,  722,  178,  937,  937,  178,  723,  767,  178,
      178,  178,  178,  937,  178,  178,  178,  724,  178,  178,
      768,  178,  178,  178,  769,  178,  721,  178,  725,  727,
      178,  178,  726,  178,  723,  178,  178,  178,  729,  178,
      728,  178,  178,  178,  724,  178,  178,  178,  178,  937,
      178,  178,  937,  178,  178,  725,  727,  178,  178,  726,
      178,  178,  178,  178,  178,  729,  178,  728,  178,  732,

      178,  178,  178,  178,  178,  178,  730,  178,  178,  731,
      178,  178,  736,  937,  178,  733,  734,  937,  178,  178,
      178,  178,  178,  178,  937,  178,  732,  178,  178,  178,
      178,  178,  178,  730,  178,  735,  731,  178,  178,  736,
      178,  178,  733,  734,  737,  178,  178,  770,  178,  178,
      178,  178,  740,  738,  178,  178,  178,  178,  178,  178,
      178,  178,  735,  739,  178,  178,  937,  178,  178,  741,
      937,  737,  178,  178,  770,  178,  178,  178,  178,  740,
      738,  178,  178,  178,  178,  742,  937,  178,  178,  178,
      739,  178,  178,  178,  743,  771,  741,  178,  937,  178,

      178,  178,  178,  178,  178,  747,  744,  745,  178,  178,
      178,  178,  742,  746,  748,  178,  178,  772,  178,  178,
      178,  743,  771,  749,  178,  178,  178,  178,  178,  178,
      178,  178,  747,  744,  745,  178,  178,  178,  178,  750,
      746,  748,  178,  178,  772,  178,  178,  178,  937,  178,
      749,  178,  178,  752,  178,  178,  178,  178,  178,  751,
      937,  178,  178,  755,  178,  178,  750,  178,  937,  758,
      178,  937,  178,  753,  178,  178,  178,  754,  178,  178,
      752,  178,  178,  178,  178,  178,  751,  178,  178,  178,
      755,  178,  178,  178,  178,  757,  758,  178,  756,  178,

      753,  759,  178,  178,  754,  178,  178,  760,  178,  178,
      178,  178,  178,  178,  178,  773,  178,  178,  774,  775,
      178,  776,  757,  777,  178,  756,  178,  178,  759,  178,
      178,  778,  178,  779,  760,  780,  178,  781,  782,  783,
      178,  784,  773,  785,  178,  774,  775,  786,  776,  787,
      777,  788,  789,  790,  178,  791,  178,  792,  778,  793,
      779,  794,  780,  795,  781,  782,  783,  796,  784,  797,
      785,  798,  799,  800,  786,  801,  787,  802,  788,  789,
      790,  803,  791,  804,  792,  805,  793,  806,  794,  807,
      795,  178,  855,  178,  796,  937,  797,  178,  798,  799,

      800,  178,  801,  809,  802,  810,  811,  178,  803,  814,
      804,  178,  805,  178,  806,  856,  807,  178,  178,  855,
      178,  178,  808,  178,  178,  178,  178,  178,  178,  178,
      809,  178,  810,  811,  178,  812,  814,  178,  178,  937,
      178,  813,  856,  817,  178,  178,  178,  178,  178,  808,
      178,  178,  178,  178,  178,  815,  178,  178,  178,  178,
      178,  820,  812,  178,  178,  178,  816,  178,  813,  937,
      817,  821,  178,  178,  178,  818,  178,  937,  178,  178,
      178,  178,  815,  937,  178,  819,  178,  178,  820,  178,
      178,  178,  178,  816,  178,  178,  178,  178,  821,  178,

      937,  178,  818,  178,  822,  825,  178,  178,  178,  178,
      823,  824,  819,  178,  178,  178,  178,  178,  178,  178,
      826,  178,  178,  178,  178,  178,  178,  827,  178,  857,
      178,  822,  825,  178,  178,  178,  178,  823,  824,  178,
      178,  178,  178,  828,  178,  178,  178,  826,  178,  178,
      178,  831,  178,  178,  827,  178,  857,  178,  937,  178,
      178,  178,  178,  178,  829,  178,  178,  178,  830,  178,
      828,  178,  178,  178,  833,  937,  178,  178,  831,  832,
      178,  937,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  829,  178,  834,  178,  830,  178,  178,  178,  178,

      178,  833,  835,  178,  178,  178,  832,  178,  178,  178,
      178,  178,  178,  837,  178,  178,  178,  178,  836,  178,
      834,  937,  840,  178,  178,  178,  178,  178,  178,  835,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      837,  838,  178,  841,  178,  836,  178,  858,  178,  840,
      178,  839,  178,  859,  178,  178,  178,  178,  178,  178,
      178,  844,  178,  842,  178,  178,  178,  178,  838,  178,
      841,  843,  937,  845,  858,  178,  178,  178,  839,  178,
      859,  178,  178,  178,  178,  178,  178,  178,  844,  178,
      842,  849,  178,  846,  178,  178,  848,  178,  843,  178,

      845,  178,  860,  178,  178,  847,  178,  178,  178,  178,
      850,  852,  178,  178,  178,  178,  861,  937,  849,  178,
      846,  854,  178,  848,  178,  178,  178,  178,  178,  860,
      178,  178,  847,  178,  178,  851,  178,  850,  852,  178,
      178,  178,  178,  861,  178,  178,  862,  863,  854,  864,
      865,  866,  178,  867,  178,  853,  178,  178,  178,  868,
      178,  178,  851,  178,  178,  869,  870,  871,  178,  872,
      873,  178,  178,  862,  863,  874,  864,  865,  866,  875,
      867,  876,  853,  178,  877,  878,  868,  879,  178,  880,
      178,  178,  869,  870,  871,  178,  872,  873,  882,  178,

      178,  178,  874,  937,  881,  937,  875,  884,  876,  178,
      178,  877,  878,  883,  879,  178,  880,  178,  178,  178,
      178,  178,  178,  178,  178,  882,  178,  178,  178,  178,
      885,  881,  178,  887,  884,  178,  178,  178,  886,  937,
      883,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  885,  888,  178,
      887,  178,  178,  178,  178,  886,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  889,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  888,  178,  178,  178,  890,
      178,  178,  178,  178,  178,  178,  178,  178,  892,  178,

      178,  178,  889,  178,  178,  178,  178,  905,  891,  896,
      178,  178,  178,  178,  178,  178,  890,  894,  178,  178,
      178,  178,  178,  178,  178,  892,  178,  893,  906,  178,
      178,  178,  897,  178,  905,  891,  896,  178,  907,  178,
      178,  178,  178,  937,  894,  178,  895,  178,  178,  178,
      178,  178,  178,  178,  893,  906,  178,  178,  178,  897,
      898,  178,  178,  899,  178,  907,  178,  178,  178,  178,
      901,  902,  178,  895,  178,  178,  178,  937,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  898,  178,  178,
      899,  178,  900,  178,  178,  178,  178,  901,  902,  178,

      178,  178,  178,  178,  178,  178,  903,  178,  178,  178,
      178,  178,  178,  178,  178,  908,  178,  909,  178,  900,
      910,  178,  178,  904,  178,  911,  912,  178,  913,  178,
      178,  178,  178,  903,  178,  937,  178,  178,  178,  178,
      178,  178,  908,  178,  909,  178,  937,  910,  178,  178,
      904,  178,  911,  912,  914,  913,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  937,
      178,  178,  178,  178,  178,  178,  178,  915,  178,  937,
      937,  914,  178,  178,  178,  178,  178,  178,  923,  178,
      178,  178,  178,  178,  178,  178,  918,  178,  178,  178,

      178,  178,  178,  178,  915,  178,  916,  178,  178,  178,
      178,  178,  917,  937,  924,  923,  178,  178,  178,  178,
      178,  178,  178,  918,  178,  178,  178,  178,  178,  178,
      178,  178,  925,  916,  178,  178,  926,  178,  178,  917,
      919,  924,  922,  178,  178,  178,  178,  927,  178,  178,
      920,  178,  178,  178,  178,  178,  921,  178,  178,  925,
      937,  178,  178,  926,  178,  178,  937,  919,  178,  922,
      178,  178,  178,  178,  927,  178,  928,  920,  178,  937,
      178,  178,  178,  921,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  929,  933,  178,  934,  178,  178,  930,

      178,  937,  178,  928,  178,  178,  178,  931,  178,  178,
      935,  178,  178,  178,  178,  932,  178,  178,  178,  178,
      929,  933,  937,  934,  178,  178,  930,  178,  178,  178,
      178,  178,  178,  178,  931,  937,  178,  935,  178,  178,
      178,  936,  932,  178,  937,  937,  178,  178,  178,  937,
      937,  178,  178,  937,  178,  178,  937,  178,  937,  178,
      178,  937,  937,  178,  937,  937,  178,  178,  936,  937,
      937,  937,  937,  937,  178,  178,  937,  937,  937,  178,
      937,  937,  937,  937,  937,  937,  937,  178,   80,  937,
      937,   80,   81,  937,   81,   81,  165,  937,  165,  165,

      168,  937,  168,  168,  169,  937,  169,  169,  178,  937,
      178,  178,    5,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937
    } ;

static const flex_int16_t yy_chk[3781] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   13,  940,
       13,   15,   15,   16,   16,   18,   19,   18,   21,  352,
       20,   24,   21,   18,  254,   18,   21,   24,   27,   18,
       18,   28,   21,   91,   20,   21,   19,   20,   20,   22,
      174,   22,   18,   19,   18,   21,   22,   20,   24,   21,
       18,   22,   18,   21,   24,   27,   18,   18,   28,   21,
       91,   20,   21,   19,   20,   20,   22,   25,   22,  173,

       23,   43,   43,   22,  169,   25,   23,   26,   22,   23,
      168,   32,   23,   26,   26,   26,   86,   30,   29,   32,
       26,   30,   29,   32,   25,   35,   32,   23,   29,   35,
       44,   44,   25,   23,   26,   92,   23,   31,   32,   23,
       26,   26,   26,   33,   30,   29,   32,   26,   30,   29,
       32,   31,   35,   32,   33,   29,   35,   31,   31,   95,
       33,   36,   92,   36,   31,   96,   36,   38,   85,   38,
       33,   81,   38,   36,   36,   49,   80,   49,   31,   51,
       51,   33,   52,   52,   31,   31,   95,   33,   36,   77,
       36,   60,   96,   36,   38,   64,   38,   39,   60,   38,

       36,   36,   37,   37,   60,   39,   37,   40,   40,   37,
       37,   60,   78,   78,   53,   64,   37,  102,   60,   37,
       84,   84,   64,   50,   39,   60,  166,  166,   48,   37,
       37,   60,   39,   37,   40,   40,   37,   37,   60,  172,
      172,   70,   64,   37,  102,   46,   37,   54,   54,  103,
       54,   54,   54,   54,   54,   54,   61,   54,   54,   54,
       61,   70,   63,   54,   61,   54,   94,   93,   70,   94,
       97,   54,   63,   54,   45,   93,  103,   54,   54,  106,
       61,   66,   63,   61,   97,   66,   41,   61,   70,   63,
       54,   61,   54,   94,   93,   17,   94,   97,   54,   63,

       54,   66,   93,  107,   54,   54,  106,   61,   66,   63,
       14,   97,   66,   54,   55,   55,   12,   55,   55,   55,
       55,   55,   55,   65,   55,   55,   55,   65,   66,    9,
      107,   55,    5,   65,    0,   69,   71,   75,  101,   69,
       71,   75,   99,   65,  108,   75,   69,  109,  101,   99,
       65,   55,   69,    0,   65,    0,   71,  110,   55,   69,
       65,   75,   69,   71,   75,  101,   69,   71,   75,   99,
       65,  108,   75,   69,  109,  101,   99,  112,   55,   69,
       55,   56,   74,   71,  110,   56,   69,  100,   75,  100,
        0,   74,  113,   74,  114,   56,   74,   76,   56,   56,

       76,   76,   74,  115,  112,   56,    0,    0,   56,   74,
        0,  116,   56,  117,  100,    0,  100,   76,   74,  113,
       74,  114,   56,   74,   76,   56,   56,   76,   76,   74,
      115,  104,   56,   57,  105,  105,  104,   57,  116,    0,
      117,   57,  104,  121,   76,  122,  111,   57,  111,  104,
       57,  118,  111,    0,  118,  124,  125,   57,  104,  111,
       57,  105,  105,  104,   57,    0,  119,    0,   57,  104,
      121,  119,  122,  111,   57,  111,  104,   57,  118,  111,
      123,  118,  124,  125,   57,   58,  111,  126,  127,  128,
      123,  128,   58,  119,   58,  123,  123,  130,  119,   58,

      129,  131,  129,  132,   58,   58,    0,  123,  133,  134,
        0,  135,   58,  136,  126,  127,  128,  123,  128,   58,
      138,   58,  123,  123,  130,  139,   58,  129,  131,  129,
      132,   58,   58,   59,  140,  133,  134,   59,  135,  141,
      136,  142,  144,   59,  145,  142,   59,  138,  147,   59,
      146,  143,  139,   59,    0,    0,  143,  148,  146,  149,
       59,  140,    0,    0,   59,  150,  141,  151,  142,  144,
       59,  145,  142,   59,    0,  147,   59,  146,  143,  153,
       59,   62,   62,  143,  148,  146,  149,  152,   62,   62,
       62,  154,  150,  155,  151,   62,  156,  157,  152,  158,

      157,   62,    0,  159,  160,    0,  153,  162,   62,   62,
      163,  256,  258,  259,  152,   62,   62,   62,  154,  161,
      155,  178,   62,  156,  157,  152,  158,  157,   62,   67,
      159,  160,  161,   67,  162,    0,  261,  163,  256,  258,
      259,  178,  180,   67,  179,  179,  161,  263,  178,   67,
       67,    0,  264,   67,    0,    0,   67,  180,    0,  161,
       67,  265,  180,  261,  267,  179,    0,    0,  178,  180,
       67,  179,  179,  266,  263,  266,   67,   67,  181,  264,
       67,   68,   68,  186,  180,  181,  183,  268,  265,  180,
       68,  267,  179,  181,   68,    0,    0,   68,  181,  183,

      266,   68,  266,  186,    0,  181,  183,    0,   68,   68,
      186,    0,  181,  183,  268,    0,    0,   68,  196,  182,
      181,   68,  182,  182,   68,  181,  183,  269,   68,   72,
      186,   72,  196,  183,   72,  184,  270,  184,  196,  272,
      273,   72,   72,  182,    0,  196,  182,    0,    0,  182,
      182,   72,    0,    0,  269,  274,   72,  184,   72,  196,
        0,   72,  184,  270,  184,  196,  272,  273,   72,   72,
      182,  208,    0,  276,  185,  185,    0,  277,   72,   73,
       73,    0,  274,   73,  184,  187,   73,   73,  188,  185,
        0,  208,  187,   73,  185,  188,   73,  188,  208,  187,

      276,  185,  185,   73,  277,  187,   73,   73,  188,  278,
       73,  190,  187,   73,   73,  188,  185,  189,  208,  187,
       73,  185,  188,   73,  188,  191,  187,  189,  190,  193,
       73,  190,  187,  214,    0,  188,  278,  189,  190,  279,
      191,  280,  193,  193,  189,  191,    0,  281,    0,  193,
        0,    0,  191,  214,  189,  190,  193,    0,  190,  194,
      214,  195,  197,  197,  189,  283,  279,  191,  280,  193,
      193,  195,  191,  192,  281,  194,  193,  192,  192,  194,
      214,  195,    0,  197,  192,  198,  194,  198,  195,  197,
      197,  192,  283,  284,    0,    0,  200,  192,  195,    0,

      192,    0,  194,  200,  192,  192,  194,  198,  195,  201,
      197,  192,  198,  199,  198,  199,  200,  202,  192,  199,
      284,  203,  201,  200,  192,    0,  199,  202,  203,  201,
      200,  215,  215,    0,  198,  199,  201,  202,    0,    0,
      199,  203,  199,  200,  202,    0,  199,  204,  203,  201,
      205,  215,  206,  199,  202,  203,  201,  204,  215,  215,
      205,  209,  199,  218,  202,  209,  206,  204,  203,  206,
      205,  207,  206,    0,  204,  210,  218,  205,  215,  206,
      207,  209,    0,  218,  204,  207,  210,  205,  209,  275,
      218,  207,  209,  206,  204,  210,  206,  205,  207,  206,

      212,  213,  210,  218,  275,  213,    0,  207,  209,  212,
      218,    0,  207,  210,  285,  286,  275,    0,  207,  287,
      212,  213,  210,  211,  211,  219,    0,  212,  213,  216,
        0,  275,  213,  211,  219,  216,  212,  216,  211,  211,
        0,  285,  286,  220,  211,  219,  287,  212,  213,  216,
      211,  211,  219,  217,  221,  217,  216,  217,  220,  288,
      211,  219,  216,  220,  216,  211,  211,  225,  222,  221,
      220,  211,  219,    0,  221,  222,  216,  217,    0,  223,
      217,  221,  217,  223,  217,  220,  288,  225,  222,  290,
      220,  224,  224,    0,  225,  222,  221,  227,    0,  226,

      226,  221,  222,  223,  217,  229,  223,  291,  228,  229,
      223,  224,  227,    0,  225,  222,  290,  227,  224,  224,
      226,  228,    0,  232,  227,  232,  226,  226,  228,  229,
      223,  231,  229,  230,  291,  228,  229,  230,  224,  227,
      231,  292,    0,  232,  227,  231,  233,  226,  228,  233,
      232,  231,  232,  230,  234,  228,  229,    0,  231,  237,
      230,  234,  241,  237,  230,  235,  233,  231,  292,  234,
      232,  236,  231,  233,  234,  235,  233,  293,  231,    0,
      230,  234,  241,  237,  236,  235,  237,    0,  234,  241,
      237,  236,  235,  233,  238,  240,  234,  238,  236,  239,

      242,  234,  235,  240,  293,  243,  239,  294,  242,  241,
      237,  236,  235,  295,  240,  240,  243,  238,  236,  239,
      242,  238,  240,    0,  238,  243,  239,  242,    0,  244,
      240,    0,  243,  239,  294,  242,  296,  246,  246,  250,
      295,  240,  240,  243,  238,  244,  239,  242,  249,  244,
      245,  247,  243,  248,  245,  247,  244,  245,  246,  250,
      248,  249,    0,  296,  246,  246,  250,    0,  249,  297,
      245,  247,  244,  248,  251,  249,  244,  245,  247,  298,
      248,  245,  247,  299,  245,  246,  250,  248,  249,  251,
      300,  301,  302,  303,  251,  249,  297,  245,  247,  304,

      248,  251,  305,  303,  307,  308,  298,  309,  310,  311,
      299,  312,  313,  314,  316,  317,  251,  300,  301,  302,
      303,  251,  318,  319,  320,  321,  304,  322,  323,  305,
      303,  307,  308,  324,  309,  310,  311,  325,  312,  313,
      314,  316,  317,  326,  321,  327,  328,  329,  331,  318,
      319,  320,  321,  332,  322,  323,  333,  334,  336,  337,
      324,  338,  339,  341,  325,  342,  343,  342,  344,  345,
      326,  321,  327,  328,  329,  331,  346,  347,  348,  350,
      332,  353,  354,  333,  334,  336,  337,  349,  338,  339,
      341,  349,  342,  343,  342,  344,  345,  355,    0,  356,

      357,  353,  354,  346,  347,  348,  350,  357,  353,  354,
      358,  359,  360,  361,  349,  359,    0,  355,  349,  356,
      357,    0,    0,  361,  355,  362,  356,  357,  353,  354,
      358,  449,  360,  361,  357,  359,    0,  358,  359,  360,
      361,  363,  359,  362,  355,  362,  356,  357,  363,  364,
      361,  364,  362,  365,    0,    0,  450,  358,  449,  360,
      361,  363,  359,  367,  366,  369,  370,  367,  363,  365,
      362,  364,  362,  365,    0,  363,  364,    0,  364,  366,
      365,  368,  371,  450,  366,  369,  370,  367,  363,  371,
      367,  366,  369,  370,  367,  368,  365,    0,  364,  372,

      365,  368,  371,  372,  373,  374,  366,  374,  368,  371,
        0,  366,  369,  370,  367,  375,  371,  377,  376,  373,
      377,    0,  368,  372,  373,  451,  372,  374,  368,  371,
      372,  373,  374,  376,  374,  375,  379,  378,  376,  380,
      377,  382,  375,    0,  377,  376,  373,  377,  378,  381,
      372,  373,  451,  381,  374,    0,  379,  378,  384,  380,
      376,  382,  375,  379,  378,  376,  380,  377,  382,  383,
      385,  383,  384,  381,  386,  378,  381,  385,  384,  452,
      381,    0,  387,  379,  378,  384,  380,  388,  382,  390,
      385,  383,  390,  453,  386,  388,  383,  385,  383,  384,

      381,  386,  387,  389,  385,  384,  452,  388,  391,  387,
      389,  393,  390,    0,  388,  393,  390,  385,  383,  390,
      453,  386,  388,  389,  391,  394,    0,    0,  391,  387,
      389,  393,    0,  392,  388,  391,  392,  389,  393,  390,
      394,  395,  393,  454,  397,  394,  398,    0,    0,  399,
      389,  391,  394,  392,  397,  391,  395,  400,  393,  396,
      392,  395,  402,  392,  397,  396,  398,  394,  395,  399,
      454,  397,  394,  398,  404,  401,  399,  400,  402,  396,
      392,  397,  402,  395,  400,  401,  396,  406,  395,  402,
      403,  397,  396,  398,  404,  401,  399,    0,  405,  403,

        0,  404,  401,  456,  400,  402,  396,  406,    0,  402,
      403,  407,  401,  405,  406,  407,  413,  403,  405,  411,
        0,  404,  401,  408,  408,  405,  403,  410,  409,  410,
      456,  407,  409,  412,  406,  411,  413,  403,  407,  411,
      405,  414,  407,  413,  408,  405,  411,  410,  414,  412,
      408,  408,  409,  412,  410,  409,  410,  415,  407,  409,
      412,  414,  411,  413,    0,  417,  411,  416,  414,  418,
      415,  408,    0,  458,  410,  414,  412,  415,  424,  409,
      412,  416,  419,    0,  415,  417,  419,  416,  414,  418,
      420,  421,  417,  424,  416,  422,  418,  415,  424,  420,

      458,  419,  421,  422,  415,  424,  419,  426,  416,  419,
      420,  421,  417,  419,  416,  422,  418,  420,  421,  423,
      424,  425,  422,  423,  425,  424,  420,  426,  419,  421,
      422,    0,  427,  419,  426,  428,  433,  420,  421,    0,
      429,  425,  422,  423,  459,    0,  423,    0,  425,  430,
      423,  425,  427,  460,  426,  428,  433,  431,  429,  427,
      429,    0,  428,  433,  430,    0,  432,  429,  425,  430,
      423,  459,  431,  432,  437,  435,  430,  431,  434,  427,
      460,    0,  428,  433,  431,  429,  432,  429,  436,  434,
      435,  430,  438,  432,  437,  435,  430,  436,  434,  431,

      432,  437,  435,    0,  431,  434,    0,  442,  436,  439,
        0,  442,  438,  432,  461,  436,  434,  435,  439,  438,
      440,  437,  435,  441,  436,  434,  444,    0,  443,  439,
      440,  442,  440,  441,  442,  436,  439,  443,  442,  438,
      440,  461,  444,  441,    0,  439,  444,  440,  443,    0,
      441,  446,  463,  444,  445,  443,  439,  440,  442,  440,
      441,  464,    0,  465,  443,  466,  446,  440,  468,  444,
      441,  446,  445,  444,  445,  443,  447,  448,  446,  463,
      448,  445,  469,  470,  473,  447,  474,  475,  464,  447,
      465,  476,  466,  446,  477,  468,  447,  448,  446,  445,

      481,  445,  482,  447,  448,  484,  486,  448,  487,  469,
      470,  473,  447,  474,  475,  488,  447,  489,  476,  490,
      491,  477,  494,  447,  448,  492,  498,  481,  500,  482,
      501,  502,  484,  486,  503,  487,  492,  505,  506,  507,
      508,  509,  488,  512,  489,  513,  490,  491,  514,  494,
      515,  516,  492,  498,  517,  500,  518,  501,  502,  520,
      521,  503,  522,  492,  505,  506,  507,  508,  509,  523,
      512,  526,  513,  527,  528,  514,  529,  515,  516,  530,
      531,  517,  532,  518,  533,  535,  520,  521,  537,  522,
        0,    0,    0,  541,  542,    0,  523,  539,  526,  544,

      527,  528,    0,  529,    0,  540,  530,  531,  545,  532,
      539,  533,  535,  541,  542,  537,  543,  539,  540,  544,
      541,  542,  547,  546,  539,  540,  544,  546,  545,  543,
        0,  548,  540,  631,    0,  545,  543,  539,    0,  548,
      541,  542,  547,  543,  539,  540,  544,  546,  549,  547,
      546,  548,  540,  551,  546,  545,  543,  550,  548,  552,
      631,  549,  633,  543,    0,  554,  548,  551,  549,  547,
        0,  634,  550,  551,  546,  549,  553,  550,  548,  552,
      551,  554,  555,  553,  550,  554,  552,  556,  549,  633,
        0,  556,  554,  557,  551,  549,  553,  555,  634,  550,

      551,    0,  555,  553,  550,  558,  552,  558,  554,  555,
      553,  556,  554,  557,  556,  559,  561,  562,  556,  559,
      557,  560,    0,  553,  555,  635,  636,  558,  560,  555,
        0,  565,  558,    0,  558,  559,  561,  562,  556,  563,
      557,  560,  559,  561,  562,  564,  559,  565,  560,  568,
      563,  565,  635,  636,  558,  560,  564,  567,  565,  563,
      566,  567,  559,  561,  562,  564,  563,    0,  560,  568,
      569,  570,  564,  637,  565,  566,  568,  563,  565,  573,
      566,  567,    0,  564,  567,  571,  563,  566,  567,  571,
      569,  570,  564,  572,  574,  575,  568,  569,  570,  573,

      637,    0,  566,  574,  572,  577,  573,  566,  567,  571,
        0,  638,  571,  572,  574,  575,  571,  569,  570,  576,
      572,  574,  575,  640,  578,  577,  573,  641,  579,  576,
      574,  572,  577,  583,    0,    0,  571,  578,  638,  576,
      572,  574,  575,    0,  578,  580,  576,  579,  579,  581,
      640,  578,  577,  583,  641,  579,  576,  582,  580,  582,
      583,  584,  581,  585,  578,  580,  576,  586,  584,  581,
      582,  578,  580,  587,  579,  579,  581,  582,  589,    0,
      583,  584,    0,  585,  582,  580,  582,  586,  584,  581,
      585,  588,  580,  587,  586,  584,  581,  582,  589,  591,

      587,  592,  590,  593,  582,  589,  588,  594,  584,  590,
      585,  588,  596,    0,  586,  592,  593,    0,  588,  591,
      587,  592,  590,  593,    0,  589,  591,  594,  592,  590,
      593,  597,  596,  588,  594,  595,  590,  595,  588,  596,
      598,  600,  592,  593,  597,  601,  591,  642,  592,  590,
      593,  597,  602,  598,  594,  599,  602,  595,  597,  596,
      598,  600,  595,  599,  595,  601,    0,  598,  600,  603,
        0,  597,  601,  603,  642,  599,  602,  604,  597,  602,
      598,  605,  599,  602,  595,  604,    0,  598,  600,  609,
      599,  606,  601,  603,  605,  644,  603,  604,    0,  607,

      603,  605,  599,  602,  604,  610,  606,  607,  605,  609,
      611,  606,  604,  608,  611,  608,  609,  645,  606,  607,
      603,  605,  644,  612,  604,  610,  607,  614,  605,  613,
      611,  615,  610,  606,  607,  608,  609,  611,  606,  613,
      608,  611,  608,  612,  645,  616,  607,  614,    0,  613,
      612,  615,  610,  617,  614,  617,  613,  611,  615,  616,
        0,  619,  608,  620,  618,  616,  613,  620,    0,  623,
      612,    0,  616,  618,  614,  617,  613,  619,  615,  624,
      617,  619,  617,  621,  618,  625,  616,  620,  619,  623,
      620,  618,  616,  622,  620,  622,  623,  626,  621,  624,

      618,  625,  617,  621,  619,  625,  624,  627,  619,  628,
      621,  618,  625,  622,  620,  646,  623,  626,  647,  648,
      622,  649,  622,  650,  626,  621,  624,  627,  625,  628,
      621,  651,  625,  652,  627,  654,  628,  655,  657,  660,
      622,  661,  646,  662,  626,  647,  648,  663,  649,  668,
      650,  669,  670,  673,  627,  674,  628,  675,  651,  676,
      652,  677,  654,  679,  655,  657,  660,  680,  661,  681,
      662,  682,  683,  684,  663,  685,  668,  686,  669,  670,
      673,  688,  674,  689,  675,  690,  676,  692,  677,  693,
      679,  695,  761,  696,  680,    0,  681,  698,  682,  683,

      684,  697,  685,  699,  686,  700,  701,  701,  688,  704,
      689,  695,  690,  696,  692,  763,  693,  698,  695,  761,
      696,  697,  697,  699,  698,  700,  702,  701,  697,  704,
      699,  703,  700,  701,  701,  702,  704,  705,  695,    0,
      696,  703,  763,  708,  698,  706,  702,  709,  697,  697,
      699,  703,  700,  702,  701,  706,  704,  705,  703,  707,
      710,  712,  702,  708,  705,  706,  707,  709,  703,    0,
      708,  713,  706,  702,  709,  710,  711,    0,  703,  707,
      710,  712,  706,    0,  705,  711,  707,  710,  712,  714,
      708,  713,  706,  707,  709,  715,  711,  716,  713,  719,

        0,  717,  710,  711,  714,  717,  707,  710,  712,  714,
      715,  716,  711,  718,  722,  715,  714,  716,  713,  719,
      718,  717,  715,  711,  716,  720,  719,  720,  717,  764,
      721,  714,  717,  718,  722,  724,  714,  715,  716,  725,
      718,  722,  715,  721,  716,  720,  719,  718,  717,  723,
      721,  727,  720,  726,  720,  724,  764,  721,    0,  725,
      718,  722,  724,  730,  723,  728,  725,  729,  726,  723,
      721,  727,  720,  726,  729,    0,  723,  721,  727,  728,
      726,    0,  724,  730,  731,  728,  725,  729,  732,  733,
      730,  723,  728,  734,  729,  726,  723,  734,  727,  735,

      726,  729,  735,  736,  731,  737,  728,  738,  732,  733,
      730,  731,  728,  739,  729,  732,  733,  734,  736,  735,
      734,    0,  742,  736,  734,  737,  735,  738,  740,  735,
      736,  731,  737,  739,  738,  732,  733,  744,  741,  743,
      739,  740,  742,  743,  734,  736,  735,  765,  740,  742,
      736,  741,  737,  766,  738,  740,  746,  744,  741,  743,
      739,  747,  747,  745,  744,  741,  743,  745,  740,  742,
      743,  746,    0,  748,  765,  740,  746,  748,  741,  749,
      766,  751,  747,  746,  744,  741,  743,  745,  747,  747,
      745,  752,  750,  749,  745,  752,  751,  748,  746,  749,

      748,  751,  768,  746,  748,  750,  749,  753,  751,  747,
      754,  756,  750,  757,  745,  752,  769,    0,  752,  750,
      749,  759,  752,  751,  748,  759,  749,  753,  751,  768,
      754,  756,  750,  757,  753,  755,  755,  754,  756,  750,
      757,  758,  752,  769,  760,  759,  772,  776,  759,  778,
      781,  784,  759,  785,  753,  758,  755,  754,  756,  787,
      757,  758,  755,  755,  760,  788,  790,  791,  758,  792,
      794,  760,  759,  772,  776,  795,  778,  781,  784,  798,
      785,  800,  758,  755,  801,  802,  787,  807,  758,  808,
      809,  760,  788,  790,  791,  810,  792,  794,  811,  812,

      813,  814,  795,    0,  810,    0,  798,  813,  800,  808,
      809,  801,  802,  812,  807,  810,  808,  809,  811,  812,
      813,  814,  810,  816,  817,  811,  812,  813,  814,  818,
      815,  810,  815,  819,  813,  819,  808,  809,  816,    0,
      812,  820,  810,  816,  817,  811,  812,  813,  814,  818,
      816,  817,  815,  821,  822,  819,  818,  815,  823,  815,
      819,  820,  819,  824,  826,  816,  825,  827,  820,  828,
      816,  817,  829,  821,  822,  825,  818,  830,  823,  815,
      821,  822,  819,  824,  826,  823,  825,  827,  820,  828,
      824,  826,  829,  825,  827,  831,  828,  830,  832,  829,

      821,  822,  825,  833,  830,  823,  836,  860,  831,  838,
      824,  826,  839,  825,  827,  831,  828,  835,  832,  829,
      834,  835,  831,  833,  830,  832,  836,  834,  862,  838,
      833,  837,  839,  836,  860,  831,  838,  840,  867,  839,
      834,  835,  831,    0,  835,  832,  837,  834,  835,  842,
      833,  837,  843,  836,  834,  862,  838,  840,  837,  839,
      841,  844,  841,  842,  840,  867,  846,  834,  835,  842,
      847,  848,  843,  837,  847,  848,  842,    0,  837,  843,
      850,  844,  841,  851,  840,  845,  846,  841,  844,  841,
      842,  849,  845,  846,  847,  848,  842,  847,  848,  843,

      850,  847,  848,  851,  852,  845,  849,  850,  844,  841,
      851,  849,  845,  846,  853,  869,  854,  870,  849,  845,
      873,  847,  848,  854,  852,  876,  877,  850,  878,  880,
      851,  852,  845,  849,  853,    0,  854,  881,  849,  882,
      883,  853,  869,  854,  870,  884,    0,  873,  886,  880,
      854,  852,  876,  877,  885,  878,  880,  881,  885,  882,
      883,  853,  887,  854,  881,  884,  882,  883,  886,    0,
      888,  889,  884,  890,  891,  886,  880,  887,  885,    0,
        0,  885,  887,  893,  881,  885,  882,  883,  905,  887,
      888,  889,  884,  890,  891,  886,  895,  888,  889,  894,

      890,  891,  896,  893,  887,  885,  892,  897,  892,  887,
      893,  899,  894,    0,  907,  905,  895,  888,  889,  894,
      890,  891,  896,  895,  900,  898,  894,  897,  892,  896,
      893,  899,  909,  892,  897,  892,  911,  901,  899,  894,
      898,  907,  903,  895,  900,  898,  894,  912,  902,  896,
      901,  900,  898,  904,  897,  892,  902,  901,  899,  909,
        0,  914,  903,  911,  901,  915,    0,  898,  902,  903,
      917,  900,  898,  904,  912,  902,  914,  901,  916,    0,
      904,  914,  919,  902,  901,  915,  918,  920,  914,  903,
      917,  922,  915,  916,  923,  902,  925,  917,  916,  918,

      904,    0,  919,  914,  921,  916,  918,  920,  914,  919,
      928,  922,  915,  918,  920,  921,  929,  917,  922,  931,
      916,  923,    0,  925,  921,  916,  918,  930,  932,  919,
      928,  921,  935,  918,  920,    0,  929,  928,  922,  931,
      936,  930,  921,  929,    0,    0,  931,  930,  932,    0,
        0,  921,  935,    0,  930,  932,    0,  928,    0,  935,
      936,    0,    0,  929,    0,    0,  931,  936,  930,    0,
        0,    0,    0,    0,  930,  932,    0,    0,    0,  935,
        0,    0,    0,    0,    0,    0,    0,  936,  938,    0,
        0,  938,  939,    0,  939,  939,  941,    0,  941,  941,

      942,    0,  942,  942,  943,    0,  943,  943,  944,    0,
      944,  944,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

#line 1813 "flex_lexer.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1826 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 2112 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 938 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 937 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 129:
#line 187 "flex_lexer.l"
case 130:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2861 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 938 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 938 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 937);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 217 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

