#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 166
#define YY_END_OF_BUFFER 167
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1138] =
    {   0,
        0,    0,  163,  163,    2,    2,  167,  165,    4,    4,
      165,  165,  154,  161,  154,  154,  158,  154,  154,  154,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  154,  163,  164,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  149,    0,    1,    0,
      156,  155,  158,  151,  150,  148,  152,  160,  160,  160,

      160,  160,  160,  120,  160,  121,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      122,  160,  160,  123,  124,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  125,  126,  127,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  128,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  153,  163,  162,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  159,    0,  155,  108,  160,  109,  160,  160,
      110,  160,  111,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  132,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  112,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  113,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      114,  160,  160,  115,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  116,  160,  160,  117,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  118,  160,  160,  160,  160,  160,  160,  160,  160,
      119,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  160,  160,  160,

      160,  160,  160,  160,   78,  160,   79,   41,   80,  160,
      160,  160,   81,  160,  160,   82,  138,  160,  160,  160,
      160,   84,  160,  160,  160,   85,   86,  160,  160,  160,
      160,  160,  160,  160,   87,  160,  160,   88,   89,  160,
      160,   90,  160,   91,  131,  160,  160,  160,  160,  160,
      160,   92,  160,   93,   94,   95,  160,   97,  160,   98,
      160,  160,  160,  160,   99,  160,  160,  160,  160,  160,
      100,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      101,  160,  160,  160,  160,  102,  103,  104,  160,  141,
      160,  160,  160,  160,  160,  160,  160,  160,  105,  160,

      106,  160,  107,  134,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,   58,   59,  160,   60,  160,  144,  160,
      160,  160,  160,  160,  160,   61,  160,  160,  160,  160,
       62,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  142,   63,  160,  160,   64,  160,  137,   96,  160,
       65,   66,  160,  160,  160,  160,   67,   68,   69,   70,
      160,  133,  160,  160,  160,   71,   72,  160,  160,  160,
      160,  160,   73,  160,  160,  160,  160,  160,  160,   74,
      160,  160,  160,  160,   75,  160,  160,  160,   76,  160,
      160,  160,   77,  140,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  160,   31,  160,
      160,   32,  146,  160,   33,  160,  160,  160,   34,  160,
       35,  160,   36,   37,   38,  160,   39,  160,  160,   42,

       43,   44,   45,   46,  160,  160,  160,   47,  130,  139,
      160,  160,   48,  160,  160,  160,   49,  160,  160,   50,
      129,   51,   52,  160,   53,  160,  160,  160,  160,   54,
       55,   56,   57,  160,  160,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,   15,   16,   17,   18,   19,

      160,  160,   20,  160,  160,   21,   22,   40,   23,  160,
      160,  136,   24,  160,  160,   25,   26,  160,  160,   27,
      135,   28,  160,  160,  160,  160,   29,   30,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,   83,  160,   10,   11,  160,  147,   12,
      160,   13,  145,  160,  160,  160,   14,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,  160,    7,  160,    8,    9,  160,    2,

        2,    2,    2,    2,    2,    2,    0,    5,    6,  160,
        2,    2,    2,    2,    0,  143,    2,    2,    0,    2,
        0,    2,    0,    2,    0,    2,    0,    2,    0,    2,
        0,    2,    0,    2,  157,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1145] =
    {   0,
        0,    0,  709,  681,   76,    0,  668, 4550,  151,  153,
      643,    0, 4550, 4550,  149,  148,  160,  159,  625,  619,
      156,  156,  164,  162,  172,  223,  198,  211,  215,  151,
      168,  210,  255,  257,  263,  262,    0,  277,  307,  350,
      284,  221,  258,  171,  540,    0,  600,    0,  295,  308,
      561,  576,    0,    0,  331,  408,  419,  321,  542,  512,
      438,  514,  568,  620,  668,  720,  328,  426,  768,  329,
      311,  434,  500,  820,  868,  505,  421,  513,  918,  970,
      515,  570,  455,  423,  450,  351, 4550,  520, 4550,  512,
     1035, 1045, 1056, 4550, 4550, 4550, 4550,    0,  174,  282,

      336,  520,  296,  315,  557,    0,  345,  334,  568,  511,
      327,  611,  569,  345,  419,  421,  441,  444,  631,  469,
      515,  520,  552,  557,  562,  563,  574,  609,  578,  605,
        0,  618,  616,  665,  619,  628,  616,  637,  664,  685,
      631,  657,  667,  663,  669,  678,  690,  689,    0,  693,
      681,  685,  722,  722,  720,  726,  724,  729,  737,  727,
      725,  743,  749,  762,  772,  766,  767,  784,  779,  785,
      781,  785,  818,  787,  775,  798, 4550,    0, 4550,    0,
      389,    0,  512,    0,  499, 1066, 1076, 1087,    0,    0,
        0,    0,  806,  824,  855,  859,  913,  860,  878,  922,

      872,  961,  962, 1080,  957, 1081, 1133, 1084, 1083, 1085,
     1121, 1137, 1119, 1187,  952, 1145, 1149, 1170, 1189, 1181,
     1193, 1211, 1227, 1223, 1219, 1222, 1233, 1245, 1294, 1275,
     1285, 1277, 1290, 1307, 1347, 1306, 1339, 1349, 1362, 1364,
     1361, 1397, 1398, 1360, 1401, 1414, 1392, 1435, 1433, 1443,
     1447, 1465, 1451, 1468, 1403, 1487, 1501, 1489, 1503, 1505,
     1531, 1506, 1541, 1555, 1520, 1556, 1572, 1577, 1554, 1580,
     1598,    0, 4550,  498, 1645,    0,  822,    0,  829,  827,
        0,  839,    0,  828,  879,  872,  907, 1640,  907,  910,
      919,  929,  956,  982,  973, 1082, 1072, 1086, 1154, 1323,

     1153, 1155, 1158, 1227, 1241, 1255,    0, 1265, 1273, 1300,
     1287, 1337, 1338, 1349, 1415, 1450, 1461, 1469, 1484, 1511,
     1526, 1540, 1589, 1581, 1601, 1609, 1606, 1626, 1639, 1644,
     1646, 1631, 1639,    0, 1634, 1650, 1647, 1653, 1658, 1655,
     1656, 1643, 1645, 1645,    0, 1655, 1650, 1650, 1668, 1669,
     1674, 1663, 1669, 1684, 1697, 1679, 1695, 1693, 1701, 1692,
     1703,    0, 1686, 1690, 1691, 1701, 1698, 1695, 1702, 1712,
        0, 1704, 1714, 1705, 1706, 1722, 1713, 1708, 1728, 1716,
     1731, 1739, 1744, 1741,    0,  495, 1779, 1756, 1757, 1758,
     1760, 1782, 1772, 1790, 1788, 1791, 1794, 1806, 1820, 1844,

     1823, 1845, 1848, 1858, 1857, 1893, 1860, 1876, 1894, 1890,
     1902, 1911, 1930, 1912, 1927, 1936, 1951, 1945, 1946, 1968,
     1967, 1981, 1970, 1996, 1999, 2004, 1980, 2009, 2013, 2034,
     2037, 2038, 2047, 2050, 2055, 2068, 2076, 2072, 2091, 2073,
     2087, 2104, 2112, 2109, 2117, 2113, 2127, 2121, 2146, 2158,
     2167, 2179, 2180, 2145, 2171, 2195, 2176, 2197, 2212, 2216,
     2201, 2220, 2233, 2241, 2235, 2258, 2249, 2264, 2283, 2274,
     2270, 2289, 2275, 2287, 2300, 2304, 2323, 2328, 2329, 2337,
     2333, 2312, 2341, 2354, 2373, 2377, 2385, 2398, 2383, 2386,
     2417, 2408, 2423, 2427, 2431, 2439,  491, 1782, 1799, 1832,

     1835, 1921, 1939, 2022,    0, 2029,    0,    0,    0, 2071,
     2104, 2130,    0, 2147, 2161, 2168,    0, 2258, 2255, 2329,
     2376, 2428, 2448, 2444, 2442,    0,    0, 2445, 2446, 2444,
     2447, 2473, 2475, 2472,    0, 2462, 2484,    0,    0, 2485,
     2471,    0, 2476,    0, 2474, 2490, 2478, 2473, 2480, 2481,
     2493,    0, 2490,    0,    0,    0, 2485,    0, 2494,    0,
     2502, 2496, 2500, 2492,    0, 2515, 2514, 2503, 2510, 2517,
        0, 2530, 2535, 2526, 2522, 2521, 2542, 2534, 2535, 2547,
        0, 2546, 2543, 2548, 2539,    0,    0, 2537, 2540,    0,
     2557, 2547, 2541, 2563, 2545, 2562, 2565, 2564,    0, 2552,

        0, 2570,    0, 2563,  474, 2580, 2585, 2579, 2588, 2589,
     2601, 2603, 2611, 2622, 2613, 2614, 2619, 2643, 2652, 2644,
     2647, 2653, 2662, 2677, 2681, 2686, 2696, 2687, 2715, 2705,
     2746, 2727, 2730, 2721, 2736, 2740, 2759, 2749, 2775, 2784,
     2785, 2789, 2794, 2798, 2803, 2800, 2815, 2828, 2833, 2819,
     2829, 2834, 2843, 2852, 2869, 2858, 2873, 2874, 2895, 2883,
     2891, 2892, 2906, 2907, 2917, 2923, 2929, 2928, 2931, 2946,
     2962, 2971, 2947, 2979, 2980, 2983, 2995, 2997, 3001, 3016,
     3029, 3033, 3034, 3031, 3062, 3037, 3070, 3067, 3071, 3075,
     3096, 3083, 3101, 3085, 3088, 3093, 3119, 3104, 3144, 3136,

     3141, 3153, 3147, 3150, 3155, 3178, 3165, 3187, 3186, 3190,
     3195, 3204,  442,    0,    0, 2569,    0, 2726,    0, 2755,
     2762, 2801, 2926, 2935, 2986,    0, 3046, 3089, 3186, 3196,
        0, 3195, 3186, 3200, 3211, 3216, 3204, 3206, 3213, 3225,
     3234,    0,    0, 3220, 3232,    0, 3238,    0,    0, 3226,
        0,    0, 3229, 3247, 3235, 3243,    0,    0,    0,    0,
     3253, 3241, 3261, 3255, 3245,    0,    0, 3261, 3250, 3251,
     3265, 3265,    0, 3274, 3276, 3274, 3260, 3279, 3285, 3269,
     3273, 3274, 3297, 3298,    0, 3295, 3299, 3301,    0, 3289,
     3308, 3310,    0,    0,  441, 3307, 3309, 3317, 3312, 3315,

     3323, 3326, 3341, 3349, 3351, 3372, 3357, 3360, 3375, 3381,
     3383, 3394, 3400, 3411, 3424, 3416, 3413, 3426, 3434, 3435,
     3445, 3464, 3469, 3470, 3478, 3487, 3493, 3479, 3483, 3488,
     3501, 3504, 3518, 3522, 3532, 3523, 3541, 3537, 3533, 3536,
     3566, 3567, 3572, 3575, 3577, 3578, 3576, 3590, 3601, 3606,
     3607, 3629, 3611, 3632, 3630, 3644, 3645, 3661, 3655, 3674,
     3666, 3684, 3683, 3699, 3709, 3720, 3695, 3707, 3718, 3728,
     3733, 3737, 3739, 3772, 3749, 3750,  435, 3318,    0, 3338,
     3405, 3415,    0, 3441,    0, 3604, 3653, 3670,    0, 3755,
        0, 3760,    0,    0,    0, 3761,    0, 3754, 3756,    0,

        0,    0,    0,    0, 3760, 3774, 3785,    0, 3768,    0,
     3776, 3791,    0, 3774, 3791, 3773,    0, 3796, 3804, 3789,
     3790,    0,    0, 3798,    0, 3810, 3811, 3813, 3797,    0,
        0,    0,    0, 3800, 3808,  434, 3817, 3823, 3826, 3825,
     3827, 3828, 3849, 3851, 3857, 3860, 3866, 3879, 3891, 3882,
     3897, 3894, 3900, 3903, 3905, 3916, 3919, 3933, 3931, 3934,
     3937, 3942, 3945, 3970, 3959, 3971, 3968, 3973, 3976, 4001,
     4009, 3999, 4007, 4004, 4013, 4025, 4039, 4043, 4030, 4047,
     4038, 4042, 4073, 4055, 4083, 4091, 4097, 4081, 4078, 4092,
     4109, 4113, 4121, 4135,  429,    0,    0,    0,    0,    0,

     3836, 3989,    0, 4099, 4089,    0,    0,    0,    0, 4118,
     4120,    0,    0, 4119, 4137,    0,    0, 4130, 4140,    0,
        0,    0, 4134, 4141, 4135, 4151,    0,    0,  404, 4163,
     4165, 4166, 4167, 4171, 4175, 4184, 4179, 4181, 4200, 4189,
     4197, 4203, 4205, 4221, 4233, 4229, 4234, 4238, 4235, 4237,
     4239, 4272, 4263, 4271, 4273, 4274, 4275, 4289, 4308, 4305,
     4306, 4307,  402,    0, 4228,    0,    0, 4262,    0,    0,
     4290,    0,    0, 4291, 4301, 4309,    0,  401, 4317, 4331,
     4329, 4341, 4342, 4343, 4345, 4347, 4359, 4371, 4375, 4385,
     4377, 4380,  397, 4366,    0, 4368,    0,    0, 4373,  396,

     4399, 4401, 4411, 4413, 4414, 4429,  383,    0,    0, 4394,
      382, 4415, 4416, 4444,  376,    0,  342, 4445,  333,  331,
      303,  291,  278,  255,  250,  245,  243,  240,  235,  221,
      226,  197,  187,  173, 4550,    0, 4550, 4519, 4524,  181,
     4529, 4534, 4539, 4544
    } ;

static const flex_int16_t yy_def[1145] =
    {   0,
     1137,    1, 1138, 1138, 1137,    5, 1137, 1137, 1137, 1137,
     1137, 1139, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1137, 1141, 1137, 1142, 1142, 1137,
     1142, 1143, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1144, 1144,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1142, 1137, 1137, 1139, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1137, 1141, 1137, 1142,
     1142, 1142, 1143, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1142, 1137, 1137, 1137, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1142, 1142, 1142,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1137, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1142,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1137, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1142,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1137, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1142,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1137, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1142,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1137, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1142,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1137, 1140, 1140, 1140, 1140, 1140, 1140, 1142,

       62,   62,   62,   62,   62,   62, 1137, 1140, 1140, 1140,
     1142,   62,   62,   62, 1137, 1140, 1142,   62, 1137, 1142,
     1137, 1142, 1137, 1142, 1137, 1142, 1137, 1142, 1137, 1142,
     1137, 1142, 1137, 1142, 1137, 1142,    0, 1137, 1137, 1137,
     1137, 1137, 1137, 1137
    } ;

static const flex_int16_t yy_nxt[4627] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  111,   98,  107,  136,  112,  101,
     1136,  102,  113,  108,  137,  103,  104,  176,  114,  276,

      109,  115,  106,  110, 1135,  116, 1134,  117,   99,  105,
      100,  111,  118,  107,  136,  112,  101,  119,  102,  113,
      108,  137,  103,  104,  176,  114,  276,  109,  115,  106,
      110,  126,  116,  128,  117, 1133,  138,  127, 1132,  118,
      139,  129,  131,  172,  119,  120,  140,  130,  132,  133,
      134,  173, 1131,  121, 1130,  135,  122, 1129,  126,  123,
      128, 1128,  124,  138,  127,  125, 1127,  139,  129,  131,
      172, 1126,  120,  140,  130,  132,  133,  134,  173,  144,
      121,  141,  135,  122,  152,  142,  123,  174,  175,  124,
      148,  143,  125,  145, 1125,  153,  181,   86,  149,  146,

      147,  154,  150,  155, 1124,  151,  144,  156,  141,   86,
       86,  152,  142,  157,  174,  175, 1123,  148,  143,  169,
      145,  170,  153,  277,  171,  149,  146,  147,  154,  150,
      155,  158,  151,  159,  156,  282,  160,  232,  184,  283,
      157,  189,  190,  161,  162, 1122,  169, 1121,  170,  185,
      277,  171,   86,   86,  193,  193,  289,  193,  158, 1120,
      159,  221,  282,  160,  232,  231,  283,  222,  296,  278,
      161,  162,  163,  297,  193,  193,  164,  279,  287,  165,
      166,  193,  193,  289,  193,  288,  167,  304,  221,  168,
      181,   86,  231, 1119,  222,  296,  278, 1117, 1115,  163,

      297,  193,  193,  164,  279,  287,  165,  166, 1111, 1107,
     1100, 1093,  288,  167,  304, 1078,  168,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  187,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  180,  180,
     1063,  180,  180,  180,  180,  180,  180,  193,  223,  271,
     1029,  995,  193,  936,  877,  305,  224,  180,  180,  180,
      233,  306,  225,  194,  234,  195,  307,  193,  308,  193,
      235,  196,  193,  197,  193,  223,  271,  198,  199,  193,
      193,  193,  305,  224,  269,  270,  795,  233,  306,  225,
      194,  234,  195,  307,  193,  308,  193,  235,  196,  193,

      197,  193,  314,  713,  198,  199,  605,  193,  193,  497,
      386,  269,  270,  180,  180,  180,  385,  180,  180,  180,
      180,  180,  180,  274,  273,  272,  236,  247,  193,  314,
      237,  193,  192,  180,  180,  180,  238,  294,  248,  250,
      200,  193,  280,  251,  249,  281,  193,  295,  315,  252,
      264,  193,  265,  236,  247,  266,  316,  237,  193,  193,
      201,  193,  191,  238,  294,  248,  250,  200,  193,  280,
      251,  249,  281,  193,  295,  315,  252,  264,  193,  265,
      180,  182,  266,  316,  284,  285,  193,  201,  193,  180,
      202,  317,  267,  318,  193,  319,  193,  203,  286,  320,

      268,  290,  291,  292,  204,  293,  179,  205,  302,  303,
      321,  284,  285,  324,  193,  177,  193,  202,  317,  267,
      318,  193,  319,  193,  203,  286,  320,  268,  290,  291,
      292,  204,  293,  298,  205,  302,  303,  321,  299,   97,
      324,  193,  206,  193,  300,   96,  207,  325,  326,  322,
      208,  301,  323,  327,  332,  309,  209,  310,  333,  210,
      298,  311,  334,   87,  335,  299,  193, 1137,  312,  206,
      341,  300,  313,  207,  325,  326,  322,  208,  301,  323,
      327,  332,  309,  209,  310,  333,  210,   47,  311,  334,
      328,  335,  342,  193,  193,  312,  336,  341,  337,  313,

      329,  211,  343,  212,  344,  330,  331,  338,  213,  339,
      345,  346,  347,  214,  193,   47,  348,  328,  349,  342,
      340,  193,  350,  336,  351,  337, 1137,  329,  211,  343,
      212,  344,  330,  331,  338,  213,  339,  345,  346,  347,
      214,  193,  215,  348,  352,  349,  193,  340,  353,  350,
      216,  351,  354,  217,  357,  355,  218,  358,  359,  219,
      356,  360,  220,  363,  364,  365,  193, 1137, 1137,  215,
      361,  352,  366,  193, 1137,  353, 1137,  216,  362,  354,
      217,  357,  355,  218,  358,  359,  219,  356,  360,  220,
      363,  364,  365,  193,  193,  226,  367,  361,  369,  366,

      370,  227,  228,  229,  371,  362,  372,  368,  230,  374,
      376,  377,  375,  382,  193, 1137,  383, 1137,  378, 1137,
      384,  193,  226,  367,  379,  369,  373,  370,  227,  228,
      229,  371,  193,  372,  368,  230,  374,  376,  377,  375,
      382,  193,  239,  383,  380,  378,  193,  384,  498,  388,
      193,  379,  193,  373, 1137,  499,  240,  381, 1137,  193,
      500,  501,  241,  242,  502, 1137,  193, 1137, 1137,  239,
      193,  380, 1137,  193, 1137,  498,  388,  193, 1137,  193,
     1137,  193,  499,  240,  381,  193,  193,  500,  501,  241,
      242,  502,  390,  193,  193,  243,  389,  193,  193,  394,

      391,  193,  395,  244,  193,  193,  193,  245,  193,  503,
      246, 1137,  193,  193,  193, 1137,  504, 1137,  193,  390,
     1137,  193,  243,  389,  193,  193,  394,  391,  193,  395,
      244,  193,  193,  193,  245,  392,  503,  246,  393,  193,
      505,  193,  253,  504,  254,  193,  509,  255,  193,  396,
      397,  193,  510,  511,  256,  257, 1137, 1137, 1137,  193,
     1137, 1137,  392,  398,  193,  393,  193,  505,  193,  253,
      512,  254, 1137,  509,  255,  193,  396,  397,  193,  510,
      511,  256,  257,  406,  401,  426,  193,  193,  193, 1137,
      398,  193,  258,  407,  399,  193,  259,  512,  193,  260,

      261,  400,  513,  193,  514,  193,  262,  193,  193,  263,
      406,  401,  426,  515,  193,  193,  193, 1137, 1137,  258,
      407,  399, 1137,  259, 1137,  193,  260,  261,  400,  513,
      193,  514, 1137,  262,  193,  193,  263, 1137, 1137, 1137,
      515, 1137, 1137,  193,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  187,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  193,  193,  516,  193,
      193,  193,  517,  402,  403,  404, 1137,  405, 1137,  518,
     1137,  417,  408,  414,  415,  416,  193,  409, 1137,  193,
      193,  193, 1137,  193,  193,  516,  193,  193,  193,  517,
      402,  403,  404,  420,  405,  193,  518,  193,  417,  408,
      414,  415,  416,  193,  409,  410,  193,  193,  193,  193,
      411,  418,  419,  193, 1137,  193,  412,  193, 1137, 1137,
      420,  193,  193,  413,  193,  193,  519,  522,  427,  193,
     1137,  523,  410,  193, 1137,  428,  193,  411,  418,  419,
      193,  193,  193,  412,  193,  193,  193, 1137,  193,  524,

      413, 1137,  193,  519,  522,  427,  193,  193,  523,  429,
      193,  421,  428,  422,  431,  193,  193,  423,  193,  193,
     1137, 1137,  193,  193,  424,  430,  524,  193,  425,  432,
     1137, 1137, 1137,  193,  193,  193,  429,  193,  421,  193,
      422,  431,  193,  193,  423,  193,  193,  433,  193,  193,
      525,  424,  430,  193,  193,  425,  432,  193,  436,  193,
      193,  437,  193,  438,  193,  193,  193,  434,  193,  193,
      435,  193,  193,  193,  433,  193,  193,  525,  526,  193,
      193,  527,  439, 1137,  193,  436,  193,  528,  437, 1137,
      438,  193,  193, 1137,  434,  193,  193,  435,  193,  529,

      193,  193, 1137,  193, 1137,  526,  193, 1137,  527,  439,
      444,  193, 1137, 1137,  528,  445,  193,  447,  193,  440,
      193,  193, 1137,  446,  530, 1137,  529,  531,  193,  441,
      193,  193,  193,  193,  442,  443,  193,  444,  193,  448,
      193,  449,  445,  193,  447,  453,  440,  193,  193,  520,
      446,  530,  193,  193,  531, 1137,  441, 1137,  193,  193,
      193,  442,  443,  193,  521,  193,  448,  193,  449,  450,
      532,  451,  453,  193,  454,  193,  520,  533, 1137,  193,
      193, 1137,  452, 1137,  455,  193,  193,  193,  193,  534,
      193,  521,  193,  193,  458,  193,  450,  532,  451, 1137,

      193,  454,  193,  456,  533,  457,  193,  193,  193,  452,
      193,  455,  193,  193,  193,  193,  534,  193,  193,  459,
      193,  458,  193,  193,  193,  460,  461,  193, 1137,  193,
      456,  463,  457,  193,  193,  193, 1137,  193,  193,  475,
      193,  535, 1137,  193,  193,  193,  459,  193, 1137,  193,
      193,  193,  460,  461,  193,  462,  193,  464,  463,  465,
      193,  193, 1137,  466, 1137,  193,  475,  193,  535,  193,
      193,  193,  536,  193,  193,  469,  193,  193,  467,  193,
      471,  193,  462,  468,  464, 1137,  465,  193,  193,  193,
      466,  193,  472,  193,  193,  537,  193,  193,  470,  536,

      193,  473,  469,  538,  193,  467,  193,  471,  193,  474,
      468,  193,  478,  193,  193,  193,  193,  539,  193,  472,
      193,  193,  537,  477,  193,  470,  476,  193,  473,  193,
      538,  481,  193,  193,  540,  193,  474,  479,  193,  478,
      193,  193,  193,  483,  539,  488,  193,  193,  480,  193,
      477,  193,  193,  476,  193, 1137,  193,  193,  481,  193,
      193,  540,  193,  484,  479,  482,  193,  193,  541,  542,
      483, 1137,  488,  193,  193,  480,  193,  193,  193,  193,
      494,  193,  193,  485,  193,  486,  489,  193,  487, 1137,
      484, 1137,  482,  193,  193,  541,  542, 1137,  193, 1137,

      193,  193,  193,  492,  193,  490,  193,  494,  193,  193,
      485,  491,  486,  489,  193,  487,  493, 1137,  193,  543,
      496,  495,  544,  193,  193,  193,  193,  193,  193,  193,
      492, 1137,  490,  193, 1137, 1137, 1137, 1137,  491, 1137,
      545,  546,  547,  493,  193,  193,  543,  496,  495,  544,
      193,  193,  548,  193,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  506,  549,  507,  545,  546,  547,
      550,  193,  551,  553,  554,  555,  556,  557,  558,  548,
      559,  508,  552,  560,  561,  562,  563,  564,  565,  566,
      567,  506,  549,  507,  568,  569,  570,  550,  571,  551,

      553,  554,  555,  556,  557,  558,  572,  559,  508,  552,
      560,  561,  562,  563,  564,  565,  566,  567,  573,  574,
      575,  568,  569,  570,  576,  571,  577,  578,  579,  580,
      581,  582,  583,  572,  584,  585,  586,  587,  588,  589,
      590,  592,  594,  593,  595,  573,  574,  575,  596,  591,
      597,  576,  598,  577,  578,  579,  580,  581,  582,  583,
      599,  584,  585,  586,  587,  588,  589,  590,  592,  594,
      593,  595,  600,  603,  601,  596,  591,  597,  602,  598,
      604, 1137,  193,  606,  193, 1137,  607,  599,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  193,  600,

      603,  601,  193,  193,  193,  602,  193,  604,  193,  193,
      606,  193,  609,  607,  193,  608,  193,  193,  193, 1137,
      193,  714, 1137, 1137,  611,  193, 1137,  610,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  715,  609,
      193,  193,  608,  193,  193,  193,  193,  193,  714,  193,
      612,  611,  193,  613,  610,  193, 1137, 1137, 1137,  193,
     1137,  193,  617,  193,  193,  715,  193,  193,  614,  193,
      615,  193, 1137,  193,  193, 1137,  193,  612,  716,  193,
      613,  717,  619,  193,  193,  616,  193,  618, 1137,  617,
      193,  193, 1137,  193,  193,  614,  193,  615,  193,  620,

      623,  193,  624,  621,  193,  716,  193, 1137,  717,  619,
      193,  193,  616,  193,  618,  622,  193,  193,  193,  193,
      193,  193,  193,  626,  627, 1137,  620,  623,  193,  624,
      621,  193, 1137,  193,  625, 1137,  193,  628,  631,  193,
      193, 1137,  622,  193, 1137, 1137,  193,  193,  193,  193,
      626,  627,  629,  193,  630,  193,  193,  193,  193,  633,
      718,  625,  193,  193,  628,  631,  193,  193,  632, 1137,
     1137,  635,  193,  193,  719,  193,  193,  193, 1137,  629,
      193,  630,  193,  193,  193,  193,  633,  718,  634,  193,
      636,  193,  193,  637,  193,  632,  193,  193,  635,  193,

      193,  719, 1137,  193,  193,  638,  643,  193, 1137,  193,
      639, 1137, 1137,  193,  193,  634,  193,  636,  193,  193,
      637,  193,  193,  193,  193,  193,  193,  193, 1137,  640,
      193,  644,  638,  643,  193,  193, 1137,  639,  641,  193,
      193,  193,  193,  193,  642,  193, 1137,  645,  720,  193,
      193,  721,  193,  193,  193,  193,  640,  193,  644,  193,
      193,  648,  193,  193,  193,  641,  193, 1137,  646,  193,
      647,  642,  193,  193,  645,  720,  193,  193,  721,  650,
      193,  193,  193,  193,  193,  651,  193,  193,  648,  649,
      193,  193, 1137,  193,  193,  646,  193,  647,  193,  656,

      193,  193,  193,  193,  654,  722,  650,  193,  193,  652,
      193,  193,  651,  657,  193,  653,  649,  193,  193,  193,
      193,  193,  193,  193, 1137,  193,  656,  655,  193,  193,
      658,  654,  722,  193,  723,  193,  652,  193,  659,  193,
      657,  193,  653,  193,  193,  193,  193,  664,  660,  193,
      193,  661,  662,  193,  655,  193, 1137,  658,  193,  193,
      193,  723,  193,  193,  193,  659,  193,  193,  663,  724,
      193,  193,  193,  193,  664,  660,  665,  193,  661,  662,
      193, 1137,  193,  666,  193,  193,  193,  670,  725,  667,
      193,  193,  193,  193,  193,  663,  724,  193,  193,  193,

      193,  726,  193,  665,  193,  193,  193,  668,  669,  727,
      666,  193,  671,  193,  670,  725,  667,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  676,  726,  193,
      673,  193,  193,  193,  668,  669,  727,  672,  193,  671,
      193,  193,  193,  193,  193, 1137,  677,  193,  193,  193,
      193,  674,  193,  193,  676,  678,  675,  673,  193,  193,
     1137,  193,  193, 1137,  672,  193,  193,  193,  193,  193,
      193,  682,  680,  677,  193,  193,  679, 1137,  674,  193,
     1137,  193,  678,  675,  193,  193,  193,  193,  193,  193,
      193,  728,  681,  193,  193,  193,  686,  729,  682,  680,

      193,  688,  193,  679,  193,  683,  193,  685,  193,  193,
      193,  193,  684,  193,  193,  193,  193,  193,  728,  681,
      193,  193,  193,  686,  729,  687,  193,  193,  688,  193,
      193,  193,  683,  193,  685,  193,  193,  193,  696,  684,
      193, 1137,  193,  193,  689,  690,  193,  193,  193,  193,
      193, 1137,  687,  193,  193,  193,  193,  193,  193,  193,
      193,  692,  193,  193,  691,  696,  693,  193,  695,  193,
      730,  689,  690,  193,  193,  193,  193,  193,  694,  193,
      193,  193,  193,  193, 1137,  193,  193,  193,  692,  697,
      193,  691, 1137,  693,  193,  695,  193,  730,  731,  698,

      193,  193,  193,  193, 1137,  694,  193,  193,  699,  193,
      193,  193,  193,  700,  193,  701,  697, 1137,  704,  193,
      703,  702, 1137,  193,  193,  731,  698,  193,  705,  193,
      193,  193,  193, 1137,  193,  699,  193, 1137,  193,  193,
      700,  706,  701,  193,  193,  704,  193,  703,  702,  193,
      193,  193,  707,  193,  193,  705,  193,  193,  193,  193,
      711,  193,  709,  193,  708,  193,  710,  732,  706,  193,
      193,  193,  733,  193,  734,  735,  193,  193,  712,  707,
      193,  193,  736,  737,  193,  193,  738,  711,  739,  709,
      193,  708,  193,  710,  732,  740,  193,  741,  742,  733,

      193,  734,  735,  743,  193,  712,  744,  745,  746,  736,
      737,  747,  193,  738,  748,  739,  749,  750,  751,  752,
      753,  754,  740,  756,  741,  742,  757,  758,  759,  762,
      743,  763,  755,  744,  745,  746,  760,  761,  747,  764,
      765,  748,  766,  749,  750,  751,  752,  753,  754,  767,
      756,  768,  769,  757,  758,  759,  762,  770,  763,  755,
      771,  772,  773,  760,  761,  774,  764,  765,  775,  766,
      776,  777,  778,  779,  780,  781,  767,  782,  768,  769,
      783,  784,  785,  786,  770,  787,  788,  771,  772,  773,
      789,  790,  774,  791,  792,  775,  793,  776,  777,  778,

      779,  780,  781,  794,  782,  193,  193,  783,  784,  785,
      786,  193,  787,  788,  193,  193,  878,  789,  790,  796,
      791,  792, 1137,  793,  797,  798,  193,  193,  800,  802,
      794,  193,  193,  193,  799,  193,  801,  193,  193,  193,
      193,  193,  193,  878,  803,  193,  796,  193,  193,  193,
     1137,  797,  798,  193,  193,  800,  802,  193,  193,  193,
      193,  799,  193,  801,  193,  193,  193,  193,  193,  193,
      193,  803,  193,  193,  193,  193,  193,  804,  193,  193,
     1137, 1137,  805,  806,  193, 1137,  193,  193,  193,  193,
      193, 1137,  193,  193,  807,  193,  193,  193,  193,  193,

      193, 1137,  808,  193,  804,  193,  193,  193,  193,  805,
      806, 1137,  193,  193, 1137,  193,  193,  193,  809,  810,
      193,  807,  193,  193, 1137,  193,  193,  193,  812,  808,
      193,  193,  193,  193,  193,  193, 1137,  813,  811,  193,
      193,  193,  193, 1137,  814,  809,  810,  193, 1137,  193,
      193,  193,  879,  193,  193,  812,  193,  816,  193,  193,
      193,  193,  193,  817,  813,  811,  193,  193,  193,  193,
      815,  814,  193,  193,  193,  193,  193,  818,  193,  879,
      193,  880,  193,  193,  816,  193,  193,  881,  193,  193,
      817,  820,  193,  193,  193,  193,  819,  815, 1137,  193,

      193,  193,  193,  193,  818,  193,  822,  823,  880,  193,
      193,  193,  193,  193,  881,  824,  821, 1137,  820,  193,
      193,  193,  193,  819,  193,  826,  193, 1137,  193,  193,
      193,  193,  193,  822,  823,  193,  882,  193,  193,  825,
      193,  193,  824,  821,  193,  193,  193,  193,  193,  193,
      827,  193,  826,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  882,  829,  193,  825,  193,  193,  193,
      828,  193,  193,  193,  193,  193,  193,  827,  831,  193,
      193,  193,  193,  830,  193, 1137,  193,  193,  193,  193,
     1137,  829,  193, 1137, 1137,  193,  193,  828,  193,  193,

      193,  193,  193,  833,  193,  831,  193,  193,  832,  193,
      830,  193,  834,  835, 1137,  193,  193,  193,  193,  193,
      193,  193,  193,  836,  838,  193,  193,  193, 1137,  193,
      833,  193,  193,  193,  837,  832,  193,  193,  193,  834,
      835,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      836,  838,  193,  193,  193,  193,  193,  841,  839,  193,
      193,  837,  840,  193,  193,  193, 1137,  883,  193,  193,
      193,  884,  193,  193,  193,  193,  193,  193, 1137,  193,
      193,  193,  193, 1137,  841,  839,  842,  843,  193,  840,
      193,  844,  193,  193,  883, 1137,  193,  193,  884,  193,

      193,  193,  193,  846,  193,  193,  847, 1137,  193,  193,
      845, 1137,  885,  842,  843,  193, 1137,  193,  844,  193,
      193,  193,  848,  193,  193,  193,  193,  193, 1137,  193,
      846,  850,  193,  847,  849,  193,  193,  845,  851,  885,
     1137,  193,  193,  193,  193, 1137, 1137,  193,  193,  848,
      193,  852,  193,  193,  193,  193,  193,  193,  850,  193,
      193,  849,  193,  193, 1137,  851, 1137,  853,  193,  193,
      193,  857,  855,  854,  193,  193,  886,  193,  852,  193,
      193, 1137,  193,  193,  193,  856,  193,  193,  193,  193,
      193,  859, 1137,  193,  853, 1137,  193,  193,  857,  855,

      854,  860,  193,  886,  193,  858,  193,  193,  193,  862,
      193,  193,  856,  193,  193,  193,  193,  193,  859,  193,
      193,  193,  193,  193,  193,  887,  861,  193,  860,  193,
      193,  193,  858,  864,  193,  193,  862,  863,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193, 1137,  887,  861,  193, 1137,  193,  193,  193,  865,
      864,  193,  193, 1137,  863,  193,  193,  193,  866,  193,
      193,  867,  193,  193,  193,  869,  193,  193,  871,  193,
     1137,  872,  193,  868, 1137, 1137,  865,  193,  870,  193,
      193,  193,  193,  193,  193,  866,  193,  193,  867,  193,

      193,  193,  869,  193,  193,  871,  193,  873,  872,  193,
      868,  193,  193,  193,  193,  870,  875,  193,  193,  888,
      193,  193,  889,  193,  193,  890,  193,  891,  193,  874,
      193,  193,  193,  193,  873,  892,  193,  893,  193,  193,
      193,  193,  894,  875,  876,  895,  888,  896,  193,  889,
      193,  193,  890,  897,  891,  898,  874,  193,  899,  193,
      193,  900,  892,  193,  893,  901,  902,  903,  193,  894,
      904,  876,  895,  905,  896,  906,  908,  193,  907,  909,
      897,  910,  898,  911,  912,  899,  913,  914,  900,  915,
      916,  917,  901,  902,  903,  918,  919,  904,  920,  921,

      905,  922,  906,  908,  923,  907,  909,  924,  910,  925,
      911,  912,  926,  913,  914,  927,  915,  916,  917,  928,
      929,  930,  918,  919,  931,  920,  921,  932,  922,  933,
      934,  923,  935,  193,  924,  193,  925, 1137,  193,  926,
     1137,  938,  927,  193,  996, 1137,  928,  929,  930,  193,
     1137,  931,  939,  193,  932,  193,  933,  934,  193,  935,
      193,  193,  193,  193,  937,  193,  940,  193,  938,  193,
      193,  996,  193,  997, 1137,  193,  193,  193, 1137,  939,
      193, 1137,  193,  944,  941,  193,  193,  193,  193, 1137,
      193,  937,  942,  940,  193,  193,  193,  193,  193,  193,

      997,  193,  193,  193,  193,  945,  193,  193,  943,  193,
      944,  941, 1137,  193,  193, 1137,  947,  946,  193,  942,
      948,  193,  193, 1137,  193,  193,  193,  193,  193,  193,
      193,  998,  945,  193,  193,  943,  193,  193, 1137,  952,
      193,  949,  193,  947,  946,  193,  193,  948,  193, 1137,
      193,  951,  953,  193,  193,  999,  193,  193,  998,  193,
      193,  193,  193, 1137,  193,  950,  952,  193,  949,  193,
      193,  193,  193,  193, 1000,  954,  955,  193,  951,  953,
      193,  193,  999, 1137,  193,  956,  193,  193,  193,  193,
      193,  193,  950,  958,  957,  193,  193,  193,  193,  193,

     1137, 1000,  954,  955,  193,  193, 1137,  193,  193,  193,
      193,  961,  956,  193,  193,  193,  193,  193,  193,  193,
      958,  957,  193,  193,  193,  193,  960,  193,  959,  193,
      193,  193,  193,  193,  193, 1137,  193,  193,  961,  193,
      193,  193,  193,  193,  193,  962,  193,  193,  193,  964,
      193,  193,  193,  960,  193,  959,  193,  193,  193,  193,
      193,  193,  193,  193,  193, 1137,  193,  193,  193,  193,
      967,  193,  962,  963,  193,  193,  964,  193,  193,  193,
     1137,  965,  193,  193,  966,  193,  193,  193, 1137,  193,
      193,  193,  193,  193,  193,  193,  193,  967,  968,  970,

      963,  193,  193,  193,  193,  193,  193,  971,  965,  193,
      193,  966,  193,  193,  193,  969,  193,  972,  193,  193,
      193,  193,  193,  193,  193,  968,  970,  193,  193,  193,
      193,  193,  973,  193,  971, 1137,  193,  976, 1001,  193,
      193, 1137,  969,  193,  972,  193,  974,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  973,
      193, 1137,  977,  193,  976, 1001,  978,  979,  975, 1137,
      193,  193, 1137,  974,  193,  193,  193, 1002,  193,  193,
      193,  193,  193,  193,  193,  193,  980,  193,  983,  977,
      193,  193,  193,  978,  979,  975,  981,  193,  193,  982,

      193,  193,  193,  193, 1002,  193, 1137,  193,  193,  193,
      193, 1003,  193,  980,  193,  983, 1137,  193,  193,  193,
      193,  193,  985,  981,  984,  193,  982,  193,  193,  193,
      193,  987, 1137,  989,  193,  193,  193,  193, 1003,  193,
      986,  193,  988,  990,  193,  193,  193,  193,  193,  985,
     1137,  984,  193,  193,  991,  193,  193,  193,  987,  193,
      989,  993,  193,  193,  193,  193,  193,  986,  193,  988,
      990,  193,  193,  193,  193,  193,  193,  992, 1004,  193,
      193,  991,  193,  193, 1005,  193,  193, 1006,  993, 1007,
      193,  193,  193,  193,  994,  193,  193, 1008,  193, 1009,

     1010,  193,  193,  193,  992, 1004,  193, 1011, 1012, 1013,
      193, 1005,  193, 1014, 1006, 1015, 1007, 1016,  193, 1017,
     1018,  994,  193,  193, 1008,  193, 1009, 1010, 1019, 1020,
     1021, 1022, 1023, 1024, 1011, 1012, 1013, 1025, 1026, 1027,
     1014, 1028, 1015, 1030, 1016,  193, 1017, 1018, 1137,  193,
     1137, 1032,  193,  193,  193, 1019, 1020, 1021, 1022, 1023,
     1024, 1031, 1064,  193, 1025, 1026, 1027, 1033, 1028,  193,
     1030,  193,  193,  193,  193,  193,  193,  193, 1032,  193,
      193,  193, 1034,  193, 1036, 1137,  193, 1137, 1031, 1064,
      193, 1035,  193, 1137, 1033,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  193,  193,  193, 1037,  193, 1034,
      193, 1036,  193,  193, 1038, 1137, 1137,  193, 1035,  193,
      193, 1039,  193,  193,  193,  193,  193, 1137,  193,  193,
      193, 1040,  193,  193, 1037,  193, 1137,  193, 1137,  193,
      193, 1038,  193,  193,  193,  193,  193,  193, 1039,  193,
      193,  193,  193,  193, 1041,  193,  193,  193, 1040,  193,
      193, 1137,  193,  193,  193,  193, 1137,  193,  193,  193,
      193,  193,  193,  193, 1042, 1137,  193,  193,  193,  193,
      193, 1041, 1137,  193,  193, 1044,  193,  193,  193,  193,
      193,  193,  193, 1045,  193,  193,  193,  193,  193,  193,

     1137, 1042,  193, 1137,  193,  193,  193,  193, 1137, 1043,
      193, 1065, 1044, 1046,  193,  193,  193,  193,  193,  193,
     1045,  193,  193,  193,  193,  193,  193,  193, 1137,  193,
     1050, 1048,  193,  193, 1047,  193, 1043, 1137, 1065,  193,
     1046,  193, 1137,  193,  193,  193,  193,  193, 1049,  193,
      193,  193,  193,  193,  193,  193,  193, 1050, 1048, 1051,
      193, 1047,  193, 1052,  193,  193,  193, 1053,  193,  193,
     1054,  193,  193,  193,  193, 1049,  193,  193,  193, 1137,
      193,  193,  193,  193,  193,  193, 1051, 1055,  193,  193,
     1052,  193,  193,  193, 1053,  193,  193, 1054,  193,  193,

      193,  193, 1137,  193,  193, 1057, 1056,  193,  193,  193,
     1137,  193,  193, 1058, 1055,  193,  193,  193,  193,  193,
      193, 1059, 1060,  193,  193, 1066,  193,  193,  193,  193,
     1067,  193, 1057, 1056,  193,  193,  193,  193,  193,  193,
     1058, 1137, 1068,  193,  193,  193,  193,  193, 1059, 1060,
      193,  193, 1066, 1069,  193,  193,  193, 1067, 1070,  193,
     1061,  193,  193, 1071,  193,  193,  193,  193, 1062, 1068,
      193, 1072, 1073, 1074,  193, 1075, 1076, 1077, 1137, 1137,
     1069,  193,  193, 1137, 1137, 1070,  193, 1061,  193,  193,
     1071,  193,  193,  193,  193, 1062, 1137,  193, 1072, 1073,

     1074, 1079, 1075, 1076, 1077,  193, 1080, 1081,  193,  193,
      193,  193,  193,  193, 1137,  193,  193,  193,  193,  193,
      193,  193, 1137,  193,  193,  193,  193,  193, 1079,  193,
      193,  193,  193, 1080, 1081,  193,  193,  193,  193,  193,
      193, 1082,  193,  193,  193, 1083,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193, 1086,  193,  193,  193,  193, 1084,  193, 1082, 1094,
      193, 1137, 1083,  193,  193,  193,  193, 1085,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193, 1086,  193,
      193,  193,  193, 1084,  193, 1088, 1094,  193,  193,  193,

      193,  193,  193, 1095, 1085, 1137,  193,  193,  193,  193,
      193,  193,  193, 1087, 1089,  193,  193,  193,  193,  193,
      193,  193, 1088, 1090,  193,  193,  193,  193,  193, 1096,
     1095, 1092,  193,  193,  193,  193,  193, 1097, 1098, 1099,
     1087, 1089,  193,  193,  193,  193,  193,  193,  193, 1091,
     1090,  193,  193,  193,  193,  193, 1096,  193, 1092,  193,
      193,  193,  193,  193, 1097, 1098, 1099,  193,  193,  193,
      193,  193, 1101,  193, 1137,  193, 1091,  193,  193,  193,
      193,  193,  193, 1102,  193,  193, 1103,  193,  193,  193,
      193,  193, 1108,  193,  193,  193,  193,  193,  193, 1101,

      193,  193,  193,  193,  193,  193,  193, 1106, 1109, 1110,
     1102,  193,  193, 1103,  193,  193,  193,  193,  193, 1108,
      193, 1104, 1105,  193,  193, 1112,  193,  193,  193, 1116,
      193,  193,  193,  193, 1106, 1109, 1110,  193,  193,  193,
      193,  193,  193, 1137,  193,  193, 1137,  193, 1104, 1105,
      193, 1113, 1112,  193,  193,  193, 1116,  193,  193,  193,
      193,  193,  193, 1137,  193, 1114,  193,  193,  193,  193,
      193,  193,  193, 1137,  193,  193, 1137, 1137, 1113, 1118,
     1137, 1137,  193, 1137,  193, 1137,  193,  193,  193,  193,
      193,  193, 1114, 1137, 1137, 1137, 1137,  193,  193, 1137,

     1137, 1137,  193, 1137, 1137, 1137, 1118, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137,  193,  193,   46,
       46,   46,   46,   46,   88, 1137, 1137,   88,   88,  178,
      178,  178, 1137,  178,  180, 1137,  180,  180,  180,  183,
     1137,  183,  183,  183,  193, 1137,  193,  193,  193,    7,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137
    } ;

static const flex_int16_t yy_chk[4627] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   24, 1140,   23,   30,   24,   21,
     1134,   21,   24,   23,   31,   21,   21,   44,   24,   99,

       23,   24,   22,   23, 1133,   25, 1132,   25,   21,   22,
       21,   24,   25,   23,   30,   24,   21,   25,   21,   24,
       23,   31,   21,   21,   44,   24,   99,   23,   24,   22,
       23,   27,   25,   28,   25, 1131,   32,   27, 1130,   25,
       32,   28,   29,   42,   25,   26,   32,   28,   29,   29,
       29,   42, 1129,   26, 1128,   29,   26, 1127,   27,   26,
       28, 1126,   26,   32,   27,   26, 1125,   32,   28,   29,
       42, 1124,   26,   32,   28,   29,   29,   29,   42,   34,
       26,   33,   29,   26,   36,   33,   26,   43,   43,   26,
       35,   33,   26,   34, 1123,   36,   49,   49,   35,   34,

       34,   36,   35,   38, 1122,   35,   34,   38,   33,   50,
       50,   36,   33,   38,   43,   43, 1121,   35,   33,   41,
       34,   41,   36,  100,   41,   35,   34,   34,   36,   35,
       38,   39,   35,   39,   38,  103,   39,   71,   55,  104,
       38,   58,   58,   39,   39, 1120,   41, 1119,   41,   55,
      100,   41,   86,   86,   67,   70,  108,   71,   39, 1117,
       39,   67,  103,   39,   71,   70,  104,   67,  111,  101,
       39,   39,   40,  111,   67,   70,   40,  101,  107,   40,
       40,   67,   70,  108,   71,  107,   40,  114,   67,   40,
      181,  181,   70, 1115,   67,  111,  101, 1111, 1107,   40,

      111,   67,   70,   40,  101,  107,   40,   40, 1100, 1093,
     1078, 1063,  107,   40,  114, 1029,   40,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   61,   61,
      995,   61,   61,   61,   61,   61,   61,   77,   68,   84,
      936,  877,   68,  795,  713,  115,   68,   61,   61,   61,
       72,  116,   68,   61,   72,   61,  117,   77,  118,   84,
       72,   61,   68,   61,   77,   68,   84,   61,   61,   68,
       72,   83,  115,   68,   83,   83,  605,   72,  116,   68,
       61,   72,   61,  117,   77,  118,   84,   72,   61,   68,

       61,   83,  120,  497,   61,   61,  386,   72,   83,  274,
      185,   83,   83,   61,   62,   62,  183,   62,   62,   62,
       62,   62,   62,   90,   88,   85,   73,   76,   83,  120,
       73,   76,   60,   62,   62,   62,   73,  110,   76,   78,
       62,   81,  102,   78,   76,  102,   73,  110,  121,   78,
       81,   76,   81,   73,   76,   81,  122,   73,   76,   78,
       62,   81,   59,   73,  110,   76,   78,   62,   81,  102,
       78,   76,  102,   73,  110,  121,   78,   81,   76,   81,
       52,   51,   81,  122,  105,  105,   78,   62,   81,   62,
       63,  123,   82,  124,   63,  125,   82,   63,  105,  126,

       82,  109,  109,  109,   63,  109,   47,   63,  113,  113,
      127,  105,  105,  129,   63,   45,   82,   63,  123,   82,
      124,   63,  125,   82,   63,  105,  126,   82,  109,  109,
      109,   63,  109,  112,   63,  113,  113,  127,  112,   20,
      129,   63,   64,   82,  112,   19,   64,  130,  132,  128,
       64,  112,  128,  133,  135,  119,   64,  119,  136,   64,
      112,  119,  137,   11,  138,  112,   64,    7,  119,   64,
      141,  112,  119,   64,  130,  132,  128,   64,  112,  128,
      133,  135,  119,   64,  119,  136,   64,    4,  119,  137,
      134,  138,  142,   64,   65,  119,  139,  141,  139,  119,

      134,   65,  143,   65,  144,  134,  134,  140,   65,  140,
      145,  146,  147,   65,   65,    3,  148,  134,  150,  142,
      140,   65,  151,  139,  152,  139,    0,  134,   65,  143,
       65,  144,  134,  134,  140,   65,  140,  145,  146,  147,
       65,   65,   66,  148,  153,  150,   66,  140,  154,  151,
       66,  152,  154,   66,  156,  155,   66,  157,  158,   66,
      155,  159,   66,  160,  161,  162,   66,    0,    0,   66,
      159,  153,  163,   66,    0,  154,    0,   66,  159,  154,
       66,  156,  155,   66,  157,  158,   66,  155,  159,   66,
      160,  161,  162,   66,   69,   69,  164,  159,  165,  163,

      166,   69,   69,   69,  167,  159,  168,  164,   69,  169,
      170,  171,  169,  174,   69,    0,  175,    0,  172,    0,
      176,   69,   69,  164,  172,  165,  168,  166,   69,   69,
       69,  167,  193,  168,  164,   69,  169,  170,  171,  169,
      174,   69,   74,  175,  173,  172,   74,  176,  277,  194,
      194,  172,  193,  168,    0,  279,   74,  173,    0,  193,
      280,  282,   74,   74,  284,    0,   74,    0,    0,   74,
      194,  173,    0,   74,    0,  277,  194,  194,    0,  193,
        0,  195,  279,   74,  173,  196,  198,  280,  282,   74,
       74,  284,  196,   74,   75,   75,  195,  194,  201,  198,

      196,  195,  199,   75,  199,  196,  198,   75,  195,  285,
       75,    0,  196,  198,   75,    0,  286,    0,  201,  196,
        0,   75,   75,  195,  199,  201,  198,  196,  195,  199,
       75,  199,  196,  198,   75,  197,  285,   75,  197,  197,
      287,   75,   79,  286,   79,  201,  289,   79,  200,  200,
      200,  199,  290,  291,   79,   79,    0,    0,    0,  197,
        0,    0,  197,  200,   79,  197,  197,  287,  200,   79,
      292,   79,    0,  289,   79,  200,  200,  200,  215,  290,
      291,   79,   79,  205,  203,  215,  197,  202,  203,    0,
      200,   79,   80,  205,  202,  200,   80,  292,  215,   80,

       80,  202,  293,  205,  294,  215,   80,  202,  203,   80,
      205,  203,  215,  295,  202,  203,   80,    0,    0,   80,
      205,  202,    0,   80,    0,  215,   80,   80,  202,  293,
      205,  294,    0,   80,  202,  203,   80,    0,    0,    0,
      295,    0,    0,   80,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  204,  206,  296,  209,
      208,  210,  297,  204,  204,  204,    0,  204,    0,  298,
        0,  210,  206,  208,  208,  209,  204,  206,    0,  209,
      208,  210,    0,  204,  206,  296,  209,  208,  210,  297,
      204,  204,  204,  213,  204,  213,  298,  211,  210,  206,
      208,  208,  209,  204,  206,  207,  209,  208,  210,  207,
      207,  211,  212,  212,    0,  213,  207,  211,    0,    0,
      213,  216,  213,  207,  211,  217,  299,  301,  216,  207,
        0,  302,  207,  212,    0,  217,  207,  207,  211,  212,
      212,  216,  213,  207,  211,  217,  218,    0,  216,  303,

      207,    0,  217,  299,  301,  216,  207,  220,  302,  218,
      212,  214,  217,  214,  220,  219,  218,  214,  216,  221,
        0,    0,  217,  218,  214,  219,  303,  220,  214,  221,
        0,    0,    0,  214,  220,  219,  218,  222,  214,  221,
      214,  220,  219,  218,  214,  225,  221,  222,  226,  224,
      304,  214,  219,  223,  220,  214,  221,  222,  224,  227,
      214,  225,  219,  227,  222,  225,  221,  223,  226,  224,
      223,  228,  225,  223,  222,  226,  224,  304,  305,  227,
      223,  306,  228,    0,  222,  224,  227,  308,  225,    0,
      227,  228,  225,    0,  223,  226,  224,  223,  228,  309,

      223,  230,    0,  232,    0,  305,  227,    0,  306,  228,
      230,  231,    0,    0,  308,  231,  233,  233,  228,  229,
      229,  230,    0,  232,  310,    0,  309,  311,  230,  229,
      232,  231,  236,  234,  229,  229,  233,  230,  231,  234,
      229,  234,  231,  233,  233,  236,  229,  229,  230,  300,
      232,  310,  236,  234,  311,    0,  229,    0,  231,  236,
      234,  229,  229,  233,  300,  237,  234,  229,  234,  235,
      312,  235,  236,  235,  237,  238,  300,  313,    0,  236,
      234,    0,  235,    0,  238,  237,  244,  241,  239,  314,
      240,  300,  237,  235,  241,  238,  235,  312,  235,    0,

      235,  237,  238,  239,  313,  240,  244,  241,  239,  235,
      240,  238,  237,  244,  241,  239,  314,  240,  247,  242,
      235,  241,  238,  242,  243,  243,  245,  245,    0,  255,
      239,  247,  240,  244,  241,  239,    0,  240,  247,  255,
      246,  315,    0,  242,  243,  247,  242,  245,    0,  255,
      242,  243,  243,  245,  245,  246,  255,  248,  247,  249,
      246,  248,    0,  249,    0,  247,  255,  246,  315,  250,
      242,  243,  316,  251,  245,  251,  255,  253,  250,  249,
      253,  248,  246,  250,  248,    0,  249,  246,  248,  250,
      249,  252,  254,  251,  254,  317,  250,  253,  252,  316,

      251,  254,  251,  318,  253,  250,  249,  253,  248,  254,
      250,  252,  258,  256,  254,  258,  250,  319,  252,  254,
      251,  254,  317,  257,  253,  252,  256,  257,  254,  259,
      318,  260,  262,  256,  320,  258,  254,  259,  252,  258,
      256,  254,  258,  262,  319,  265,  265,  257,  259,  259,
      257,  260,  262,  256,  257,    0,  259,  261,  260,  262,
      256,  320,  258,  263,  259,  261,  265,  263,  321,  322,
      262,    0,  265,  265,  257,  259,  259,  261,  260,  262,
      269,  264,  266,  263,  261,  264,  266,  263,  264,    0,
      263,    0,  261,  265,  263,  321,  322,    0,  267,    0,

      269,  264,  266,  268,  261,  267,  270,  269,  264,  266,
      263,  267,  264,  266,  263,  264,  268,    0,  267,  323,
      271,  270,  324,  268,  271,  267,  270,  269,  264,  266,
      268,    0,  267,  270,    0,    0,    0,    0,  267,    0,
      325,  326,  327,  268,  271,  267,  323,  271,  270,  324,
      268,  271,  328,  270,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  288,  329,  288,  325,  326,  327,
      330,  271,  331,  332,  333,  335,  336,  337,  338,  328,
      339,  288,  331,  340,  341,  342,  343,  344,  346,  347,
      348,  288,  329,  288,  349,  350,  351,  330,  352,  331,

      332,  333,  335,  336,  337,  338,  353,  339,  288,  331,
      340,  341,  342,  343,  344,  346,  347,  348,  354,  355,
      356,  349,  350,  351,  357,  352,  358,  359,  360,  361,
      363,  364,  365,  353,  366,  367,  368,  369,  370,  372,
      373,  374,  375,  374,  376,  354,  355,  356,  377,  373,
      378,  357,  379,  358,  359,  360,  361,  363,  364,  365,
      380,  366,  367,  368,  369,  370,  372,  373,  374,  375,
      374,  376,  381,  383,  382,  377,  373,  378,  382,  379,
      384,    0,  388,  389,  390,    0,  391,  380,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  393,  381,

      383,  382,  388,  389,  390,  382,  391,  384,  392,  388,
      389,  390,  394,  391,  395,  392,  394,  396,  393,    0,
      397,  498,    0,    0,  397,  393,    0,  396,  392,  388,
      389,  390,  398,  391,  395,  392,  394,  396,  499,  394,
      397,  395,  392,  394,  396,  393,  399,  397,  498,  401,
      398,  397,  398,  399,  396,  392,    0,    0,    0,  398,
        0,  395,  401,  394,  396,  499,  399,  397,  400,  401,
      400,  402,    0,  399,  403,    0,  401,  398,  500,  398,
      399,  501,  403,  405,  404,  400,  407,  402,    0,  401,
      400,  402,    0,  399,  403,  400,  401,  400,  402,  404,

      407,  403,  408,  405,  404,  500,  407,    0,  501,  403,
      405,  404,  400,  407,  402,  406,  410,  400,  402,  406,
      409,  403,  408,  410,  411,    0,  404,  407,  411,  408,
      405,  404,    0,  407,  409,    0,  410,  412,  414,  406,
      409,    0,  406,  410,    0,    0,  406,  409,  411,  408,
      410,  411,  412,  415,  413,  411,  413,  412,  414,  416,
      502,  409,  416,  410,  412,  414,  406,  409,  415,    0,
        0,  418,  419,  415,  503,  411,  413,  417,    0,  412,
      415,  413,  416,  413,  412,  414,  416,  502,  417,  416,
      420,  418,  419,  421,  420,  415,  423,  417,  418,  419,

      415,  503,    0,  413,  417,  422,  427,  422,    0,  416,
      423,    0,    0,  421,  420,  417,  423,  420,  418,  419,
      421,  420,  424,  423,  417,  425,  427,  422,    0,  424,
      426,  428,  422,  427,  422,  428,    0,  423,  425,  429,
      421,  420,  424,  423,  426,  425,    0,  429,  504,  424,
      426,  506,  425,  427,  422,  428,  424,  426,  428,  429,
      430,  432,  428,  431,  432,  425,  429,    0,  430,  424,
      431,  426,  425,  433,  429,  504,  434,  426,  506,  434,
      430,  435,  428,  431,  432,  435,  429,  430,  432,  433,
      431,  432,    0,  433,  436,  430,  434,  431,  438,  440,

      433,  435,  437,  434,  438,  510,  434,  430,  435,  436,
      431,  432,  435,  441,  436,  437,  433,  439,  438,  440,
      433,  436,  437,  434,    0,  438,  440,  439,  435,  437,
      442,  438,  510,  441,  511,  444,  436,  439,  443,  446,
      441,  436,  437,  445,  439,  438,  440,  448,  443,  437,
      442,  444,  445,  447,  439,  444,    0,  442,  443,  446,
      441,  511,  444,  445,  439,  443,  446,  448,  447,  512,
      445,  454,  449,  447,  448,  443,  449,  442,  444,  445,
      447,    0,  444,  450,  450,  443,  446,  454,  514,  451,
      445,  454,  449,  451,  448,  447,  512,  455,  454,  449,

      447,  515,  457,  449,  450,  452,  453,  452,  453,  516,
      450,  450,  455,  451,  454,  514,  451,  455,  454,  449,
      451,  456,  457,  458,  455,  452,  453,  461,  515,  457,
      458,  450,  452,  453,  452,  453,  516,  456,  459,  455,
      451,  456,  460,  458,  455,    0,  462,  461,  456,  457,
      458,  459,  452,  453,  461,  463,  460,  458,  459,  463,
        0,  465,  460,    0,  456,  459,  462,  464,  456,  460,
      458,  467,  465,  462,  461,  467,  464,    0,  459,  463,
        0,  465,  463,  460,  466,  459,  463,  464,  465,  460,
      468,  518,  466,  462,  464,  467,  471,  519,  467,  465,

      470,  473,  467,  464,  466,  468,  463,  470,  465,  469,
      468,  466,  469,  474,  464,  472,  471,  468,  518,  466,
      470,  473,  467,  471,  519,  472,  475,  470,  473,  469,
      476,  466,  468,  474,  470,  472,  469,  468,  482,  469,
      474,    0,  472,  471,  475,  476,  475,  470,  473,  477,
      476,    0,  472,  475,  478,  479,  469,  476,  482,  481,
      474,  478,  472,  480,  477,  482,  479,  483,  481,  477,
      520,  475,  476,  475,  478,  479,  477,  476,  480,  481,
      484,  478,  479,  480,    0,  482,  481,  483,  478,  484,
      480,  477,    0,  479,  483,  481,  477,  520,  521,  485,

      484,  478,  479,  486,    0,  480,  481,  484,  485,  489,
      480,  487,  490,  486,  483,  486,  484,    0,  489,  485,
      488,  487,    0,  486,  488,  521,  485,  484,  490,  489,
      486,  487,  490,    0,  492,  485,  489,    0,  487,  490,
      486,  491,  486,  491,  488,  489,  485,  488,  487,  493,
      486,  488,  492,  494,  492,  490,  489,  495,  487,  490,
      495,  492,  494,  491,  493,  496,  494,  522,  491,  493,
      491,  488,  523,  494,  524,  525,  493,  495,  496,  492,
      494,  492,  528,  529,  495,  496,  530,  495,  531,  494,
      491,  493,  496,  494,  522,  532,  493,  533,  534,  523,

      494,  524,  525,  536,  495,  496,  537,  540,  541,  528,
      529,  543,  496,  530,  545,  531,  546,  547,  548,  549,
      550,  551,  532,  553,  533,  534,  557,  559,  561,  563,
      536,  564,  551,  537,  540,  541,  562,  562,  543,  566,
      567,  545,  568,  546,  547,  548,  549,  550,  551,  569,
      553,  570,  572,  557,  559,  561,  563,  573,  564,  551,
      574,  575,  576,  562,  562,  577,  566,  567,  578,  568,
      579,  580,  582,  583,  584,  585,  569,  588,  570,  572,
      589,  591,  592,  593,  573,  594,  595,  574,  575,  576,
      596,  597,  577,  598,  600,  578,  602,  579,  580,  582,

      583,  584,  585,  604,  588,  608,  606,  589,  591,  592,
      593,  607,  594,  595,  609,  610,  716,  596,  597,  606,
      598,  600,    0,  602,  607,  608,  606,  611,  610,  612,
      604,  607,  608,  606,  609,  610,  611,  613,  607,  615,
      616,  609,  610,  716,  614,  617,  606,  611,  614,  612,
        0,  607,  608,  606,  611,  610,  612,  613,  607,  615,
      616,  609,  610,  611,  613,  617,  615,  616,  614,  618,
      620,  614,  617,  621,  611,  614,  612,  618,  619,  622,
        0,    0,  619,  620,  613,    0,  615,  616,  623,  618,
      620,    0,  617,  621,  622,  614,  618,  620,  619,  622,

      621,    0,  623,  624,  618,  619,  622,  625,  623,  619,
      620,    0,  626,  628,    0,  623,  618,  620,  624,  626,
      621,  622,  627,  624,    0,  619,  622,  625,  628,  623,
      624,  630,  626,  628,  625,  623,    0,  629,  627,  626,
      628,  629,  627,    0,  630,  624,  626,  634,    0,  627,
      624,  630,  718,  632,  625,  628,  633,  632,  630,  626,
      628,  629,  635,  633,  629,  627,  636,  634,  629,  627,
      631,  630,  631,  632,  634,  638,  633,  636,  630,  718,
      632,  720,  635,  633,  632,  637,  636,  721,  629,  635,
      633,  638,  631,  636,  634,  638,  637,  631,    0,  631,

      632,  639,  638,  633,  636,  637,  640,  641,  720,  635,
      640,  641,  637,  636,  721,  642,  639,    0,  638,  631,
      643,  639,  638,  637,  644,  645,  646,    0,  639,  645,
      640,  641,  637,  640,  641,  642,  722,  640,  641,  644,
      643,  647,  642,  639,  644,  650,  646,  643,  639,  645,
      648,  644,  645,  646,  648,  651,  645,  640,  641,  649,
      652,  647,  642,  722,  651,  650,  644,  643,  647,  653,
      649,  644,  650,  646,  648,  651,  645,  648,  654,  649,
      652,  648,  651,  653,  656,    0,  649,  652,  647,  653,
        0,  651,  650,    0,    0,  655,  653,  649,  654,  657,

      658,  648,  651,  656,  656,  654,  649,  652,  655,  660,
      653,  656,  657,  658,    0,  655,  653,  661,  662,  657,
      658,  659,  655,  659,  661,  654,  657,  658,    0,  660,
      656,  656,  663,  664,  659,  655,  660,  661,  662,  657,
      658,  659,  655,  665,  661,  662,  657,  658,  659,  666,
      659,  661,  663,  664,  668,  667,  660,  669,  665,  663,
      664,  659,  667,  665,  661,  662,    0,  723,  659,  666,
      665,  724,  670,  673,  668,  667,  666,  669,    0,  663,
      664,  668,  667,    0,  669,  665,  670,  670,  671,  667,
      665,  671,  670,  673,  723,    0,  666,  672,  724,  670,

      673,  668,  667,  674,  669,  674,  675,    0,  671,  676,
      672,    0,  725,  670,  670,  671,    0,  672,  671,  670,
      673,  677,  676,  678,  672,  674,  675,  679,    0,  676,
      674,  678,  674,  675,  677,  671,  676,  672,  680,  725,
        0,  677,  680,  678,  672,    0,    0,  679,  677,  676,
      678,  681,  674,  675,  679,  681,  676,  684,  678,  682,
      683,  677,  680,  686,    0,  680,    0,  682,  677,  680,
      678,  686,  684,  683,  679,  681,  727,  684,  681,  682,
      683,    0,  681,  686,  684,  685,  682,  683,  685,  680,
      686,  688,    0,  688,  682,    0,  687,  689,  686,  684,

      683,  690,  681,  727,  684,  687,  682,  683,  685,  692,
      686,  694,  685,  688,  695,  685,  687,  689,  688,  696,
      688,  690,  691,  687,  689,  728,  691,  693,  690,  692,
      698,  694,  687,  696,  695,  685,  692,  693,  694,  696,
      688,  695,  691,  687,  689,  697,  696,  693,  690,  691,
      698,    0,  728,  691,  693,    0,  692,  698,  694,  697,
      696,  695,  700,    0,  693,  697,  696,  701,  699,  691,
      699,  700,  697,  703,  693,  702,  704,  698,  704,  702,
        0,  705,  700,  701,    0,    0,  697,  701,  703,  700,
      699,  707,  697,  703,  701,  699,  704,  699,  700,  702,

      703,  705,  702,  704,  706,  704,  702,  706,  705,  700,
      701,  707,  709,  708,  701,  703,  710,  699,  707,  729,
      703,  711,  730,  704,  706,  732,  702,  733,  705,  708,
      712,  706,  709,  708,  706,  734,  710,  735,  707,  709,
      708,  711,  736,  710,  712,  737,  729,  738,  711,  730,
      712,  706,  732,  739,  733,  740,  708,  712,  741,  709,
      708,  744,  734,  710,  735,  745,  747,  750,  711,  736,
      753,  712,  737,  754,  738,  755,  756,  712,  755,  761,
      739,  762,  740,  763,  764,  741,  765,  768,  744,  769,
      770,  771,  745,  747,  750,  772,  774,  753,  775,  776,

      754,  777,  755,  756,  778,  755,  761,  779,  762,  780,
      763,  764,  781,  765,  768,  782,  769,  770,  771,  783,
      784,  786,  772,  774,  787,  775,  776,  788,  777,  790,
      791,  778,  792,  796,  779,  797,  780,    0,  799,  781,
        0,  800,  782,  798,  878,    0,  783,  784,  786,  801,
        0,  787,  802,  796,  788,  797,  790,  791,  799,  792,
      796,  800,  797,  798,  798,  799,  803,  803,  800,  801,
      798,  878,  802,  880,    0,  804,  801,  805,    0,  802,
      796,    0,  797,  807,  804,  799,  808,  803,  800,    0,
      798,  798,  805,  803,  803,  804,  801,  805,  806,  802,

      880,  809,  804,  807,  805,  809,  808,  810,  806,  811,
      807,  804,    0,  808,  803,    0,  811,  810,  806,  805,
      812,  809,  804,    0,  805,  806,  813,  810,  809,  811,
      807,  881,  809,  808,  810,  806,  811,  814,    0,  817,
      812,  814,  816,  811,  810,  806,  813,  812,  809,    0,
      815,  816,  818,  813,  810,  882,  811,  814,  881,  817,
      819,  820,  816,    0,  814,  815,  817,  812,  814,  816,
      815,  821,  818,  813,  884,  819,  820,  815,  816,  818,
      819,  820,  882,    0,  814,  821,  817,  819,  820,  816,
      822,  821,  815,  823,  822,  823,  824,  815,  821,  818,

        0,  884,  819,  820,  825,  828,    0,  819,  820,  829,
      822,  829,  821,  826,  830,  823,  824,  822,  821,  827,
      823,  822,  823,  824,  825,  828,  827,  831,  826,  829,
      832,  825,  828,  826,  830,    0,  829,  822,  829,  827,
      826,  830,  823,  824,  833,  832,  827,  831,  834,  836,
      832,  825,  828,  827,  831,  826,  829,  832,  835,  839,
      826,  830,  840,  838,  833,    0,  827,  837,  834,  836,
      838,  833,  832,  835,  831,  834,  836,  832,  835,  839,
        0,  837,  840,  838,  837,  835,  839,  837,    0,  840,
      838,  833,  841,  842,  837,  834,  836,  838,  843,  845,

      835,  844,  847,  845,  846,  835,  839,  846,  837,  840,
      838,  837,  841,  842,  837,  844,  848,  847,  843,  841,
      842,  844,  847,  845,  846,  843,  845,  849,  844,  847,
      845,  846,  850,  851,  846,    0,  848,  853,  886,  841,
      842,    0,  844,  848,  847,  843,  851,  849,  844,  847,
      845,  846,  850,  851,  849,  852,  855,  853,  854,  850,
      851,    0,  854,  848,  853,  886,  856,  857,  852,    0,
      856,  857,    0,  851,  849,  852,  855,  887,  854,  850,
      851,  859,  852,  855,  853,  854,  858,  858,  861,  854,
      856,  857,  861,  856,  857,  852,  859,  856,  857,  860,

      860,  859,  852,  855,  887,  854,    0,  858,  859,  863,
      862,  888,  861,  858,  858,  861,    0,  856,  857,  861,
      860,  867,  863,  859,  862,  864,  860,  860,  859,  863,
      862,  865,    0,  868,  858,  865,  863,  862,  888,  861,
      864,  867,  866,  869,  869,  864,  866,  860,  867,  863,
        0,  862,  864,  868,  870,  865,  863,  862,  865,  871,
      868,  873,  865,  872,  869,  873,  866,  864,  867,  866,
      869,  869,  864,  866,  870,  875,  876,  872,  890,  871,
      868,  870,  865,  872,  892,  873,  871,  896,  873,  898,
      872,  869,  873,  866,  874,  875,  876,  899,  874,  905,

      906,  870,  875,  876,  872,  890,  871,  907,  909,  911,
      872,  892,  873,  912,  896,  914,  898,  915,  874,  916,
      918,  874,  875,  876,  899,  874,  905,  906,  919,  920,
      921,  924,  926,  927,  907,  909,  911,  928,  929,  934,
      912,  935,  914,  937,  915,  874,  916,  918,    0,  938,
        0,  940,  939,  941,  942,  919,  920,  921,  924,  926,
      927,  939, 1001,  937,  928,  929,  934,  941,  935,  938,
      937,  940,  939,  941,  942,  943,  938,  944,  940,  939,
      941,  942,  943,  945,  946,    0,  946,    0,  939, 1001,
      937,  945,  947,    0,  941,  943,  938,  944,  940,  939,

      941,  942,  943,  945,  944,  948,  946,  947,  950,  943,
      945,  946,  947,  946,  949,    0,    0,  949,  945,  947,
      952,  951,  943,  951,  944,  948,  953,    0,  950,  954,
      945,  955,  948,  946,  947,  950,    0,  949,    0,  947,
      952,  949,  956,  951,  949,  957,  953,  952,  951,  954,
      951,  955,  948,  953,  957,  950,  954,  959,  955,  958,
      960,    0,  956,  961,  949,  957,    0,  952,  962,  956,
      951,  963,  957,  953,  958,    0,  954,  959,  955,  958,
      960,  957,    0,  961,  959,  965,  958,  960,  962,  956,
      961,  963,  957,  966,  967,  962,  964,  966,  963,  968,

        0,  958,  969,    0,  959,  965,  958,  960,    0,  964,
      961, 1002,  965,  968,  967,  962,  964,  966,  963,  968,
      966,  967,  969,  964,  966,  972,  968,  970,    0,  969,
      974,  971,  965,  973,  970,  971,  964,    0, 1002,  975,
      968,  967,    0,  964,  966,  972,  968,  970,  973,  969,
      974,  976,  972,  973,  970,  971,  979,  974,  971,  975,
      973,  970,  971,  977,  981,  977,  975,  978,  982,  978,
      979,  976,  972,  980,  970,  973,  979,  974,  976,    0,
      973,  984,  971,  979,  981,  977,  975,  980,  982,  978,
      977,  981,  977,  980,  978,  982,  978,  979,  976,  983,

      980,  984,    0,  979,  989,  985,  983,  988,  984,  985,
        0,  981,  977,  986,  980,  982,  978,  986,  990,  983,
      980,  987,  988,  987,  989, 1004,  983,  988,  984,  985,
     1005,  989,  985,  983,  988,  991,  985,  986,  990,  992,
      986,    0, 1010,  987,  986,  990,  983,  993,  987,  988,
      987,  989, 1004, 1011,  988,  991,  985, 1005, 1014,  992,
      993,  994,  991, 1015,  986,  990,  992,  993,  994, 1010,
      987, 1018, 1019, 1023,  993, 1024, 1025, 1026,    0,    0,
     1011,  994,  991,    0,    0, 1014,  992,  993,  994, 1030,
     1015, 1031, 1032, 1033,  993,  994,    0, 1034, 1018, 1019,

     1023, 1035, 1024, 1025, 1026, 1037, 1036, 1038,  994, 1030,
     1036, 1031, 1032, 1033,    0, 1040, 1030, 1034, 1031, 1032,
     1033, 1035,    0, 1041, 1034, 1037, 1039, 1038, 1035, 1042,
     1036, 1043, 1037, 1036, 1038, 1040, 1030, 1036, 1031, 1032,
     1033, 1039, 1040, 1041, 1034, 1044, 1039, 1044, 1035, 1042,
     1041, 1043, 1037, 1039, 1038, 1046, 1042, 1036, 1043, 1045,
     1047, 1049, 1040, 1050, 1048, 1051, 1045, 1044, 1039, 1065,
     1041,    0, 1044, 1039, 1044, 1046, 1042, 1048, 1043, 1045,
     1047, 1049, 1046, 1050, 1048, 1051, 1045, 1047, 1049, 1053,
     1050, 1048, 1051, 1045, 1044, 1053, 1065, 1054, 1052, 1055,

     1056, 1057, 1046, 1068, 1048,    0, 1045, 1047, 1049, 1053,
     1050, 1048, 1051, 1052, 1057, 1058, 1053, 1054, 1052, 1055,
     1056, 1057, 1053, 1058, 1054, 1052, 1055, 1056, 1057, 1071,
     1068, 1060, 1061, 1062, 1059, 1058, 1053, 1074, 1075, 1076,
     1052, 1057, 1058, 1079, 1054, 1052, 1055, 1056, 1057, 1059,
     1058, 1060, 1061, 1062, 1059, 1081, 1071, 1080, 1060, 1061,
     1062, 1059, 1058, 1079, 1074, 1075, 1076, 1082, 1083, 1084,
     1079, 1085, 1080, 1086,    0, 1081, 1059, 1080, 1060, 1061,
     1062, 1059, 1081, 1083, 1080, 1087, 1086, 1082, 1083, 1084,
     1079, 1085, 1094, 1086, 1082, 1083, 1084, 1088, 1085, 1080,

     1086, 1089, 1081, 1091, 1080, 1087, 1092, 1091, 1096, 1099,
     1083, 1090, 1087, 1086, 1082, 1083, 1084, 1088, 1085, 1094,
     1086, 1089, 1090, 1091, 1088, 1101, 1092, 1102, 1089, 1110,
     1091, 1090, 1087, 1092, 1091, 1096, 1099, 1103, 1090, 1104,
     1105, 1112, 1113,    0, 1088, 1101,    0, 1102, 1089, 1090,
     1091, 1103, 1101, 1092, 1102, 1106, 1110, 1103, 1090, 1104,
     1105, 1112, 1113,    0, 1103, 1106, 1104, 1105, 1112, 1113,
     1114, 1118, 1101,    0, 1102, 1106,    0,    0, 1103, 1114,
        0,    0, 1106,    0, 1103,    0, 1104, 1105, 1112, 1113,
     1114, 1118, 1106,    0,    0,    0,    0, 1114, 1118,    0,

        0,    0, 1106,    0,    0,    0, 1114,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1114, 1118, 1138,
     1138, 1138, 1138, 1138, 1139,    0,    0, 1139, 1139, 1141,
     1141, 1141,    0, 1141, 1142,    0, 1142, 1142, 1142, 1143,
        0, 1143, 1143, 1143, 1144,    0, 1144, 1144, 1144, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2073 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2087 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2374 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1138 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1137 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 148:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 155:
#line 220 "flex_lexer.l"
case 156:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
/* 
	 * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no 
	 * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
	 *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
	 */
case 157:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{
	yylval->ival = LLONG_MIN;
	return SQL_INTVAL;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
{
	errno = 0;
	yylval->ival = strtoll(yytext, nullptr, 0);
	if (errno) {
		return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
		return 0;
	}
	return SQL_INTVAL;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 256 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 257 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 258 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 259 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 260 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 262 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 265 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3288 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1138 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1138 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1137);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 265 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

