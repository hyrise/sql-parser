#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 176
#define YY_END_OF_BUFFER 177
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1228] =
    {   0,
        0,    0,  173,  173,    2,    2,  177,  175,    4,    4,
      175,  175,  164,  171,  164,  164,  168,  164,  164,  164,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  164,  173,  174,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  159,    0,    1,    0,
      166,  165,  168,  161,  160,  158,  162,  170,  170,  170,

      170,  170,  170,  124,  170,  170,  125,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  126,  170,  170,  127,  128,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  133,  170,  170,  129,  130,
      131,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  132,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  163,
      173,  172,    2,    2,    2,    2,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  169,    0,
      165,  112,  170,  113,  170,  170,  114,  170,  115,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  137,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  116,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  117,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  118,  170,
      170,  119,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  120,  170,  170,  170,  121,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  122,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  123,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  170,  170,  170,
      170,  170,  170,  170,  170,   83,  170,   84,   46,   85,
      170,  170,  170,   86,  170,  170,   87,  143,  170,  170,
      170,  170,  170,   89,  170,  170,  170,   90,   91,  170,
      170,  170,  170,  170,  170,  170,   92,  170,  170,   93,
       94,  170,  170,   95,  170,   96,  136,  170,  170,  170,
      170,  170,  170,   97,  170,   98,   99,  100,  170,  102,
      170,  170,  103,  170,  170,  170,  170,  170,  104,  170,
      170,  170,  170,  170,  105,  170,  170,   32,  170,  170,

      170,  170,  170,  170,  170,  170,  106,  155,  170,  170,
      170,  170,  170,  107,  108,   30,  170,  146,  170,  170,
      170,  170,  170,  170,  170,  170,  109,  170,  110,  170,
      111,  139,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,   63,
       64,  170,   65,  170,  149,  170,  170,  170,  170,  170,
      170,  170,  170,   66,  170,  170,  170,  170,  170,   67,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      147,   68,  170,  170,   69,  170,  142,  101,  170,   70,
       71,  170,  170,  170,  170,   72,   73,  170,   74,   75,

      170,  138,  170,  170,  170,  170,   76,   77,  170,  170,
      170,  170,  170,   78,  170,  170,  170,  170,  153,  170,
      170,  170,   79,  170,  170,  170,  170,   80,  170,  170,
      170,   81,  170,  170,  170,   82,  145,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  170,   36,  170,
       34,  170,  170,   37,  151,  170,   38,  170,  170,  170,
      170,   39,  170,   40,  170,   41,   42,   43,  170,   44,
      170,  170,   47,   48,   49,   50,   51,  170,  170,  170,
       52,  156,  135,  144,  170,  154,  170,   53,  170,  170,
      170,   54,  170,  170,   55,  134,   56,  170,   57,  170,
       58,  170,  170,  170,  170,   59,   60,   61,   62,  170,
      170,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,   15,   16,   17,
      170,   18,   19,  170,  170,   31,   20,  170,  170,   21,
       22,   45,   23,  170,  170,  141,   24,  170,  170,   25,
       26,  170,  170,   27,  140,  170,   28,  170,  170,  170,
      170,   29,   35,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  170,   88,  170,   10,   11,  170,  152,   12,  170,
       13,  150,   33,  170,  170,  170,   14,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  170,  170,    7,  170,    8,
        9,  170,    2,    2,    2,    2,    2,    2,    2,    2,
        0,    0,    5,    6,  170,    2,    2,    2,    2,    2,
        0,    0,  148,    2,    2,    2,    0,    0,    2,    2,

        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,    0,    2,    2,    0,  157,    2,    2,
        0,    2,    0,    2,  167,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1235] =
    {   0,
        0,    0,  628,  627,   76,    0,  632, 6404,  151,  153,
      598,    0, 6404, 6404,  149,  148,  160,  159,  578,  575,
      156,  156,  165,  181,  192,  243,  173,  220,  253,  152,
      166,  215,  245,  248,  289,  288,    0,  269,  335,  378,
      298,  317,  206,  171,  505,    0,  557,    0,  183,  197,
      540,  555,    0,    0,  239,  366,  437,  228,  536,  530,
      456,  532,  586,  638,  686,  738,  440,  367,  786,  448,
      412,  518,  519,  838,  886,  938,  473,  531,  988, 1040,
     1088,  544,  557,  594,  468,  259, 6404,  530, 6404,  517,
     1153, 1163, 1174, 6404, 6404, 6404, 6404,    0,  201,  199,

      368,  370,  235,  272,  617,  291,    0,  296,  303,  628,
      376,  364,  696,  448,  288,  305,  366,  446,  456,  725,
      449,  457,  466,  481,  505,  509,  537,  543,  556,  567,
      567,    0,  581,  582,  641,  586,  597,  582,  626,  641,
      703,  617,  634,  635,  637,  666,  646,  664,  687,    0,
      690,  676,  691,  718,  743,  748,  744,  742,  750,  784,
      787,  773,  792,  779,  800,  801,  793,  802,  795,  794,
      820,  833,  809,  837,  837,  849,  845,  831,  851, 6404,
        0, 6404,    0,  343,    0,  523,    0,  514, 1184, 1194,
     1205,    0,    0,    0,    0,  880,  892,  901,  937,  950,

      962, 1007, 1198, 1010,  936, 1042, 1078, 1245, 1048, 1201,
     1291, 1210, 1290, 1086, 1235, 1303, 1211, 1353, 1284, 1335,
     1361, 1336, 1386, 1405, 1410, 1411, 1445, 1446, 1440, 1464,
     1470, 1494, 1543, 1499, 1502, 1524, 1560, 1589, 1641, 1613,
     1572, 1638, 1628, 1663, 1680, 1693, 1695, 1698, 1731, 1717,
     1734, 1756, 1746, 1808, 1768, 1782, 1807, 1858, 1857, 1794,
     1870, 1832, 1891, 1899, 1908, 1882, 1932, 1933, 1945, 1962,
     1974, 1977, 1999, 1998, 2016, 2037, 2031,    0, 6404,  513,
     2102,    0,  851,    0,  852,  849,    0,  870,    0,  860,
      884,  880,  899,  897, 1270,  895,  904,  945,  945,  954,

      994,  981, 1004,  992, 1013, 1020, 1032, 1343, 1047, 1064,
     1051, 1087, 1083, 1100,    0, 1107, 1104, 1109, 1192, 1200,
     1204, 1206, 1269, 1278, 1285, 1337, 1340, 1351, 1336, 1357,
     1373, 1374, 1384, 1393, 1391, 1402, 1407, 1427, 1451, 1437,
     1460,    0, 1470, 1500, 1500, 1508, 1517, 1507, 1508, 1502,
     1523, 1523,    0, 1552, 1549, 1546, 1553, 1573, 1577, 1582,
     1587, 1587, 1594, 1620, 1634, 1620, 1643, 1642, 1652, 1672,
     1692,    0, 1688, 1688, 1701, 1729, 1738, 1754, 1784, 1781,
     1791, 1811, 1823,    0, 1815, 1898, 1946, 1832, 1852, 1906,
     1904, 1923, 1906, 1942, 1977, 1984, 1982,    0,  501, 2112,

     2028, 2105, 2106, 2107, 2108, 2120, 2145, 2144, 2146, 2158,
     2170, 2180, 2199, 2198, 2208, 2216, 2234, 2237, 2256, 2262,
     2274, 2271, 2286, 2292, 2304, 2332, 2330, 2340, 2342, 2366,
     2378, 2380, 2390, 2392, 2420, 2395, 2430, 2432, 2449, 2458,
     2468, 2466, 2504, 2502, 2503, 2512, 2521, 2540, 2554, 2562,
     2575, 2592, 2594, 2616, 2604, 2629, 2630, 2638, 2662, 2664,
     2667, 2686, 2688, 2703, 2721, 2736, 2751, 2770, 2757, 2787,
     2789, 2718, 2815, 2806, 2839, 2827, 2824, 2845, 2860, 2869,
     2877, 2890, 2899, 2918, 2927, 2909, 2928, 2953, 2966, 2963,
     2968, 2978, 3002, 2981, 3007, 3017, 3031, 3036, 3057, 3065,

     3082, 3090, 3099, 3111, 3123, 3124, 3152, 3153, 3165, 3177,
     3190, 3187, 3223, 3222, 3225, 3244,  492, 1994, 2002, 2003,
     2020, 2031, 2040, 2053, 2047,    0, 2120,    0,    0, 2134,
     2151, 2156, 2169,    0, 2180, 2190, 2209,    0, 2243, 2245,
     2254, 2280, 2314, 2301, 2318, 2316, 2322,    0,    0, 2338,
     2347, 2358, 2389, 2410, 2418, 2438,    0, 2433, 2458,    0,
        0, 2464, 2453,    0, 2465,    0, 2476, 2520, 2513, 2509,
     2523, 2529, 2559,    0, 2557,    0,    0,    0, 2555,    0,
     2569, 2580,    0, 2586, 2780, 2607, 2605, 2624,    0, 2654,
     2654, 2657, 2659, 2675,    0, 2706, 2708,    0, 2704, 2703,

     2712, 2740, 2750, 2767, 2783, 2796,    0,    0, 2823, 2848,
     2880, 2893, 2913,    0,    0, 2920, 2930,    0, 2954, 2951,
     2961, 2993, 2981, 3024, 3039, 3042,    0, 3036,    0, 3060,
        0, 3057,  480, 3247, 3273, 3276, 3279, 3285, 3288, 3314,
     3327, 3317, 3342, 3329, 3339, 3371, 3377, 3368, 3380, 3383,
     3401, 3409, 3422, 3431, 3434, 3455, 3467, 3473, 3476, 3505,
     3497, 3526, 3527, 3529, 3535, 3559, 3564, 3565, 3583, 3609,
     3619, 3600, 3617, 3618, 3655, 3653, 3654, 3667, 3668, 3689,
     3703, 3704, 3713, 3718, 3728, 3742, 3743, 3767, 3782, 3772,
     3797, 3796, 3806, 3821, 3830, 3835, 3847, 3838, 3856, 3859,

     3884, 3889, 3897, 3914, 3923, 3935, 3938, 3959, 3964, 3967,
     3976, 3993, 4005, 3988, 4018, 4017, 4027, 4046, 4051, 4063,
     4081, 4076, 4084, 4105, 4113, 4114, 4122, 4135, 4154, 4159,
     4167, 4188, 4189, 4180, 4224, 4233, 4234, 4243, 4252, 4282,
     4258, 4288, 4296, 4306, 4297, 4321, 4330, 4342,  460,    0,
        0, 3053,    0, 3081,    0, 3089, 3091, 3115, 3141, 3131,
     3133, 3158, 3182,    0, 3182, 3193, 3210, 3212, 3236,    0,
     3235, 3226, 3273, 3295, 3301, 3315, 3336, 3338, 3351, 3392,
        0,    0, 3377, 3399,    0, 3423,    0,    0, 3424,    0,
        0, 3432, 3457, 3475, 3472,    0,    0, 3486,    0,    0,

     3511, 3499, 3525, 3535, 3548, 3552,    0,    0, 3572, 3567,
     3576, 3601, 3630,    0, 3639, 3647, 3670, 3668,    0, 3688,
     3726, 3730, 3723, 3745, 3751, 3782, 3785,    0, 3791, 3847,
     3864,    0, 3861, 3884, 3899,    0,    0,  456, 4347, 4355,
     4360, 4372, 4384, 4393, 4396, 4406, 4418, 4430, 4405, 4447,
     4456, 4459, 4464, 4481, 4500, 4509, 4514, 4515, 4539, 4549,
     4563, 4564, 4554, 4588, 4589, 4598, 4603, 4622, 4639, 4647,
     4648, 4656, 4673, 4661, 4697, 4685, 4702, 4710, 4711, 4719,
     4736, 4755, 4760, 4761, 4769, 4790, 4799, 4793, 4811, 4814,
     4829, 4832, 4847, 4865, 4871, 4853, 4877, 4883, 4907, 4915,

     4905, 4917, 4929, 4957, 4963, 4969, 4978, 4981, 4987, 5022,
     5023, 5031, 5055, 5056, 5061, 5089, 5090, 5107, 5115, 5124,
     5125, 5139, 5161, 5173, 5163, 5175,  451, 3905,    0, 3904,
        0, 3921, 3914, 3916,    0, 3939,    0, 3939, 3953, 3976,
     3997,    0, 4032,    0, 4035,    0,    0,    0, 4034,    0,
     4032, 4047,    0,    0,    0,    0,    0, 4062, 4092, 4101,
        0,    0, 4086,    0, 4109,    0, 4125,    0, 4114, 4130,
     4118,    0, 4148, 4152, 4137, 4154,    0, 4161,    0, 4165,
        0, 4187, 4200, 4206, 4190,    0,    0,    0,    0, 4200,
     4211,  427, 5178, 5187, 5212, 5197, 5199, 5227, 5236, 5233,

     5245, 5251, 5281, 5286, 5287, 5295, 5300, 5305, 5319, 5340,
     5341, 5349, 5354, 5355, 5373, 5390, 5391, 5403, 5405, 5408,
     5427, 5440, 5449, 5441, 5477, 5459, 5478, 5499, 5491, 5516,
     5517, 5531, 5529, 5553, 5555, 5561, 5567, 5579, 5593, 5601,
     5603, 5625, 5627, 5633, 5639, 5651, 5661, 5679, 5687, 5689,
     5697, 5715, 5721, 5723, 5745, 5733,  415,    0,    0,    0,
     4221,    0,    0, 4241, 4250,    0,    0, 4276, 4272,    0,
        0,    0,    0, 4295, 4297,    0,    0, 4299, 4336,    0,
        0, 4323, 4352,    0,    0, 4356,    0, 4399, 4434, 4431,
     4470,    0,    0,  414, 5751, 5757, 5759, 5769, 5783, 5791,

     5793, 5805, 5815, 5817, 5823, 5841, 5847, 5849, 5855, 5873,
     5881, 5891, 5899, 5909, 5931, 5923, 5933, 5941, 5959, 5969,
     5977, 5983, 6005, 5991, 6013, 6015, 6039, 6037, 6045, 6051,
      414, 4458,    0, 4457,    0,    0, 4460,    0,    0, 4467,
        0,    0,    0, 4476, 4506, 4520,    0,  412, 6075, 6063,
     6085, 6087, 6093, 6121, 6099, 6129, 6131, 6139, 6153, 6161,
     6175, 6183, 6185, 6193,  406,  348, 4525,    0, 4516,    0,
        0, 4523,  403, 6215, 6207, 6225, 6233, 6239, 6251, 6257,
      396, 4795,    0,    0, 4529,  375, 4996, 6265, 6275, 6299,
      370, 4554,    0,  368, 4559, 6287,  359, 4559,  356, 4566,

      340, 4567,  329, 4577,  324, 4623,  318, 4624,  288, 4648,
      278, 4654,  275, 4680,  252, 4689,  241, 6404,  238,    0,
      234,  196,  183,  176, 6404,    0, 6404, 6373, 6378,  186,
     6383, 6388, 6393, 6398
    } ;

static const flex_int16_t yy_def[1235] =
    {   0,
     1227,    1, 1228, 1228, 1227,    5, 1227, 1227, 1227, 1227,
     1227, 1229, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1227, 1231, 1227, 1232, 1232, 1227,
     1232, 1233, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1234, 1234,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1232, 1227, 1227, 1229, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1227,
     1231, 1227, 1232, 1232, 1232, 1233, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   69,   62,   62,
       69,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62, 1232, 1227, 1227,
     1227, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1232, 1232, 1232,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1227, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1232,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1227, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1232,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1227, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1232,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1227, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1232,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1227, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1232,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1227, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1232,   62,   62,   62,   62,   62,   62,   62,
     1227, 1227, 1230, 1230, 1230, 1232, 1232,   62,   62,   62,
     1227, 1227, 1230, 1232, 1232,   62, 1227, 1227, 1232, 1232,

     1227, 1227, 1232, 1232, 1227, 1227, 1232, 1232, 1227, 1227,
     1232, 1232, 1227, 1227, 1232, 1232, 1227, 1227, 1232, 1232,
     1227, 1232, 1227, 1232, 1227, 1232,    0, 1227, 1227, 1227,
     1227, 1227, 1227, 1227
    } ;

static const flex_int16_t yy_nxt[6481] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  184,   86,  106,  108,  137,  101,
       98,  102,  138, 1226,  109,  103,  104,  179,   86,   86,

     1225,  110,  107,  112,  111, 1224,  127,  113,   99,  105,
      100,  114,  128,  106,  108,  137,  101,  115,  102,  138,
      116,  109,  103,  104,  179,  117,  282,  118,  110,  107,
      112,  111,  119,  127,  113,  177,  178,  120,  114,  128,
      283,  139,  129, 1223,  115,  140,  187,  116,  192,  193,
      130,  141,  117,  282,  118, 1222,  131,  188, 1221,  119,
       86,   86,  177,  178,  120,  121, 1219,  283,  139,  129,
      145,  142,  140,  122,  288,  143,  123,  130,  141,  124,
      132,  144,  125,  131,  146,  126,  133,  134,  135, 1217,
      147,  148,  121,  136, 1215,  156,  289,  145,  142,  157,

      122,  288,  143,  123, 1213,  158,  124,  132,  144,  125,
      153,  146,  126,  133,  134,  135,  149,  147,  148,  293,
      136,  154,  156,  289,  150,  296,  157,  155,  151,  294,
      312,  152,  158,  172, 1211,  173,  295,  153,  174,  175,
     1209,  313, 1207,  149,  184,   86,  293,  176,  154, 1182,
     1182,  150,  296, 1205,  155,  151,  294,  312,  152,  159,
      172,  160,  173,  295,  161,  174,  175,  162,  313,  163,
     1203,  164,  165, 1201,  176,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189, 1199,  159, 1197,  160,  227,
     1194,  161,  286,  196,  162,  287,  163,  228,  164,  165,

      166,  284,  301,  229,  167,  303,  314,  168,  169,  285,
      304, 1191,  302,  196,  170, 1186,  227,  171, 1181,  286,
      196, 1173,  287, 1165,  228, 1148, 1131,  166,  284,  301,
      229,  167,  303,  314,  168,  169,  285,  304,  236,  302,
      196,  170,  196, 1094,  171,  190,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  183,  183,  196,  183,
      183,  183,  183,  183,  183,  236,  196, 1057,  992,  196,
      196,  315,  927,  225,  196,  183,  183,  183,  196,  226,
      316,  197,  322,  198,  235,  196,  196,  310,  311,  199,
      323,  200,  838,  196,  196,  201,  202,  196,  315,  196,

      225,  196,  324,  196,  749,  196,  226,  316,  197,  322,
      198,  235,  633,  196,  310,  311,  199,  323,  200,  196,
      325,  196,  201,  202,  517,  399,  196,  398,  280,  324,
      196,  183,  183,  183,  279,  183,  183,  183,  183,  183,
      183,  326,  327,  278,  237,  240,  196,  325,  238,  241,
      195,  183,  183,  183,  239,  242,  194,  254,  203,  183,
      185,  255,  204,  182,  196,  196,  273,  256,  326,  327,
      196,  237,  240,  328,  274,  238,  241,  196,  205,  329,
      180,  239,  242,  196,  254,  203,  275,  276,  255,  204,
      196,  196,  196,  273,  256,   97,  330,  196,   96,  331,

      328,  274,  332,  196,  196,  205,  329,  183,  206,  333,
      196,  334,  196,  275,  276,  207,  196,  196,   87,  335,
      277,  340,  208,  330,  196,  209,  331,  341,  342,  332,
      196, 1227,  196,   47,   47,  206,  333, 1227,  334,  196,
      196, 1227,  207,  196,  290,  291,  335,  277,  340,  208,
     1227,  196,  209,  343,  341,  342,  349, 1227,  292,  196,
      210,  297,  298,  299,  211,  300,  336,  196,  212,  350,
      351,  290,  291,  344,  213,  345,  337,  214,  352,  355,
      343,  338,  339,  349,  196,  292,  356,  210,  297,  298,
      299,  211,  300,  336, 1227,  212,  350,  351, 1227, 1227,

      344,  213,  345,  337,  214,  352,  355,  353,  338,  339,
      354,  196,  196,  356,  357,  358,  196,  359,  305,  215,
      306,  216, 1227,  307, 1227,  346,  217,  347, 1227,  308,
      360,  218,  196, 1227,  353, 1227,  309,  354,  348,  196,
      361,  357,  358,  196,  359,  305,  215,  306,  216,  317,
      307,  318,  346,  217,  347,  319,  308,  360,  218,  196,
      219, 1227,  320,  309,  196,  348,  321,  361,  220,  362,
      364,  221,  367,  363,  222,  368,  317,  223,  318,  369,
      224, 1227,  319,  365,  196, 1227, 1227,  219,  366,  320,
     1227,  196, 1227,  321, 1227,  220,  362,  364,  221,  367,

      363,  222,  368,  375,  223, 1227,  369,  224,  370,  373,
      365,  196,  196,  230,  376,  366,  196,  371,  377,  231,
      232,  233,  378,  374,  379,  372,  234,  380,  382,  383,
      375,  384,  196, 1227,  389,  370,  373, 1227,  381,  196,
      230,  376,  385,  196,  371,  377,  231,  232,  233,  378,
      374,  379,  372,  234,  380,  382,  383, 1227,  384,  196,
      243,  389,  386,  387,  196,  381,  388,  390,  196,  385,
      391,  395,  396,  397,  244,  393,  392,  518,  519, 1227,
      245,  246,  520, 1227,  196, 1227, 1227,  243,  394,  386,
      387,  196,  521,  388,  390,  196,  522,  391,  395,  396,

      397,  244,  393,  392,  518,  519,  196,  245,  246,  520,
      196,  196,  196,  247,  523,  394,  196,  401,  196,  521,
     1227,  248,  196,  522,  524,  249,  196,  196,  250,  525,
      526,  196,  196,  196,  530, 1227, 1227,  196,  196,  196,
      247,  523,  402,  196,  401,  196,  531,  196,  248,  196,
     1227,  524,  249,  196,  196,  250,  525,  526,  196,  196,
      251,  530,  196,  196,  196,  196,  196,  196,  196,  402,
      403,  252,  405,  531,  196,  406,  196,  253,  404,  532,
      196, 1227,  196,  196,  196, 1227,  533,  251,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  403,  252,  405,

      534,  407,  406,  196,  253,  404,  532,  196,  196,  196,
      196,  196,  257,  533,  258,  196,  535,  259,  196,  196,
      260,  536,  261,  196,  262,  263, 1227,  534,  407, 1227,
      537,  408,  538,  196,  196,  196,  196,  196,  412,  257,
      196,  258, 1227,  535,  259,  196,  539,  260,  536,  261,
      540,  262,  263,  196,  541, 1227,  196,  537,  408,  538,
      196,  196,  264,  196,  196,  412,  265,  196,  196,  266,
      267,  544,  196,  539,  420,  413,  268,  540,  196,  269,
      196,  541,  414,  196,  421, 1227,  196, 1227,  196,  264,
      545, 1227,  546,  265,  196,  196,  266,  267,  544,  196,

      415,  420,  413,  268,  196,  196,  269, 1227,  196,  414,
      547,  421,  196,  196,  196,  196,  196,  545,  196,  546,
      548,  196,  432,  270,  196,  271,  549,  415,  272,  550,
      551,  196,  196,  552,  196,  196, 1227,  547, 1227,  196,
     1227,  196, 1227,  196, 1227,  196, 1227,  548, 1227,  432,
      270,  196,  271,  549, 1227,  272,  550,  551, 1227,  196,
      552,  196,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,   92,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  190,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  196,  409,  410,  196,  196, 1227,
     1227,  196,  553,  554, 1227,  435,  196,  196, 1227,  411,
      196,  196,  422,  555,  196, 1227,  556,  423, 1227,  429,
      430,  196,  409,  410,  196,  196,  196,  196,  196,  553,
      554,  196,  435,  196,  196,  196,  411,  196,  196,  422,
      555,  196,  196,  556,  423,  433,  429,  430,  416,  417,
      418,  196,  419,  196,  196,  196, 1227, 1227,  196, 1227,
     1227, 1227,  196, 1227,  527,  557,  528, 1227, 1227,  196,

      558, 1227,  433, 1227, 1227,  416,  417,  418,  196,  419,
      196,  529,  196,  424,  196,  425,  196,  441,  426,  559,
      196,  527,  557,  528,  427,  196,  196,  558,  434,  196,
      196,  428,  431,  196, 1227, 1227,  196,  196,  529, 1227,
      424,  196,  425,  196,  441,  426,  559,  196, 1227,  196,
     1227,  427,  196,  196, 1227,  434,  196,  196,  428,  431,
      196,  196,  196,  196, 1227,  196,  196, 1227,  442,  542,
     1227,  560, 1227,  561,  562,  444,  196,  436,  563,  437,
     1227,  196,  196,  438,  543, 1227,  564,  196,  196,  196,
      439,  196,  196,  196,  440,  442,  542,  443,  560,  196,

      561,  562,  444,  565,  436,  563,  437,  196,  196,  196,
      438,  543,  196,  564,  196,  566,  196,  439,  196, 1227,
     1227,  440,  445,  567,  443,  568,  196,  569,  570, 1227,
      565,  196,  196,  571,  196,  196,  196,  196,  446,  196,
      196,  196,  566,  196, 1227, 1227,  447,  448, 1227,  445,
      567,  196,  568,  572,  569,  570,  196,  196,  196,  196,
      571, 1227,  196,  196,  196,  446,  196,  196,  196, 1227,
      196,  196,  196,  447,  448,  196,  196,  573,  196,  575,
      572,  451,  452,  196,  196,  449,  196,  574,  450, 1227,
      196,  196,  196,  196,  196,  576,  196,  196,  196,  196,

      453, 1227,  196,  196,  573, 1227,  575, 1227,  451,  452,
      196,  577,  449,  196,  574,  450,  196,  196,  196,  196,
      196,  196,  576,  196,  196,  196,  578,  453,  196,  196,
      579,  454,  460,  580,  459,  583,  584,  196,  577,  581,
      196, 1227, 1227,  196,  585,  196, 1227,  196,  196,  582,
      196,  196,  196,  578,  196,  196,  196,  579,  454,  460,
      580,  459,  583,  584,  586,  587,  581,  196,  455,  196,
      461,  585,  196,  196,  588,  196,  582,  196,  456, 1227,
     1227,  196,  589,  457,  458,  590,  196,  462, 1227,  196,
      196,  586,  587,  591, 1227,  455,  196,  461,  196,  592,

      196,  588,  196,  593,  594,  456,  196,  469, 1227,  589,
      457,  458,  590,  196,  462,  196,  196,  196,  196,  196,
      591,  463,  595,  464,  596,  196,  592, 1227,  597,  196,
      593,  594, 1227,  196,  469,  196, 1227, 1227, 1227,  196,
     1227, 1227,  196,  196, 1227,  196,  196, 1227,  463,  595,
      464,  596,  468,  598,  196,  597,  599, 1227,  196,  196,
     1227,  600,  196,  465,  196,  466,  196,  196,  196,  471,
      196,  196,  601,  470,  196,  602,  467, 1227,  603,  468,
      598,  196, 1227,  599,  196,  196,  196,  196,  600,  196,
      465,  196,  466,  196,  196,  196,  471, 1227,  196,  601,

      470,  196,  602,  467,  472,  603,  196,  473,  604,  196,
      196,  196, 1227,  474,  196,  475,  196, 1227,  605,  196,
      196,  196,  476,  196,  196,  196,  196,  606,  196, 1227,
     1227,  472,  607,  196,  473,  604,  196,  196,  608,  196,
      474,  196,  475,  196,  196,  605,  196,  196,  196,  476,
      196,  196,  196,  196,  606,  196,  477,  196,  478,  607,
      196,  196,  609,  196,  196,  608,  196, 1227,  196, 1227,
      196,  196,  481,  479,  196, 1227,  482,  196,  480,  610,
      196, 1227,  196,  477,  196,  478,  196,  196,  196,  609,
      196,  196,  196, 1227,  196,  611,  486, 1227,  196,  481,

      479, 1227,  196,  482,  196,  480,  610,  196,  196,  196,
     1227, 1227,  196,  196,  196,  487, 1227,  612,  613,  196,
      196,  196,  611,  486,  494,  196, 1227, 1227,  196,  196,
      483, 1227,  614,  196,  196,  196,  488,  196,  196,  196,
      196,  196,  487,  484,  612,  613,  615,  196,  485,  616,
      617,  494, 1227,  196,  196,  196, 1227,  483,  196,  614,
      196,  196,  196,  488,  196,  196, 1227,  196,  622, 1227,
      484,  496, 1227,  615,  623,  485,  616,  617,  196,  492,
      196,  196,  489,  196,  196,  196, 1227,  196,  196,  196,
     1227,  490,  495,  493, 1227,  622,  196, 1227,  496,  491,

      196,  623, 1227,  196,  196,  196,  492, 1227,  501,  489,
      196,  196,  196,  497,  196,  196,  196,  196,  490,  495,
      493,  196,  498,  196,  618,  196,  491,  196,  196,  196,
      196,  196, 1227,  619,  196,  501, 1227,  196,  196,  196,
      497,  624,  499,  196,  196,  196,  625,  626,  196,  498,
      627,  618,  196,  500,  196,  196,  196, 1227,  196,  196,
      619,  196,  196,  196,  196,  196,  502,  504,  624,  499,
      503,  196,  196,  625,  626,  196, 1227,  627,  196,  196,
      500,  196,  620,  628,  621,  196,  196,  505,  196,  196,
      196,  196,  506,  502,  504,  507, 1227,  503,  196,  508,

      196, 1227,  196,  196,  196,  196,  196,  509,  196,  620,
      628,  621,  629,  631,  505,  196,  630, 1227,  196,  506,
      196,  632,  507,  196,  512,  196,  508,  196,  196,  196,
      196,  196,  510,  750,  509,  196, 1227,  513,  511,  629,
      631,  751,  514,  630,  196,  196,  196,  196,  632,  752,
      196,  512,  196,  516,  196,  196,  196,  196,  196,  510,
      750,  196,  196,  196,  513,  511,  753,  196,  751,  514,
      754,  196,  196,  196,  196,  755,  752,  196,  515,  756,
      516,  196,  757,  196,  196,  196, 1227, 1227,  196,  196,
      196, 1227, 1227,  753,  196, 1227, 1227,  754, 1227, 1227,

     1227,  196,  755, 1227,  196,  515,  756, 1227, 1227,  757,
      196,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  634,  196,  635,  196,  196,  196,  196,  196, 1227,
     1227,  636,  758, 1227, 1227, 1227,  196, 1227, 1227, 1227,
      196,  196,  196,  196,  196, 1227,  759, 1227,  634,  196,
      635,  196,  196,  196,  196,  196,  196,  637,  636,  758,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  638,  759,  196,  760,  761, 1227,  639, 1227,
      196,  196,  196,  196,  637, 1227,  196,  196,  196,  196,

      196,  196,  196,  196,  196, 1227,  196, 1227,  762,  638,
      641,  196,  760,  761,  640,  639,  196,  196,  196,  196,
     1227,  763,  643,  196,  644,  196,  196,  196,  196,  196,
      764,  196,  642,  196,  196,  762, 1227,  641,  196,  645,
     1227,  640,  196,  196,  196,  196,  196,  646,  763,  643,
      765,  644,  196,  196,  196,  196,  196,  764,  647,  642,
      196,  196,  196,  196,  196,  196,  645,  196,  648,  196,
     1227,  196,  196,  196,  646, 1227,  766,  765,  649,  767,
      196,  196,  196,  196,  651,  647,  196,  196,  196,  196,
      196,  196,  196, 1227,  196,  648,  768,  653, 1227, 1227,

      196,  196,  650,  766,  196,  649,  767,  196,  196,  196,
      196,  651,  196,  196,  652,  196,  196,  196,  196,  196,
      196,  769,  196,  768,  653,  655,  654,  196,  196,  650,
      196,  196,  196, 1227,  656,  196,  770, 1227,  196,  196,
      771,  652,  772,  196,  196,  196,  773,  196,  769,  196,
      196, 1227,  655,  654,  657,  774,  658,  196,  196,  196,
      196,  656,  196,  770,  660,  196,  196,  771,  661,  772,
      196,  659,  196,  773, 1227,  775,  196,  196,  196, 1227,
     1227,  657,  774,  658,  776,  196,  196,  196,  196,  196,
     1227,  660,  196,  196, 1227,  661,  196,  196,  659,  196,

      777,  663,  775,  196,  196,  196,  196,  662,  196, 1227,
      196,  776,  196,  196, 1227,  196,  665,  664,  196,  196,
      196,  667,  196,  196,  196,  196,  196,  777,  663, 1227,
      778,  196,  779,  196,  662,  196,  196,  196,  196,  196,
      780,  196,  666,  665,  664,  196,  196,  196,  667,  196,
      196,  196,  196,  196,  668, 1227,  196,  778,  196,  779,
      196, 1227,  196,  196,  781,  196,  196,  780,  196,  666,
     1227, 1227,  669,  196,  782,  196,  196,  196,  196,  196,
      783,  668,  670,  196,  196,  196,  784,  196,  196,  196,
      785,  781,  673,  196,  196,  196,  196,  671,  196,  669,

      786,  782,  196,  196,  196,  196,  196,  783,  672,  670,
     1227,  196,  196,  784,  196,  196,  787,  785, 1227,  673,
     1227,  196,  196,  196,  671,  196,  674,  786,  196,  196,
      196,  196,  196,  196,  196,  672,  675,  676,  196,  196,
     1227,  196,  196,  787,  678,  677,  788,  196,  196,  196,
      196,  196,  789,  674,  790,  196,  196,  196,  196,  196,
      196,  196,  791,  675,  676,  196,  196,  196,  792,  196,
      196,  678,  677,  788,  196,  196,  196,  196,  196,  789,
      196,  790,  679,  680,  196,  196,  196,  793,  196,  791,
      795, 1227,  681,  196,  196,  792,  796,  196,  794, 1227,

      196,  196,  797, 1227, 1227,  196,  798,  196,  196,  679,
      680,  196,  799,  196,  793,  196,  682,  795,  196,  681,
      196,  196,  196,  796,  196,  794,  684,  196,  196,  797,
      686,  683,  196,  798,  196,  196,  802, 1227,  196,  799,
      196, 1227,  196,  682,  803,  196,  196,  196,  196,  196,
      196,  196,  685,  684,  804,  687,  688,  686,  683,  196,
      196,  196,  196,  802,  689,  196, 1227,  196,  196,  196,
     1227,  803, 1227,  196,  690,  196,  196,  196,  805,  685,
      806,  804,  687,  688,  196, 1227,  196,  196,  196,  196,
      196,  689,  196,  196,  196,  196,  807,  196,  808,  692,

     1227,  690,  196,  196,  691,  805, 1227,  806,  196,  809,
      196,  196,  196,  196,  694,  196,  196,  196,  196,  196,
      196,  196, 1227,  807,  196,  808,  692,  693,  810,  196,
      811,  691,  196,  695,  196,  196,  809,  196,  812,  196,
      196,  694,  813,  196,  196,  196,  696,  196,  196,  196,
     1227,  196, 1227,  814,  693,  810,  196,  811,  697,  196,
      695,  196,  196,  815,  196,  812,  196,  196,  698,  813,
     1227,  196, 1227,  696,  196,  196,  196,  196,  196,  699,
      814,  196,  196,  196,  816,  697, 1227,  196, 1227,  196,
      815,  196, 1227,  196,  196,  698,  196,  196,  700,  701,

      196, 1227,  817,  196,  196, 1227,  699,  818,  196,  196,
      196,  816, 1227,  196,  196,  196,  196,  196, 1227,  196,
      800,  801,  819,  196,  196,  700,  701,  196,  702,  817,
      196,  703,  196,  196,  818,  196,  196,  704, 1227,  705,
      196,  196,  196,  196,  196,  196,  196,  800,  801,  819,
      708, 1227,  196,  196,  196,  702,  820,  196,  703,  196,
      196,  196,  196,  196,  704,  196,  705,  707,  196,  196,
      196,  709,  196,  196,  821,  196, 1227,  708,  706,  196,
      196,  196,  710,  820,  196,  196,  196, 1227,  196, 1227,
      196,  196,  196, 1227,  707,  196,  196,  196,  709,  196,

      196,  821,  196,  196,  711,  706,  196,  196, 1227,  710,
      822, 1227,  196,  196,  712,  196,  196,  196,  196,  823,
      196, 1227,  196,  196,  713,  196,  196, 1227, 1227,  196,
      196,  711,  714,  196,  196,  196,  196,  822,  717,  196,
      715,  712,  196,  196,  196,  196,  823,  196,  196,  824,
      196,  713,  196,  196,  196,  196,  196,  196,  196,  714,
      825,  718,  196,  196,  196,  717,  196,  715,  716, 1227,
      826,  196,  196,  196,  196,  196,  824, 1227,  827,  719,
      196,  196,  196,  196,  196,  196,  828,  825,  718,  721,
     1227,  196,  196,  196,  196,  716,  196,  826,  196,  196,

      196,  196,  720,  829,  196,  827,  719,  196,  196,  196,
      196,  196,  196,  828,  196,  830,  721,  722,  724,  196,
      196,  196,  831,  196,  196,  196,  196,  196,  196,  720,
      829,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      725,  196,  830,  196,  722,  724,  723,  196,  196,  831,
     1227,  196,  832,  196,  196,  196, 1227,  196,  726,  196,
      196,  196,  196,  196,  196,  833,  196,  725, 1227,  728,
      196,  834,  727,  723,  196,  196, 1227,  196,  835,  832,
      196, 1227,  196,  196,  196,  726,  836,  196,  196,  196,
      196,  196,  833,  196,  729,  196,  728,  837,  834,  727,

      928, 1227, 1227,  196,  196,  835,  730,  929,  196,  196,
      196,  196,  196,  836,  196,  930,  732,  731,  196, 1227,
      196,  729,  196, 1227,  837,  196, 1227,  928,  196,  196,
      196, 1227,  931,  730,  929,  196,  196,  196,  196,  196,
      932,  196,  930,  732,  731,  196,  733,  196, 1227,  734,
      196, 1227,  196,  196,  196,  196,  196,  196,  735,  931,
      736, 1227,  737,  196,  196,  933,  934,  932,  196,  196,
      196, 1227,  196,  733,  935,  739,  734,  196,  196,  196,
      196,  196,  196,  196,  196,  735, 1227,  736,  738,  737,
     1227,  196,  933,  934,  936,  196,  196,  196,  196,  196,

      740,  935,  739,  196, 1227,  196,  196,  196,  937,  196,
      196,  196,  938,  196,  742,  738,  196,  196,  196,  741,
      196,  936,  196,  196, 1227,  196,  196,  740, 1227,  939,
      196,  743,  940,  196,  196,  937,  196, 1227,  196,  938,
      196,  742, 1227,  196,  196,  941,  741,  196,  196,  196,
      196,  196,  196,  196,  747,  196,  939,  745,  743,  940,
      196,  746,  942,  196,  744,  943, 1227,  944,  196,  196,
      196,  196,  941,  196,  196,  196,  196,  196,  196,  196,
      196,  747,  196,  748,  745, 1227,  839, 1227,  746,  942,
      196,  744,  943,  196,  944,  196,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  196, 1227,  945,  196,
      748,  196,  840,  839,  196,  196, 1227,  196,  196,  196,
      196,  946,  841,  844,  843,  842,  196,  947, 1227,  196,
      196,  196,  196,  196,  196,  945,  196, 1227,  196,  840,
      845,  196,  196,  196,  196,  196,  196,  196,  946,  841,
      844,  843,  842,  196,  947,  196,  948,  196,  196,  196,
      196,  196,  846,  196,  847,  196, 1227,  845,  196,  196,
      196,  196,  196,  196,  196,  196, 1227,  949,  950, 1227,
      196,  951,  196,  948,  196,  196,  196,  196,  196,  846,
      196,  847,  196,  848,  196,  196,  196,  196,  850,  196,

      196,  196,  196,  196,  949,  950,  196,  196,  951,  196,
      196,  849,  196,  196,  196,  196,  952,  196,  953,  851,
      848,  196, 1227,  196,  196,  850,  196,  196,  196,  196,
      196,  196,  954,  196,  196,  196,  196,  196,  849,  196,
      196,  196,  852,  952,  196,  953,  851,  196,  196,  853,
      196,  955,  196,  196,  196,  196,  196,  196,  196,  954,
      196,  196,  196,  854,  196,  956,  196,  855,  196,  852,
     1227, 1227, 1227,  957,  196,  196,  853,  196,  955,  196,
      196,  196,  196,  958,  196,  196, 1227,  196,  196,  856,
      854,  196,  956,  196,  855,  196, 1227,  196,  859,  196,

      957,  196,  196,  196,  196,  961,  196,  196,  196,  857,
      958,  962,  196,  196,  858,  959,  856, 1227,  960,  196,
      196,  861,  196,  196,  196,  859,  196,  196,  196,  196,
      196,  196,  961,  196, 1227,  196,  857,  963,  962,  964,
      196,  858,  959,  196,  860,  960,  196,  965,  861,  196,
      196,  196,  196,  196,  196,  196,  862,  196,  196,  196,
      863,  196,  196, 1227,  963,  196,  964, 1227, 1227, 1227,
      196,  860,  196,  196,  965,  196,  966,  967,  196,  196,
      196,  196,  196,  862,  196,  196,  196,  863,  196,  196,
      196,  196,  196,  968,  196,  196,  864, 1227,  969,  196,

      196,  865,  196,  966,  967,  196,  970,  866,  196,  196,
      196,  196,  196,  196, 1227,  971,  196,  196,  196, 1227,
      968,  196,  196,  864,  867,  969,  870,  972,  865,  196,
      196,  868,  196,  970,  866,  196,  196,  196,  196,  196,
      196,  869,  971,  196,  196,  196,  196,  196,  196,  196,
     1227,  867, 1227,  870,  972,  196,  196,  196,  868,  871,
      973,  974,  196,  196,  196,  196,  196, 1227,  869,  975,
      196,  196,  196,  196,  196,  196,  196,  872, 1227,  196,
      196,  196,  196,  196,  196,  196,  871,  973,  974,  873,
      196,  196,  196,  196,  196,  976,  975,  196,  196,  196,

      196,  196, 1227, 1227,  872,  874,  196,  196,  196,  977,
      196,  196,  196,  196,  196,  196,  873, 1227,  978,  196,
      196,  196,  976, 1227,  196,  196,  196,  196,  196,  196,
      196, 1227,  874,  196,  196,  196,  977, 1227,  875,  196,
      196,  196,  196,  196,  877,  978,  196, 1227,  196,  196,
      196,  979,  980,  876,  196, 1227,  196,  196,  196,  196,
      196,  196,  196,  981,  196,  875,  196,  878,  196,  196,
      196,  877,  196,  196,  196,  196,  196,  196,  979,  980,
      876,  196,  880, 1227,  982,  196,  196,  879,  196,  196,
      981,  196,  983,  196,  878,  196,  196,  196,  196,  196,

      196,  196,  196, 1227,  984, 1227,  881,  985,  196,  880,
      882,  982,  196,  196,  879,  196,  196,  986,  196,  983,
      196,  883,  196,  196,  196,  196,  196,  196,  196,  196,
      884,  984,  196,  881,  985,  196,  196,  882, 1227,  196,
      196, 1227,  196,  196,  986,  196, 1227,  196,  883,  196,
      196,  196,  196,  196,  196,  196,  196,  884, 1227,  196,
      196,  196, 1227,  196,  887,  196, 1227,  196,  196,  196,
      196,  885,  987,  196,  196, 1227,  196,  196,  196,  196,
      886,  196,  196,  196,  196,  888,  196,  196,  196,  196,
      988,  887,  196,  196,  196,  196, 1227, 1227,  885,  987,

      196,  989,  196,  196,  196,  196,  990,  886,  196,  196,
      196,  196,  888,  196,  196,  196,  196,  988,  891,  196,
      196,  991, 1227,  196,  889,  890, 1227,  196,  989,  196,
      196, 1058,  196,  990, 1227,  196,  892,  196, 1227, 1059,
      196,  196,  196,  196,  893,  891,  196, 1060,  991,  196,
      196,  889,  890,  196,  196, 1061, 1062,  196, 1058,  894,
      196,  196,  196,  892,  895,  196, 1059,  196,  196,  196,
      196,  893, 1063, 1064, 1060, 1227,  196, 1065, 1227, 1227,
      196,  196, 1061, 1062,  196,  196,  894,  196,  196,  196,
      196,  895,  196,  196,  196,  196,  196,  196,  896, 1063,

     1064,  898,  196,  897, 1065,  196,  196, 1227,  196, 1066,
      196,  196,  196,  196,  196,  899,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  896, 1227,  900,  898,  196,
      897,  196,  196,  196,  196,  196, 1066,  196, 1067,  196,
      196,  196,  899,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  901,  196,  900, 1068,  902,  196,  196, 1069,
     1070,  196,  196,  196,  196, 1067,  196, 1071,  903,  904,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  901,
      196,  196, 1068,  902,  196,  905, 1069, 1070, 1072,  196,
      196,  196,  196,  196, 1071,  903,  904,  196,  906,  196,

      196, 1073,  908,  196,  196,  907,  196,  196,  196,  196,
      196,  196,  905, 1227,  196, 1072,  196, 1227, 1074,  196,
      196, 1227,  196, 1075,  196,  906, 1076,  196, 1073,  908,
      196,  196,  907,  196,  196,  196,  196,  196,  196,  196,
      910,  196, 1077,  196,  196, 1074,  909, 1078,  196,  196,
     1075,  196,  911, 1076,  196, 1079, 1080,  196,  196,  196,
      196,  912,  196, 1227, 1081,  196,  196,  910,  196, 1077,
      196,  196, 1082,  909, 1078,  196, 1083, 1084,  196,  911,
      196,  196, 1079, 1080,  196,  196,  196,  196,  912,  196,
      913, 1081,  196,  196, 1085,  196, 1086,  196, 1087, 1082,

      196, 1227, 1227, 1083, 1084,  196,  196,  196,  196, 1088,
      196,  196,  196,  196,  196,  196,  196,  913,  196,  196,
      196, 1085, 1089, 1086,  196, 1087,  196,  196,  914,  915,
     1090, 1091,  196,  196,  196,  196, 1088,  196, 1227, 1092,
      196,  196,  196, 1227, 1093,  196,  196, 1132,  916, 1089,
      196, 1227, 1227,  196,  196,  914,  915, 1090, 1091,  196,
      196,  196,  196,  196,  196,  919, 1092, 1133,  917,  196,
      196, 1093, 1134,  196, 1132,  916,  918,  196,  196,  196,
      196,  196,  196, 1227,  922, 1227,  196,  196,  196,  196,
      196,  196,  919,  920, 1133,  917,  196,  196,  196, 1134,

      196, 1227, 1135,  918,  196,  196,  196,  196,  196,  196,
      921,  922,  196, 1136,  196,  196,  196,  923,  196, 1137,
      920, 1227,  196,  196, 1227,  196,  196,  196,  196, 1135,
     1138,  196,  196, 1227,  196,  196,  196,  921, 1139,  196,
     1136,  196,  196,  196,  923,  196, 1137,  925,  924,  196,
      196,  196,  196,  196,  196,  196,  196, 1138, 1227,  196,
      196,  196, 1140,  196, 1141, 1139, 1227,  196,  196,  196,
      196, 1227,  196,  196,  925,  924,  196,  196,  196,  196,
     1227,  196,  926,  196, 1142,  196,  196,  196,  196, 1140,
      196, 1141, 1227,  196,  196,  196, 1227, 1143,  196,  196,

      196,  196,  196,  196,  196, 1227,  196,  993,  196,  926,
      994, 1142,  196,  196,  196,  196, 1227,  196,  196,  196,
      196, 1227,  995,  196, 1143,  196,  196, 1227,  196,  196,
      196,  196,  196,  196,  993,  196,  196,  994, 1144,  196,
      999,  196,  196,  997,  196,  196,  196,  996,  196,  995,
      196,  196,  196,  196,  998, 1227,  196,  196,  196,  196,
      196, 1227,  196,  196,  196, 1144,  196,  999, 1145,  196,
      997,  196, 1146,  196,  996,  196,  196,  196,  196,  196,
     1227,  998,  196,  196, 1227, 1002,  196,  196, 1000,  196,
      196,  196, 1001,  196,  196, 1145, 1147, 1166, 1167, 1146,

      196, 1168,  196,  196,  196,  196, 1169,  196, 1227,  196,
      196, 1003, 1002,  196, 1227, 1000,  196,  196, 1227, 1001,
      196,  196, 1170, 1147, 1166, 1167,  196,  196, 1168,  196,
      196, 1005,  196, 1169,  196,  196, 1004,  196, 1003,  196,
      196, 1007, 1227, 1171,  196,  196,  196, 1006, 1227, 1170,
     1172, 1183, 1227,  196,  196,  196, 1184,  196, 1005, 1185,
      196,  196,  196, 1004, 1193,  196,  196,  196, 1007,  196,
     1171,  196,  196,  196, 1006,  196, 1198, 1172, 1183, 1008,
     1011, 1200,  196, 1184,  196,  196, 1185,  196,  196,  196,
      196, 1193,  196,  196,  196,  196,  196, 1227, 1202, 1010,

      196, 1227,  196, 1198, 1009, 1204, 1008, 1011, 1200,  196,
      196,  196,  196, 1206, 1012,  196,  196,  196,  196,  196,
      196,  196,  196, 1208,  196, 1202, 1010,  196,  196,  196,
     1013, 1009, 1204,  196,  196,  196,  196,  196, 1227, 1014,
     1206, 1012,  196, 1015,  196,  196,  196, 1227,  196,  196,
     1208,  196, 1016, 1210, 1212,  196,  196, 1013, 1227, 1227,
      196,  196,  196, 1017, 1227,  196, 1014, 1227,  196,  196,
     1015,  196, 1227,  196,  196,  196,  196,  196,  196, 1016,
     1210, 1212,  196, 1214, 1227,  196,  196,  196, 1227, 1216,
     1017,  196,  196,  196,  196,  196,  196, 1018, 1227,  196,

      196,  196,  196,  196,  196,  196, 1019,  196, 1218,  196,
     1214,  196,  196,  196,  196,  196, 1216, 1220,  196,  196,
      196,  196, 1227,  196, 1018, 1020,  196,  196,  196,  196,
      196,  196,  196, 1019,  196, 1218,  196,  196,  196, 1227,
      196,  196,  196,  196, 1220,  196,  196, 1227,  196,  196,
      196, 1021, 1020, 1227,  196,  196,  196,  196,  196,  196,
     1227, 1227,  196,  196,  196,  196,  196,  196,  196, 1227,
      196, 1227,  196, 1227, 1227,  196,  196, 1022, 1021, 1227,
     1227, 1023,  196,  196,  196,  196,  196,  196, 1227,  196,
      196,  196,  196,  196, 1026,  196, 1182, 1182, 1227,  196,

     1024,  196, 1227, 1025, 1022, 1227,  196,  196, 1023,  196,
     1227, 1227,  196,  196,  196,  196,  196,  196,  196,  196,
      196, 1026,  196,  196, 1027,  196,  196, 1024,  196,  196,
     1025, 1227, 1227,  196,  196, 1227,  196,  196, 1192,  196,
     1028,  196,  196,  196,  196,  196,  196,  196, 1227, 1227,
      196, 1027,  196, 1227, 1030,  196,  196,  196,  196,  196,
      196, 1227,  196,  196,  196, 1192,  196, 1028,  196, 1029,
     1227,  196,  196,  196, 1227,  196, 1227,  196,  196,  196,
     1227, 1030,  196,  196,  196,  196,  196,  196, 1031,  196,
     1227,  196, 1227,  196, 1032,  196, 1029,  196, 1227,  196,

      196,  196,  196,  196,  196,  196,  196,  196, 1227, 1034,
      196,  196, 1033,  196, 1227, 1031, 1227,  196,  196, 1227,
      196, 1032,  196,  196,  196, 1227,  196, 1227,  196,  196,
      196, 1037, 1227,  196,  196,  196, 1034,  196,  196, 1033,
      196,  196, 1227,  196,  196,  196, 1035, 1038, 1227, 1227,
      196,  196, 1227,  196, 1036,  196,  196, 1227, 1037,  196,
      196,  196,  196,  196,  196, 1227, 1227, 1227,  196, 1227,
      196, 1227,  196, 1035, 1038,  196, 1227, 1227,  196, 1039,
      196, 1036,  196,  196, 1227, 1040,  196,  196,  196,  196,
      196, 1227, 1227,  196, 1041,  196, 1227, 1187, 1182,  196,

     1227, 1227,  196,  196,  196, 1227, 1039,  196,  196,  196,
      196,  196, 1040,  196,  196,  196,  196, 1043, 1227, 1042,
      196, 1041,  196, 1227,  196, 1227,  196,  196, 1227, 1227,
      196,  196, 1227,  196,  196,  196,  196, 1227,  196, 1195,
      196, 1227,  196, 1227, 1043, 1045, 1042, 1044,  196,  196,
     1227,  196,  196,  196,  196, 1227, 1227,  196, 1227, 1227,
      196,  196, 1227, 1227, 1227, 1227, 1195, 1227,  196,  196,
     1227, 1046, 1045, 1227, 1044,  196,  196,  196, 1227,  196,
      196,  196,  196, 1049,  196,  196,  196,  196,  196, 1227,
     1227,  196, 1227, 1227, 1047,  196,  196, 1048, 1046, 1227,

     1227,  196,  196, 1227,  196, 1227, 1227,  196,  196,  196,
     1049, 1050,  196,  196,  196,  196,  196, 1227,  196,  196,
      196, 1047, 1227, 1227, 1048, 1227, 1227, 1227,  196,  196,
     1227, 1227, 1227, 1051,  196,  196,  196,  196, 1050, 1227,
     1052,  196,  196,  196, 1227,  196,  196,  196, 1227, 1227,
     1053,  196, 1227,  196,  196,  196, 1227, 1227, 1227, 1227,
     1051,  196,  196,  196,  196,  196, 1227, 1052,  196,  196,
      196,  196,  196, 1227, 1227, 1227, 1227, 1053,  196, 1054,
      196,  196,  196, 1055, 1227,  196, 1227,  196,  196,  196,
     1227,  196,  196,  196, 1227, 1056,  196,  196,  196,  196,

     1227,  196, 1227,  196, 1095,  196, 1054,  196,  196,  196,
     1055, 1227,  196,  196,  196, 1227,  196,  196,  196,  196,
      196,  196, 1056,  196,  196, 1097,  196,  196,  196,  196,
      196, 1095,  196,  196,  196,  196,  196, 1227,  196, 1227,
      196, 1227,  196,  196,  196,  196,  196, 1096,  196, 1227,
      196,  196, 1097,  196,  196, 1227,  196,  196,  196,  196,
      196, 1227,  196,  196, 1227,  196,  196, 1227, 1098,  196,
      196,  196,  196,  196, 1096,  196, 1099,  196, 1100,  196,
      196,  196,  196, 1227,  196,  196,  196, 1227, 1227,  196,
      196,  196, 1227,  196, 1227, 1098, 1227,  196,  196, 1227,

      196, 1227,  196, 1099,  196, 1100,  196,  196,  196,  196,
     1102,  196,  196,  196, 1227, 1101,  196,  196,  196, 1227,
     1103,  196, 1227, 1227,  196,  196,  196,  196, 1105, 1227,
      196,  196,  196,  196,  196,  196, 1104, 1102,  196,  196,
      196,  196, 1101,  196,  196,  196,  196, 1103,  196,  196,
     1227,  196,  196,  196,  196, 1105, 1227,  196,  196,  196,
      196, 1227,  196, 1104, 1106,  196,  196,  196,  196, 1227,
      196,  196,  196,  196, 1227,  196,  196, 1227,  196,  196,
      196, 1107, 1227, 1227,  196,  196,  196,  196, 1227, 1227,
     1227, 1106,  196,  196,  196,  196, 1227,  196,  196,  196,

      196,  196,  196,  196, 1227, 1227,  196,  196, 1107, 1227,
     1227,  196,  196,  196,  196, 1227,  196,  196, 1227,  196,
      196,  196,  196, 1227, 1227, 1108,  196,  196,  196,  196,
      196,  196, 1109,  196,  196,  196,  196,  196,  196, 1227,
     1227, 1227, 1227,  196,  196, 1227,  196,  196,  196,  196,
     1227,  196, 1108,  196,  196, 1227,  196,  196,  196, 1109,
      196,  196,  196,  196,  196,  196,  196, 1111, 1227, 1227,
      196,  196, 1227,  196, 1227,  196,  196, 1227,  196,  196,
      196,  196, 1227, 1227,  196,  196,  196,  196, 1110,  196,
     1227, 1227, 1227,  196, 1111,  196, 1227,  196,  196, 1112,

      196, 1227,  196,  196,  196,  196,  196,  196,  196, 1227,
     1227, 1227,  196,  196,  196, 1110,  196,  196, 1227, 1227,
     1227,  196,  196,  196,  196,  196, 1112, 1227, 1227,  196,
      196,  196,  196, 1227,  196,  196, 1227,  196, 1227, 1113,
     1227, 1227,  196,  196,  196,  196,  196,  196,  196, 1114,
      196,  196,  196, 1115, 1227,  196,  196,  196, 1227,  196,
     1227,  196,  196,  196,  196, 1227, 1113, 1227, 1227,  196,
      196, 1227,  196,  196,  196,  196, 1114,  196, 1227,  196,
     1115, 1117,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196, 1227,  196, 1116, 1227, 1227,  196, 1227,  196,

     1227,  196,  196, 1119,  196,  196,  196, 1118, 1117,  196,
      196, 1227,  196,  196,  196, 1227, 1227, 1120,  196,  196,
      196, 1116, 1227,  196,  196,  196,  196,  196,  196,  196,
     1119,  196,  196,  196, 1118, 1227,  196, 1227, 1227,  196,
      196, 1121, 1227, 1122, 1120, 1227,  196,  196, 1227,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196, 1227, 1123,  196, 1227,  196,  196, 1227, 1121,  196,
     1122,  196, 1124,  196,  196, 1227,  196,  196,  196,  196,
      196,  196,  196, 1125,  196,  196,  196,  196, 1227, 1123,
      196,  196,  196, 1227, 1227, 1227,  196,  196,  196, 1124,

      196, 1126, 1227, 1227,  196,  196,  196,  196,  196,  196,
     1125, 1127,  196,  196,  196,  196, 1227,  196,  196,  196,
     1227, 1227, 1227,  196,  196,  196, 1227,  196, 1126, 1227,
     1128, 1227,  196,  196,  196,  196,  196, 1227, 1127, 1227,
      196,  196,  196,  196,  196,  196,  196,  196, 1227,  196,
      196,  196,  196,  196,  196, 1227, 1227, 1128, 1227,  196,
      196,  196,  196,  196, 1227, 1227, 1130,  196,  196,  196,
      196,  196,  196, 1227,  196,  196,  196,  196,  196,  196,
      196,  196, 1227,  196, 1129,  196,  196,  196,  196,  196,
      196,  196, 1227, 1130,  196, 1149,  196,  196,  196,  196,

     1227, 1227,  196,  196,  196,  196,  196, 1227,  196,  196,
      196, 1129,  196,  196,  196,  196,  196,  196,  196, 1150,
     1227,  196, 1149,  196,  196, 1227,  196, 1151, 1227,  196,
      196,  196,  196, 1227, 1227,  196,  196,  196, 1227,  196,
      196,  196,  196,  196,  196,  196, 1150,  196,  196, 1152,
      196,  196, 1227,  196, 1151, 1227,  196, 1227,  196, 1227,
     1227,  196,  196,  196,  196, 1227,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196, 1152,  196,  196,  196,
      196,  196, 1153, 1227, 1227,  196, 1227,  196,  196, 1227,
      196, 1227, 1227,  196,  196,  196,  196, 1227,  196,  196,

      196,  196,  196,  196,  196, 1154,  196,  196,  196, 1153,
     1227,  196,  196, 1227,  196, 1227, 1227,  196, 1227,  196,
      196,  196,  196, 1227, 1155,  196,  196,  196,  196,  196,
      196, 1227, 1154, 1227,  196,  196, 1227,  196,  196,  196,
     1227, 1227, 1227, 1227,  196,  196,  196, 1227,  196, 1157,
     1227, 1155,  196,  196,  196,  196,  196,  196, 1227,  196,
     1227,  196,  196,  196,  196, 1227,  196,  196, 1227,  196,
     1156,  196,  196, 1227, 1227, 1227, 1157,  196, 1227,  196,
      196, 1227,  196, 1227,  196,  196,  196,  196,  196,  196,
      196, 1227, 1227, 1227,  196,  196,  196, 1156,  196,  196,

     1158, 1159, 1227,  196,  196,  196,  196,  196, 1227,  196,
     1227, 1227,  196,  196,  196,  196,  196,  196, 1227, 1227,
     1227,  196,  196,  196, 1227, 1227,  196, 1158, 1159,  196,
      196,  196,  196, 1227,  196,  196,  196,  196, 1227,  196,
      196,  196,  196,  196,  196,  196, 1160, 1227,  196, 1162,
      196,  196, 1161, 1227, 1227, 1227,  196, 1227,  196,  196,
     1227,  196,  196, 1164,  196,  196,  196,  196,  196,  196,
      196,  196,  196, 1160, 1227,  196, 1162,  196,  196, 1161,
     1163,  196, 1227,  196, 1227,  196,  196, 1227,  196,  196,
     1164,  196,  196,  196,  196, 1227,  196,  196,  196, 1227,

     1227,  196,  196, 1227,  196,  196, 1227, 1163,  196,  196,
      196,  196,  196,  196, 1174,  196,  196,  196,  196,  196,
      196,  196, 1227,  196,  196,  196, 1175, 1227,  196,  196,
     1227,  196,  196,  196, 1227, 1227,  196, 1227,  196,  196,
      196, 1174,  196, 1227,  196,  196,  196,  196,  196, 1227,
      196,  196,  196, 1175, 1227,  196,  196,  196,  196,  196,
      196,  196, 1176, 1227, 1227,  196,  196,  196, 1227,  196,
     1177, 1227,  196, 1227,  196,  196, 1227,  196,  196,  196,
     1227, 1227,  196,  196,  196,  196,  196,  196,  196, 1176,
     1227,  196,  196, 1227,  196, 1227,  196, 1177, 1227,  196,

     1227,  196,  196, 1227,  196,  196,  196,  196, 1227,  196,
      196,  196,  196,  196,  196, 1180, 1187, 1182,  196,  196,
     1179, 1178, 1227,  196, 1227, 1227,  196, 1227,  196,  196,
     1227,  196,  196, 1188,  196, 1227,  196,  196,  196,  196,
      196,  196, 1180, 1227, 1227,  196,  196, 1179, 1178, 1227,
      196,  196, 1227,  196, 1227,  196,  196, 1227,  196,  196,
     1188,  196, 1227,  196,  196,  196,  196, 1227,  196,  196,
     1227,  196,  196, 1189, 1227, 1227, 1227,  196,  196,  196,
      196,  196,  196,  196, 1227,  196,  196,  196,  196, 1227,
      196,  196,  196, 1190, 1227,  196,  196,  196,  196, 1227,

     1189,  196, 1227,  196,  196,  196,  196, 1227,  196, 1227,
      196,  196,  196,  196,  196, 1227, 1227,  196,  196, 1227,
     1190,  196,  196, 1227,  196,  196, 1227, 1227,  196,  196,
      196, 1227,  196,  196, 1196, 1227, 1227, 1227,  196, 1227,
      196, 1227, 1227, 1227,  196,  196, 1227, 1227,  196, 1227,
     1227, 1227,  196, 1227, 1227, 1227,  196, 1227, 1227, 1227,
      196, 1196, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227,  196,   46,   46,   46,   46,   46,   88, 1227,
     1227,   88,   88,  181,  181,  181, 1227,  181,  183, 1227,
      183,  183,  183,  186, 1227,  186,  186,  186,  196, 1227,

      196,  196,  196,    7, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227
    } ;

static const flex_int16_t yy_chk[6481] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   49,   49,   22,   23,   30,   21,
     1230,   21,   31, 1224,   23,   21,   21,   44,   50,   50,

     1223,   23,   22,   24,   23, 1222,   27,   24,   21,   22,
       21,   24,   27,   22,   23,   30,   21,   24,   21,   31,
       24,   23,   21,   21,   44,   25,   99,   25,   23,   22,
       24,   23,   25,   27,   24,   43,   43,   25,   24,   27,
      100,   32,   28, 1221,   24,   32,   55,   24,   58,   58,
       28,   32,   25,   99,   25, 1219,   28,   55, 1217,   25,
       86,   86,   43,   43,   25,   26, 1215,  100,   32,   28,
       34,   33,   32,   26,  103,   33,   26,   28,   32,   26,
       29,   33,   26,   28,   34,   26,   29,   29,   29, 1213,
       34,   34,   26,   29, 1211,   38,  104,   34,   33,   38,

       26,  103,   33,   26, 1209,   38,   26,   29,   33,   26,
       36,   34,   26,   29,   29,   29,   35,   34,   34,  106,
       29,   36,   38,  104,   35,  109,   38,   36,   35,  108,
      115,   35,   38,   41, 1207,   41,  108,   36,   41,   42,
     1205,  116, 1203,   35,  184,  184,  106,   42,   36, 1166,
     1166,   35,  109, 1201,   36,   35,  108,  115,   35,   39,
       41,   39,   41,  108,   39,   41,   42,   39,  116,   39,
     1199,   39,   39, 1197,   42,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56, 1194,   39, 1191,   39,   68,
     1186,   39,  102,   68,   39,  102,   39,   68,   39,   39,

       40,  101,  111,   68,   40,  112,  117,   40,   40,  101,
      112, 1181,  111,   68,   40, 1173,   68,   40, 1165,  102,
       68, 1148,  102, 1131,   68, 1094, 1057,   40,  101,  111,
       68,   40,  112,  117,   40,   40,  101,  112,   71,  111,
       68,   40,   71,  992,   40,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   61,   61,   71,   61,
       61,   61,   61,   61,   61,   71,   67,  927,  838,   71,
       67,  118,  749,   67,   70,   61,   61,   61,   70,   67,
      119,   61,  121,   61,   70,   71,   67,  114,  114,   61,
      122,   61,  633,   67,   70,   61,   61,   67,  118,   77,

       67,   70,  123,   77,  517,   70,   67,  119,   61,  121,
       61,   70,  399,   67,  114,  114,   61,  122,   61,   77,
      124,   70,   61,   61,  280,  188,   77,  186,   90,  123,
       77,   61,   62,   62,   88,   62,   62,   62,   62,   62,
       62,  125,  126,   85,   72,   73,   77,  124,   72,   73,
       60,   62,   62,   62,   72,   73,   59,   78,   62,   52,
       51,   78,   62,   47,   72,   73,   82,   78,  125,  126,
       82,   72,   73,  127,   82,   72,   73,   78,   62,  128,
       45,   72,   73,   83,   78,   62,   83,   83,   78,   62,
       82,   72,   73,   82,   78,   20,  129,   82,   19,  129,

      127,   82,  130,   83,   78,   62,  128,   62,   63,  131,
       83,  133,   63,   83,   83,   63,   63,   82,   11,  134,
       84,  136,   63,  129,   84,   63,  129,  137,  138,  130,
       83,    7,   63,    4,    3,   63,  131,    0,  133,   63,
       84,    0,   63,   63,  105,  105,  134,   84,  136,   63,
        0,   84,   63,  139,  137,  138,  142,    0,  105,   63,
       64,  110,  110,  110,   64,  110,  135,   84,   64,  143,
      144,  105,  105,  140,   64,  140,  135,   64,  145,  147,
      139,  135,  135,  142,   64,  105,  148,   64,  110,  110,
      110,   64,  110,  135,    0,   64,  143,  144,    0,    0,

      140,   64,  140,  135,   64,  145,  147,  146,  135,  135,
      146,   64,   65,  148,  149,  151,   65,  152,  113,   65,
      113,   65,    0,  113,    0,  141,   65,  141,    0,  113,
      153,   65,   65,    0,  146,    0,  113,  146,  141,   65,
      154,  149,  151,   65,  152,  113,   65,  113,   65,  120,
      113,  120,  141,   65,  141,  120,  113,  153,   65,   65,
       66,    0,  120,  113,   66,  141,  120,  154,   66,  155,
      156,   66,  157,  155,   66,  158,  120,   66,  120,  159,
       66,    0,  120,  156,   66,    0,    0,   66,  156,  120,
        0,   66,    0,  120,    0,   66,  155,  156,   66,  157,

      155,   66,  158,  162,   66,    0,  159,   66,  160,  161,
      156,   66,   69,   69,  163,  156,   69,  160,  164,   69,
       69,   69,  165,  161,  166,  160,   69,  167,  168,  169,
      162,  170,   69,    0,  173,  160,  161,    0,  167,   69,
       69,  163,  171,   69,  160,  164,   69,   69,   69,  165,
      161,  166,  160,   69,  167,  168,  169,    0,  170,   69,
       74,  173,  171,  172,   74,  167,  172,  174,   74,  171,
      175,  177,  178,  179,   74,  176,  175,  283,  285,    0,
       74,   74,  286,    0,   74,    0,    0,   74,  176,  171,
      172,   74,  288,  172,  174,   74,  290,  175,  177,  178,

      179,   74,  176,  175,  283,  285,  196,   74,   74,  286,
      196,   74,   75,   75,  291,  176,   75,  197,  197,  288,
        0,   75,  197,  290,  292,   75,  196,  198,   75,  293,
      294,  198,   75,  196,  296,    0,    0,  196,  197,   75,
       75,  291,  198,   75,  197,  197,  297,  198,   75,  197,
        0,  292,   75,  196,  198,   75,  293,  294,  198,   75,
       76,  296,  205,  199,   76,  197,  205,  199,   76,  198,
      199,   76,  200,  297,  198,  200,  200,   76,  199,  298,
      200,    0,  205,  199,   76,    0,  299,   76,  201,  205,
      199,   76,  201,  205,  199,   76,  200,  199,   76,  200,

      300,  201,  200,  200,   76,  199,  298,  200,  201,  205,
      199,   76,   79,  299,   79,  201,  301,   79,   79,  201,
       79,  302,   79,  200,   79,   79,    0,  300,  201,    0,
      303,  202,  304,  202,   79,  201,  204,  202,  204,   79,
      204,   79,    0,  301,   79,   79,  305,   79,  302,   79,
      306,   79,   79,  202,  307,    0,  204,  303,  202,  304,
      202,   79,   80,  204,  202,  204,   80,  204,  206,   80,
       80,  309,  206,  305,  209,  206,   80,  306,  209,   80,
      202,  307,  206,  204,  209,    0,   80,    0,  206,   80,
      310,    0,  311,   80,  209,  206,   80,   80,  309,  206,

      207,  209,  206,   80,  207,  209,   80,    0,  207,  206,
      312,  209,  214,   80,   81,  206,  214,  310,   81,  311,
      313,  209,  214,   81,  207,   81,  314,  207,   81,  316,
      317,  207,  214,  318,   81,  207,    0,  312,    0,  214,
        0,   81,    0,  214,    0,   81,    0,  313,    0,  214,
       81,  207,   81,  314,    0,   81,  316,  317,    0,  214,
      318,   81,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  203,  203,  203,  210,  203,    0,
        0,  210,  319,  320,    0,  217,  212,  217,    0,  203,
      212,  217,  210,  321,  203,    0,  322,  210,    0,  212,
      212,  203,  203,  203,  210,  203,  212,  217,  210,  319,
      320,  215,  217,  212,  217,  215,  203,  212,  217,  210,
      321,  203,  208,  322,  210,  215,  212,  212,  208,  208,
      208,  215,  208,  212,  217,  208,    0,    0,  215,    0,
        0,    0,  215,    0,  295,  323,  295,    0,    0,  208,

      324,    0,  215,    0,    0,  208,  208,  208,  215,  208,
      219,  295,  208,  211,  219,  211,  213,  219,  211,  325,
      213,  295,  323,  295,  211,  211,  211,  324,  216,  216,
      219,  211,  213,  216,    0,    0,  213,  219,  295,    0,
      211,  219,  211,  213,  219,  211,  325,  213,    0,  216,
        0,  211,  211,  211,    0,  216,  216,  219,  211,  213,
      216,  220,  222,  213,    0,  220,  222,    0,  220,  308,
        0,  326,    0,  327,  328,  222,  216,  218,  329,  218,
        0,  220,  222,  218,  308,    0,  330,  221,  220,  222,
      218,  221,  220,  222,  218,  220,  308,  221,  326,  218,

      327,  328,  222,  331,  218,  329,  218,  221,  220,  222,
      218,  308,  223,  330,  221,  332,  223,  218,  221,    0,
        0,  218,  223,  333,  221,  334,  218,  335,  336,    0,
      331,  224,  223,  337,  221,  224,  225,  226,  224,  223,
      225,  226,  332,  223,    0,    0,  225,  226,    0,  223,
      333,  224,  334,  338,  335,  336,  225,  226,  224,  223,
      337,    0,  224,  225,  226,  224,  229,  225,  226,    0,
      229,  227,  228,  225,  226,  227,  228,  339,  224,  340,
      338,  228,  229,  225,  226,  227,  229,  339,  227,    0,
      230,  227,  228,  229,  230,  341,  231,  229,  227,  228,

      231,    0,  227,  228,  339,    0,  340,    0,  228,  229,
      230,  343,  227,  229,  339,  227,  231,  230,  227,  228,
      232,  230,  341,  231,  232,  234,  344,  231,  235,  234,
      345,  232,  235,  346,  234,  348,  349,  230,  343,  347,
      232,    0,    0,  231,  350,  234,    0,  232,  235,  347,
      236,  232,  234,  344,  236,  235,  234,  345,  232,  235,
      346,  234,  348,  349,  351,  352,  347,  232,  233,  233,
      236,  350,  234,  233,  354,  235,  347,  236,  233,    0,
        0,  236,  355,  233,  233,  356,  237,  237,    0,  233,
      237,  351,  352,  357,    0,  233,  233,  236,  241,  358,

      233,  354,  241,  359,  360,  233,  237,  241,    0,  355,
      233,  233,  356,  237,  237,  238,  233,  237,  241,  238,
      357,  238,  361,  238,  362,  241,  358,    0,  363,  241,
      359,  360,    0,  237,  241,  238,    0,    0,    0,  240,
        0,    0,  238,  240,    0,  241,  238,    0,  238,  361,
      238,  362,  240,  364,  243,  363,  365,    0,  243,  240,
        0,  366,  238,  239,  242,  239,  240,  239,  242,  243,
      240,  239,  367,  242,  243,  368,  239,    0,  369,  240,
      364,  243,    0,  365,  242,  243,  240,  239,  366,  244,
      239,  242,  239,  244,  239,  242,  243,    0,  239,  367,

      242,  243,  368,  239,  244,  369,  245,  244,  370,  244,
      245,  242,    0,  245,  239,  246,  244,    0,  371,  246,
      244,  247,  247,  246,  248,  247,  245,  373,  248,    0,
        0,  244,  374,  245,  244,  370,  244,  245,  375,  246,
      245,  247,  246,  250,  248,  371,  246,  250,  247,  247,
      246,  248,  247,  245,  373,  248,  249,  249,  250,  374,
      251,  249,  376,  250,  251,  375,  246,    0,  247,    0,
      250,  248,  253,  251,  250,    0,  253,  249,  252,  377,
      251,    0,  252,  249,  249,  250,  252,  251,  249,  376,
      250,  251,  253,    0,  255,  378,  255,    0,  255,  253,

      251,    0,  252,  253,  249,  252,  377,  251,  256,  252,
        0,    0,  256,  252,  255,  256,    0,  379,  380,  253,
      260,  255,  378,  255,  260,  255,    0,    0,  256,  252,
      254,    0,  381,  257,  254,  256,  257,  257,  254,  256,
      260,  255,  256,  254,  379,  380,  382,  260,  254,  383,
      385,  260,    0,  257,  254,  256,    0,  254,  262,  381,
      257,  254,  262,  257,  257,  254,    0,  260,  388,    0,
      254,  262,    0,  382,  389,  254,  383,  385,  262,  259,
      257,  254,  258,  259,  258,  262,    0,  259,  258,  262,
        0,  258,  261,  259,    0,  388,  261,    0,  262,  258,

      261,  389,    0,  259,  258,  262,  259,    0,  266,  258,
      259,  258,  266,  263,  259,  258,  261,  263,  258,  261,
      259,  263,  264,  261,  386,  264,  258,  261,  266,  264,
      259,  258,    0,  386,  265,  266,    0,  263,  265,  266,
      263,  390,  265,  261,  263,  264,  391,  392,  263,  264,
      393,  386,  264,  265,  265,  266,  264,    0,  267,  268,
      386,  265,  267,  268,  263,  265,  267,  269,  390,  265,
      268,  269,  264,  391,  392,  269,    0,  393,  267,  268,
      265,  265,  387,  394,  387,  267,  268,  269,  270,  267,
      268,  269,  270,  267,  269,  270,    0,  268,  269,  271,

      271,    0,  269,  272,  271,  267,  268,  272,  270,  387,
      394,  387,  395,  396,  269,  270,  395,    0,  269,  270,
      271,  397,  270,  272,  274,  273,  271,  271,  274,  273,
      272,  271,  273,  518,  272,  270,    0,  274,  273,  395,
      396,  519,  275,  395,  274,  273,  275,  271,  397,  520,
      272,  274,  273,  277,  401,  274,  273,  277,  401,  273,
      518,  277,  275,  276,  274,  273,  521,  276,  519,  275,
      522,  274,  273,  275,  401,  523,  520,  277,  276,  524,
      277,  401,  525,  276,  277,  401,    0,    0,  277,  275,
      276,    0,    0,  521,  276,    0,    0,  522,    0,    0,

        0,  401,  523,    0,  277,  276,  524,    0,    0,  525,
      276,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  402,  403,  404,  405,  402,  403,  404,  405,    0,
        0,  405,  527,    0,    0,    0,  406,    0,    0,    0,
      406,  402,  403,  404,  405,    0,  530,    0,  402,  403,
      404,  405,  402,  403,  404,  405,  406,  407,  405,  527,
      408,  407,  409,  406,  408,  407,  409,  406,  402,  403,
      404,  405,  409,  530,  410,  531,  532,    0,  410,    0,
      408,  407,  409,  406,  407,    0,  411,  408,  407,  409,

      411,  408,  407,  409,  410,    0,  412,    0,  533,  409,
      412,  410,  531,  532,  411,  410,  411,  408,  407,  409,
        0,  535,  414,  411,  414,  413,  412,  411,  414,  413,
      536,  410,  413,  412,  415,  533,    0,  412,  415,  414,
        0,  411,  416,  411,  414,  413,  416,  415,  535,  414,
      537,  414,  413,  412,  415,  414,  413,  536,  416,  413,
      417,  415,  416,  418,  417,  415,  414,  418,  417,  416,
        0,  414,  413,  416,  415,    0,  539,  537,  418,  540,
      417,  415,  419,  418,  420,  416,  419,  417,  420,  416,
      418,  417,  420,    0,  418,  417,  541,  422,    0,    0,

      421,  422,  419,  539,  421,  418,  540,  417,  420,  419,
      418,  420,  423,  419,  421,  420,  423,  422,  424,  420,
      421,  542,  424,  541,  422,  424,  423,  421,  422,  419,
      425,  421,  423,    0,  425,  420,  543,    0,  424,  423,
      544,  421,  545,  423,  422,  424,  546,  421,  542,  424,
      425,    0,  424,  423,  426,  547,  427,  425,  426,  423,
      427,  425,  426,  543,  428,  424,  428,  544,  429,  545,
      428,  427,  429,  546,    0,  550,  427,  425,  426,    0,
        0,  426,  547,  427,  551,  426,  428,  427,  429,  426,
        0,  428,  430,  428,    0,  429,  430,  428,  427,  429,

      552,  431,  550,  427,  431,  426,  432,  430,  431,    0,
      432,  551,  430,  428,    0,  429,  433,  432,  434,  430,
      433,  436,  434,  430,  431,  436,  432,  552,  431,    0,
      553,  431,  554,  432,  430,  431,  433,  432,  434,  430,
      555,  436,  435,  433,  432,  434,  435,  433,  436,  434,
      435,  431,  436,  432,  437,    0,  437,  553,  438,  554,
      437,    0,  438,  433,  556,  434,  435,  555,  436,  435,
        0,    0,  438,  435,  558,  439,  437,  435,  438,  439,
      559,  437,  439,  437,  440,  438,  562,  437,  440,  438,
      563,  556,  442,  435,  441,  439,  442,  440,  441,  438,

      565,  558,  439,  437,  440,  438,  439,  559,  441,  439,
        0,  440,  442,  562,  441,  440,  567,  563,    0,  442,
        0,  441,  439,  442,  440,  441,  443,  565,  444,  445,
      443,  440,  444,  445,  443,  441,  444,  445,  446,  442,
        0,  441,  446,  567,  447,  446,  568,  447,  444,  445,
      443,  447,  569,  443,  570,  444,  445,  443,  446,  444,
      445,  443,  571,  444,  445,  446,  448,  447,  572,  446,
      448,  447,  446,  568,  447,  444,  445,  443,  447,  569,
      449,  570,  448,  449,  449,  446,  448,  573,  450,  571,
      575,    0,  450,  448,  447,  572,  579,  448,  573,    0,

      449,  451,  581,    0,    0,  451,  582,  449,  450,  448,
      449,  449,  584,  448,  573,  450,  451,  575,  452,  450,
      453,  451,  452,  579,  453,  573,  453,  449,  451,  581,
      455,  452,  451,  582,  455,  450,  586,    0,  452,  584,
      453,    0,  454,  451,  587,  452,  454,  453,  451,  452,
      455,  453,  454,  453,  588,  456,  457,  455,  452,  456,
      457,  455,  454,  586,  458,  452,    0,  453,  458,  454,
        0,  587,    0,  454,  458,  456,  457,  455,  590,  454,
      591,  588,  456,  457,  458,    0,  456,  457,  459,  454,
      460,  458,  459,  461,  460,  458,  592,  461,  593,  460,

        0,  458,  456,  457,  459,  590,    0,  591,  459,  594,
      460,  458,  462,  461,  463,  459,  462,  460,  463,  459,
      461,  460,    0,  592,  461,  593,  460,  462,  596,  464,
      597,  459,  462,  464,  463,  459,  594,  460,  599,  462,
      461,  463,  600,  462,  472,  463,  465,  465,  472,  464,
        0,  465,    0,  601,  462,  596,  464,  597,  466,  462,
      464,  463,  466,  602,  472,  599,  466,  465,  466,  600,
        0,  472,    0,  465,  465,  472,  464,  467,  465,  467,
      601,  467,  466,  469,  603,  466,    0,  469,    0,  466,
      602,  472,    0,  466,  465,  466,  468,  467,  468,  469,

      468,    0,  604,  469,  467,    0,  467,  605,  467,  466,
      469,  603,    0,  470,  469,  471,  468,  470,    0,  471,
      585,  585,  606,  468,  467,  468,  469,  468,  470,  604,
      469,  471,  474,  470,  605,  471,  474,  473,    0,  474,
      470,  473,  471,  468,  470,  473,  471,  585,  585,  606,
      477,    0,  474,  476,  477,  470,  609,  476,  471,  474,
      470,  473,  471,  474,  473,  475,  474,  476,  473,  475,
      477,  478,  473,  476,  610,  478,    0,  477,  475,  474,
      476,  477,  479,  609,  476,  475,  479,    0,  473,    0,
      479,  478,  475,    0,  476,  480,  475,  477,  478,  480,

      476,  610,  478,  481,  480,  475,  479,  481,    0,  479,
      611,    0,  475,  479,  481,  480,  482,  479,  478,  612,
      482,    0,  480,  481,  482,  483,  480,    0,    0,  483,
      481,  480,  483,  479,  481,  486,  482,  611,  486,  486,
      484,  481,  480,  482,  484,  483,  612,  482,  484,  613,
      481,  482,  483,  485,  487,  486,  483,  485,  487,  483,
      616,  487,  486,  482,  484,  486,  486,  484,  485,    0,
      617,  484,  483,  485,  487,  484,  613,    0,  619,  488,
      485,  487,  486,  488,  485,  487,  620,  616,  487,  490,
        0,  484,  489,  490,  491,  485,  489,  617,  491,  488,

      485,  487,  489,  621,  492,  619,  488,  494,  492,  490,
      488,  494,  489,  620,  491,  622,  490,  492,  494,  489,
      490,  491,  623,  489,  492,  491,  488,  494,  493,  489,
      621,  492,  493,  495,  494,  492,  490,  495,  494,  489,
      495,  491,  622,  496,  492,  494,  493,  496,  493,  623,
        0,  492,  624,  495,  494,  493,    0,  497,  496,  493,
      495,  497,  498,  496,  495,  625,  498,  495,    0,  498,
      496,  626,  497,  493,  496,  493,    0,  497,  628,  624,
      495,    0,  498,  499,  497,  496,  630,  499,  497,  498,
      496,  500,  625,  498,  499,  500,  498,  632,  626,  497,

      752,    0,    0,  499,  497,  628,  500,  754,  501,  498,
      499,  500,  501,  630,  499,  756,  502,  501,  500,    0,
      502,  499,  500,    0,  632,  503,    0,  752,  501,  503,
      499,    0,  757,  500,  754,  501,  502,  504,  500,  501,
      758,  504,  756,  502,  501,  503,  504,  502,    0,  505,
      506,    0,  503,  505,  506,  501,  503,  504,  505,  757,
      506,    0,  506,  502,  504,  759,  760,  758,  504,  505,
      506,    0,  503,  504,  761,  508,  505,  506,  507,  508,
      505,  506,  507,  508,  504,  505,    0,  506,  507,  506,
        0,  509,  759,  760,  762,  509,  505,  506,  507,  508,

      509,  761,  508,  510,    0,  507,  508,  510,  763,  507,
      508,  509,  765,  512,  511,  507,  511,  512,  509,  510,
      511,  762,  509,  510,    0,  507,  508,  509,    0,  766,
      510,  512,  767,  512,  510,  763,  511,    0,  509,  765,
      512,  511,    0,  511,  512,  768,  510,  511,  514,  513,
      510,  515,  514,  513,  515,  515,  766,  514,  512,  767,
      512,  514,  769,  511,  513,  771,    0,  772,  514,  513,
      516,  515,  768,  634,  516,  514,  513,  634,  515,  514,
      513,  515,  515,  516,  514,    0,  634,    0,  514,  769,
      516,  513,  771,  634,  772,  514,  513,  516,  515,  635,

      634,  516,  636,  635,  634,  637,  636,    0,  773,  637,
      516,  638,  635,  634,  639,  638,    0,  516,  639,  635,
      634,  774,  636,  639,  638,  637,  635,  775,    0,  636,
      635,  638,  637,  636,  639,  773,  637,    0,  638,  635,
      640,  639,  638,  642,  640,  639,  635,  642,  774,  636,
      639,  638,  637,  641,  775,  644,  776,  641,  638,  644,
      640,  639,  641,  642,  643,  645,    0,  640,  643,  645,
      642,  640,  643,  641,  642,  644,    0,  777,  778,    0,
      641,  779,  644,  776,  641,  645,  644,  640,  643,  641,
      642,  643,  645,  646,  648,  643,  645,  646,  648,  643,

      641,  646,  644,  647,  777,  778,  649,  647,  779,  650,
      649,  647,  645,  650,  648,  643,  780,  646,  783,  649,
      646,  648,    0,  647,  646,  648,  649,  651,  646,  650,
      647,  651,  784,  649,  647,  652,  650,  649,  647,  652,
      650,  648,  651,  780,  646,  783,  649,  651,  653,  652,
      647,  786,  653,  649,  651,  652,  650,  654,  651,  784,
      655,  654,  652,  653,  655,  789,  652,  655,  653,  651,
        0,    0,    0,  792,  651,  653,  652,  654,  786,  653,
      655,  656,  652,  793,  654,  656,    0,  655,  654,  656,
      653,  655,  789,  657,  655,  653,    0,  657,  659,  658,

      792,  656,  659,  658,  654,  795,  659,  655,  656,  657,
      793,  798,  656,  657,  658,  794,  656,    0,  794,  658,
      657,  661,  659,  661,  657,  659,  658,  661,  656,  659,
      658,  660,  795,  659,    0,  660,  657,  801,  798,  802,
      657,  658,  794,  661,  660,  794,  658,  803,  661,  659,
      661,  660,  662,  663,  661,  664,  662,  663,  660,  664,
      663,  665,  660,    0,  801,  665,  802,    0,    0,    0,
      661,  660,  662,  663,  803,  664,  804,  805,  660,  662,
      663,  665,  664,  662,  663,  666,  664,  663,  665,  666,
      667,  668,  665,  806,  667,  668,  666,    0,  809,  662,

      663,  667,  664,  804,  805,  666,  810,  668,  665,  669,
      667,  668,  666,  669,    0,  811,  666,  667,  668,    0,
      806,  667,  668,  666,  669,  809,  672,  812,  667,  669,
      672,  670,  666,  810,  668,  670,  669,  667,  668,  670,
      669,  671,  811,  673,  674,  671,  672,  673,  674,  671,
        0,  669,    0,  672,  812,  670,  669,  672,  670,  674,
      813,  815,  670,  673,  674,  671,  670,    0,  671,  816,
      673,  674,  671,  672,  673,  674,  671,  675,    0,  676,
      677,  675,  670,  676,  677,  675,  674,  813,  815,  678,
      673,  674,  671,  678,  679,  817,  816,  678,  679,  676,

      677,  675,    0,    0,  675,  679,  676,  677,  675,  818,
      676,  677,  675,  678,  679,  680,  678,    0,  820,  680,
      678,  679,  817,    0,  678,  679,  676,  677,  675,  681,
      682,    0,  679,  681,  682,  680,  818,    0,  681,  683,
      678,  679,  680,  683,  684,  820,  680,    0,  684,  681,
      682,  821,  822,  683,  685,    0,  681,  682,  685,  683,
      681,  682,  680,  823,  684,  681,  683,  685,  686,  687,
      683,  684,  686,  687,  685,  684,  681,  682,  821,  822,
      683,  685,  687,    0,  824,  685,  683,  686,  686,  687,
      823,  684,  825,  688,  685,  686,  687,  688,  690,  686,

      687,  685,  690,    0,  826,    0,  688,  827,  689,  687,
      689,  824,  689,  688,  686,  686,  687,  829,  690,  825,
      688,  689,  692,  691,  688,  690,  692,  691,  689,  690,
      691,  826,  693,  688,  827,  689,  693,  689,    0,  689,
      688,    0,  692,  691,  829,  690,    0,  694,  689,  692,
      691,  694,  693,  692,  691,  689,  695,  691,    0,  693,
      695,  696,    0,  693,  698,  696,    0,  694,  698,  692,
      691,  695,  830,  697,  694,    0,  695,  697,  694,  693,
      697,  696,  699,  695,  698,  700,  699,  695,  696,  700,
      831,  698,  696,  697,  694,  698,    0,    0,  695,  830,

      697,  833,  699,  695,  697,  700,  834,  697,  696,  699,
      701,  698,  700,  699,  701,  702,  700,  831,  702,  702,
      697,  835,    0,  703,  701,  701,    0,  703,  833,  699,
      701,  928,  700,  834,    0,  702,  703,  701,    0,  930,
      704,  701,  702,  703,  704,  702,  702,  932,  835,  705,
      703,  701,  701,  705,  703,  933,  934,  701,  928,  706,
      704,  706,  702,  703,  707,  706,  930,  704,  707,  705,
      703,  704,  936,  938,  932,    0,  705,  939,    0,    0,
      705,  706,  933,  934,  707,  708,  706,  704,  706,  708,
      709,  707,  706,  710,  709,  707,  705,  710,  708,  936,

      938,  710,  711,  709,  939,  708,  711,    0,  706,  940,
      709,  707,  708,  710,  714,  712,  708,  709,  714,  712,
      710,  709,  711,  712,  710,  708,    0,  713,  710,  711,
      709,  713,  708,  711,  714,  713,  940,  709,  941,  712,
      710,  714,  712,  716,  715,  714,  712,  716,  715,  711,
      712,  713,  715,  717,  713,  943,  716,  717,  713,  945,
      949,  714,  713,  716,  715,  941,  712,  951,  717,  718,
      716,  715,  718,  717,  716,  715,  718,  719,  713,  715,
      717,  719,  943,  716,  717,  719,  945,  949,  952,  720,
      716,  715,  718,  720,  951,  717,  718,  719,  720,  718,

      717,  958,  722,  718,  719,  721,  722,  721,  719,  720,
      723,  721,  719,    0,  723,  952,  720,    0,  959,  718,
      720,    0,  722,  960,  719,  720,  963,  721,  958,  722,
      723,  724,  721,  722,  721,  724,  720,  723,  721,  725,
      726,  723,  965,  725,  726,  959,  725,  967,  727,  722,
      960,  724,  727,  963,  721,  969,  970,  723,  724,  725,
      726,  728,  724,    0,  971,  728,  725,  726,  727,  965,
      725,  726,  973,  725,  967,  727,  974,  975,  724,  727,
      729,  728,  969,  970,  729,  730,  725,  726,  728,  730,
      729,  971,  728,  731,  976,  727,  978,  731,  980,  973,

      729,    0,    0,  974,  975,  730,  734,  729,  728,  982,
      734,  729,  730,  731,  732,  733,  730,  729,  732,  733,
      731,  976,  983,  978,  731,  980,  734,  729,  732,  733,
      984,  985,  730,  734,  732,  733,  982,  734,    0,  990,
      731,  732,  733,    0,  991,  732,  733, 1061,  735,  983,
      735,    0,    0,  734,  735,  732,  733,  984,  985,  736,
      737,  732,  733,  736,  737,  738,  990, 1064,  736,  738,
      735,  991, 1065,  738, 1061,  735,  737,  735,  739,  736,
      737,  735,  739,    0,  741,    0,  736,  737,  741,  738,
      736,  737,  738,  739, 1064,  736,  738,  735,  739, 1065,

      738,    0, 1068,  737,  741,  739,  736,  737,  740,  739,
      740,  741,  740, 1069,  742,  741,  738,  742,  742, 1074,
      739,    0,  743,  745,    0,  739,  743,  745,  740, 1068,
     1075,  741,  744,    0,  742,  740,  744,  740, 1078,  740,
     1069,  742,  743,  745,  742,  742, 1074,  746,  744,  743,
      745,  746,  744,  743,  745,  740,  747, 1075,    0,  744,
      747,  742, 1079,  744, 1082, 1078,    0,  746,  748,  743,
      745,    0,  748,  839,  746,  744,  747,  839,  746,  744,
        0,  840,  748,  747, 1083,  840,  841,  747,  748, 1079,
      841, 1082,    0,  839,  746,  748,    0, 1086,  842,  748,

      839,  840,  842,  747,  839,    0,  841,  841,  840,  748,
      843, 1083,  840,  841,  843,  748,    0,  841,  842,  844,
      839,    0,  845,  844, 1086,  842,  845,    0,  840,  842,
      843,  849,  846,  841,  841,  849,  846,  843, 1088,  844,
      849,  843,  845,  847,  847,  842,  844,  846,  847,  845,
      844,  849,  846,  845,  848,    0,  848,  843,  849,  846,
      848,    0,  849,  846,  847, 1088,  844,  849, 1089,  845,
      847,  847, 1090,  850,  846,  847,  848,  850,  849,  846,
        0,  848,  851,  848,    0,  852,  851,  848,  850,  852,
      853,  847,  851,  850,  853, 1089, 1091, 1132, 1134, 1090,

      850, 1137,  851,  848,  850,  852, 1140,  854,    0,  851,
      853,  854,  852,  851,    0,  850,  852,  853,    0,  851,
      850,  853, 1144, 1091, 1132, 1134,  855,  854, 1137,  851,
      855,  856,  852, 1140,  854,  856,  855,  853,  854,  856,
      857,  858,    0, 1145,  857,  858,  855,  857,    0, 1144,
     1146, 1167,    0,  855,  854,  856, 1169,  855,  856, 1172,
      857,  858,  856,  855, 1185,  859,  856,  857,  858,  859,
     1145,  857,  858,  855,  857,  860, 1192, 1146, 1167,  860,
      863, 1195,  856, 1169,  863,  859, 1172,  857,  858,  861,
      862, 1185,  859,  861,  862,  860,  859,    0, 1198,  862,

      863,    0,  860, 1192,  861, 1200,  860,  863, 1195,  861,
      862,  863,  859, 1202,  864,  865,  861,  862,  864,  865,
      861,  862,  860, 1204,  866, 1198,  862,  863,  866,  867,
      865,  861, 1200,  867,  864,  865,  861,  862,    0,  866,
     1202,  864,  865,  867,  866,  864,  865,    0,  868,  867,
     1204,  866,  868, 1206, 1208,  866,  867,  865,    0,    0,
      867,  864,  865,  869,    0,  869,  866,    0,  868,  869,
      867,  866,    0,  870,  871,  868,  867,  870,  871,  868,
     1206, 1208,  872, 1210,    0,  869,  872,  874,    0, 1212,
      869,  874,  869,  870,  871,  868,  869,  872,    0,  873,

      870,  871,  872,  873,  870,  871,  873,  874, 1214,  872,
     1210,  876,  869,  872,  874,  876, 1212, 1216,  874,  873,
      870,  871,    0,  875,  872,  875,  873,  875,  877,  872,
      873,  876,  877,  873,  874, 1214,  878,  879,  876,    0,
      878,  879,  876,  875, 1216,  880,  873,    0,  877,  880,
      875,  878,  875,    0,  875,  877,  878,  879,  876,  877,
        0,    0,  881,  878,  879,  880,  881,  878,  879,    0,
      875,    0,  880,    0,    0,  877,  880,  881,  878,    0,
        0,  882,  881,  878,  879,  882,  883,  884,    0,  881,
      883,  884,  880,  881,  884,  885, 1182, 1182,    0,  885,

      883,  882,    0,  883,  881,    0,  883,  884,  882,  881,
        0,    0,  882,  883,  884,  885,  886,  883,  884,  888,
      886,  884,  885,  888,  887,  887,  885,  883,  882,  887,
      883,    0,    0,  883,  884,    0,  886,  889, 1182,  888,
      890,  889,  885,  886,  890,  887,  888,  886,    0,    0,
      888,  887,  887,    0,  892,  891,  887,  889,  892,  891,
      890,    0,  892,  886,  889, 1182,  888,  890,  889,  891,
        0,  890,  887,  893,    0,  891,    0,  893,  892,  896,
        0,  892,  891,  896,  889,  892,  891,  890,  893,  892,
        0,  894,    0,  893,  894,  894,  891,  895,    0,  896,

      893,  895,  891,  897,  893,  892,  896,  897,    0,  898,
      896,  894,  895,  898,    0,  893,    0,  895,  894,    0,
      893,  894,  894,  897,  895,    0,  896,    0,  895,  898,
      897,  901,    0,  899,  897,  901,  898,  899,  894,  895,
      898,  900,    0,  902,  895,  900,  899,  902,    0,    0,
      897,  901,    0,  899,  900,  903,  898,    0,  901,  903,
      899,  900,  901,  902,  899,    0,    0,    0,  900,    0,
      902,    0,  900,  899,  902,  903,    0,    0,  901,  904,
      899,  900,  903,  904,    0,  905,  903,  904,  900,  905,
      902,    0,    0,  905,  906,  906,    0, 1187, 1187,  906,

        0,    0,  903,  904,  907,    0,  904,  908,  907,  905,
      904,  908,  905,  909,  904,  906,  905,  909,    0,  907,
      905,  906,  906,    0,  907,    0,  906,  908,    0,    0,
      904,  907,    0,  909,  908,  907,  905,    0,  908, 1187,
      909,    0,  906,    0,  909,  911,  907,  910,  910,  911,
        0,  907,  910,  911,  908,    0,    0,  912,    0,    0,
      909,  912,    0,    0,    0,    0, 1187,    0,  910,  911,
        0,  912,  911,    0,  910,  910,  911,  912,    0,  910,
      911,  913,  914,  915,  912,  913,  914,  915,  912,    0,
        0,  915,    0,    0,  913,  910,  911,  914,  912,    0,

        0,  913,  914,    0,  912,    0,    0,  915,  913,  914,
      915,  916,  913,  914,  915,  916,  917,    0,  915,  916,
      917,  913,    0,    0,  914,    0,    0,    0,  913,  914,
        0,    0,    0,  918,  915,  916,  917,  918,  916,    0,
      919,  919,  916,  917,    0,  919,  916,  917,    0,    0,
      920,  921,    0,  918,  920,  921,    0,    0,    0,    0,
      918,  919,  916,  917,  918,  922,    0,  919,  919,  922,
      920,  921,  919,    0,    0,    0,    0,  920,  921,  922,
      918,  920,  921,  923,    0,  922,    0,  923,  919,  925,
        0,  923,  922,  925,    0,  924,  922,  920,  921,  924,

        0,  926,    0,  924,  993,  926,  922,  923,  993,  925,
      923,    0,  922,  994,  923,    0,  925,  994,  923,  924,
      925,  926,  924,  996,  993,  997,  924,  996,  926,  997,
      924,  993,  926,  994,  923,  993,  925,    0,  995,    0,
      994,    0,  995,  996,  994,  997,  924,  995,  926,    0,
      996,  993,  997,  998,  996,    0,  997,  998,  995, 1000,
      994,    0,  999, 1000,    0,  995,  999,    0,  998,  995,
      996, 1001,  997,  998,  995, 1001,  999, 1002, 1001, 1000,
      998, 1002,  999,    0,  998,  995, 1000,    0,    0,  999,
     1000, 1001,    0,  999,    0,  998,    0, 1002, 1001,    0,

      998,    0, 1001,  999, 1002, 1001, 1000, 1003, 1002,  999,
     1004, 1003, 1004, 1005,    0, 1003, 1004, 1005, 1001,    0,
     1005, 1006,    0,    0, 1002, 1006, 1007, 1003, 1008,    0,
     1007, 1008, 1004, 1005, 1003, 1008, 1006, 1004, 1003, 1004,
     1005, 1006, 1003, 1004, 1005, 1009, 1007, 1005, 1006, 1009,
        0, 1008, 1006, 1007, 1003, 1008,    0, 1007, 1008, 1004,
     1005,    0, 1008, 1006, 1010, 1009, 1010, 1011, 1006,    0,
     1010, 1011, 1009, 1007,    0, 1012, 1009,    0, 1008, 1012,
     1013, 1014,    0,    0, 1013, 1014, 1010, 1011,    0,    0,
        0, 1010, 1009, 1010, 1011, 1012,    0, 1010, 1011, 1015,

     1013, 1014, 1012, 1015,    0,    0, 1012, 1013, 1014,    0,
        0, 1013, 1014, 1010, 1011,    0, 1016, 1017,    0, 1015,
     1016, 1017, 1012,    0,    0, 1016, 1015, 1013, 1014, 1018,
     1015, 1019, 1017, 1018, 1020, 1019, 1016, 1017, 1020,    0,
        0,    0,    0, 1016, 1017,    0, 1015, 1016, 1017, 1018,
        0, 1019, 1016, 1021, 1020,    0, 1018, 1021, 1019, 1017,
     1018, 1020, 1019, 1016, 1017, 1020, 1022, 1024,    0,    0,
     1022, 1024,    0, 1021,    0, 1023, 1018,    0, 1019, 1023,
     1021, 1020,    0,    0, 1021, 1026, 1022, 1024, 1023, 1026,
        0,    0,    0, 1022, 1024, 1023,    0, 1022, 1024, 1025,

     1021,    0, 1023, 1025, 1027, 1026, 1023, 1025, 1027,    0,
        0,    0, 1026, 1022, 1024, 1023, 1026, 1029,    0,    0,
        0, 1029, 1023, 1025, 1027, 1028, 1025,    0,    0, 1028,
     1025, 1027, 1026,    0, 1025, 1027,    0, 1029,    0, 1028,
        0,    0, 1030, 1031, 1029, 1028, 1030, 1031, 1029, 1030,
     1025, 1027, 1028, 1032,    0, 1033, 1028, 1032,    0, 1033,
        0, 1032, 1030, 1031, 1029,    0, 1028,    0,    0, 1030,
     1031,    0, 1028, 1030, 1031, 1033, 1030, 1032,    0, 1034,
     1032, 1035, 1033, 1034, 1032, 1035, 1033, 1036, 1032, 1030,
     1031, 1036,    0, 1037, 1034,    0,    0, 1037,    0, 1034,

        0, 1035, 1033, 1038, 1032, 1038, 1034, 1036, 1035, 1038,
     1034,    0, 1035, 1037, 1036,    0,    0, 1039, 1036, 1039,
     1037, 1034,    0, 1039, 1037, 1038, 1034, 1040, 1035, 1041,
     1038, 1040, 1038, 1041, 1036,    0, 1038,    0,    0, 1039,
     1037, 1040,    0, 1041, 1039,    0, 1039, 1040,    0, 1041,
     1039, 1042, 1038, 1043, 1040, 1042, 1041, 1043, 1040, 1044,
     1041,    0, 1043, 1044,    0, 1045, 1039,    0, 1040, 1045,
     1041, 1042, 1045, 1043, 1040,    0, 1041, 1046, 1042, 1044,
     1043, 1046, 1042, 1047, 1043, 1045, 1044, 1047,    0, 1043,
     1044, 1047, 1045,    0,    0,    0, 1045, 1046, 1042, 1045,

     1043, 1048,    0,    0, 1046, 1048, 1044, 1047, 1046, 1048,
     1047, 1049, 1045, 1049, 1047, 1050,    0, 1049, 1047, 1050,
        0,    0,    0, 1051, 1046, 1048,    0, 1051, 1048,    0,
     1050,    0, 1048, 1049, 1047, 1050, 1048,    0, 1049,    0,
     1049, 1052, 1050, 1051, 1049, 1052, 1050, 1053,    0, 1054,
     1051, 1053, 1048, 1054, 1051,    0,    0, 1050,    0, 1056,
     1049, 1052, 1050, 1056,    0,    0, 1056, 1053, 1052, 1054,
     1051, 1055, 1052,    0, 1053, 1055, 1054, 1095, 1053, 1056,
     1054, 1095,    0, 1096, 1055, 1097, 1056, 1096, 1052, 1097,
     1056, 1055,    0, 1056, 1053, 1098, 1054, 1095, 1055, 1098,

        0,    0, 1055, 1096, 1095, 1097, 1056,    0, 1095, 1099,
     1096, 1055, 1097, 1099, 1096, 1098, 1097, 1100, 1055, 1101,
        0, 1100, 1098, 1101, 1095,    0, 1098, 1102,    0, 1099,
     1096, 1102, 1097,    0,    0, 1102, 1099, 1100,    0, 1101,
     1099, 1103, 1098, 1104, 1100, 1103, 1101, 1104, 1100, 1105,
     1101, 1102,    0, 1105, 1102,    0, 1099,    0, 1102,    0,
        0, 1103, 1102, 1104, 1100,    0, 1101, 1106, 1103, 1105,
     1104, 1106, 1103, 1107, 1104, 1108, 1105, 1107, 1102, 1108,
     1105, 1109, 1106,    0,    0, 1109,    0, 1106, 1103,    0,
     1104,    0,    0, 1107, 1106, 1108, 1105,    0, 1106, 1110,

     1107, 1109, 1108, 1110, 1107, 1111, 1108, 1111, 1109, 1106,
        0, 1111, 1109,    0, 1106,    0,    0, 1112,    0, 1110,
     1107, 1112, 1108,    0, 1112, 1113, 1110, 1111, 1109, 1113,
     1110,    0, 1111,    0, 1111, 1114,    0, 1112, 1111, 1114,
        0,    0,    0,    0, 1112, 1113, 1110,    0, 1112, 1116,
        0, 1112, 1113, 1116, 1111, 1114, 1113, 1115,    0, 1117,
        0, 1115, 1114, 1117, 1112,    0, 1114, 1118,    0, 1116,
     1115, 1118, 1113,    0,    0,    0, 1116, 1115,    0, 1117,
     1116,    0, 1114,    0, 1115, 1119, 1117, 1118, 1115, 1119,
     1117,    0,    0,    0, 1118, 1120, 1116, 1115, 1118, 1120,

     1119, 1120,    0, 1121, 1115, 1119, 1117, 1121,    0, 1122,
        0,    0, 1119, 1122, 1118, 1120, 1119, 1124,    0,    0,
        0, 1124, 1120, 1121,    0,    0, 1120, 1119, 1120, 1122,
     1121, 1123, 1119,    0, 1121, 1123, 1122, 1124,    0, 1125,
     1122, 1126, 1120, 1125, 1124, 1126, 1123,    0, 1124, 1126,
     1121, 1123, 1125,    0,    0,    0, 1122,    0, 1123, 1125,
        0, 1126, 1123, 1128, 1124, 1127, 1125, 1128, 1126, 1127,
     1125, 1129, 1126, 1123,    0, 1129, 1126, 1130, 1123, 1125,
     1127, 1130,    0, 1128,    0, 1127, 1125,    0, 1126, 1150,
     1128, 1129, 1127, 1150, 1128,    0, 1127, 1130, 1129,    0,

        0, 1149, 1129,    0, 1130, 1149,    0, 1127, 1130, 1150,
     1128, 1151, 1127, 1152, 1149, 1151, 1150, 1152, 1129, 1153,
     1150, 1149,    0, 1153, 1130, 1155, 1151,    0, 1149, 1155,
        0, 1151, 1149, 1152,    0,    0, 1150,    0, 1151, 1153,
     1152, 1149, 1151,    0, 1152, 1155, 1153, 1154, 1149,    0,
     1153, 1154, 1155, 1151,    0, 1156, 1155, 1157, 1151, 1156,
     1152, 1157, 1154,    0,    0, 1158, 1153, 1154,    0, 1158,
     1157,    0, 1155,    0, 1154, 1156,    0, 1157, 1154, 1159,
        0,    0, 1156, 1159, 1157, 1158, 1156, 1160, 1157, 1154,
        0, 1160, 1158,    0, 1154,    0, 1158, 1157,    0, 1159,

        0, 1161, 1156,    0, 1157, 1161, 1159, 1160,    0, 1162,
     1159, 1163, 1158, 1162, 1160, 1163, 1174, 1174, 1160, 1164,
     1162, 1161,    0, 1164,    0,    0, 1159,    0, 1161, 1162,
        0, 1163, 1161, 1175, 1160,    0, 1162, 1175, 1163, 1164,
     1162, 1174, 1163,    0,    0, 1174, 1164, 1162, 1161,    0,
     1164, 1176,    0, 1175,    0, 1176, 1162,    0, 1163, 1177,
     1175, 1174,    0, 1177, 1175, 1178, 1164,    0, 1174, 1178,
        0, 1176, 1174, 1177,    0,    0,    0, 1179, 1176, 1177,
     1175, 1179, 1176, 1180,    0, 1178, 1177, 1180, 1174,    0,
     1177, 1188, 1178, 1180,    0, 1188, 1178, 1179, 1176,    0,

     1177, 1189,    0, 1180, 1179, 1189, 1177,    0, 1179,    0,
     1180, 1188, 1178, 1196, 1180,    0,    0, 1196, 1188,    0,
     1180, 1189, 1188,    0, 1179, 1190,    0,    0, 1189, 1190,
     1180,    0, 1189, 1196, 1190,    0,    0,    0, 1188,    0,
     1196,    0,    0,    0, 1196, 1190,    0,    0, 1189,    0,
        0,    0, 1190,    0,    0,    0, 1190,    0,    0,    0,
     1196, 1190,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1190, 1228, 1228, 1228, 1228, 1228, 1229,    0,
        0, 1229, 1229, 1231, 1231, 1231,    0, 1231, 1232,    0,
     1232, 1232, 1232, 1233,    0, 1233, 1233, 1233, 1234,    0,

     1234, 1234, 1234, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2509 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2523 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			yy_size_t yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2810 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1228 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1227 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 158:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 165:
#line 231 "flex_lexer.l"
case 166:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 167:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 256 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 262 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 267 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 268 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 269 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 270 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 271 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 273 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 275 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3775 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1228 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1228 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1227);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 275 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

