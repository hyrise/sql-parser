#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1016] =
    {   0,
        0,    0,  148,  148,    2,    2,  152,  150,    4,    4,
      150,  150,  140,  146,  140,  140,  143,  140,  140,  140,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  140,  148,  149,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  135,    0,    1,  143,
      142,  141,  137,  136,  134,  138,  145,  145,  145,  145,

      145,  145,  117,  145,  118,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      119,  145,  145,  120,  121,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  122,  123,  124,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  125,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  139,  148,  147,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  144,  141,  103,  145,  104,  145,  145,  105,
      145,  106,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  107,  145,  129,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  108,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  109,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  110,  145,  145,
      111,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  112,  145,  145,  113,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  114,  145,  145,
      145,  145,  115,  145,  145,  145,  145,  116,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  145,  145,
      145,  145,  145,  145,   75,  145,   76,   77,  145,  145,

      145,  145,   78,  145,  145,  145,  145,   79,  145,  145,
      145,   80,   81,  145,  145,  145,  145,  145,  145,  145,
       82,  145,   83,   84,  145,  145,   85,  145,   86,  128,
      145,  145,  145,  145,  145,  145,   87,  145,   88,   89,
       90,  145,   92,  145,   93,  145,  145,  145,  145,   94,
      145,  145,  145,  145,  145,   95,  145,  145,  145,  145,
      145,  145,  145,  145,   96,  145,  145,  145,  145,   97,
       98,   99,  132,  145,  145,  145,  145,  145,  145,  145,
      145,  100,  145,  101,  145,  102,  131,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   55,   56,  145,   57,
      145,  145,  145,  145,  145,  145,   58,  145,  145,  145,

       59,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      133,   60,  145,   61,  145,   91,  145,   62,   63,  145,
      145,  145,  145,   64,   65,   66,   67,  145,  130,  145,
      145,  145,   68,   69,  145,  145,  145,  145,  145,   70,
      145,  145,  145,  145,  145,   71,  145,  145,  145,   72,
      145,  145,  145,   73,  145,  145,  145,   74,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      145,   30,  145,  145,   31,  145,   32,  145,  145,   33,
       34,  145,   35,   36,   37,  145,   38,  145,  145,   40,
       41,   42,   43,  145,  145,   44,  127,  145,  145,   45,
      145,  145,  145,   46,  145,   47,  126,   48,   49,  145,
       50,  145,  145,  145,   51,   52,   53,   54,  145,  145,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  145,   19,  145,   20,   21,
       39,   22,  145,   23,  145,  145,   24,   25,  145,   26,
       27,  145,  145,  145,   28,   29,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  145,   10,  145,   11,  145,   12,  145,  145,
       13,    2,    2,    2,    2,    2,    2,    2,    2,    2,

      145,    7,  145,    8,    9,    2,    2,    2,    2,    2,
        5,    6,    2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1023] =
    {   0,
        0,    0,  470,  466,   67,    0,  470, 4023,  133,  135,
      428,    0, 4023, 4023,  131,  400,  133,  132,  387,  357,
      129,  129,  137,  135,  145,  196,  176,  184,  217,  124,
      141,  201,  213,  238,  255,  250,    0,  243,  269,  312,
      251,  191,  273,  144,  291,    0,  342,    0,  200,  212,
      332,  315,    0,    0,  212,  296,  207,  247,  291,  284,
      370,  437,  491,  543,  591,  643,  355,  301,  691,  300,
      266,  366,  429,  743,  791,  438,  367,  442,  841,  893,
      479,  537,  450,  388,  210,  333, 4023,  262, 4023,  338,
      245,  237, 4023, 4023, 4023, 4023,    0,  147,  178,  365,

      445,  195,  316,  481,    0,  371,  323,  491,  492,  306,
      488,  544,  360,  374,  381,  395,  417,  442,  544,  440,
      441,  473,  482,  497,  539,  539,  540,  548,  543,  538,
        0,  557,  576,  594,  585,  591,  576,  596,  593,  606,
      593,  598,  604,  602,  604,  634,  649,  647,    0,  650,
      636,  639,  658,  657,  646,  656,  659,  695,  657,  656,
      699,  700,  694,  695,  704,  698,  696,  692,  738,  710,
      709,  710,  748,  746,  732,  753, 4023,    0, 4023,    0,
      349,    0,  203,    0,  353,  190,  161,    0,    0,    0,
        0,  751,  782,  779,  813,  836,  783,  845,  880,  795,

      884,  909,  919,  934,  921,  937,  989,  960,  972,  994,
      991,  950, 1008, 1058,  867, 1020, 1024, 1037, 1039, 1045,
     1043, 1081, 1093, 1094, 1082,  915, 1095,  975, 1144, 1127,
     1119, 1104, 1148, 1161, 1201, 1187, 1184, 1189, 1202, 1203,
     1145, 1219, 1232, 1135, 1241, 1238, 1243, 1251, 1269, 1272,
     1255, 1291, 1297, 1305, 1307, 1310, 1326, 1328, 1341, 1309,
     1343, 1366, 1364, 1365, 1382, 1394, 1403, 1406, 1395, 1420,
     1428,    0, 4023,  145,    0,  757,    0,  758,  755,    0,
      801,    0,  827,  828,  841, 1434,  836,  834,  843,  955,
      969,    0,  998,    0, 1041, 1064, 1439, 1108, 1111, 1141,

     1181, 1224, 1276,    0, 1291, 1340, 1376, 1386, 1410, 1405,
     1417, 1436, 1442,    0, 1441, 1445, 1459, 1441, 1457, 1460,
     1453, 1456, 1464, 1461, 1472, 1473, 1474, 1478, 1461, 1471,
        0, 1467, 1485, 1482, 1490, 1494, 1490, 1491, 1478, 1487,
     1487,    0, 1499, 1495, 1496, 1511, 1514, 1522, 1513, 1512,
     1516, 1529, 1511, 1524, 1528, 1521, 1532,    0, 1516, 1521,
     1524, 1533,    0, 1531, 1528, 1535, 1546,    0, 1547, 1550,
     1538, 1561, 1555, 1549, 1570, 1554, 1561, 1568, 1575, 1566,
        0,  140, 1580, 1582, 1590, 1593, 1594, 1596, 1615, 1598,
     1612, 1626, 1647, 1636, 1652, 1648, 1669, 1670, 1686, 1630,

     1631, 1660, 1698, 1708, 1709, 1714, 1703, 1722, 1743, 1746,
     1738, 1748, 1776, 1754, 1762, 1777, 1800, 1792, 1788, 1759,
     1817, 1794, 1822, 1826, 1828, 1838, 1856, 1862, 1872, 1850,
     1868, 1884, 1851, 1880, 1896, 1902, 1908, 1917, 1905, 1918,
     1920, 1930, 1942, 1958, 1946, 1970, 1971, 1959, 1976, 1936,
     1988, 2000, 2010, 1982, 1984, 2016, 2025, 2021, 2038, 2054,
     2049, 2067, 2033, 2078, 2055, 2066, 2089, 2084, 2103, 2112,
     2090, 2122, 2120, 2143, 2121, 2124, 2155, 2166, 2174, 2165,
     2180, 2198, 2197, 2208, 2219, 2220, 2248, 2210, 1584, 1642,
     1668, 1700, 1713, 1744,    0, 1787,    0,    0, 1808, 1866,

     1965, 2030,    0, 2049, 2063, 2085, 2133,    0, 2156, 2168,
     2170,    0,    0, 2198, 2204, 2215, 2217, 2242, 2247, 2249,
        0, 2237,    0,    0, 2258, 2251,    0, 2254,    0,    0,
     2264, 2256, 2252, 2259, 2260, 2272,    0, 2270,    0,    0,
        0, 2265,    0, 2275,    0, 2283, 2272, 2281, 2275,    0,
     2294, 2293, 2281, 2284, 2294,    0, 2307, 2309, 2298, 2295,
     2301, 2309, 2309, 2324,    0, 2323, 2321, 2326, 2317,    0,
        0, 2314,    0, 2333, 2325, 2320, 2341, 2323, 2337, 2340,
     2338,    0, 2326,    0, 2346,    0,    0, 2357, 2359, 2351,
     2356, 2362, 2360, 2374, 2385, 2390, 2391, 2414, 2400, 2415,

     2419, 2396, 2424, 2436, 2450, 2468, 2428, 2469, 2478, 2473,
     2454, 2484, 2499, 2502, 2508, 2503, 2521, 2536, 2527, 2533,
     2542, 2538, 2552, 2570, 2567, 2561, 2582, 2576, 2586, 2592,
     2607, 2611, 2615, 2624, 2643, 2621, 2646, 2632, 2640, 2649,
     2674, 2661, 2675, 2665, 2677, 2691, 2700, 2715, 2699, 2725,
     2714, 2731, 2736, 2740, 2737, 2769, 2770, 2774, 2768, 2785,
     2791, 2804, 2822, 2759, 2803, 2825, 2814, 2833, 2819, 2828,
     2844, 2854, 2859, 2867, 2862, 2877, 2868, 2896, 2892, 2908,
     2893, 2902, 2907, 2917, 2921, 2926,    0,    0, 2405,    0,
     2445, 2459, 2486, 2478, 2561, 2573,    0, 2567, 2588, 2686,

        0, 2738, 2801, 2836, 2930, 2916, 2917, 2919, 2932, 2944,
        0,    0, 2940,    0, 2948,    0, 2936,    0,    0, 2937,
     2956, 2947, 2955,    0,    0,    0,    0, 2965,    0, 2970,
     2964, 2955,    0,    0, 2971, 2959, 2962, 2976, 2976,    0,
     2985, 2983, 2969, 2986, 2990, 2973, 2977, 2976, 2999,    0,
     2996, 3001, 3001,    0, 2990, 3009, 3010,    0, 3010, 3015,
     3019, 3016, 3021, 3024, 3050, 3025, 3054, 3038, 3053, 3059,
     3075, 3078, 3083, 3084, 3107, 3088, 3092, 3113, 3117, 3136,
     3138, 3147, 3094, 3146, 3161, 3151, 3180, 3170, 3176, 3179,
     3184, 3201, 3192, 3210, 3213, 3202, 3205, 3214, 3215, 3236,

     3238, 3250, 3264, 3254, 3255, 3259, 3268, 3280, 3290, 3272,
     3304, 3278, 3313, 3322, 3314, 3339, 3347, 3344, 3355, 3357,
     3380, 3326, 3363, 3388, 3378, 3389, 3392, 3397, 3422, 3401,
     3020,    0, 3020, 3060, 3079, 3141,    0, 3164, 3229,    0,
        0, 3291,    0,    0,    0, 3318,    0, 3314, 3337,    0,
        0,    0,    0, 3341, 3396,    0,    0, 3404, 3417,    0,
     3411, 3429, 3410,    0, 3433, 3418,    0,    0,    0, 3427,
        0, 3441, 3445, 3428,    0,    0,    0,    0, 3433, 3440,
     3451, 3452, 3466, 3460, 3462, 3477, 3463, 3494, 3481, 3485,
     3495, 3518, 3500, 3506, 3517, 3529, 3530, 3531, 3539, 3535,

     3548, 3552, 3560, 3570, 3569, 3571, 3573, 3585, 3588, 3574,
     3609, 3603, 3606, 3614, 3627, 3628, 3637, 3638, 3639, 3660,
     3643, 3672, 3677, 3676, 3662, 3678, 3681, 3693, 3702, 3710,
        0,    0,    0,    0,    0, 3538,    0, 3521,    0,    0,
        0,    0, 3606,    0, 3600, 3622,    0,    0, 3629,    0,
        0, 3666, 3703, 3712,    0,    0, 3714, 3716, 3726, 3727,
     3731, 3752, 3735, 3750, 3756, 3760, 3764, 3766, 3769, 3768,
     3785, 3781, 3790, 3800, 3804, 3802, 3806, 3821, 3830, 3835,
     3836, 3839, 3717,    0, 3803,    0, 3827,    0, 3822, 3832,
        0, 3858, 3844, 3860, 3852, 3876, 3854, 3884, 3895, 3890,

     3892,    0, 3879,    0,    0, 3894, 3898, 3912, 3908, 3909,
        0,    0, 3924, 3927, 4023, 3992, 3997,  135, 4002, 4007,
     4012, 4017
    } ;

static const flex_int16_t yy_def[1023] =
    {   0,
     1015,    1, 1016, 1016, 1015,    5, 1015, 1015, 1015, 1015,
     1015, 1017, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1015, 1019, 1015, 1020, 1020, 1015,
     1020, 1021, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1022, 1022,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1020, 1015, 1015, 1017, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1015, 1019, 1015, 1020,
     1020, 1020, 1021, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1020, 1015, 1015, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1020, 1020,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018,   62,   62,   62,   62,   62,   62,   62,   62,   62,

     1018, 1018, 1018, 1018, 1018,   62,   62,   62,   62,   62,
     1018, 1018,   62,   62,    0, 1015, 1015, 1015, 1015, 1015,
     1015, 1015
    } ;

static const flex_int16_t yy_nxt[4091] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  111,  382,
      106,  136,  112,  100,  274,  101,  113,  107,  137,  102,
      103,  176,  114,  275,  108,  115,  105,  109,  110,  116,
      382,  117,   98,  104,   99,  111,  118,  106,  136,  112,
      100,  119,  101,  113,  107,  137,  102,  103,  176,  114,
      275,  108,  115,  105,  109,  110,  116,  128,  117,  186,

      126,  181,   86,  118,  172,  129,  127,  381,  119,  120,
      276,  130,  173,   86,   86,  187,  185,  121,  138,  184,
      122,  185,  139,  123,  128,  281,  124,  126,  140,  125,
      141,  172,  129,  127,  142,  131,  120,  276,  130,  173,
      143,  132,  133,  134,  121,  138,  274,  122,  135,  139,
      123,  144,  281,  124,   91,  140,  125,  141,  188,  189,
      155,  142,  131,  152,  156,  145,  273,  143,  132,  133,
      134,  146,  147,  148,  153,  135,  272,  169,  144,  170,
      154,  149,  171,  232,  157,  150,  158,  155,  151,  159,
      152,  156,  145,  174,  175,  191,  160,  161,  146,  147,

      148,  153,  190,  192,  169,  186,  170,  154,  149,  171,
      232,  157,  150,  158,  223,  151,  159,  192,  192,  180,
      174,  175,  224,  160,  161,  162,  163,  231,  225,  164,
      192,  282,  165,  166,   86,   86,  287,  192,  192,  167,
      292,  223,  168,  182,  192,  192,   92,   90,  179,  224,
      181,   86,  162,  163,  231,  225,  164,  177,  282,  165,
      166,  187,  185,  287,  192,  192,  167,  292,   96,  168,
      180,  180,  192,  180,  180,  180,  180,  180,  180,  221,
      180,  180,  180,  233,  192,  222,  193,  234,  194,  277,
      299,  300,  192,  235,  195,  285,  196,  278,   95,  192,

      197,  198,  286,  192,  192,  271,  221,  301,  302,   91,
      233,  192,  222,  193,  234,  194,  277,  299,  300,  192,
      235,  195,  285,  196,  278,  192,  303,  197,  198,  286,
      192,  192,  271,  304,  301,  302,  180,  180,  180,   87,
      180,  180,  180,  180,  180,  180,  236,  180,  180,  180,
      237,  247,  192,  303,  199,  192,  238,  305,  279,  250,
      304,  280,  248,  251,  311,  312,  192,  192,  249, 1015,
      269,  270,   47,  236,  200,  192,   47,  237,  247,  192,
     1015,  199,  192,  238,  305,  279,  250,  192,  280,  248,
      251,  311,  312,  192,  192,  249,  192,  269,  270,  283,

      313,  200,  192,  180,  201,  264,  192,  265,  192,  290,
      266,  202,  314,  284,  192,  288,  192,  289,  203,  291,
      293,  204,  205,  192,  315,  294,  283,  313,  192, 1015,
     1015,  201,  264, 1015,  265,  192,  290,  266,  202,  314,
      284, 1015,  288,  192,  289,  203,  291,  293,  204,  205,
      267,  315,  294, 1015,  192,  192,  206,  295,  268,  306,
      207,  307,  296,  316,  208,  308,  317,  318,  297,  321,
      209,  322,  309,  210,  192,  298,  310,  267,  323,  319,
      192,  192,  320,  206,  295,  268,  306,  207,  307,  296,
      316,  208,  308,  317,  318,  297,  321,  209,  322,  309,

      210,  192,  298,  310,  324,  323,  319,  192,  192,  320,
      325,  329,  330,  331,  332,  211,  333,  212,  334,  335,
      326,  336,  213,  338,  339,  327,  328,  214,  192, 1015,
      340,  324,  337, 1015,  341,  192,  342,  325,  329,  330,
      331,  332,  211,  333,  212,  334,  335,  326,  336,  213,
      338,  339,  327,  328,  214,  192,  215,  340,  343,  337,
      192,  341,  344,  342,  216,  345,  346,  217,  347,  348,
      218,  349,  352,  219,  350,  354,  220,  353,  351,  355,
      192, 1015, 1015,  215,  359,  343,  360,  192, 1015,  344,
     1015,  216,  345,  346,  217,  347,  348,  218,  349,  352,

      219,  350,  354,  220,  353,  351,  355,  192,  192,  226,
      356,  359,  361,  360,  362,  227,  228,  229,  363,  357,
      364,  366,  230,  367,  368,  369,  372,  358,  192, 1015,
      373,  365, 1015, 1015,  374,  192,  226,  356, 1015,  361,
      375,  362,  227,  228,  229,  363,  357,  364,  366,  230,
      367,  368,  369,  372,  358,  192,  239,  373,  365,  370,
      192,  374,  371,  378,  379,  376,  380,  375,  192, 1015,
      240, 1015, 1015, 1015,  489,  490,  241,  242,  377,  491,
      192, 1015, 1015,  239, 1015, 1015,  370,  192,  192,  371,
      378,  379,  376,  380, 1015,  192,  192,  240,  383,  192,

      192,  489,  490,  241,  242,  377,  491,  192,  192,  243,
     1015,  384,  192,  389,  492,  192,  192,  244, 1015,  192,
      192,  245, 1015,  192,  246,  383,  192,  192,  192, 1015,
      192, 1015,  192, 1015, 1015,  192,  243,  385,  384,  192,
      389,  492, 1015,  192,  244,  386,  192,  192,  245,  387,
      192,  246,  388,  192,  493,  192,  252,  192,  253,  192,
      390,  254,  192,  494,  385,  495,  498,  499,  255,  256,
     1015, 1015,  386,  192, 1015,  500,  387,  192,  192,  388,
      192,  493,  192,  252,  192,  253, 1015,  390,  254,  192,
      494,  419,  495,  498,  499,  255,  256,  192,  391, 1015,

      192,  192,  500, 1015,  192,  192,  257,  258,  393,  192,
      259,  192,  392,  260,  261,  394, 1015,  192,  419, 1015,
      262,  192,  395,  263,  192,  391,  192, 1015,  192, 1015,
      192,  192,  192,  257,  258,  393,  192,  259,  192,  392,
      260,  261,  394,  396,  192,  397,  192,  262,  192,  395,
      263,  398,  192,  192,  192,  400,  192,  192,  192,  192,
     1015,  399, 1015,  192, 1015,  192,  412,  192,  501,  401,
      396,  192,  397,  192,  402, 1015, 1015,  192,  398,  192,
     1015,  192,  400,  192, 1015,  192, 1015,  192,  399,  192,
      407,  408,  192,  412,  192,  501,  401,  192,  192, 1015,

      502,  402,  403,  432,  192,  409,  192,  404,  192,  192,
     1015,  192,  192,  405,  192,  503,  192,  407,  408,  192,
      406,  410,  411,  413,  192,  192,  192,  502,  192,  403,
      432,  192,  409,  192,  404,  192,  192,  192,  192,  192,
      405,  192,  503, 1015,  420,  192, 1015,  406,  410,  411,
      413,  421,  192,  192,  192,  192,  192,  192,  192, 1015,
      192,  192,  192, 1015,  192,  504,  423,  422,  192,  424,
      425,  420,  192,  414,  192,  415,  192,  505,  421,  416,
      192,  192,  192,  192,  192, 1015,  417,  192,  192,  192,
      418, 1015,  504,  423,  422,  192,  424,  425,  192,  192,

      414,  192,  415,  192,  505, 1015,  416,  192,  426,  192,
      192,  192,  192,  417, 1015,  430,  431,  418,  192,  192,
      429,  192,  192,  508,  427,  192,  192,  428,  509, 1015,
      192,  192,  192, 1015, 1015,  426,  192,  192,  192,  192,
      438,  439,  430,  431,  192,  192,  192,  429,  192, 1015,
      508,  427,  192,  437,  428,  509,  192,  192,  192,  192,
      433,  192,  192,  192,  192,  192,  440,  438,  439,  451,
      434,  192,  192,  510, 1015,  435,  436, 1015,  192,  192,
      437,  192,  192,  192,  441,  192,  442,  433,  192,  192,
     1015,  192,  192,  440, 1015,  511,  451,  434,  192,  192,

      510,  192,  435,  436,  192,  192,  192, 1015,  192,  192,
      447,  441,  192,  442,  443,  448,  444,  446,  192,  192,
      192,  192,  511, 1015,  192,  192,  192,  445,  192, 1015,
     1015,  192,  452,  192,  449,  450,  192,  447,  192,  192,
      192,  443,  448,  444,  446,  192,  192,  192,  192,  192,
      453,  192,  512,  192,  445,  192,  192,  454,  192,  452,
      192,  449,  450,  192,  457,  192,  192,  192,  192,  192,
      455, 1015,  192,  456,  462,  192,  192,  453,  192,  512,
      192, 1015,  192,  192,  454,  192,  458,  192,  192,  192,
      459,  457,  192,  513, 1015,  192,  192,  455,  460,  192,

      456,  462,  192,  461,  514,  192,  192,  192,  192,  192,
     1015,  463,  464,  458,  192,  192,  192,  459, 1015,  192,
      513,  465,  192,  469,  192,  460,  474,  192,  192,  466,
      461,  514,  467,  192,  192,  192,  192,  468,  463,  464,
      470,  192,  192,  192,  192,  192,  192,  192,  465,  192,
      469,  192,  471,  474,  192,  192,  466,  515,  192,  467,
      192,  192, 1015,  192,  468,  192,  472,  470,  475,  192,
      192,  192,  192,  192,  192, 1015, 1015,  473,  192,  471,
      192,  192,  192,  192,  515,  192,  478,  192, 1015,  479,
      192,  516,  192,  472,  476,  475, 1015,  477,  480,  192,

     1015,  192,  192,  192,  473,  192, 1015,  192,  192,  192,
      192,  192,  486,  478, 1015,  481,  479,  517,  516,  192,
      192,  476, 1015,  484,  477,  480,  192,  482,  192,  192,
      192,  192,  192,  483,  518,  519,  485,  192,  192,  486,
      192,  488,  481,  192,  517,  192,  192,  192,  520,  496,
      484,  497,  487,  521,  482,  522,  506,  192,  192,  192,
      483,  518,  519,  485,  192,  192,  523,  192,  488,  524,
      192,  507,  192,  525,  526,  520,  496,  527,  497,  487,
      521,  528,  522,  506,  192,  529,  530,  531,  532,  533,
      534,  535,  192,  523,  538,  536,  524,  539,  507,  540,

      525,  526,  541,  542,  527,  537,  543,  544,  528,  545,
      546,  547,  529,  530,  531,  532,  533,  534,  535,  548,
      549,  538,  536,  550,  539,  551,  540,  552,  553,  541,
      542,  554,  537,  543,  544,  555,  545,  546,  547,  556,
      557,  558,  559,  560,  561,  562,  548,  549,  563,  564,
      550,  565,  551,  566,  552,  553,  567,  568,  554,  569,
      570,  571,  555,  572,  573,  577,  556,  557,  558,  559,
      560,  561,  562,  574,  578,  563,  564,  575,  565,  576,
      566,  579,  580,  567,  568,  581,  569,  570,  571,  582,
      572,  573,  577,  583,  584,  586,  587,  192,  585,  588,

      574,  578, 1015, 1015,  575, 1015,  576,  192,  579,  580,
      589,  192,  581,  192,  687,  192,  582,  192,  590,  192,
      583,  584,  586,  587,  192,  585,  588,  192,  591,  192,
      192,  192,  192,  192,  192,  192, 1015,  589,  192,  592,
      192,  687,  192,  192,  192,  590,  192,  192,  602,  192,
     1015,  595,  192,  596,  192,  591,  192,  192,  192,  192,
      192,  593,  192,  192,  192,  192,  592,  192,  192,  192,
      192,  594,  688,  192,  192,  602,  192,  192,  595,  192,
      596,  598,  597,  600,  192,  192,  192,  192,  593,  192,
      192,  192,  192, 1015,  192,  192,  192,  192,  594,  688,

      192,  599, 1015,  192,  192,  689,  192,  192,  598,  597,
      600,  192,  192,  192,  192,  192,  192,  601, 1015, 1015,
      608,  604,  603,  192,  192,  192,  605, 1015,  599,  607,
      192,  192,  689,  192,  192,  192, 1015,  690, 1015,  192,
      192,  606,  192,  691,  601,  192,  192,  608,  604,  603,
      192,  192,  192,  605,  609,  612,  607,  610,  192,  192,
      192,  692,  192,  192,  690,  192,  192,  192,  606, 1015,
      691,  614,  192,  192,  611,  192,  620,  615,  192,  192,
      192,  609,  612,  192,  610,  192,  192,  192,  692,  613,
      192,  192,  192,  192,  192, 1015,  192, 1015,  614,  192,

      693,  611,  192,  620,  615,  192,  192,  192,  616,  192,
      192,  192,  192,  192,  192, 1015,  613,  192,  192,  619,
      192,  192,  618,  192,  617,  192,  192,  693, 1015,  192,
      621,  192,  192,  694,  192,  616,  192,  192,  192,  192,
      192,  192,  624,  192,  192,  192,  619,  622, 1015,  618,
      623,  617,  192, 1015,  192,  192,  192,  621,  192,  192,
      694,  192, 1015,  192,  192,  192,  192,  192,  632,  624,
      192,  625,  192,  192,  622,  192,  626,  623, 1015,  192,
      629,  192,  192,  627, 1015,  192,  192,  192,  192,  192,
      192,  630,  192,  192,  192,  632,  695,  633,  625,  192,

      192,  192,  192,  626,  628,  192,  192,  629, 1015,  192,
      627,  631,  192,  634,  192,  192,  192,  192,  630,  635,
      192,  192,  192,  695,  633,  192,  192, 1015,  192,  636,
     1015,  628,  192,  192,  192,  192,  192,  640,  631,  192,
      634,  637,  192,  638,  192,  192,  635,  192,  192,  192,
      639,  641,  192,  192,  192,  192,  636,  192,  642,  192,
      192,  192,  192,  192,  640,  644,  192,  192,  637,  192,
      638,  643,  192,  192,  192,  192,  192,  639,  641,  192,
      192,  192,  192,  192,  192,  642,  192,  192,  192,  645,
      192,  647,  644,  192,  192,  192,  192,  696,  643,  652,

      192,  653,  192,  192,  646,  192,  192,  192,  192,  648,
      192, 1015,  649,  192,  192,  192,  645,  192,  647,  192,
      192,  192,  192,  192,  696,  192,  652,  192,  653,  654,
      650,  646,  192,  192,  192,  192,  648,  192,  192,  649,
      192,  651,  192, 1015,  192, 1015,  192,  192,  192,  656,
      661,  655,  192,  192,  192,  192,  654,  650,  192, 1015,
      192,  697,  192,  657,  192,  192,  192,  658,  651,  192,
      192,  192,  663,  698,  192,  192,  656,  661,  655, 1015,
      192,  659,  192,  192,  192,  192,  192,  660,  697,  192,
      657,  192,  192,  192,  658,  192,  699,  192,  192,  663,

      698,  192,  192,  192,  192,  662,  192,  192,  659, 1015,
      192,  192, 1015,  192,  660,  192,  665,  700,  192,  192,
      192,  192,  192,  699,  664, 1015,  192,  192,  192,  192,
      192,  192,  662,  192,  192,  666,  667,  192,  671,  192,
      192,  192,  192,  665,  700, 1015,  701,  192,  192,  192,
      668,  664,  669,  192,  192, 1015,  192,  192,  192,  192,
      192,  192,  666,  667,  192,  671,  192,  192,  192,  670,
     1015,  702,  672,  701, 1015, 1015,  192,  668,  677,  669,
      192,  673,  192,  192,  192,  192,  192,  192,  192,  703,
     1015,  192,  192,  674,  704,  675,  670,  192,  702,  672,

     1015,  676,  192,  192, 1015,  677,  678,  192,  673,  192,
      192,  192,  680, 1015,  192,  192,  703,  192,  192,  192,
      674,  704,  675, 1015,  192,  192,  705,  192,  676,  192,
      192,  679,  706,  678,  192,  192,  192,  192,  192,  680,
      686,  192,  192,  681,  192,  192,  683,  192,  707,  708,
      684,  682,  192,  705,  192,  709,  192,  192,  679,  706,
      710,  192,  192,  192,  192,  192,  711,  686,  685,  712,
      681,  713,  192,  683,  192,  707,  708,  684,  682,  714,
      715,  716,  709,  192,  192,  192,  717,  710,  718,  719,
      720,  721,  192,  711,  723,  685,  712,  724,  713,  725,

      726,  729,  722,  727,  728,  730,  714,  715,  716,  731,
      732,  733,  192,  717,  734,  718,  719,  720,  721,  735,
      736,  723,  737,  738,  724,  739,  725,  726,  729,  722,
      727,  728,  730,  740,  741,  742,  731,  732,  733,  743,
      744,  734,  745,  746,  747,  748,  735,  736,  749,  737,
      738,  750,  739,  751,  752,  753,  754,  755,  756,  757,
      740,  741,  742,  758, 1015, 1015,  743,  744,  192,  745,
      746,  747,  748,  192,  192,  749,  192,  764,  750,  192,
      751,  752,  753,  754,  755,  756,  757,  759,  761,  760,
      758,  192,  763,  762,  192,  192,  192,  192,  765,  192,

      192,  192,  192,  192,  764, 1015,  192,  192,  192, 1015,
     1015,  192, 1015,  192,  759,  761,  760,  192,  192,  763,
      762,  192,  192,  192,  192,  765,  192,  192,  192,  192,
      767,  192,  192,  192,  192,  192,  192,  192,  192,  766,
      192,  192, 1015,  831,  192,  192, 1015,  768,  770,  192,
      769,  192,  192,  192,  192,  192,  192,  767,  192,  192,
      192,  192,  832,  192,  192,  192,  766,  192,  192,  771,
      831,  192,  192,  192,  768,  770,  833,  769,  192,  192,
      192,  773,  772,  192,  774,  192,  192,  192,  192,  832,
      192,  192,  192, 1015,  192,  192,  771,  776,  192,  775,

      192,  192,  834,  833,  835,  192,  192, 1015,  773,  772,
      192,  774,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192, 1015,  776,  192,  775,  777,  192,  834,
      778,  835,  192,  192,  781,  780,  192,  192,  192,  192,
      192,  779,  192,  192,  783,  192,  192,  192,  192,  782,
      192, 1015,  192,  192,  777,  192, 1015,  778,  192,  192,
     1015,  781,  780,  192,  192,  192,  192,  192,  779,  192,
      192,  783,  192,  192,  784,  192,  782,  192,  192,  192,
      192, 1015,  192,  785,  192,  192,  192,  192,  836,  192,
      837,  192, 1015,  192,  838,  786,  192,  192,  192,  192,

      192,  784,  192,  192,  192,  192,  192,  192,  787,  788,
      785,  192,  839,  192,  192,  836,  192,  837, 1015,  192,
      192,  838,  786,  192,  192,  192,  192, 1015,  192,  192,
      192,  192,  192, 1015,  192,  787,  788,  789,  192,  839,
      192,  192, 1015, 1015,  192,  791,  192,  790,  192,  192,
      192,  192,  192, 1015,  792,  192,  192,  192,  192,  192,
      192,  192,  793,  192,  789,  192,  192, 1015,  192,  192,
      795,  192,  791,  794,  790,  192,  192,  192,  192,  192,
      192,  792,  192,  192,  192,  192,  192,  192,  192,  793,
      192,  192,  192,  192,  798, 1015,  192,  795,  192,  797,

      794, 1015,  192,  840,  192,  192,  796,  192,  192,  192,
      192,  192,  192,  192,  192, 1015,  192,  192,  192,  192,
      801,  798,  799,  800, 1015,  192,  797, 1015,  192,  192,
      840,  804,  192,  796, 1015,  192,  192,  192,  192,  192,
      803,  192,  192,  192,  192,  802, 1015,  801,  192,  799,
      800,  192,  192,  192,  192,  192, 1015,  192,  804,  192,
     1015,  805,  192,  192,  192,  807,  806,  803,  192,  192,
      841, 1015,  802,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  808,  809,  192,  192,  192,  192,  805,  192,
     1015,  192,  807,  806, 1015,  192,  192,  841,  811,  810,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  808,
      809,  192,  192,  192,  192, 1015,  813,  812,  192, 1015,
      816,  192,  192,  192, 1015,  811,  810,  842,  192,  192,
      814,  818,  192,  192,  192,  192,  192,  815,  192,  192,
      192,  192,  192,  813,  812,  192,  817,  816,  192,  192,
      192,  192, 1015,  843,  842,  192,  192,  814,  818,  192,
      819,  192,  192,  192,  815,  192,  192,  192,  192,  192,
      192,  192,  192,  817,  821,  820,  192,  192,  192,  192,
      843,  192, 1015,  192,  192,  192,  192,  819,  192,  192,
      824,  192,  192,  822,  192,  823,  192,  192,  192,  192,

      825,  821,  820,  192,  192,  192,  192, 1015,  192,  827,
      192,  192,  192,  192,  192,  826, 1015,  824,  192,  192,
      822,  192,  823,  192,  192,  192,  192,  825,  828,  192,
      192,  192,  192,  192,  830,  829,  827,  192,  192,  192,
      192,  192,  826,  192,  192,  192,  192,  844,  845,  846,
      847,  192,  192,  848,  192,  828,  192,  192,  192,  849,
      192,  830,  829,  192,  850,  192,  192,  851,  852,  853,
      192,  192,  192,  854,  844,  845,  846,  847,  855,  856,
      848,  192,  857,  858,  859,  192,  849,  860,  861,  862,
      192,  850,  863,  864,  851,  852,  853,  865,  866,  867,

      854,  868,  869,  870,  871,  855,  856,  872,  873,  857,
      858,  859,  874,  875,  860,  861,  862,  876,  877,  863,
      864,  878,  879,  880,  865,  866,  867,  192,  868,  869,
      870,  871,  192,  192,  872,  873,  192,  931,  882,  874,
      875,  883,  192, 1015,  876,  877,  932,  192,  878,  879,
      880,  885,  192,  192,  192,  887,  192,  881,  192,  192,
      192,  192,  192,  192,  931,  882,  884,  192,  883,  192,
      192,  192, 1015,  932,  192,  192,  192,  933,  885,  192,
      192,  886,  887,  192,  881,  192,  888,  192,  192,  192,
      192,  192,  192,  884,  192,  890,  192,  192,  192,  889,

      192,  192,  192,  192,  933,  893, 1015, 1015,  886,  894,
      934,  192,  192,  888,  192,  192,  891,  192,  192,  192,
      192,  192,  890,  192,  192,  192,  889,  192,  192,  192,
      192,  192,  893,  892,  192, 1015,  894,  934,  192,  192,
     1015, 1015,  192,  891,  192,  895, 1015,  192,  192,  896,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  898,
      892,  192,  899,  192,  192,  935, 1015,  897,  192, 1015,
     1015,  192,  895,  192, 1015,  192,  896,  192,  192,  936,
      192,  192,  192,  192,  192,  900,  898,  192,  192,  899,
      192,  192,  935,  192,  897,  192,  192,  192,  192,  901,

      192,  192,  192, 1015, 1015,  192,  936,  192,  902,  904,
      192,  192,  900,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  901,  192,  192,  192,
      192,  192,  192,  903,  192,  902,  904,  906,  192,  192,
      192,  905,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  907,  192,  192,  192,  192,  192,  192,
      903,  937, 1015,  908,  906,  192,  192,  192,  905,  192,
     1015,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      907,  192,  192, 1015,  909,  911,  910,  192,  937,  914,
      908,  192,  192, 1015,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192, 1015,  192,  938,  192,  192,  192,
      912,  909,  911,  910,  192,  192,  914,  192,  192,  192,
      913,  192,  192,  192,  192,  915,  916,  192,  192, 1015,
      192,  192,  192,  938,  192,  939,  192,  912,  917,  192,
      940,  192,  192,  192,  192, 1015,  918,  913,  192, 1015,
      192,  192,  915,  916,  192,  919,  192,  192,  192,  192,
      920,  192,  939,  192,  192,  917,  192,  940,  192,  941,
      192,  942,  192,  918,  192,  921,  192,  192,  192, 1015,
      925,  192,  919,  192,  192,  922,  192,  920,  192,  923,
      192,  192,  192,  924,  192,  927,  941,  192,  942,  192,

      192,  192,  921,  192,  926,  192,  192,  925,  192,  192,
      929,  192,  922,  943,  192,  192,  923,  192,  192,  192,
      924,  192,  927,  928,  192,  192,  192,  192,  944,  192,
      945,  926,  192,  192,  192,  930,  192,  929,  192,  192,
      943,  192,  192,  946,  192,  192,  947,  948,  949,  950,
      928,  951,  192,  192,  952,  944,  192,  945,  953,  192,
      954,  192,  930,  955,  956,  192,  192, 1015,  957,  192,
      946, 1015, 1015,  947,  948,  949,  950,  959,  951,  192,
      192,  952, 1015,  192, 1015,  953,  192,  954,  192,  192,
      955,  956,  958,  960,  192,  957,  192,  192,  192,  192,

      192,  961,  192,  192,  959, 1015,  192,  192, 1015,  962,
      192,  192,  192,  963,  192,  192,  192,  192,  192,  958,
      960,  192,  192,  192,  192,  192,  192,  192,  961,  192,
      192,  192,  192,  964,  192,  192,  962,  192,  192,  192,
      963,  192, 1015,  192,  192,  192,  965,  192,  192,  192,
      192,  983,  192,  984,  192,  192,  192,  966,  192,  192,
      964,  192,  192, 1015,  192,  192,  192,  192,  192,  192,
      192,  967,  192,  965,  192,  192,  192,  192,  983,  192,
      984,  192,  192,  192,  966,  192,  969,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  967,  192,

      968,  971,  192,  192,  192,  192,  192,  192,  192,  970,
      192,  192,  192,  969,  192,  192,  192,  192,  192, 1015,
      973,  985,  192,  192,  192,  192,  192,  968,  971,  192,
      986,  192,  192,  192,  192,  192,  970,  192,  192,  987,
      192,  972,  975,  974,  192,  192,  192,  973,  985,  192,
      192,  192,  192,  192,  192,  192,  192,  986,  192,  976,
      192,  988, 1015, 1015,  192,  192,  987,  192,  972,  975,
      974,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  977,  978,  976,  192,  988,  192,
      979,  192,  192,  192,  192,  192,  989,  192,  192,  192,

     1015,  192,  192,  192,  192, 1015,  192,  192,  980,  192,
      192,  977,  978,  192,  192,  192,  192,  979,  192,  192,
      192,  192,  192,  989,  192,  192,  192,  192,  990,  991,
      192,  192,  981,  192,  982,  980,  192,  192, 1015,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192, 1001,
     1015,  192,  192,  192,  192,  990,  991,  192,  192,  981,
      192,  982, 1015,  192,  192,  992,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192, 1001,  192,  192,  192,
      192,  192,  993,  192,  994,  192,  192,  192, 1015,  192,
      192,  192,  992,  192,  192,  192,  192,  192,  996,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  993,
      192,  994,  192,  192,  192,  995,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  996, 1015,  192,  192,  192,
      192, 1015,  192,  192,  192, 1002,  997,  192,  192,  192,
     1015,  192,  995,  192,  192,  192,  192,  192,  192,  192,
      192,  998, 1000,  192,  192,  999,  192, 1003,  192, 1004,
     1005,  192, 1002,  997,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  998, 1000,
      192,  192,  999,  192, 1003,  192, 1004, 1005,  192,  192,
     1006,  192, 1007,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192, 1015, 1008,  192,  192, 1011,
     1012, 1013,  192,  192, 1015,  192,  192, 1006,  192, 1007,
      192, 1009,  192, 1010,  192,  192,  192,  192,  192,  192,
     1015,  192,  192, 1008,  192,  192, 1011, 1012, 1013,  192,
      192,  192,  192, 1014,  192,  192,  192, 1015, 1009,  192,
     1010, 1015,  192,  192,  192, 1015,  192, 1015,  192,  192,
     1015,  192,  192, 1015,  192, 1015, 1015, 1015,  192, 1015,
     1014,  192,  192,  192, 1015, 1015,  192, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,  192, 1015,
     1015,  192,   46,   46,   46,   46,   46,   88, 1015, 1015,

       88,   88,  178,  178,  178, 1015,  178,  180, 1015,  180,
      180,  180,  183, 1015,  183,  183,  183,  192, 1015,  192,
      192,  192,    7, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015
    } ;

static const flex_int16_t yy_chk[4091] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1018,
       15,   17,   17,   18,   18,   21,   22,   21,   24,  382,
       23,   30,   24,   21,  274,   21,   24,   23,   31,   21,
       21,   44,   24,   98,   23,   24,   22,   23,   23,   25,
      187,   25,   21,   22,   21,   24,   25,   23,   30,   24,
       21,   25,   21,   24,   23,   31,   21,   21,   44,   24,
       98,   23,   24,   22,   23,   23,   25,   28,   25,  186,

       27,   49,   49,   25,   42,   28,   27,  183,   25,   26,
       99,   28,   42,   50,   50,   57,   57,   26,   32,   55,
       26,   55,   32,   26,   28,  102,   26,   27,   32,   26,
       33,   42,   28,   27,   33,   29,   26,   99,   28,   42,
       33,   29,   29,   29,   26,   32,   92,   26,   29,   32,
       26,   34,  102,   26,   91,   32,   26,   33,   58,   58,
       38,   33,   29,   36,   38,   34,   88,   33,   29,   29,
       29,   34,   34,   35,   36,   29,   85,   41,   34,   41,
       36,   35,   41,   71,   39,   35,   39,   38,   35,   39,
       36,   38,   34,   43,   43,   60,   39,   39,   34,   34,

       35,   36,   59,   71,   41,   56,   41,   36,   35,   41,
       71,   39,   35,   39,   68,   35,   39,   70,   68,   52,
       43,   43,   68,   39,   39,   40,   40,   70,   68,   40,
       71,  103,   40,   40,   86,   86,  107,   70,   68,   40,
      110,   68,   40,   51,   70,   68,   90,   90,   47,   68,
      181,  181,   40,   40,   70,   68,   40,   45,  103,   40,
       40,  185,  185,  107,   70,   68,   40,  110,   20,   40,
       61,   61,   67,   61,   61,   61,   61,   61,   61,   67,
       61,   61,   61,   72,   77,   67,   61,   72,   61,  100,
      113,  113,   67,   72,   61,  106,   61,  100,   19,   67,

       61,   61,  106,   72,   77,   84,   67,  114,  115,   16,
       72,   77,   67,   61,   72,   61,  100,  113,  113,   67,
       72,   61,  106,   61,  100,   84,  116,   61,   61,  106,
       72,   77,   84,  117,  114,  115,   61,   62,   62,   11,
       62,   62,   62,   62,   62,   62,   73,   62,   62,   62,
       73,   76,   84,  116,   62,   76,   73,  118,  101,   78,
      117,  101,   76,   78,  120,  121,   73,   83,   76,    7,
       83,   83,    4,   73,   62,   76,    3,   73,   76,   78,
        0,   62,   76,   73,  118,  101,   78,   83,  101,   76,
       78,  120,  121,   73,   83,   76,   81,   83,   83,  104,

      122,   62,   76,   62,   63,   81,   78,   81,   63,  109,
       81,   63,  123,  104,   83,  108,   81,  108,   63,  109,
      111,   63,   63,   81,  124,  111,  104,  122,   63,    0,
        0,   63,   81,    0,   81,   63,  109,   81,   63,  123,
      104,    0,  108,   81,  108,   63,  109,  111,   63,   63,
       82,  124,  111,    0,   82,   63,   64,  112,   82,  119,
       64,  119,  112,  125,   64,  119,  126,  127,  112,  129,
       64,  130,  119,   64,   82,  112,  119,   82,  132,  128,
       64,   82,  128,   64,  112,   82,  119,   64,  119,  112,
      125,   64,  119,  126,  127,  112,  129,   64,  130,  119,

       64,   82,  112,  119,  133,  132,  128,   64,   65,  128,
      134,  135,  136,  137,  138,   65,  139,   65,  139,  140,
      134,  140,   65,  141,  142,  134,  134,   65,   65,    0,
      143,  133,  140,    0,  144,   65,  145,  134,  135,  136,
      137,  138,   65,  139,   65,  139,  140,  134,  140,   65,
      141,  142,  134,  134,   65,   65,   66,  143,  146,  140,
       66,  144,  147,  145,   66,  148,  150,   66,  151,  152,
       66,  153,  155,   66,  154,  156,   66,  155,  154,  157,
       66,    0,    0,   66,  159,  146,  160,   66,    0,  147,
        0,   66,  148,  150,   66,  151,  152,   66,  153,  155,

       66,  154,  156,   66,  155,  154,  157,   66,   69,   69,
      158,  159,  161,  160,  162,   69,   69,   69,  163,  158,
      164,  165,   69,  166,  167,  168,  170,  158,   69,    0,
      171,  164,    0,    0,  172,   69,   69,  158,    0,  161,
      172,  162,   69,   69,   69,  163,  158,  164,  165,   69,
      166,  167,  168,  170,  158,   69,   74,  171,  164,  169,
       74,  172,  169,  174,  175,  173,  176,  172,  192,    0,
       74,    0,    0,    0,  276,  278,   74,   74,  173,  279,
       74,    0,    0,   74,    0,    0,  169,   74,  192,  169,
      174,  175,  173,  176,    0,  192,  194,   74,  193,  193,

      197,  276,  278,   74,   74,  173,  279,   74,   75,   75,
        0,  194,  200,  197,  281,  192,  194,   75,    0,  193,
      197,   75,    0,  194,   75,  193,  193,  197,   75,    0,
      195,    0,  200,    0,    0,   75,   75,  195,  194,  200,
      197,  281,    0,  194,   75,  195,  193,  197,   75,  196,
      195,   75,  196,  196,  283,   75,   79,  195,   79,  200,
      198,   79,  198,  284,  195,  285,  287,  288,   79,   79,
        0,    0,  195,  196,    0,  289,  196,  195,   79,  196,
      196,  283,  198,   79,  215,   79,    0,  198,   79,  198,
      284,  215,  285,  287,  288,   79,   79,  199,  199,    0,

      196,  201,  289,    0,  215,   79,   80,   80,  201,  198,
       80,  215,  199,   80,   80,  201,    0,  199,  215,    0,
       80,  201,  202,   80,  199,  199,  202,    0,  201,    0,
       80,  215,  226,   80,   80,  201,  203,   80,  205,  199,
       80,   80,  201,  203,  199,  203,  202,   80,  201,  202,
       80,  204,  226,  202,  206,  205,  203,   80,  205,  226,
        0,  204,    0,  203,    0,  205,  212,  212,  290,  206,
      203,  204,  203,  202,  206,    0,    0,  208,  204,  226,
        0,  206,  205,  203,    0,  205,    0,  212,  204,  209,
      208,  208,  228,  212,  212,  290,  206,  208,  204,    0,

      291,  206,  207,  228,  208,  209,  207,  207,  211,  209,
        0,  210,  228,  207,  212,  293,  209,  208,  208,  228,
      207,  210,  211,  213,  208,  213,  207,  291,  211,  207,
      228,  210,  209,  207,  207,  211,  209,  216,  210,  228,
      207,  217,  293,    0,  216,  213,    0,  207,  210,  211,
      213,  217,  213,  207,  218,  211,  219,  216,  210,    0,
      221,  217,  220,    0,  216,  295,  219,  218,  217,  220,
      221,  216,  213,  214,  218,  214,  219,  296,  217,  214,
      221,  218,  220,  219,  216,    0,  214,  221,  217,  220,
      214,    0,  295,  219,  218,  214,  220,  221,  222,  225,

      214,  218,  214,  219,  296,    0,  214,  221,  222,  220,
      223,  224,  227,  214,    0,  225,  227,  214,  222,  225,
      224,  232,  214,  298,  223,  222,  225,  223,  299,    0,
      223,  224,  227,    0,    0,  222,  231,  223,  224,  227,
      231,  232,  225,  227,  230,  222,  225,  224,  232,    0,
      298,  223,  244,  230,  223,  299,  231,  223,  224,  227,
      229,  229,  241,  231,  230,  233,  233,  231,  232,  241,
      229,  230,  244,  300,    0,  229,  229,    0,  234,  244,
      230,  229,  241,  231,  234,  233,  234,  229,  229,  241,
        0,  230,  233,  233,    0,  301,  241,  229,  234,  244,

      300,  237,  229,  229,  236,  234,  238,    0,  229,  241,
      237,  234,  233,  234,  235,  238,  235,  236,  235,  239,
      240,  237,  301,    0,  236,  234,  238,  235,  237,    0,
        0,  236,  242,  238,  239,  240,  242,  237,  235,  239,
      240,  235,  238,  235,  236,  235,  239,  240,  237,  243,
      243,  236,  302,  238,  235,  246,  242,  245,  245,  242,
      247,  239,  240,  242,  248,  235,  239,  240,  248,  243,
      246,    0,  251,  247,  251,  246,  243,  243,  245,  302,
      247,    0,  246,  242,  245,  245,  249,  247,  248,  250,
      249,  248,  251,  303,    0,  248,  243,  246,  250,  251,

      247,  251,  246,  250,  305,  245,  249,  247,  252,  250,
        0,  252,  253,  249,  253,  248,  250,  249,    0,  251,
      303,  253,  254,  256,  255,  250,  260,  256,  252,  253,
      250,  305,  254,  249,  253,  252,  250,  255,  252,  253,
      257,  253,  254,  257,  255,  258,  260,  256,  253,  254,
      256,  255,  258,  260,  256,  252,  253,  306,  259,  254,
      261,  253,    0,  257,  255,  258,  259,  257,  261,  254,
      257,  255,  258,  260,  256,    0,    0,  259,  259,  258,
      261,  263,  264,  262,  306,  259,  264,  261,    0,  264,
      257,  307,  258,  259,  262,  261,    0,  263,  265,  265,

        0,  263,  264,  262,  259,  259,    0,  261,  263,  264,
      262,  266,  269,  264,    0,  266,  264,  308,  307,  265,
      267,  262,    0,  268,  263,  265,  265,  267,  263,  264,
      262,  266,  269,  267,  309,  310,  268,  270,  266,  269,
      267,  271,  266,  268,  308,  271,  265,  267,  311,  286,
      268,  286,  270,  312,  267,  313,  297,  270,  266,  269,
      267,  309,  310,  268,  270,  271,  315,  267,  271,  316,
      268,  297,  271,  317,  318,  311,  286,  319,  286,  270,
      312,  320,  313,  297,  270,  321,  322,  323,  324,  325,
      326,  327,  271,  315,  329,  328,  316,  330,  297,  332,

      317,  318,  333,  334,  319,  328,  335,  336,  320,  337,
      338,  339,  321,  322,  323,  324,  325,  326,  327,  340,
      341,  329,  328,  343,  330,  344,  332,  345,  346,  333,
      334,  347,  328,  335,  336,  348,  337,  338,  339,  349,
      350,  351,  352,  353,  354,  355,  340,  341,  356,  357,
      343,  359,  344,  360,  345,  346,  361,  362,  347,  364,
      365,  366,  348,  367,  369,  371,  349,  350,  351,  352,
      353,  354,  355,  369,  372,  356,  357,  370,  359,  370,
      360,  373,  374,  361,  362,  375,  364,  365,  366,  376,
      367,  369,  371,  377,  378,  379,  380,  383,  378,  384,

      369,  372,    0,    0,  370,    0,  370,  385,  373,  374,
      386,  387,  375,  388,  489,  390,  376,  383,  387,  384,
      377,  378,  379,  380,  383,  378,  384,  385,  389,  391,
      386,  387,  389,  388,  385,  390,    0,  386,  387,  391,
      388,  489,  390,  392,  383,  387,  384,  400,  401,  391,
        0,  394,  389,  394,  385,  389,  391,  386,  387,  389,
      388,  392,  390,  392,  393,  396,  391,  400,  401,  395,
      392,  393,  490,  394,  400,  401,  391,  402,  394,  389,
      394,  396,  395,  398,  393,  396,  397,  398,  392,  395,
      392,  393,  396,    0,  400,  401,  395,  402,  393,  490,

      394,  397,    0,  399,  402,  491,  397,  398,  396,  395,
      398,  393,  396,  397,  398,  403,  395,  399,    0,    0,
      407,  404,  403,  399,  402,  404,  405,    0,  397,  406,
      399,  406,  491,  397,  398,  403,    0,  492,    0,  408,
      407,  405,  403,  493,  399,  404,  405,  407,  404,  403,
      399,  406,  404,  405,  408,  411,  406,  409,  406,  408,
      409,  494,  403,  410,  492,  412,  408,  407,  405,    0,
      493,  414,  404,  405,  410,  411,  420,  415,  406,  415,
      409,  408,  411,  410,  409,  412,  408,  409,  494,  413,
      410,  414,  412,  413,  416,    0,  420,    0,  414,  415,

      496,  410,  411,  420,  415,  419,  415,  409,  416,  418,
      410,  422,  412,  413,  416,    0,  413,  417,  414,  419,
      413,  416,  418,  420,  417,  419,  415,  496,    0,  418,
      421,  422,  419,  499,  421,  416,  418,  417,  422,  423,
      413,  416,  425,  424,  417,  425,  419,  423,    0,  418,
      424,  417,  419,    0,  421,  426,  418,  421,  422,  423,
      499,  421,    0,  424,  417,  425,  423,  430,  433,  425,
      424,  426,  425,  427,  423,  426,  427,  424,    0,  428,
      430,  421,  426,  428,    0,  431,  423,  430,  433,  429,
      424,  431,  425,  427,  430,  433,  500,  434,  426,  428,

      427,  432,  426,  427,  429,  431,  428,  430,    0,  429,
      428,  432,  431,  435,  430,  433,  429,  434,  431,  436,
      427,  432,  439,  500,  434,  437,  428,    0,  432,  436,
        0,  429,  431,  435,  438,  440,  429,  441,  432,  436,
      435,  437,  439,  438,  434,  437,  436,  442,  432,  439,
      440,  442,  437,  450,  438,  440,  436,  441,  443,  443,
      435,  438,  440,  445,  441,  445,  436,  442,  437,  439,
      438,  444,  437,  450,  442,  444,  448,  440,  442,  443,
      450,  438,  440,  445,  441,  443,  443,  446,  447,  446,
      445,  448,  445,  449,  442,  444,  448,  501,  444,  454,

      450,  455,  444,  448,  447,  451,  443,  446,  447,  449,
      445,    0,  451,  449,  446,  447,  446,  452,  448,  454,
      449,  455,  444,  448,  501,  451,  454,  453,  455,  456,
      452,  447,  451,  456,  446,  447,  449,  452,  458,  451,
      449,  453,  457,    0,  452,    0,  454,  453,  455,  458,
      463,  457,  451,  456,  453,  459,  456,  452,  458,    0,
      456,  502,  457,  459,  452,  458,  461,  460,  453,  457,
      463,  460,  465,  504,  453,  459,  458,  463,  457,    0,
      456,  461,  459,  466,  462,  458,  461,  462,  502,  457,
      459,  460,  465,  461,  460,  464,  505,  463,  460,  465,

      504,  468,  459,  466,  462,  464,  467,  471,  461,    0,
      466,  462,    0,  461,  462,  464,  468,  506,  460,  465,
      469,  468,  464,  505,  467,    0,  467,  471,  468,  470,
      466,  462,  464,  467,  471,  469,  470,  473,  475,  472,
      469,  476,  464,  468,  506,    0,  507,  469,  468,  470,
      472,  467,  473,  467,  471,    0,  470,  473,  475,  472,
      474,  476,  469,  470,  473,  475,  472,  469,  476,  474,
        0,  509,  477,  507,    0,    0,  470,  472,  480,  473,
      474,  477,  480,  478,  473,  475,  472,  474,  476,  510,
        0,  479,  477,  478,  511,  478,  474,  481,  509,  477,

        0,  479,  480,  478,    0,  480,  481,  474,  477,  480,
      478,  479,  483,    0,  483,  482,  510,  481,  479,  477,
      478,  511,  478,    0,  481,  484,  514,  488,  479,  480,
      478,  482,  515,  481,  483,  482,  485,  486,  479,  483,
      488,  483,  482,  484,  481,  484,  486,  488,  516,  517,
      486,  485,  484,  514,  488,  518,  485,  486,  482,  515,
      519,  483,  482,  485,  486,  487,  520,  488,  487,  522,
      484,  525,  484,  486,  488,  516,  517,  486,  485,  526,
      528,  531,  518,  485,  486,  487,  532,  519,  533,  534,
      535,  536,  487,  520,  538,  487,  522,  542,  525,  544,

      546,  548,  536,  547,  547,  549,  526,  528,  531,  551,
      552,  553,  487,  532,  554,  533,  534,  535,  536,  555,
      557,  538,  558,  559,  542,  560,  544,  546,  548,  536,
      547,  547,  549,  561,  562,  563,  551,  552,  553,  564,
      566,  554,  567,  568,  569,  572,  555,  557,  574,  558,
      559,  575,  560,  576,  577,  578,  579,  580,  581,  583,
      561,  562,  563,  585,    0,    0,  564,  566,  590,  567,
      568,  569,  572,  591,  588,  574,  589,  593,  575,  592,
      576,  577,  578,  579,  580,  581,  583,  588,  590,  589,
      585,  594,  592,  591,  588,  590,  589,  593,  595,  592,

      591,  588,  595,  589,  593,    0,  592,  596,  597,    0,
        0,  594,    0,  602,  588,  590,  589,  599,  594,  592,
      591,  588,  595,  589,  593,  595,  592,  596,  597,  595,
      599,  598,  600,  602,  596,  597,  601,  599,  594,  598,
      602,  603,    0,  689,  599,  607,    0,  600,  603,  595,
      601,  598,  600,  604,  596,  597,  601,  599,  598,  600,
      602,  603,  691,  601,  599,  607,  598,  605,  603,  604,
      689,  611,  607,  604,  600,  603,  692,  601,  598,  600,
      604,  606,  605,  601,  608,  606,  608,  605,  603,  691,
      610,  611,  607,    0,  605,  609,  604,  610,  611,  609,

      604,  612,  693,  692,  694,  606,  608,    0,  606,  605,
      610,  608,  606,  608,  605,  609,  613,  610,  611,  614,
      616,  612,  609,    0,  610,  615,  609,  613,  612,  693,
      614,  694,  606,  608,  617,  616,  613,  610,  617,  614,
      616,  615,  609,  613,  619,  615,  614,  616,  612,  618,
      620,    0,  615,  618,  613,  622,    0,  614,  617,  621,
        0,  617,  616,  613,  619,  617,  614,  616,  615,  623,
      620,  619,  615,  618,  621,  622,  618,  620,  626,  621,
      618,    0,  622,  624,  625,  617,  621,  624,  695,  623,
      696,  619,    0,  628,  698,  625,  623,  620,  626,  627,

      618,  621,  622,  629,  625,  626,  621,  624,  627,  630,
      624,  625,  699,  628,  624,  695,  623,  696,    0,  627,
      628,  698,  625,  629,  631,  626,  627,    0,  632,  630,
      629,  625,  633,    0,  624,  627,  630,  631,  636,  699,
      628,  634,    0,    0,  631,  633,  627,  632,  632,  638,
      629,  631,  633,    0,  634,  632,  630,  639,  636,  633,
      635,  634,  635,  637,  631,  636,  640,    0,  634,  638,
      637,  631,  633,  635,  632,  632,  638,  639,  642,  633,
      635,  634,  644,  637,  639,  636,  640,  635,  634,  635,
      637,  641,  643,  640,  645,    0,  638,  637,  642,  643,

      635,    0,  644,  700,  639,  642,  641,  635,  646,  644,
      637,  641,  643,  640,  645,    0,  649,  647,  641,  643,
      647,  645,  646,  646,    0,  642,  643,    0,  646,  644,
      700,  651,  648,  641,    0,  646,  649,  647,  641,  643,
      650,  645,  650,  649,  647,  648,    0,  647,  652,  646,
      646,  651,  648,  653,  655,  646,    0,  654,  651,  648,
        0,  652,  650,  649,  647,  654,  653,  650,  652,  650,
      702,    0,  648,  653,  655,  652,  664,  654,  651,  648,
      653,  655,  656,  657,  654,  659,  656,  657,  652,  650,
        0,  658,  654,  653,    0,  652,  664,  702,  659,  658,

      653,  655,  660,  664,  654,  659,  656,  657,  661,  656,
      657,  658,  659,  656,  657,    0,  661,  660,  658,    0,
      665,  662,  660,  664,    0,  659,  658,  703,  661,  660,
      662,  667,  659,  656,  657,  661,  669,  663,  658,  663,
      665,  662,  666,  661,  660,  670,  666,  665,  662,  660,
      668,  667,    0,  704,  703,  661,  669,  662,  667,  663,
      668,  671,  666,  669,  663,  670,  663,  665,  662,  666,
      668,  672,  670,  666,  673,  671,  673,  668,  667,  675,
      704,  671,    0,  669,  674,  677,  663,  668,  671,  666,
      676,  672,  670,  674,  676,  675,  673,  668,  672,  675,

      677,  673,  671,  673,  674,  677,  675,    0,  671,  679,
      681,  674,  677,  678,  676,  678,    0,  676,  672,  682,
      674,  676,  675,  673,  683,  680,  675,  677,  680,  679,
      681,  674,  677,  678,  684,  682,  679,  681,  685,  682,
      678,  676,  678,  686,  683,  680,  682,  705,  706,  707,
      708,  683,  680,  709,  684,  680,  679,  681,  685,  710,
      678,  684,  682,  686,  713,  685,  682,  715,  717,  720,
      686,  683,  680,  721,  705,  706,  707,  708,  722,  723,
      709,  684,  728,  730,  731,  685,  710,  732,  735,  736,
      686,  713,  737,  738,  715,  717,  720,  739,  741,  742,

      721,  743,  744,  745,  746,  722,  723,  747,  748,  728,
      730,  731,  749,  751,  732,  735,  736,  752,  753,  737,
      738,  755,  756,  757,  739,  741,  742,  759,  743,  744,
      745,  746,  760,  762,  747,  748,  761,  831,  763,  749,
      751,  764,  766,    0,  752,  753,  833,  759,  755,  756,
      757,  766,  760,  762,  759,  768,  761,  761,  763,  760,
      762,  764,  766,  761,  831,  763,  765,  765,  764,  766,
      769,  767,    0,  833,  759,  768,  770,  834,  766,  760,
      762,  767,  768,  761,  761,  763,  770,  765,  764,  766,
      769,  767,  771,  765,  765,  772,  770,  769,  767,  771,

      773,  774,  768,  770,  834,  776,    0,    0,  767,  777,
      835,  783,  771,  770,  765,  772,  774,  769,  767,  771,
      773,  774,  772,  770,  775,  776,  771,  773,  774,  777,
      778,  783,  776,  775,  779,    0,  777,  835,  783,  771,
        0,    0,  772,  774,  775,  778,    0,  773,  774,  779,
      778,  775,  776,  780,  779,  781,  777,  778,  783,  781,
      775,  779,  782,  784,  782,  836,    0,  780,  786,    0,
        0,  775,  778,  780,    0,  781,  779,  778,  785,  838,
      780,  779,  781,  784,  782,  785,  781,  788,  786,  782,
      784,  782,  836,  789,  780,  786,  790,  787,  785,  787,

      780,  791,  781,    0,    0,  785,  838,  788,  789,  793,
      784,  782,  785,  789,  788,  786,  790,  787,  792,  796,
      789,  791,  797,  790,  787,  785,  787,  794,  791,  793,
      795,  798,  799,  792,  788,  789,  793,  795,  792,  796,
      789,  794,  797,  790,  787,  792,  796,  794,  791,  797,
      795,  798,  799,  800,  794,  801,  793,  795,  798,  799,
      792,  839,    0,  802,  795,  792,  796,  802,  794,  797,
        0,  804,  805,  800,  794,  801,  806,  795,  798,  799,
      800,  803,  801,    0,  803,  807,  804,  802,  839,  810,
      802,  804,  805,    0,  802,  812,  806,  808,  804,  805,

      800,  803,  801,  806,    0,  807,  842,  809,  803,  810,
      808,  803,  807,  804,  802,  812,  810,  808,  804,  805,
      809,  811,  812,  806,  808,  811,  813,  809,  803,    0,
      813,  815,  807,  842,  809,  846,  810,  808,  814,  814,
      848,  811,  812,  822,  808,    0,  815,  809,  811,    0,
      813,  815,  811,  813,  809,  816,  816,  813,  815,  814,
      817,  818,  846,  822,  817,  814,  814,  848,  811,  849,
      822,  854,  819,  815,  820,  818,  816,  813,  815,    0,
      823,  818,  816,  816,  817,  819,  814,  817,  818,  820,
      822,  817,  819,  821,  820,  825,  849,  821,  854,  819,

      823,  820,  818,  816,  824,  824,  826,  823,  818,  827,
      828,  817,  819,  855,  828,  825,  820,  821,  830,  819,
      821,  820,  825,  827,  821,  824,  826,  823,  858,  827,
      859,  824,  824,  826,  828,  829,  827,  828,  830,  829,
      855,  828,  825,  861,  821,  830,  862,  863,  865,  866,
      827,  870,  824,  826,  872,  858,  827,  859,  873,  829,
      874,  828,  829,  879,  880,  830,  829,    0,  881,  882,
      861,    0,    0,  862,  863,  865,  866,  884,  870,  885,
      887,  872,    0,  883,    0,  873,  829,  874,  881,  882,
      879,  880,  883,  885,  886,  881,  882,  884,  889,  885,

      887,  886,  890,  883,  884,    0,  885,  887,    0,  888,
      883,  888,  891,  889,  886,  881,  882,  893,  889,  883,
      885,  886,  890,  894,  884,  889,  885,  887,  886,  890,
      883,  888,  891,  892,  895,  892,  888,  893,  888,  891,
      889,  886,    0,  894,  893,  889,  896,  897,  898,  890,
      894,  936,  900,  938,  895,  892,  899,  898,  888,  891,
      892,  895,  892,    0,  893,  901,  896,  897,  898,  902,
      894,  899,  900,  896,  897,  898,  899,  903,  936,  900,
      938,  895,  892,  899,  898,  901,  905,  904,  906,  902,
      907,  910,  901,  896,  897,  898,  902,  903,  899,  900,

      904,  909,  908,  899,  903,  909,  905,  904,  906,  908,
      907,  910,  901,  905,  904,  906,  902,  907,  910,    0,
      912,  943,  908,  913,  903,  909,  911,  904,  909,  908,
      945,  914,  909,  905,  904,  906,  908,  907,  910,  946,
      912,  911,  915,  913,  915,  916,  911,  912,  943,  908,
      913,  914,  909,  911,  917,  918,  919,  945,  914,  916,
      921,  949,    0,    0,  915,  916,  946,  912,  911,  915,
      913,  915,  916,  911,  917,  918,  919,  920,  914,  925,
      921,  917,  918,  919,  920,  922,  916,  921,  949,  922,
      923,  915,  916,  924,  923,  926,  952,  920,  927,  925,

        0,  917,  918,  919,  920,    0,  925,  921,  924,  922,
      928,  920,  922,  924,  923,  926,  922,  923,  927,  929,
      924,  923,  926,  952,  920,  927,  925,  930,  953,  954,
      928,  957,  929,  958,  930,  924,  922,  928,    0,  929,
      924,  923,  926,  959,  960,  927,  929,  930,  961,  983,
        0,  957,  963,  958,  930,  953,  954,  928,  957,  929,
      958,  930,    0,  959,  960,  962,  929,  964,  961,  962,
      959,  960,  963,  965,  930,  961,  983,  966,  957,  963,
      958,  967,  964,  968,  969,  970,  969,  964,    0,  962,
      959,  960,  962,  965,  964,  961,  962,  966,  972,  963,

      965,  967,  971,  968,  966,  970,  969,  973,  967,  964,
      968,  969,  970,  969,  964,  971,  962,  974,  972,  976,
      965,  975,  971,  977,  966,  972,    0,  973,  967,  971,
      968,    0,  970,  969,  973,  985,  975,  974,  978,  976,
        0,  975,  971,  977,  974,  972,  976,  979,  975,  971,
      977,  978,  980,  981,  973,  979,  982,  987,  978,  989,
      990,  993,  985,  975,  974,  978,  976,  979,  975,  995,
      977,  997,  980,  981,  979,  992,  982,  994,  978,  980,
      981,  993,  979,  982,  987,  978,  989,  990,  993,  995,
      992,  997,  994,  996,  979,  992,  995,  994,  997,  980,

      981,  998,  992,  982,  994,    0,  996, 1000,  993, 1001,
     1003, 1006,  999,  996,    0, 1007,  995,  992,  997,  994,
      996,  998,  992,  999,  994, 1009, 1010, 1000,  998, 1008,
        0, 1006,  999,  996, 1000, 1007, 1001, 1003, 1006,  999,
      996, 1013, 1007, 1008, 1014, 1009, 1010,    0,  998, 1008,
      999,    0, 1009, 1010, 1000,    0, 1008,    0, 1006,  999,
        0, 1013, 1007,    0, 1014,    0,    0,    0, 1013,    0,
     1008, 1014, 1009, 1010,    0,    0, 1008,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1013,    0,
        0, 1014, 1016, 1016, 1016, 1016, 1016, 1017,    0,    0,

     1017, 1017, 1019, 1019, 1019,    0, 1019, 1020,    0, 1020,
     1020, 1020, 1021,    0, 1021, 1021, 1021, 1022,    0, 1022,
     1022, 1022, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 1911 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1925 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2212 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1016 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1015 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 141:
#line 205 "flex_lexer.l"
case 142:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 230 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3038 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1016 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1016 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1015);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 235 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

