#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 191
#define YY_END_OF_BUFFER 192
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1390] =
    {   0,
        0,    0,  188,  188,    2,    2,  192,  190,    4,    4,
      190,  190,  179,  186,  179,  179,  183,  179,  179,  179,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  179,  188,  189,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  174,    0,
        1,    0,  181,  180,  183,  176,  175,  173,  177,  185,

      185,  185,  185,  185,  185,   12,  185,  185,  185,   19,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,   74,  185,  185,   77,   86,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  104,
      185,  185,  109,  112,  113,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  151,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  178,  188,  187,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      184,    0,  180,    5,  185,    7,  185,  185,   10,  185,

       13,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,   34,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,   50,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
       61,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,   81,  185,  185,   89,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  105,  185,
      185,  185,  110,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  137,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  152,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  185,
      185,  185,  185,  185,  185,  185,  185,  185,   20,  185,
       22,   23,   24,  185,  185,  185,   29,  185,  185,  185,
       32,   35,  185,  185,  185,  185,  185,  185,   42,  185,
      185,  185,   47,   48,  185,  185,  185,  185,  185,  185,
      185,  185,   58,  185,  185,  185,  185,   64,   65,  185,

      185,   69,  185,   71,   72,  185,  185,  185,  185,  185,
      185,   85,  185,   88,   90,   91,  185,   93,  185,  185,
       96,  185,  185,  185,  185,  185,  107,  185,  185,  185,
      185,  116,  185,  185,  119,  185,  185,  185,  185,  185,
      125,  185,  185,  185,  185,  185,  131,  185,  185,  185,
      185,  139,  140,  185,  185,  185,  185,  185,  147,  148,
      149,  185,  154,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  164,  185,  166,  185,  168,  169,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    0,    6,
        8,  185,   11,  185,   15,  185,  185,  185,  185,  185,
      185,  185,  185,  185,   31,  185,  185,  185,  185,  185,
      185,  185,   41,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,   57,   59,  185,  185,  185,  185,
       67,  185,   73,   75,  185,   78,   79,  185,  185,  185,
      185,   92,   94,  185,   97,   98,  185,  101,  185,  185,
      185,  185,  114,  115,  185,  185,  185,  185,  185,  123,
      124,  185,  185,  185,  129,  185,  185,  185,  185,  138,
      185,  185,  185,  144,  185,  185,  185,  185,  185,  157,

      185,  185,  185,  161,  185,  185,  185,  167,  170,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  185,   14,  185,   17,  185,  185,  185,   25,   27,
      185,   30,  185,  185,  185,  185,  185,   39,  185,  185,
       44,  185,   46,  185,   51,   52,  185,   54,  185,  185,
      185,  185,   63,   66,   68,   70,   76,   80,  185,  185,
      185,   87,   95,   99,  102,  185,  106,  185,  111,  185,
      185,  185,  185,  185,  185,  127,  185,  185,  132,  134,
      136,  185,  142,  185,  145,  185,  185,  185,  185,  185,
      158,  159,  160,  162,  185,  185,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    9,   16,   18,   21,  185,   26,   28,
      185,  185,  185,   37,   38,  185,  185,  185,  185,   53,
       55,   56,  185,   62,   82,  185,  185,  100,  103,  185,
      185,  185,  185,  121,  122,  185,  185,  185,  133,  135,

      185,  143,  185,  185,  185,  185,  185,  163,  165,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  185,    0,   33,
      185,  185,   43,   45,   49,  185,  185,   84,  108,  185,
      185,  185,  185,  128,  130,  141,  185,  185,  185,  155,
      185,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    0,  185,    0,  185,
       40,   60,   83,  185,  118,  120,  185,  146,  150,  185,
      156,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,    0,    0,   36,
      117,  126,  185,    2,    2,    2,    2,    2,    2,    2,
        0,    0,  171,  153,    2,    2,    2,    2,    0,    0,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,  172,
        2,    2,    0,    2,    0,    2,  182,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1397] =
    {   0,
        0,    0,  798,  797,   76,    0,  803, 9080,  151,  153,
      780,    0, 9080, 9080,  149,  148,  160,  159,  778,  775,
      156,  156,  165,  210,  202,  255,  151,  163,  265,  152,
      171,  215,  218,  244,  295,  257,  156,  309,  349,  392,
      307,  208,  226,    0,  174,  689,    0,  748,    0,  204,
      251,  702,  715,    0,    0,  232,  378,  451,  240,  682,
      673,  470,  546,  600,  652,  700,  752,  384,  458,  795,
      466,  532,  533,  534,  846,  895,  944,  589,  650,  990,
     1042,  644,  698,  587,  547,  664,  608,  300, 9080,  667,
     9080,  656, 1107, 1117, 1128, 9080, 9080, 9080, 9080,    0,

      218,  243,  295,  318,  250,  305,  379,  305,  305,    0,
      344,  330,  715,  373,  314,  357,  756,  376,  385,  416,
      432,  462,  457,  801,  460,  465,  464,  495,  470,  483,
      481,  512,  531,  522,  539,    0,  558,  577,  838,  589,
      597,  586,  607,  603,  707,  609,  630,  633,  629,  697,
      652,  665,  705,    0,  714,  702,  758,  747,  765,  767,
      754,  757,  810,  771,  800,  805,  850,  817,  813,  854,
      842,  862,  863,  853,  866,  859,  857,  901,  903,  902,
      898,  896,  906,  914,  900,  920, 9080,    0, 9080,    0,
      307,    0,  643,    0,  601, 1138, 1148, 1159,    0,    0,

        0,    0,  945, 1004, 1029, 1145, 1196, 1148,  961, 1242,
     1195, 1208, 1248, 1253, 1284, 1324, 1282, 1324, 1353, 1405,
     1402, 1333, 1398, 1413, 1462, 1458, 1511, 1459, 1505, 1470,
     1516, 1555, 1554, 1560, 1574, 1562, 1603, 1609, 1617, 1656,
     1657, 1706, 1655, 1702, 1707, 1755, 1803, 1855, 1717, 1753,
     1759, 1801, 1895, 1847, 1898, 1851, 1909, 1939, 1942, 1959,
     1987, 1999, 2001, 2013, 2001, 2065, 2049, 2062, 2106, 2155,
     2114, 2055, 2163, 2168, 2202, 2119, 2209, 2220, 2238, 2252,
     1210, 2303, 2278, 2264, 2305, 2316, 2328, 2354, 2366,    0,
     9080,  591, 1185,    0,  921,    0,  926,  943,    0,  956,

        0,  946,  954,  944,  960,  992,  998, 1464,  996,  997,
     1008, 1019, 1027, 1052, 1036, 1040, 1054, 1043, 1051, 1055,
     1157, 1770, 1158, 1158, 1148, 1169, 1187, 1200, 1197,    0,
     1215, 1246, 1256, 1249, 1262, 1261, 1263, 1300, 1316, 1307,
     1348, 1315, 1338, 1357, 1350, 1374, 1374, 1371, 1383, 1393,
     1397, 1410, 1417, 1431, 1510, 1439, 1448,    0, 1460, 1486,
     1512, 1519, 1642, 1525, 1538, 1550, 1557, 1561,    0, 1617,
     1607, 1602, 1605, 1620, 1627, 1619, 1677, 1661, 1712, 1663,
     1657, 1679, 1675, 1714, 1720, 1703, 1758, 1757, 1755, 1771,
     1767, 1779,    0, 1777, 1796, 1807, 1812, 1806, 1807, 1821,

     1821, 1829, 1848, 1863,    0, 1859, 1899, 1863, 1915, 1866,
     1910, 1906, 1904, 1964, 1948, 1952, 1989, 1974, 1999,    0,
      583, 2431, 2357, 2424, 2425, 2426, 2364, 2424, 2468, 2440,
     2479, 2480, 2515, 2493, 2522, 2525, 2574, 2573, 2565, 2587,
     2615, 2623, 2641, 2660, 2668, 2680, 2684, 2712, 2685, 2737,
     2724, 2752, 2765, 2778, 2790, 2818, 2803, 2831, 2832, 2857,
     2844, 2872, 2876, 2899, 2907, 2918, 2924, 2946, 2951, 2968,
     2986, 2993, 3011, 3034, 3035, 3036, 3074, 3082, 3087, 3123,
     3126, 3128, 3131, 3167, 3172, 3172, 3176, 3214, 3216, 3231,
     3265, 3317, 3257, 3279, 3314, 3305, 3339, 3358, 3367, 3365,

     3403, 3406, 3426, 3428, 3441, 3493, 3460, 3543, 3476, 3519,
     3530, 3473, 3563, 3578, 3587, 3613, 3612, 3613, 3635, 3657,
     3665, 3670, 3695, 3709, 3710, 3709, 3744, 3753, 3757, 3793,
     3799, 3802, 3822, 3846, 3848, 3851, 3871, 3876, 3900, 3925,
     3892, 3925, 3944, 3968, 3974, 3987, 4015, 4023,  544, 2003,
     2049, 2044, 2047, 2057, 2064, 2077, 2096, 2117,    0, 2125,
        0,    0, 2126, 2119, 2124, 2117,    0, 2116, 2119, 2138,
     2161,    0, 2170, 2174, 2168, 2172, 2184, 2211, 2213, 2229,
     2228, 2253,    0,    0, 2267, 2259, 2270, 2278, 2291, 2321,
     2326, 2352,    0, 2345, 2358, 2368, 2384,    0,    0, 2386,

     2401,    0, 2431,    0, 2427, 2442, 2465, 2466, 2481, 2482,
     2577,    0, 2489,    0,    0,    0, 2486,    0, 2511, 2537,
        0, 2543, 2614, 2546, 2540, 2551,    0, 2611, 2626, 2618,
     2619,    0, 2630, 2635,    0, 2644, 2653, 2687, 2686, 2715,
        0, 2723, 2732, 2730, 2734, 2757,    0, 2751, 2788, 2808,
     2816,    0,    0, 2812, 2839, 2843, 2860, 2863,    0,    0,
     2882, 2888,    0, 2913, 2914, 2927, 2946, 2978, 2967, 2982,
     3004, 3007,    0, 3008,    0, 3028,    0, 3018,  530, 4034,
     4053, 4078, 4081, 4100, 4083, 4122, 4127, 4135, 4144, 4174,
     4176, 4179, 4204, 4228, 4229, 4230, 4242, 4268, 4273, 4254,

     4293, 4296, 4322, 4330, 4338, 4368, 4381, 4384, 4392, 4433,
     4419, 4434, 4464, 4475, 4478, 4506, 4519, 4520, 4555, 4571,
     4579, 4572, 4604, 4606, 4618, 4630, 4656, 4654, 4668, 4686,
     4700, 4698, 4705, 4735, 4741, 4752, 4753, 4787, 4795, 4798,
     4843, 4839, 4840, 4881, 4884, 4885, 4925, 4928, 4929, 4968,
     4973, 4976, 4975, 4978, 5018, 5018, 5026, 5062, 5070, 5071,
     5100, 5112, 5115, 5124, 5153, 5154, 5172, 5198, 5206, 5207,
     5220, 5242, 5256, 5261, 5280, 5305, 5306, 5320, 5347, 5351,
     5359, 5364, 5394, 5393, 5399, 5413, 5418, 5443, 5448, 5457,
     5457, 5492, 5493, 5511, 5534, 5535, 5575, 5576, 5589, 5625,

     5633, 5638, 5636, 5672, 5674, 5677, 5686, 5693,  529,    0,
        0, 3037,    0, 3061,    0, 3072, 3064, 3094, 3099, 3112,
     3103, 3100, 3137, 3166,    0, 3160, 3176, 3174, 3201, 3193,
     3205, 3221,    0, 3235, 3229, 3236, 3246, 3245, 3270, 3259,
     3265, 3281, 3307, 3321,    0,    0, 3311, 3331, 3338, 3358,
     3355, 3371,    0,    0, 3360,    0,    0, 3366, 3391, 3501,
     3390,    0,    0, 3408,    0,    0, 3423, 3415, 3435, 3418,
     3432, 3449,    0,    0, 3471, 3462, 3501, 3489, 3508,    0,
        0, 3531, 3543, 3565,    0, 3576, 3589, 3604, 3596,    0,
     3632, 3638, 3645, 3637, 3639, 3641, 3675, 3677, 3667,    0,

     3706, 3712, 3725,    0, 3720, 3769, 3773,    0,    0,  528,
     5711, 5729, 5735, 5753, 5764, 5778, 5786, 5804, 5816, 5828,
     5852, 5857, 5871, 5884, 5896, 5910, 5915, 5928, 5940, 5958,
     5965, 5966, 5988, 5990, 6012, 6014, 6019, 6042, 6044, 6066,
     6068, 6092, 6097, 6117, 6120, 6122, 6146, 6158, 6161, 6187,
     6165, 6203, 6214, 6206, 6244, 6247, 6250, 6258, 6288, 6301,
     6299, 6330, 6343, 6344, 6374, 6385, 6388, 6413, 6418, 6432,
     6456, 6474, 6465, 6505, 6509, 6517, 6532, 6557, 6558, 6586,
     6587, 6611, 6612, 6625, 6637, 6640, 6665, 6690, 6699, 6691,
     6704, 6739, 6748, 6757, 6764, 6783, 6792, 6813, 6834, 6837,

     6853, 6881, 6893, 6896, 6905, 6930, 6939, 6958, 6977, 6981,
      522, 3770,    0, 3765,    0, 3774, 3788, 3802, 3806,    0,
     3818,    0, 3822, 3855, 3870, 3902, 3901,    0, 3904, 3925,
        0, 3932,    0, 3931,    0,    0, 3964,    0, 3956, 3955,
     3972, 3975,    0,    0,    0,    0,    0,    0, 3985, 3999,
     4016,    0,    0, 4003,    0, 4012,    0, 4035,    0, 4023,
     4046, 4048, 4076, 4064, 4087,    0, 4108, 4118, 4116, 4124,
        0, 4141,    0, 4151,    0, 4164, 4192, 4192, 4177, 4194,
        0,    0,    0,    0, 4182, 4191,  519, 6983, 7021, 7019,
     7025, 7028, 7036, 7072, 7070, 7071, 7079, 7114, 7115, 7128,

     7161, 7158, 7164, 7182, 7205, 7218, 7224, 7259, 7260, 7268,
     7301, 7304, 7312, 7321, 7310, 7346, 7363, 7355, 7388, 7397,
     7406, 7430, 7439, 7448, 7474, 7459, 7499, 7497, 7521, 7504,
     7528, 7542, 7546, 7570, 7588, 7594, 7590, 7638, 7639, 7641,
     7643, 7673, 7692, 7696, 7715, 7734, 7738, 7757, 7776, 7780,
     7799, 7823, 7829, 7853, 7867, 7881, 7820, 7897, 7905, 7911,
     7935, 7946,  515,    0,    0,    0,    0, 4218,    0,    0,
      349, 4244, 4288,    0,    0, 4290, 4294, 4283, 4324,    0,
        0,    0, 4319,    0,    0, 4334, 4327,    0,    0, 4329,
     4346, 4341, 4358,    0,    0, 4372, 4370, 4380,    0,    0,

     4393,    0, 4411, 4426, 4421, 4437, 4445,    0,    0,  507,
     7949, 7965, 7979, 7993, 8004, 8018, 8026, 8067, 8048, 8066,
     8080, 8092, 8105, 8106, 8120, 8144, 8118, 8156, 8159, 8163,
     8191, 8204, 8210, 8207, 8240, 8248, 8251, 8268, 8273, 8289,
     8300, 8319, 8333, 8330, 8371, 8374, 8375, 8415, 8418, 8426,
     8434, 8464, 8477, 8482, 8491, 8516,  492, 4436, 4694,    0,
     4439, 4446,    0,    0,    0, 4489, 4480,    0,    0, 4483,
     4499, 4529, 4532,    0,    0,    0, 4521, 4535, 4546,    0,
     4585,  476, 8517, 4746, 8531, 8545, 8546, 8570, 8571, 8584,
     8610, 8609, 8596, 8622, 8648, 8653, 8664, 8670, 8682, 8704,

     8712, 8726, 8734, 8748, 8756, 8770,  471,  436, 4590, 4632,
        0,    0,    0, 4622,    0,    0, 4630,    0,    0, 4636,
        0,  470, 8802, 4652, 8784, 8810, 8824, 8832, 8831, 8839,
     8867, 8875, 8881, 8905, 8925, 8928,  442, 4843, 4698,    0,
        0,    0, 4731,  438, 4889, 4740, 8930, 8933, 8969, 8967,
      423, 4765, 9080,    0,  422, 4768,    0, 8976,  421, 4752,
      418, 4755,  388, 4750,  384, 4778,  366, 4799,  360, 4806,
      343, 4804,  338, 4806,  334, 4814,  332, 4822,  303, 9080,
      293,    0,  294,  286,  241,  216, 9080,    0, 9080, 9049,
     9054,  199, 9059, 9064, 9069, 9074

    } ;

static const flex_int16_t yy_def[1397] =
    {   0,
     1389,    1, 1390, 1390, 1389,    5, 1389, 1389, 1389, 1389,
     1389, 1391, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1389, 1393, 1389, 1394, 1394,
     1389, 1394, 1395, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1396, 1396,   63,   63,   63,   64,   66,   63,   66,
       63,   63,   63,   63,   64,   64,   64,   64,   63,   63,
       63,   66,   63,   63,   63,   63, 1394, 1389, 1389, 1391,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1389, 1393, 1389, 1394,
     1394, 1394, 1395, 1394, 1394, 1394, 1394, 1394, 1394, 1394,

     1394, 1394,   63,   63,   63,   66,   66,   66,   66,   66,
       66,   63,   63,   66,   66,   66,   63,   63,   63,   66,
       66,   66,   63,   66,   66,   66,   63,   66,   66,   63,
       66,   63,   66,   63,   63,   66,   66,   66,   66,   63,
       63,   66,   66,   63,   63,   63,   63,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   63,
       63,   63,   63,   63,   66,   66,   66,   66,   66,   66,
       63,   63,   63,   63,   63,   63,   66,   63,   63,   63,
       64,   63,   63,   63,   66,   63,   63,   63,   63, 1394,
     1389, 1389, 1389, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1394,
     1394, 1394,   63,   63,   63,   63,   66,   66,   66,   66,
       63,   63,   63,   63,   66,   66,   63,   63,   63,   63,
       63,   63,   63,   66,   66,   63,   66,   66,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   66,   66,   66,   66,   63,   63,   66,   63,
       63,   66,   66,   66,   66,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   66,   66,   66,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   66,

       66,   66,   63,   63,   63,   63,   66,   66,   66,   66,
       66,   66,   63,   63,   63,   63,   66,   66,   63,   63,
       63,   63,   63,   63,   63,   66,   66,   66,   66,   66,
       66,   66,   63,   63,   66,   66,   63,   63,   63,   63,
       66,   66,   66,   66,   66,   66,   66,   66, 1389, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1394,   66,
       66,   63,   63,   63,   66,   63,   66,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   66,   63,

       63,   63,   66,   66,   66,   66,   66,   66,   66,   66,
       63,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   66,   66,   66,   63,   63,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   63,
       63,   63,   66,   66,   66,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   66,   66,
       63,   63,   63,   66,   63,   63,   63,   63,   63,   63,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,

       63,   63,   63,   63,   63,   63,   63,   66, 1389, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1394,
       66,   66,   66,   66,   63,   63,   63,   63,   63,   63,
       63,   66,   66,   63,   63,   63,   66,   63,   63,   63,
       66,   63,   63,   63,   63,   63,   66,   63,   63,   63,
       63,   63,   66,   63,   63,   63,   63,   63,   63,   63,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   63,
       66,   66,   66,   66,   66,   66,   66,   63,   66,   66,
       66,   66,   66,   66,   66,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   66,   66,   66,   66,   66,   66,

       66,   63,   63,   63,   63,   66,   66,   66,   66,   66,
     1389, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1394,   63,   63,   66,
       66,   66,   63,   63,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   63,   63,   66,   66,   63,   66,   66,   66,
       66,   66,   66,   66,   66,   63,   63,   63,   63,   66,
       66,   66,   66,   66,   66,   66,   63,   63,   63,   63,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66, 1389, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1394,
       66,   66,   66,   66,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   66,
       66,   66,   66,   66,   66,   66,   66,   63,   63,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   63,   63,   63,   63, 1389, 1392, 1389, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1394,   63, 1394,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   66,   66,   63,   63,   63,

       63,   63,   63,   63,   63,   63, 1389, 1392, 1389, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1394,   63, 1394,   63,   63,   63,   63,   66,   66,
       66,   66,   66,   66,   63,   63, 1389, 1389, 1389, 1392,
     1392, 1392, 1392, 1394, 1394, 1394,   63,   63,   63,   66,
     1389, 1389, 1389, 1392, 1394, 1394, 1394,   66, 1389, 1389,
     1394, 1394, 1389, 1389, 1394, 1394, 1389, 1389, 1394, 1394,
     1389, 1389, 1394, 1394, 1389, 1389, 1394, 1394, 1389, 1389,
     1394, 1394, 1389, 1394, 1389, 1394, 1389, 1394,    0, 1389,
     1389, 1389, 1389, 1389, 1389, 1389

    } ;

static const flex_int16_t yy_nxt[9157] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   44,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   44,   46,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   59,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   85,   86,   85,   49,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       85,   87,   88,   88,   88,   88,   91,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   92,   94,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   96,
       97,  101,  107,  102,  131,  133,  108,  111,  141,  103,
      132,  104,  109,  134,  112,  105,  106,  142,  161,  135,

      186,  113,  110,  100,  114,  191,   88,  115,  101,  107,
      102,  131,  133,  108,  111,  141,  103,  132,  104,  109,
      134,  112,  105,  106,  142,  161,  135,  186,  113,  110,
      182,  114,  116, 1388,  115,  121,  117,  122,  183,  194,
      118,  143,  123,  294,  146,  144,  119,  124,  147,  120,
      195,  145,   88,   88,  148,  184,  185,  182, 1387,  116,
      199,  200,  121,  117,  122,  183,  149,  118,  143,  123,
      294,  146,  144,  119,  124,  147,  120,  125,  145,  158,
      150,  148,  184,  185,  295,  126,  151,  152,  127,  300,
      159,  128,  136,  149,  129, 1386,  160,  130,  137,  138,

      139,   88,   88, 1385,  125,  140,  158,  150,  191,   88,
     1384,  295,  126,  151,  152,  127,  300,  159,  128,  136,
     1383,  129,  153,  160,  130,  137,  138,  139,  296,  301,
      154,  162,  140,  305,  155,  163,  297,  156,  157,  164,
      298,  306,  179,  299,  180,  165, 1381,  181, 1379,  153,
     1259, 1259,  309,  316, 1377,  296,  301,  154,  162, 1375,
      305,  155,  163,  297,  156,  157,  164,  298,  306,  179,
      299,  180,  165,  166,  181,  167, 1373,  307,  168,  309,
      316,  169, 1371,  170,  308,  171,  172,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196, 1369,  317,  314,

      166, 1367,  167,  318,  307,  168,  302,  303,  169,  315,
      170,  308,  171,  172,  173,  324,  325,  234,  174,  203,
      304,  175,  176,  235,  203,  317,  314,  326,  177,  203,
      318,  178, 1365,  302,  303, 1363,  315, 1338, 1338, 1361,
     1359,  173,  324,  325,  234,  174,  203,  304,  175,  176,
      235,  203,  327, 1355,  326,  177,  203, 1351,  178,  197,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      190,  190,  328,  190,  190,  190,  190,  190,  190,  327,
      236,  331, 1344, 1337,  203, 1322,  329,  330,  237,  190,
      190,  190,  203,  337,  238,  204,  203,  205,  338,  328,

      339, 1307,  244,  206,  203,  207,  342,  236,  331,  208,
      209,  203,  203,  329,  330,  237,  343,  344, 1282,  203,
      337,  238,  204,  203,  205,  338, 1257,  339,  340,  244,
      206,  203,  207,  342,  341, 1210,  208,  209, 1163,  203,
     1087, 1011,  910,  343,  344,  190,  190,  190,  345,  190,
      190,  190,  190,  190,  190,  340,  809,  348,  245,  246,
      249,  341,  203,  247,  250,  190,  190,  190,  203,  248,
      251,  346,  210,  203,  347,  345,  211,  203,  203,  203,
      203,  349,  212,  203,  348,  245,  246,  249,  350,  203,
      247,  250,  213,  203,  679,  203,  248,  251,  346,  210,

      203,  347,  549,  211,  203,  203,  203,  203,  349,  212,
      203,  203,  421,  203,  351,  350,  287,  288,  203,  213,
      203,  190,  214,  203,  356,  203,  203,  357,  203,  215,
      203,  264,  358,  203,  359,  360,  216,  361,  203,  217,
      203,  351,  218,  287,  288,  203,  203,  420,  365,  214,
      203,  356,  203,  203,  357,  203,  215,  203,  264,  358,
      203,  359,  360,  216,  361,  366,  217,  292,  367,  218,
      368,  291,  265,  203,  219,  365,  266,  203,  220,  282,
      267,  283,  221,  290,  284,  371,  268,  372,  222,  203,
      289,  223,  366,  202,  203,  367,  203,  368,  203,  265,

      203,  219,  201,  266,  203,  220,  282,  267,  283,  221,
      203,  284,  371,  268,  372,  222,  203,  289,  223,  190,
      285,  203,  192,  203,  203,  203,  203,  203,  286,  362,
      203,  363,  373,  224,  203,  225,  203,  203,  369,  374,
      226,  370,  364,  375,  203,  227,  203,  285,  310,  311,
      312,  203,  313,  203,  189,  286,  362,  203,  363,  373,
      224,  203,  225,  203,  187,  369,  374,  226,  370,  364,
      375,  203,  227,  203,  228,  310,  311,  312,  319,  313,
      320,  203,  229,  321,  376,  230,  377,  378,  231,  322,
      381,  232,  382,  379,  233,   99,  323,  380,   98,  387,

       89,  228, 1389,   48,   48,  319, 1389,  320,  203,  229,
      321,  376,  230,  377,  378,  231,  322,  381,  232,  382,
      379,  233,  239,  323,  380,  332,  387,  333,  240,  241,
      242,  334,  383,  388,  390,  243, 1389,  384,  335,  394,
      203, 1389,  336,  396,  389,  385, 1389, 1389, 1389,  239,
      386, 1389,  332,  395,  333,  240,  241,  242,  334,  383,
      388,  390,  243,  352,  384,  335,  394,  203,  252,  336,
      396,  389,  385,  353,  391,  203,  397,  386,  354,  355,
      395,  398,  253,  392,  399,  203,  400,  401,  254,  255,
      352,  393,  403,  404,  405,  252, 1389, 1389,  402, 1389,

      353,  391,  203,  397, 1389,  354,  355, 1389,  398,  253,
      392,  399,  203,  400,  401,  254,  255,  203,  393,  403,
      404,  405,  256,  406,  203,  402,  408,  411,  412,  413,
      257,  203,  415,  409,  258,  414,  410,  259,  260, 1389,
      417,  418,  419,  407,  203,  416, 1389,  550, 1389,  256,
      406,  203,  551,  408,  411,  412,  413,  257,  203,  415,
      409,  258,  414,  410,  259,  260,  261,  417,  418,  419,
      407,  203,  416,  203,  550,  203,  552,  262,  553,  551,
      203,  203,  554,  263,  555,  430,  203, 1389,  556, 1389,
      557,  203, 1389,  261,  203, 1389,  203, 1389,  203, 1389,

      203,  203,  203,  552,  262,  553,  203,  203,  203,  554,
      263,  555,  430,  203,  269,  556,  270,  557,  203,  271,
      203,  203,  272,  203,  273,  558,  274,  275,  203,  423,
      203,  559, 1389,  203,  203,  563,  203, 1389, 1389,  564,
      203,  269,  565,  270, 1389, 1389,  271,  203, 1389,  272,
      203,  273,  558,  274,  275,  203,  423,  203,  559,  203,
      566,  203,  563,  203,  276,  203,  564,  203,  277,  565,
      424,  278,  279,  567,  568,  203,  569,  203,  280,  570,
      571,  281,  203,  572,  573,  574,  203,  566,  203, 1389,
     1389,  276,  203, 1389, 1389,  277, 1389,  424,  278,  279,

      567,  568,  203,  569, 1389,  280,  570,  571,  281, 1389,
      572,  573,  574, 1389, 1389,  203,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,   94,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  197,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  425,  575,
      203,  203,  579,  203,  580,  203,  426,  429,  203,  581,
      203, 1389,  582,  203,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293, 1389,  425,  575,  203,  203,  579,
      203,  580,  203,  426,  429,  203,  581,  203,  427,  582,
      203,  428, 1389,  434,  583, 1389,  584, 1389,  203,  203,
      203,  203,  535,  585,  203,  203,  203,  586,  203,  203,
      203,  203, 1389, 1389,  435,  427,  203, 1389,  428,  203,
      434,  583,  536,  584,  203,  203,  203,  203,  203,  535,
      585,  203,  203,  203,  586,  203,  203,  203,  203,  431,
      432,  435,  587,  203,  203,  203,  203,  203,  203,  536,
      588,  203,  203,  433,  203, 1389,  436,  203,  203,  589,
     1389, 1389, 1389,  437,  203,  590,  431,  432,  203,  587,

      591,  203,  203,  592,  203,  203,  438,  588,  443,  203,
      433,  203,  203,  436,  203,  203,  589,  203,  444,  203,
      437,  203,  590, 1389,  203,  203,  593,  591,  203,  203,
      592, 1389, 1389,  438, 1389,  443, 1389, 1389,  594,  203,
      595, 1389, 1389, 1389,  203,  444,  203, 1389, 1389,  598,
      203,  203, 1389,  593,  203,  203,  203,  439,  440,  441,
      203,  442, 1389,  445,  203,  594,  203,  595,  203,  203,
      203,  599, 1389,  203,  596,  455,  598,  203,  203,  203,
      600,  203,  597,  203,  439,  440,  441,  203,  442,  203,
      445,  203,  601,  203,  446,  203,  203,  203,  599,  447,

      203,  596,  455,  602,  603,  203,  203,  600, 1389,  597,
      203, 1389,  604, 1389, 1389, 1389,  203, 1389, 1389,  601,
     1389,  446,  605, 1389,  203,  606,  447,  448,  203,  449,
      602,  603,  450,  607,  456,  203,  608,  203,  451,  604,
      203,  453,  454,  609,  203,  452,  203,  203,  203,  605,
      203,  203,  606,  457,  448,  203,  449,  610,  203,  450,
      607,  456,  203,  608,  203,  451, 1389,  203,  453,  454,
      609,  203,  452,  203,  203,  203, 1389,  203, 1389, 1389,
      457,  613,  460,  614,  610,  203,  458,  459,  560, 1389,
      561,  203,  466,  203,  203,  203,  203,  203,  203,  203,

      203,  615,  203,  203,  203,  562,  468,  203,  613,  460,
      614, 1389,  616,  458,  459,  560,  203,  561,  203,  466,
      203,  203,  203,  203,  203,  203,  203,  203,  615,  203,
      203,  203,  562,  468,  203,  461,  611,  462,  467,  616,
      203,  463,  617,  203,  618,  203,  612,  203,  464,  469,
      203,  203,  465,  621, 1389,  470,  203,  203, 1389, 1389,
     1389,  203,  461,  611,  462,  467,  622,  203,  463,  617,
     1389,  618,  203,  612,  203,  464,  469,  203,  203,  465,
      621,  203,  470,  203,  203,  203,  203,  472,  203,  203,
      203,  471,  623,  622,  203,  203,  473,  203,  624,  203,

      203,  203,  475,  625,  203,  476,  203,  203,  203, 1389,
      474, 1389,  203,  203,  472, 1389,  203,  203,  471,  623,
      203,  203,  203,  473,  203,  624,  203,  203,  203,  475,
      625,  203,  476,  203,  203, 1389,  203,  474,  477,  626,
      627,  628,  203,  203,  203,  629,  630,  203,  203,  203,
      203,  478,  203,  631,  203, 1389, 1389,  203,  632, 1389,
     1389, 1389,  203,  203,  619,  477,  626,  627,  628,  203,
      203,  203,  629,  630,  620,  203,  203,  203,  478,  203,
      631,  203,  203,  203,  203,  632,  479,  203,  203,  203,
      485,  619,  203,  203,  480,  203,  635,  638,  639,  633,

      203,  620,  203,  203, 1389, 1389, 1389,  640,  641,  203,
      203, 1389, 1389,  479,  203,  203, 1389,  485,  634,  203,
      203,  480,  203,  635,  638,  639,  633,  203,  203,  203,
      203,  481,  486,  203,  640,  641,  636,  203,  203,  203,
      642,  482,  643,  203,  644,  634,  483,  484,  203,  637,
      203,  203,  203,  487, 1389,  203,  494,  203,  481,  486,
      203, 1389,  203,  636,  203,  203,  203,  642,  482,  643,
      203,  644, 1389,  483,  484,  203,  637,  203,  203,  203,
      487,  203,  488,  494,  203,  203,  203,  645,  495,  203,
      646,  203,  203,  203,  496,  647,  576,  648,  203,  203,

      577,  203, 1389,  649,  203,  650, 1389, 1389,  203,  488,
     1389,  578,  203,  203,  645,  495,  651,  646,  203,  203,
      203,  496,  647,  576,  648,  203,  203,  577,  203,  203,
      649,  203,  650,  203,  203,  489,  203,  490,  578,  203,
      652,  203,  497,  651,  653,  654,  203,  655,  656,  203,
     1389, 1389, 1389, 1389,  657, 1389,  203, 1389,  658, 1389,
      203,  203,  489,  203,  490, 1389,  203,  652,  203,  497,
      659,  653,  654,  203,  655,  656,  203,  491,  502,  492,
      500,  657,  203,  660,  203,  658,  203,  203,  203,  661,
      493,  203,  203, 1389,  662,  203,  203,  659, 1389,  665,

      203, 1389,  668, 1389,  491,  502,  492,  500, 1389,  203,
      660,  203, 1389,  203,  203,  203,  661,  493,  203,  203,
      501,  662,  203,  203, 1389,  663,  665,  203,  203,  668,
      203,  203,  669,  203,  664,  203,  498, 1389,  203,  499,
      203,  670,  203,  203,  203, 1389,  671,  501, 1389,  203,
     1389,  666,  663,  667,  203,  203, 1389,  203,  203,  669,
      203,  664,  203,  498,  503,  203,  499,  203,  670,  203,
      203,  203,  203,  671,  203,  203,  203,  203,  666,  203,
      667,  203,  203,  504,  203,  505, 1389,  203,  672,  203,
     1389,  503,  673,  674, 1389,  203, 1389, 1389, 1389,  203,

     1389,  203,  203,  677,  203,  203,  203, 1389, 1389,  203,
      504,  203,  505,  203,  203,  672,  203,  203, 1389,  673,
      674,  507,  203,  203,  675,  203,  506,  508,  676,  203,
      677,  509,  203,  203,  203,  203,  511,  203,  678,  203,
      203,  203,  810,  203,  203,  203,  203,  203,  507,  510,
      203,  675,  203,  506,  508,  676,  203, 1389,  509,  203,
      203,  203,  203,  511,  203,  678,  203, 1389,  203,  810,
      203, 1389,  203,  203,  203, 1389,  510,  516, 1389, 1389,
     1389,  203,  203, 1389,  203,  525,  203,  512,  811,  203,
      812,  203,  513,  813,  203,  517,  814,  203,  203,  815,

      514,  203,  203,  816,  516,  515,  518,  203,  203,  203,
      203,  203,  525, 1389,  512,  811,  203,  812,  203,  513,
      813,  203,  517,  814,  203,  203,  815,  514,  203,  203,
      816,  817,  515,  518,  203,  519,  523,  203, 1389,  203,
      203,  203,  529,  818,  203,  203,  203,  819,  820,  203,
      524,  203, 1389,  821,  822,  203,  823,  824,  817,  825,
      203, 1389,  519,  523,  826,  203,  203,  203,  203,  529,
      818,  203,  203,  203,  819,  820,  203,  524,  203,  520,
      821,  822,  203,  823,  824,  526,  825,  203,  521,  203,
      203,  826,  203,  203,  203,  203,  522, 1389,  203,  203,

      203, 1389,  827,  828,  203, 1389,  520,  527,  829,  203,
      830, 1389,  526,  831,  203,  521,  203,  203,  832, 1389,
      203,  203,  203,  522,  528,  203,  203,  203,  203,  827,
      828,  203,  203,  833,  527,  829,  203,  830,  203, 1389,
      831,  203,  203,  530,  203,  832,  532, 1389,  203,  203,
      203,  528,  834,  835,  531,  203,  203, 1389,  836,  203,
      833, 1389, 1389, 1389,  203,  203,  203, 1389,  203,  203,
      530,  203,  533,  532,  203,  203,  203,  203,  203,  834,
      835,  531,  203,  203,  203,  836,  837, 1389,  203,  534,
      203,  203,  838,  203,  541,  203,  839, 1389,  203,  533,

      203,  203, 1389,  540,  203,  203, 1389,  840,  203,  203,
      203,  203, 1389,  837,  203,  203,  534,  203, 1389,  838,
      841,  541, 1389,  839,  203,  203,  537,  203, 1389,  203,
      540,  203,  842,  538,  840,  203,  539,  203,  542,  203,
      203,  203,  544,  843,  543,  203,  203,  841,  844,  203,
      203,  203,  203,  537,  546,  545,  203, 1389,  203,  842,
      538, 1389,  203,  539,  203,  542,  203,  203, 1389,  544,
      843,  543,  203,  203,  203,  844,  203,  203,  845,  203,
      203,  546,  545,  203,  203,  203,  846,  203,  548,  203,
      203,  203,  203,  203,  847,  547,  203,  682,  848,  203,

      203,  203,  203,  203,  203,  845,  849,  203,  850,  203,
      203,  203,  203,  846,  203,  548, 1389,  203, 1389,  203,
      203,  847,  547,  203,  682,  848,  203,  203, 1389,  203,
      203,  203, 1389,  849, 1389,  850,  203, 1389,  851,  203,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      680,  203,  681, 1389,  203,  203,  203,  203, 1389,  203,
      203,  203,  203, 1389,  203,  851,  852,  853,  854,  203,
      203,  203,  203,  203, 1389,  203, 1389,  680,  203,  681,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      683,  203, 1389,  852,  853,  854,  203,  203,  203,  203,

      203,  203,  203,  203,  855,  203,  203,  203,  203,  203,
      685,  856,  203,  203, 1389,  684,  203,  683, 1389,  203,
      857,  858,  861,  687, 1389,  203,  203,  862,  203,  203,
      203,  855,  203,  203, 1389,  203,  203,  685,  856,  203,
      203,  203,  684,  203,  863,  203,  203,  857,  858,  861,
      687,  203,  203,  203,  862,  688,  203,  203,  689,  686,
      203,  203,  203,  864, 1389,  203,  203,  203,  203,  865,
      203,  863,  203, 1389, 1389,  868, 1389, 1389,  203,  869,
     1389,  870,  688, 1389,  203,  689,  686,  203,  203,  203,
      864,  203,  203, 1389,  203,  203,  865,  203,  690,  203,

      691,  203,  868,  203,  203,  859,  869,  694,  870,  203,
      203,  203,  693,  203, 1389,  692,  860,  203,  203,  203,
      203,  695,  203,  203, 1389,  690,  203,  691,  203, 1389,
      203,  203,  859,  203,  694,  871,  203,  203,  203,  693,
      203,  203,  692,  860,  203,  203,  203,  203,  695,  203,
      203,  203,  872,  203,  866,  867,  696,  873,  874,  203,
      203,  203,  871,  698,  875,  876, 1389,  203,  203,  697,
      877,  203,  203, 1389, 1389,  878,  203,  203,  203,  872,
      203,  866,  867,  696,  873,  874,  203,  203,  203, 1389,
      698,  875,  876,  203,  203,  203,  697,  877,  203, 1389,

      699,  203,  878,  203,  203,  203,  701,  700,  203,  879,
      203,  203,  880,  203,  203,  704,  203,  203, 1389,  203,
      203,  203,  203, 1389,  702, 1389,  203,  699,  203,  203,
      203,  203,  203,  701,  700,  203,  879,  203,  203,  880,
      203,  881,  704,  203,  203,  703,  203,  203,  203, 1389,
      706,  702,  203,  203,  707, 1389,  203,  203,  203,  705,
      203, 1389,  882,  203, 1389,  708,  883,  203,  881,  884,
      203, 1389,  703,  203,  203,  885,  709,  706,  203,  203,
      886,  707,  203,  203,  203,  887,  705,  203,  203,  882,
      203,  710,  708,  883,  203,  203,  884,  203,  203, 1389,

      203,  203,  885,  709,  203,  203, 1389,  886,  203,  203,
      203,  203,  887,  712,  203,  203,  203, 1389,  710,  711,
      203, 1389,  203,  888,  203,  203,  203, 1389,  203,  714,
     1389,  203,  889,  203, 1389,  203,  203, 1389,  203,  203,
      712,  203,  890,  203,  203,  891,  711,  203,  203,  203,
      888,  203, 1389,  203,  203,  713,  714,  203,  203,  889,
      203,  203,  203,  203,  203,  892,  203,  715,  203,  890,
      717,  203,  891,  893,  203,  203,  203,  203,  203,  716,
      203,  203,  713,  203,  203,  203,  894,  203,  203,  203,
      203,  203,  892,  203,  715,  203,  718,  717,  203,  895,

      893,  203,  203,  203,  203,  203,  716,  203,  203,  203,
      203,  203, 1389,  894,  203, 1389,  719,  203,  203, 1389,
      203,  203,  896,  718, 1389,  203,  895, 1389,  897,  203,
      203, 1389,  720, 1389,  203,  203,  203,  898,  203,  203,
      203, 1389,  203,  719,  203,  203,  721,  203,  203,  896,
      723,  203,  203,  203,  203,  897,  899, 1389,  722,  720,
      203,  203,  900,  203,  898, 1389,  203,  203,  724,  203,
      203,  203,  203,  721,  203, 1389,  203,  723,  203,  203,
      203,  203,  203,  899,  725,  722,  203,  203,  901,  900,
      203,  203,  203, 1389,  726,  724,  203,  203,  203,  203,

      902, 1389,  727,  203,  203, 1389, 1389, 1389,  903,  203,
      904,  725,  203,  203,  203,  901,  203, 1389,  203,  203,
      728,  726,  203,  203, 1389,  203,  729,  902,  203,  727,
      905,  203,  203,  203,  730,  903,  906,  904,  203,  203,
     1389,  203, 1389,  203,  203, 1389,  203,  728, 1389,  203,
      907,  203, 1389,  729,  908,  203,  203,  905,  909,  203,
      203,  730,  203,  906,  732,  203,  733,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  731,  907,  203,  203,
      203,  908,  203,  203, 1012,  909, 1389, 1013, 1389,  203,
     1389,  732, 1389,  733,  203,  203,  203,  203, 1014,  203,

      203,  203,  203,  731,  203, 1015,  203,  203,  203,  203,
      203, 1012,  203,  203, 1013,  734, 1016,  203,  203,  736,
      203,  735, 1389,  203, 1017, 1014, 1389,  203,  203, 1389,
     1389,  203, 1015,  203, 1389,  203, 1018,  203, 1019,  203,
      203, 1020,  734, 1016,  203,  203,  736,  203,  735,  203,
      203, 1017,  738,  203,  739,  203,  203,  740,  203,  737,
      203,  203,  203, 1018,  203, 1019, 1389,  203, 1020,  203,
     1389, 1389,  203, 1021,  203, 1389,  203,  203, 1389,  738,
      203,  739, 1389,  203,  740,  203,  737, 1389,  203,  203,
     1389,  203, 1022,  741,  203, 1023,  203,  203,  203,  203,

     1021,  203,  203,  742,  203,  203, 1024,  744,  203,  203,
     1025,  203,  203,  203,  743, 1389,  203,  203,  203, 1022,
      741,  203, 1023, 1026,  203,  203, 1027, 1389, 1389,  203,
      742, 1028,  203, 1024,  744,  203,  203, 1025,  203,  203,
      203,  743,  746,  203,  203,  203,  203,  203,  203,  203,
     1026, 1029,  203, 1027,  203,  745, 1389,  203, 1028,  203,
     1389,  747,  203, 1389, 1389, 1030, 1389,  203, 1389,  746,
     1031, 1032, 1033,  203,  203, 1034,  203,  203, 1029,  203,
     1389,  203,  745,  203,  203,  751,  203,  203,  747,  203,
      748,  203, 1030,  203,  203,  203, 1035, 1031, 1032, 1033,

     1036,  203, 1034,  203,  203,  203, 1037,  752, 1389,  203,
      203,  203,  751, 1389,  203,  203, 1389,  748,  203, 1389,
      203, 1038,  203, 1035, 1389,  203, 1389, 1036,  203, 1389,
      203,  203,  203, 1037,  752,  203,  203, 1039,  203,  749,
      203,  203,  203,  203,  203, 1040,  754,  203, 1038,  750,
      203,  203,  203,  203, 1389, 1041,  753, 1389,  203, 1042,
      203, 1389,  203,  203, 1039,  203,  749,  203,  203,  203,
      203,  203, 1040,  754,  203,  203,  750,  203,  203, 1043,
      203,  755, 1041,  753,  203,  203, 1042,  203,  203,  756,
      203, 1044,  203,  203,  203, 1045,  203,  203,  757, 1046,

      203, 1047,  203,  203,  203,  203, 1043, 1048,  755, 1389,
      203,  203,  203,  203, 1389,  203,  756, 1049, 1044, 1389,
      203,  203, 1045, 1052,  203,  757, 1046,  203, 1047, 1389,
      203,  203,  203, 1053, 1048, 1389,  203,  203,  203,  203,
      203,  203,  758,  203, 1049, 1389,  759, 1389,  203, 1054,
     1052,  203,  760, 1389,  761, 1055,  203, 1056,  203, 1057,
     1053, 1058,  203,  203,  203,  203,  203,  203,  203,  758,
      203,  203,  203,  759,  203,  203, 1054,  203,  203,  760,
      762,  761, 1055,  203, 1056,  203, 1057,  203, 1058,  203,
     1059,  203, 1389,  203,  203,  765, 1389, 1060,  203,  203,

      203,  203, 1389, 1061,  203,  203,  771,  762,  203,  203,
      768,  203, 1389,  203,  203,  763,  203, 1059,  203,  203,
      203,  203,  765,  203, 1060, 1389, 1062,  203, 1063,  203,
     1061, 1389,  203,  771,  764,  203,  203,  768,  203,  203,
      203, 1050,  763,  203, 1051,  203,  203, 1064,  203, 1389,
      203, 1389,  203, 1062,  203, 1063,  203, 1065,  770,  203,
      769,  764, 1389,  203,  203,  203,  203,  766, 1050, 1066,
      203, 1051, 1389, 1389, 1064,  203,  203, 1389,  203,  203,
      767,  203, 1389,  203, 1065,  770,  203,  769,  203,  772,
      203,  203,  203,  203,  766, 1067, 1066,  203, 1068,  203,

      773, 1389,  203,  203,  203,  203, 1389,  767,  203,  203,
      203, 1069, 1389,  203,  203,  203,  772,  203, 1389, 1389,
      203, 1389, 1067,  203,  203, 1068,  203,  773,  774, 1070,
     1389,  203, 1389,  203, 1389,  203,  203, 1071, 1069,  203,
      203,  203,  775,  203,  203,  776,  203,  203,  203,  203,
      203,  203,  203,  777, 1389,  774, 1070,  203,  203,  203,
      203,  778, 1072, 1073, 1071,  203,  203, 1074, 1389,  775,
      203,  203,  776,  203,  203,  203,  203, 1075, 1076,  203,
      777,  203, 1077,  203,  203,  203,  203,  203,  778, 1072,
     1073,  780,  203,  779, 1074,  203,  203, 1078,  203, 1079,

      203,  203, 1080,  203, 1075, 1076,  203, 1389,  203, 1077,
      203,  203, 1389, 1389,  203, 1389,  203, 1389,  780, 1389,
      779,  203,  203,  203, 1078,  203, 1079,  203,  203, 1080,
      203,  203, 1081,  203,  781,  203,  203, 1082,  203,  203,
      203,  203,  784,  203,  203,  203,  203,  783,  203,  203,
     1389, 1083,  203,  782,  203,  203,  203, 1389,  203, 1081,
     1084,  781,  203,  203, 1082, 1389,  203,  203,  203,  784,
     1389,  203,  203,  203,  783, 1389,  203,  203, 1083,  203,
      782,  203,  203,  203,  203,  785,  203, 1084,  203,  203,
      787, 1085,  203,  203,  786, 1086, 1164,  203,  203, 1389,

     1165, 1389,  203, 1389,  203, 1389,  203, 1389, 1389, 1166,
     1389,  203,  785,  203, 1167,  203,  203,  787, 1085,  203,
      203,  786, 1086, 1164,  203,  203,  203, 1165,  203,  203,
      788, 1389,  203,  203,  203,  203, 1166,  790,  203,  203,
      789, 1167,  203, 1168,  203, 1389, 1169,  203,  791, 1389,
     1389, 1170,  203,  203, 1389,  203, 1389,  788,  203,  203,
      203,  203,  203, 1171,  790,  203,  203,  789,  203,  203,
     1168,  203,  203, 1169,  203,  791,  203,  793, 1170,  203,
     1389,  203,  203,  792,  203,  203,  794, 1389,  203, 1172,
     1171,  203,  203,  203, 1173,  203,  203,  203, 1389,  203,

     1389,  203,  203,  203,  793, 1389,  203,  795,  203,  203,
      792,  203,  796,  794,  797,  203, 1172,  203,  203,  203,
      203, 1173,  203,  203,  203,  203,  203,  800,  203,  203,
      203, 1389,  203,  203,  795, 1174,  798,  203, 1389,  796,
     1389,  797, 1175, 1389,  203, 1176,  203,  799, 1177,  203,
     1389,  203,  203,  203,  800,  203, 1178,  203,  203,  203,
      203,  203, 1174,  798,  203,  203, 1179,  801,  802, 1175,
      203,  203, 1176,  203,  799, 1177, 1389,  203,  203,  203,
     1389, 1389,  203, 1178,  203,  203, 1389,  203,  203,  203,
     1180, 1181,  203, 1179,  801,  802, 1182,  203,  203, 1389,

     1389,  203, 1183,  203,  203, 1389,  203,  203,  203,  203,
     1184,  203,  803,  203,  203,  804,  203, 1180, 1181,  203,
      203, 1389,  805, 1182, 1185, 1186,  806,  203,  203, 1183,
      203, 1389,  203, 1389,  203,  203,  203, 1184, 1187,  803,
      203,  203,  804, 1188,  807, 1189,  203,  203,  203,  805,
      203, 1185, 1186,  806,  203,  203,  203, 1190,  203,  203,
      203, 1389,  808,  203, 1191, 1187, 1389,  203,  203,  203,
     1188,  807, 1189,  911,  203,  203, 1192,  203, 1193,  203,
     1389, 1389,  203,  203, 1190,  203,  203,  203,  203,  808,
      203, 1191,  912,  203,  203,  203,  203, 1389,  203, 1389,

      911,  203, 1194, 1192,  203, 1193,  203,  203,  203, 1389,
     1195,  203, 1389,  203,  203,  203,  203,  203,  916,  912,
      203, 1389, 1196,  203,  913,  203,  203,  914,  203, 1194,
      203,  203, 1197, 1389,  203,  203,  203, 1195,  203,  915,
     1389,  203, 1198,  203,  203,  916,  203, 1389,  917, 1196,
      203,  913,  203,  203,  914,  203, 1199,  203,  203, 1197,
      203,  919,  918,  203, 1200,  203,  915,  203,  203, 1198,
      203,  203,  203,  203,  203,  917, 1201, 1389, 1389,  203,
      203,  203, 1389, 1199, 1202,  203, 1203,  203,  919,  918,
      203, 1200,  203, 1389,  203,  203,  920,  203,  203,  203,

      203,  203,  203, 1201,  203,  203,  203,  203,  203,  203,
      203, 1202,  203, 1203, 1204,  203, 1205,  203, 1206, 1207,
      203, 1208,  203,  920, 1209,  203,  921,  203, 1389,  203,
      203,  203,  203,  203,  203, 1389,  203,  203, 1389,  203,
      203, 1204,  203, 1205, 1258, 1206, 1207,  203, 1208,  203,
      203, 1209,  203,  921,  203,  203,  203,  203,  203,  923,
      203,  203,  922, 1389,  203,  203,  203,  203,  203,  924,
     1260, 1258,  203, 1389,  203,  203,  203,  203,  203, 1389,
      927,  203,  203,  203,  203,  203,  923,  203,  203,  922,
      203,  203,  203,  203,  203,  203,  924, 1260,  203,  203,

      203,  203,  203,  203,  203,  203,  203,  927,  203,  925,
     1261,  203, 1389,  926,  203,  203, 1262,  203,  203,  203,
     1263,  203,  203,  203, 1264,  203,  203,  203, 1389,  203,
     1389,  203,  203,  203,  928,  203,  925, 1261, 1389,  203,
      926,  203,  203, 1262, 1389,  203,  203, 1263, 1389,  203,
      203, 1264, 1265,  203, 1266,  929,  203,  203, 1267,  203,
     1268,  928,  203,  203,  930,  203,  203,  203, 1269,  203,
      203,  203, 1270,  203, 1389,  203, 1389, 1271,  203, 1265,
      931, 1266,  929,  203,  203, 1267, 1389, 1268, 1389,  203,
      203,  930,  203, 1272,  203, 1269, 1273,  203,  203, 1270,

      203,  203,  203,  203, 1271,  203,  934,  931,  203,  932,
      203, 1274, 1275,  203,  203,  933,  203,  203, 1389,  203,
     1272,  203, 1389, 1273,  203,  203,  203,  203,  203,  203,
      203,  935,  203,  934, 1276,  203,  932,  203, 1274, 1275,
      203,  203,  933,  203,  203,  203,  203, 1389,  203,  937,
     1277,  203,  203,  203,  203,  203,  203,  936,  935,  203,
     1278, 1276, 1279, 1280,  203,  203,  203,  938,  203,  203,
     1389, 1281,  203,  203,  203, 1308,  937, 1277,  203,  203,
     1310, 1389,  203, 1389,  936, 1311, 1389, 1278, 1389, 1279,
     1280, 1389,  203,  203,  938,  203,  203,  203, 1281,  203,

      203,  203, 1308,  939,  203,  203,  203, 1310,  203,  203,
      203,  203, 1311,  203, 1389,  203, 1389, 1312,  203, 1389,
      203, 1313, 1314,  203,  203, 1389,  203, 1389, 1389, 1389,
      939,  203, 1389, 1389, 1315,  203,  203,  203,  203,  203,
      203,  203,  203,  940, 1312,  203,  203,  203, 1313, 1314,
      203,  203,  203,  203,  203,  203,  941, 1316, 1317,  203,
      203, 1315,  942, 1389,  203,  203,  203, 1318,  203, 1389,
      940, 1389, 1319,  203, 1389, 1389, 1320, 1389,  203,  203,
      203,  203,  203,  941, 1316, 1317,  203,  203,  203,  942,
      203,  203,  203,  944, 1318,  203,  943, 1389,  946, 1319,

      203,  945,  203, 1320,  203, 1389,  203, 1389,  203, 1389,
     1321,  203,  203, 1389,  203,  203,  203,  203,  203,  203,
      944, 1389,  203,  943,  203,  946, 1339,  203,  945,  203,
      203,  203,  203,  203,  203,  203,  203, 1321,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  947,  203, 1389,
      203,  203,  203, 1339,  948, 1389,  203,  203, 1340,  203,
      949,  203, 1341,  203,  203, 1389,  203,  203, 1389,  203,
     1342,  203, 1343, 1389,  947,  203,  203,  203,  950,  203,
      203,  948,  203,  203,  203, 1340,  203,  949, 1346, 1341,
      203,  203,  203,  203,  203, 1259, 1259, 1342,  203, 1343,

      203, 1389,  203,  203,  203,  950, 1389,  203,  951,  203,
     1389,  203,  203,  203,  203, 1346,  203,  203, 1389,  203,
     1389,  203,  203, 1389,  203,  203,  203,  203,  203,  203,
      203,  203,  203, 1309,  203,  951,  203,  952,  203,  203,
      953,  203, 1353,  203,  203,  203,  203, 1284, 1259,  203,
      203,  203, 1389,  203, 1389,  203, 1389,  203, 1389,  203,
     1309,  203, 1389,  203,  952,  203, 1354,  953,  203, 1353,
      203,  203,  203,  203,  203,  203,  203,  203,  955,  203,
      203,  954,  203,  203, 1357, 1324,  203, 1360,  203,  203,
     1362, 1364,  956, 1354, 1366,  203, 1368,  203,  203,  203,

     1389,  203,  203,  203, 1389,  955,  203,  203,  954,  203,
      203, 1357, 1324,  203, 1360,  203,  203, 1362, 1364,  956,
      203, 1366,  203, 1368, 1370,  203,  203,  203,  203, 1372,
      203,  203,  957,  203,  958,  203, 1374,  959,  203, 1376,
      203, 1378, 1380,  203, 1338, 1338, 1389,  203, 1389,  203,
     1382, 1370, 1389, 1389,  203,  203, 1372,  203,  203,  957,
      203,  958,  203, 1374,  959,  203, 1376,  203, 1378, 1380,
      203,  960,  203,  962,  203,  203,  203, 1382,  203,  203,
      203, 1389,  961,  203,  203,  203, 1352, 1389,  203, 1389,
     1345, 1338, 1389, 1389, 1389, 1389, 1389, 1389,  960,  203,

      962,  203,  203,  203, 1389,  203,  203,  203, 1389,  961,
      203,  203,  203, 1352,  203,  203,  203,  203,  203,  203,
      203,  203, 1389, 1389,  203,  203,  203, 1389, 1389,  203,
      203, 1389, 1356, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389,  203, 1389,  203,  203,  203,  203,  203,  203, 1389,
     1389,  203,  203,  203, 1389, 1389,  203,  203,  203, 1356,
      203,  203,  964,  203,  203,  203,  963, 1389,  203,  203,
      203, 1389, 1389,  203,  203, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389,  203, 1389,  203,  203,  964,
      203,  203,  203,  963,  965,  203,  203,  203,  203,  203,

      203,  203,  966,  203,  203, 1389,  203,  969,  203,  203,
      203,  203,  203,  203,  203,  967,  968, 1389,  203,  203,
      203,  965,  203,  203, 1389,  203,  203, 1389, 1389,  966,
      203,  203, 1389,  203,  969,  203,  203,  203,  203,  203,
      203,  203,  967,  968,  203,  203,  203,  203,  971,  203,
      203,  203,  203,  203,  203, 1389,  203,  970,  203, 1389,
     1389, 1389,  203,  203,  203, 1389, 1389, 1389, 1389, 1389,
     1389,  203,  203, 1389, 1389,  971, 1389, 1389,  203,  203,
      203,  203, 1389,  203,  970,  203,  972, 1389,  203,  203,
      203,  203,  203, 1389, 1389, 1389,  973,  203,  203,  203,

      203,  203, 1389, 1389, 1389, 1389,  203,  203,  203, 1389,
      974, 1389, 1389,  972, 1389,  203,  203,  203, 1389,  203,
     1389, 1389, 1389,  973,  203,  203,  203,  203,  203, 1389,
      203, 1389, 1389,  203,  203,  203,  203,  974,  203,  975,
     1389,  203,  203,  203,  203,  203,  203, 1389,  203,  976,
      203,  203, 1389,  203,  977, 1389, 1389,  203,  203, 1389,
      203,  203, 1389,  203, 1389,  203,  975, 1389,  203,  203,
      203, 1389,  203,  203, 1389,  203,  976,  203,  203,  203,
      978,  977, 1389,  203,  203,  203, 1389,  203,  203,  203,
      203, 1389, 1389, 1389,  979, 1389, 1389,  203,  203,  203,

      203, 1389,  203, 1389, 1389, 1389,  203,  978,  203, 1389,
      203,  203, 1389, 1389, 1389, 1389,  203,  203,  203, 1389,
      980,  979, 1389, 1389,  203,  203,  203,  203,  203,  203,
     1389, 1389,  981,  982,  203,  203,  203,  203, 1389, 1389,
     1389, 1389,  203,  203,  203,  203,  203,  980, 1389, 1389,
      203,  203,  203,  203, 1389,  203,  203, 1389, 1389,  981,
      982,  203, 1389,  203,  203, 1389,  203, 1389,  203,  203,
      203,  203,  203,  203, 1389, 1389, 1389,  203,  203,  203,
      203,  983,  203,  203, 1389, 1389,  203,  203,  203, 1389,
      984,  203,  203,  203, 1389,  203, 1389,  203, 1389,  203,

      985, 1389,  203, 1389, 1389,  203,  203,  203,  983,  203,
      203, 1389, 1389,  203,  203,  203,  203,  984,  203,  203,
     1389,  986, 1389, 1389,  203, 1389,  203,  985,  987,  203,
     1389,  203,  203,  203,  203,  203,  203,  203, 1389, 1389,
     1389,  203,  203,  203, 1389, 1389,  203, 1389,  986, 1389,
      203,  203,  203,  203,  988,  987,  203, 1389,  203,  203,
     1389, 1389,  203,  203, 1389, 1389,  203, 1389,  203,  203,
     1389, 1389, 1389,  203, 1389,  990, 1389,  203,  203,  203,
      203,  988,  989,  203,  203,  991,  203,  203, 1389,  203,
      203,  203,  203,  203,  203,  203,  203, 1389, 1389, 1389,

      203, 1389,  990, 1389, 1389,  203, 1389,  203, 1389,  989,
      203,  203,  991,  203,  203, 1389,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  993,  992,  203,  203,  203,
      203, 1389,  203,  203, 1389,  203, 1389,  203,  203,  203,
      203, 1389, 1389,  994,  995,  203, 1389,  203,  203,  203,
     1389,  203,  993,  992,  203,  203,  203,  203, 1389,  203,
      203, 1389,  203, 1389,  203,  203,  203,  203, 1389,  203,
      994,  995,  203,  203,  203,  203,  203, 1389,  203,  996,
     1389,  203, 1389,  203,  203, 1389,  203,  203, 1389,  203,
      203,  203,  203,  203,  203, 1389,  203,  997, 1389, 1389,

      203,  203,  203,  203, 1389,  203,  996, 1389, 1389, 1389,
      203,  203, 1389, 1389,  203, 1389,  203,  203, 1389,  203,
      203,  203, 1389, 1389,  997,  203,  203,  203,  203,  203,
      203, 1389,  998,  203, 1389,  999, 1389,  203,  203, 1389,
     1389, 1389, 1389, 1389,  203, 1389,  203, 1389, 1389, 1389,
     1389,  203,  203,  203,  203,  203,  203, 1389, 1389,  998,
      203, 1389,  999, 1389,  203,  203, 1389,  203,  203,  203,
     1001,  203, 1389,  203,  203,  203, 1000, 1389,  203,  203,
      203, 1389, 1389,  203, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389,  203,  203,  203, 1001, 1003, 1389,

     1389,  203,  203, 1000, 1389, 1389,  203,  203,  203,  203,
      203,  203, 1389, 1389, 1389,  203,  203, 1002, 1389, 1389,
      203,  203,  203, 1389,  203, 1003, 1389, 1389, 1389,  203,
     1004, 1389, 1389, 1389,  203,  203,  203,  203,  203, 1389,
     1389, 1389,  203,  203, 1002, 1389, 1389,  203,  203,  203,
     1389,  203, 1389, 1005, 1389, 1389,  203, 1004,  203, 1006,
      203,  203,  203,  203,  203,  203,  203, 1007,  203,  203,
      203, 1389,  203, 1389,  203, 1389, 1389, 1389, 1389,  203,
     1005, 1389,  203, 1389,  203,  203, 1006,  203, 1389,  203,
      203,  203,  203,  203, 1007,  203,  203,  203,  203,  203,

      203,  203,  203, 1009,  203, 1389,  203,  203,  203,  203,
      203,  203,  203,  203, 1008, 1389,  203, 1389,  203, 1389,
      203, 1389,  203,  203, 1389,  203,  203,  203,  203,  203,
     1009,  203,  203, 1010,  203,  203, 1389,  203,  203,  203,
      203, 1008, 1389,  203,  203,  203,  203,  203, 1389,  203,
      203,  203, 1389,  203, 1389,  203,  203, 1389, 1389,  203,
     1010, 1389,  203, 1389,  203,  203, 1389, 1389,  203,  203,
      203,  203, 1389,  203,  203,  203, 1389, 1389,  203, 1389,
      203, 1389, 1088,  203, 1389, 1389,  203, 1389,  203,  203,
     1089,  203, 1389,  203,  203,  203,  203,  203,  203, 1389,

      203,  203,  203, 1389,  203, 1389, 1389,  203,  203, 1088,
      203, 1389, 1090,  203,  203,  203,  203, 1089, 1389, 1389,
      203,  203,  203, 1389,  203,  203, 1389,  203, 1389, 1389,
      203,  203,  203, 1389,  203,  203, 1389,  203, 1092, 1090,
      203,  203,  203,  203, 1389, 1091,  203, 1389, 1389,  203,
      203,  203,  203, 1093,  203, 1389, 1389,  203,  203,  203,
     1389,  203,  203, 1389,  203, 1092, 1389,  203, 1389,  203,
     1389, 1389, 1091,  203,  203, 1389, 1094,  203,  203,  203,
     1093,  203,  203, 1389, 1389,  203, 1389, 1389,  203,  203,
      203,  203, 1095, 1389, 1389, 1389, 1389,  203,  203, 1389,

     1389,  203,  203, 1094,  203,  203,  203, 1389, 1389,  203,
      203,  203, 1096, 1389,  203,  203,  203,  203, 1389, 1095,
     1097, 1389, 1098, 1389,  203,  203,  203, 1389, 1389,  203,
      203,  203,  203,  203, 1389, 1389,  203,  203,  203, 1096,
      203,  203,  203,  203, 1389, 1389,  203, 1097,  203, 1098,
     1099, 1389, 1389,  203,  203,  203,  203,  203, 1100,  203,
      203, 1389, 1389,  203,  203, 1389,  203,  203, 1389,  203,
      203, 1389, 1389,  203,  203,  203, 1101, 1099, 1389, 1389,
     1102,  203,  203,  203,  203, 1100,  203,  203,  203, 1389,
     1389,  203, 1104,  203,  203, 1389,  203,  203, 1103, 1389,

      203,  203,  203, 1101,  203,  203, 1389, 1102, 1389, 1389,
      203,  203,  203,  203,  203,  203,  203, 1389, 1105, 1104,
      203,  203, 1389,  203,  203, 1103,  203,  203, 1389,  203,
     1389,  203,  203, 1389,  203, 1389,  203,  203,  203,  203,
      203,  203, 1106,  203,  203, 1105, 1389,  203,  203, 1389,
      203,  203,  203,  203, 1108, 1107, 1389, 1389,  203,  203,
      203,  203, 1389,  203,  203,  203, 1389,  203, 1109, 1106,
      203,  203,  203, 1389, 1110,  203, 1389,  203,  203,  203,
      203, 1108, 1107, 1389, 1389,  203,  203,  203,  203, 1389,
      203,  203, 1111, 1389,  203, 1109,  203,  203,  203,  203,

     1389, 1110,  203, 1389,  203,  203, 1389,  203, 1389, 1112,
     1389, 1389,  203, 1389,  203,  203, 1389,  203,  203, 1111,
     1389,  203,  203,  203, 1389,  203, 1389, 1389,  203,  203,
      203,  203,  203, 1113, 1389, 1389, 1112, 1114,  203,  203,
     1389,  203,  203,  203, 1116,  203,  203, 1115,  203,  203,
      203, 1389,  203,  203, 1389,  203,  203,  203,  203,  203,
     1113, 1389, 1389,  203, 1114,  203,  203, 1389,  203,  203,
      203, 1116,  203,  203, 1115,  203,  203,  203, 1389,  203,
      203, 1389,  203,  203,  203,  203, 1389,  203,  203, 1118,
      203,  203,  203,  203,  203,  203, 1389,  203, 1120,  203,

      203, 1389, 1117,  203,  203,  203, 1389,  203, 1389,  203,
      203,  203, 1389,  203,  203,  203, 1118,  203,  203,  203,
     1389,  203, 1389,  203,  203, 1120, 1389,  203, 1119, 1117,
     1389,  203,  203,  203,  203, 1389,  203,  203,  203,  203,
      203,  203, 1122, 1121,  203, 1389,  203,  203,  203,  203,
      203,  203, 1389, 1389,  203, 1119, 1389, 1389, 1389,  203,
      203, 1389, 1389,  203, 1389,  203,  203, 1389,  203, 1122,
     1121, 1389, 1389,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203, 1123,  203,
      203,  203,  203,  203, 1389,  203, 1389, 1389,  203, 1389,

     1389, 1389, 1389,  203,  203, 1389,  203,  203, 1389,  203,
      203,  203,  203, 1389,  203, 1123,  203,  203,  203,  203,
      203,  203,  203,  203, 1389,  203, 1389, 1125,  203, 1124,
      203,  203,  203,  203,  203, 1389, 1389,  203, 1389, 1126,
     1389, 1389, 1127, 1389,  203, 1389, 1389,  203,  203, 1389,
      203, 1389, 1389, 1389, 1125,  203, 1124, 1389,  203,  203,
      203,  203, 1389, 1128,  203,  203, 1126, 1389, 1389, 1127,
      203,  203, 1389, 1389,  203,  203,  203,  203,  203,  203,
     1389, 1389, 1389,  203,  203, 1389, 1389, 1389,  203,  203,
     1128, 1389,  203, 1389, 1389, 1389, 1389,  203, 1389, 1129,

     1389, 1389,  203,  203,  203,  203,  203,  203, 1389,  203,
      203,  203, 1389, 1389,  203,  203,  203, 1389,  203,  203,
      203,  203, 1389,  203, 1389,  203, 1129, 1389,  203, 1389,
      203, 1389, 1389,  203,  203, 1389,  203, 1389, 1389, 1130,
     1389,  203, 1389,  203, 1389,  203,  203,  203,  203,  203,
      203,  203,  203,  203, 1132,  203, 1389,  203, 1131,  203,
      203, 1389, 1389,  203, 1389,  203, 1130,  203, 1389, 1389,
      203, 1389,  203, 1389, 1389, 1389,  203,  203,  203, 1389,
      203, 1132, 1389, 1389, 1389, 1131,  203, 1389, 1389,  203,
      203,  203,  203, 1389,  203, 1389,  203, 1133,  203,  203,

      203,  203, 1389, 1134,  203,  203, 1135,  203, 1389,  203,
      203, 1389, 1389, 1389,  203, 1389,  203, 1389,  203,  203,
     1389, 1389, 1389,  203, 1133,  203, 1389,  203,  203, 1389,
     1134, 1389,  203, 1135,  203, 1389,  203,  203,  203, 1389,
      203,  203,  203, 1136,  203,  203,  203,  203, 1389,  203,
      203, 1389, 1389,  203,  203, 1389, 1389, 1389,  203, 1389,
     1389, 1389,  203,  203, 1389,  203, 1389,  203,  203,  203,
     1136,  203,  203, 1137,  203, 1389,  203,  203,  203, 1389,
      203,  203, 1138,  203,  203,  203, 1389,  203,  203,  203,
      203, 1389, 1389,  203,  203,  203, 1389, 1139, 1389, 1389,

     1137, 1389, 1389,  203,  203,  203, 1389, 1389, 1389, 1138,
      203,  203,  203,  203,  203,  203,  203,  203, 1389, 1389,
      203,  203,  203,  203, 1139, 1140, 1389, 1389, 1389, 1389,
      203,  203,  203,  203, 1389, 1389, 1389,  203, 1141,  203,
      203,  203,  203,  203,  203, 1389, 1389,  203,  203,  203,
      203, 1142, 1140, 1389, 1389,  203, 1389,  203,  203,  203,
      203,  203, 1389,  203,  203, 1141,  203, 1143,  203,  203,
      203,  203, 1389,  203,  203,  203,  203, 1389, 1142, 1389,
     1389, 1389,  203,  203,  203,  203,  203, 1144,  203, 1389,
      203,  203, 1389,  203, 1143,  203, 1389,  203,  203, 1389,

      203,  203, 1389,  203, 1389, 1389, 1389, 1389, 1389, 1389,
      203,  203, 1145,  203, 1144, 1389,  203,  203,  203, 1389,
      203,  203,  203, 1389, 1146,  203,  203,  203,  203,  203,
      203, 1389, 1147, 1389,  203,  203,  203,  203,  203, 1145,
      203, 1389, 1389,  203,  203,  203, 1389,  203,  203, 1389,
      203, 1146,  203,  203,  203, 1389,  203,  203, 1389, 1147,
     1389,  203,  203,  203,  203,  203, 1389,  203, 1389, 1148,
     1389, 1389,  203, 1149,  203,  203, 1389,  203,  203, 1150,
     1389, 1389, 1389,  203,  203,  203, 1389,  203, 1389, 1389,
     1389, 1389,  203,  203,  203, 1389, 1148,  203, 1389,  203,

     1149,  203,  203,  203, 1151,  203, 1150, 1389, 1389,  203,
      203,  203,  203, 1389,  203, 1389,  203, 1389,  203, 1389,
      203,  203, 1152,  203,  203,  203,  203,  203,  203, 1389,
      203, 1151,  203, 1153, 1389, 1154,  203,  203, 1389, 1389,
     1389, 1389, 1389,  203, 1389,  203,  203, 1389,  203, 1152,
      203, 1389,  203,  203,  203,  203, 1155, 1389,  203,  203,
     1153, 1389, 1154, 1389,  203, 1389, 1389,  203, 1389,  203,
      203, 1389, 1156,  203,  203,  203, 1389,  203, 1389,  203,
      203, 1389,  203, 1155, 1389,  203,  203, 1389,  203, 1389,
     1389, 1389, 1389,  203,  203, 1389,  203,  203,  203, 1156,

     1389,  203, 1389, 1389,  203, 1389,  203, 1157, 1389,  203,
     1389,  203, 1389,  203, 1389,  203, 1389,  203, 1158,  203,
      203, 1389, 1159,  203, 1389,  203,  203,  203, 1389,  203,
     1389,  203,  203, 1389, 1157,  203, 1389, 1389,  203,  203,
     1389,  203,  203, 1389,  203, 1158,  203, 1389, 1389, 1159,
      203,  203, 1389,  203,  203, 1389,  203, 1389,  203,  203,
     1389, 1161,  203,  203, 1389,  203,  203, 1389,  203,  203,
     1160, 1389,  203, 1389,  203,  203, 1389, 1389,  203,  203,
     1162, 1389, 1389, 1389,  203, 1389, 1389, 1389, 1161, 1389,
      203,  203,  203,  203, 1389, 1389, 1389, 1160,  203,  203,

     1389,  203,  203,  203, 1389, 1389,  203, 1162, 1389, 1211,
      203,  203,  203,  203,  203, 1389,  203,  203,  203,  203,
      203,  203,  203, 1389, 1389,  203,  203, 1389, 1389,  203,
      203, 1389, 1389, 1389, 1389, 1389, 1211,  203, 1389,  203,
      203,  203, 1389,  203,  203, 1389,  203,  203,  203,  203,
     1389,  203,  203,  203, 1212, 1389,  203,  203,  203,  203,
      203,  203, 1214, 1213,  203,  203,  203,  203,  203, 1389,
      203, 1389,  203,  203,  203, 1389, 1389, 1389,  203,  203,
     1389, 1212,  203, 1389,  203,  203,  203,  203,  203, 1214,
     1213,  203,  203,  203,  203,  203, 1389,  203,  203,  203,

      203, 1389,  203,  203,  203,  203,  203, 1389,  203,  203,
     1216,  203, 1217, 1215,  203,  203,  203, 1389,  203,  203,
     1389, 1389, 1389, 1389,  203,  203, 1389, 1389, 1389,  203,
      203,  203,  203,  203, 1389,  203, 1389, 1216,  203, 1217,
     1215,  203,  203,  203, 1389,  203,  203,  203,  203,  203,
      203,  203, 1389, 1389,  203,  203, 1218, 1389, 1389,  203,
      203,  203, 1219,  203, 1389, 1389, 1389, 1389,  203, 1389,
     1389, 1389, 1389,  203,  203,  203,  203,  203, 1389, 1389,
     1389,  203,  203, 1218, 1389, 1220,  203,  203,  203, 1219,
      203, 1221, 1389,  203,  203,  203,  203,  203,  203,  203,

      203,  203, 1389,  203,  203, 1222,  203, 1389, 1389,  203,
     1389, 1389, 1220, 1389, 1389,  203, 1389,  203, 1221, 1389,
      203,  203,  203,  203,  203,  203,  203,  203,  203, 1389,
      203,  203, 1222,  203, 1389, 1389,  203, 1389,  203, 1389,
      203, 1224,  203, 1389,  203,  203, 1223, 1389, 1389,  203,
      203,  203, 1389,  203,  203, 1389, 1389,  203,  203,  203,
     1389, 1389, 1389,  203,  203,  203, 1389,  203, 1224,  203,
     1389, 1389,  203, 1223, 1389, 1389, 1389,  203,  203, 1389,
      203, 1389, 1389, 1225,  203,  203,  203, 1389, 1389, 1389,
      203,  203,  203,  203,  203,  203,  203, 1389, 1389,  203,

      203,  203, 1389, 1226,  203,  203, 1389, 1389,  203, 1389,
     1225, 1389, 1389,  203, 1389, 1389, 1389, 1389, 1389,  203,
      203,  203,  203, 1389, 1389, 1389,  203,  203,  203, 1389,
     1226,  203,  203, 1389,  203,  203,  203,  203, 1227,  203,
      203,  203,  203,  203,  203, 1228,  203,  203,  203,  203,
      203,  203, 1389, 1389, 1389,  203, 1389,  203,  203, 1389,
     1389,  203, 1389,  203,  203, 1227,  203,  203,  203,  203,
      203,  203, 1228,  203,  203,  203,  203,  203,  203,  203,
     1389,  203,  203, 1389,  203,  203,  203, 1229,  203,  203,
     1231,  203, 1389, 1230,  203,  203, 1389, 1389, 1389,  203,

      203, 1389, 1389, 1389, 1389, 1389,  203, 1389,  203,  203,
     1389, 1389, 1389,  203, 1229,  203,  203, 1231,  203, 1389,
     1230,  203,  203,  203, 1389, 1389,  203,  203,  203, 1389,
      203, 1389,  203,  203, 1389, 1389,  203,  203, 1389,  203,
     1389,  203,  203, 1389, 1389, 1389,  203, 1389,  203, 1389,
      203,  203, 1389, 1389, 1389,  203, 1389,  203, 1389,  203,
      203, 1389, 1389,  203,  203,  203,  203, 1389,  203,  203,
      203, 1389,  203,  203,  203,  203, 1389, 1389,  203,  203,
     1389,  203, 1389,  203,  203, 1233, 1389, 1389,  203,  203,
      203, 1389,  203,  203, 1389,  203, 1389,  203, 1389,  203,

     1389,  203,  203, 1389, 1389,  203,  203,  203,  203,  203,
      203,  203, 1233, 1232,  203,  203,  203, 1389, 1389,  203,
      203, 1234,  203,  203, 1389,  203, 1389,  203, 1389,  203,
     1389, 1389,  203,  203,  203,  203,  203,  203, 1389,  203,
     1232,  203, 1389,  203, 1235,  203,  203,  203, 1234,  203,
      203,  203,  203, 1389,  203, 1389,  203,  203, 1389, 1389,
      203,  203,  203,  203,  203, 1389,  203,  203,  203, 1389,
      203, 1235,  203,  203,  203, 1236,  203,  203,  203,  203,
     1389,  203,  203, 1389,  203, 1389,  203,  203,  203, 1389,
      203,  203, 1237, 1389,  203,  203, 1389, 1389, 1389, 1389,

      203, 1389, 1236,  203,  203,  203,  203, 1389,  203,  203,
      203, 1389, 1389,  203,  203,  203,  203, 1389,  203, 1237,
     1239,  203, 1389,  203, 1389, 1389,  203,  203,  203,  203,
      203, 1389,  203,  203,  203, 1238,  203,  203, 1389,  203,
     1389, 1389,  203,  203, 1389, 1389, 1389, 1239,  203, 1389,
      203, 1389, 1389,  203,  203,  203,  203, 1389, 1389, 1389,
      203,  203, 1238,  203,  203, 1241,  203,  203, 1240,  203,
     1389,  203, 1389, 1389,  203,  203,  203,  203, 1243, 1389,
     1389, 1389, 1389,  203,  203,  203, 1389, 1242,  203, 1389,
     1389,  203, 1241, 1389,  203, 1240,  203, 1389,  203, 1389,

     1389,  203,  203,  203,  203, 1243,  203, 1389,  203, 1389,
      203,  203,  203,  203, 1242,  203, 1244, 1389,  203, 1389,
     1245, 1389, 1389, 1389, 1389,  203, 1389,  203, 1389,  203,
     1389,  203,  203,  203, 1389,  203,  203,  203, 1389, 1389,
      203,  203, 1389, 1244, 1389,  203, 1389, 1245,  203, 1389,
      203, 1389,  203, 1389,  203, 1246,  203, 1389,  203,  203,
      203, 1389, 1389,  203,  203, 1389, 1389,  203,  203,  203,
     1389,  203, 1389,  203, 1247,  203, 1389,  203,  203,  203,
     1389, 1389, 1246,  203, 1389, 1389, 1389,  203, 1389, 1389,
      203, 1389, 1248, 1389,  203, 1389,  203,  203,  203, 1389,

      203, 1247,  203, 1389, 1389,  203,  203, 1389, 1389,  203,
      203,  203, 1389, 1249, 1389,  203,  203,  203, 1389, 1248,
      203,  203, 1389, 1389,  203,  203, 1389, 1389, 1389,  203,
     1389, 1389,  203, 1389,  203, 1389,  203, 1389,  203,  203,
     1249, 1389,  203,  203,  203, 1250, 1389,  203,  203, 1389,
     1389, 1251,  203,  203, 1389,  203,  203, 1389,  203,  203,
      203,  203,  203,  203,  203,  203,  203, 1389,  203,  203,
     1389,  203, 1250, 1389,  203, 1389, 1389, 1252, 1251, 1389,
      203, 1389,  203,  203, 1389,  203,  203,  203,  203,  203,
      203,  203,  203,  203, 1389,  203,  203, 1389,  203, 1389,

      203,  203,  203, 1389, 1252, 1389, 1254,  203, 1253, 1389,
     1389, 1389,  203,  203,  203,  203,  203, 1389, 1389, 1389,
      203,  203, 1389, 1389, 1389,  203,  203,  203, 1389,  203,
      203, 1389,  203, 1254,  203, 1253, 1389,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203, 1389,  203, 1389,
      203,  203, 1389,  203, 1389, 1389,  203,  203, 1389,  203,
     1389, 1389, 1389, 1389,  203,  203, 1389,  203,  203,  203,
      203,  203,  203,  203, 1255,  203, 1389,  203,  203, 1256,
      203,  203,  203,  203,  203, 1389,  203, 1389, 1389,  203,
     1389,  203, 1389, 1389,  203,  203, 1389,  203,  203, 1389,

      203, 1255,  203, 1389, 1389,  203, 1256,  203,  203,  203,
      203,  203,  203,  203,  203, 1389,  203, 1389,  203,  203,
     1389,  203, 1389, 1389,  203,  203,  203,  203,  203, 1389,
     1283, 1389,  203,  203,  203, 1389, 1389,  203,  203,  203,
      203,  203, 1389, 1389,  203, 1389,  203, 1389,  203, 1389,
      203,  203,  203,  203,  203,  203,  203, 1283, 1389, 1389,
      203,  203,  203, 1389,  203,  203, 1389,  203, 1284, 1259,
     1389,  203,  203, 1389, 1285,  203, 1389,  203,  203,  203,
     1389,  203, 1389,  203,  203, 1389, 1389, 1389, 1286,  203,
     1389,  203,  203,  203,  203, 1389,  203,  203, 1389,  203,

     1389, 1285,  203,  203, 1389,  203,  203, 1389, 1389, 1389,
      203,  203,  203,  203, 1389, 1286,  203, 1389,  203,  203,
      203,  203,  203,  203,  203, 1389,  203, 1389,  203,  203,
      203, 1287, 1288,  203, 1389,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203, 1389,  203,  203,
      203,  203,  203,  203,  203,  203,  203, 1389, 1287, 1288,
     1389, 1289,  203,  203,  203,  203,  203, 1389,  203,  203,
      203,  203, 1290,  203,  203,  203, 1389,  203,  203,  203,
      203,  203,  203,  203, 1389,  203,  203, 1389, 1289,  203,
      203,  203,  203,  203, 1389,  203,  203,  203, 1291, 1290,

     1389,  203,  203,  203, 1389,  203, 1389,  203,  203,  203,
     1389, 1389,  203,  203, 1389, 1389,  203,  203, 1389,  203,
     1389, 1389,  203,  203,  203, 1291,  203, 1389, 1389,  203,
      203,  203,  203, 1389, 1292,  203,  203,  203, 1389,  203,
     1293, 1389,  203,  203,  203,  203, 1389,  203, 1389,  203,
      203,  203,  203,  203, 1389,  203, 1389, 1389,  203, 1389,
     1389, 1292, 1389,  203,  203, 1389,  203, 1293, 1389,  203,
      203,  203,  203,  203,  203,  203,  203,  203, 1389,  203,
      203,  203,  203,  203,  203,  203,  203, 1389,  203, 1389,
     1294,  203, 1389,  203, 1295, 1389,  203, 1389,  203,  203,

      203, 1389,  203,  203,  203, 1389, 1389,  203,  203, 1296,
      203,  203,  203,  203,  203,  203, 1389, 1294,  203,  203,
      203, 1295,  203,  203, 1297,  203,  203, 1389, 1389,  203,
      203,  203, 1389,  203,  203,  203, 1296, 1389, 1389, 1389,
      203,  203, 1389, 1389, 1389,  203,  203, 1389, 1389,  203,
     1389, 1297,  203, 1389,  203, 1389,  203, 1298, 1389,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203, 1389,
      203, 1299,  203,  203, 1389,  203, 1389, 1389,  203,  203,
     1389,  203, 1389, 1389, 1298, 1389,  203, 1389, 1389, 1389,
      203,  203,  203,  203, 1389,  203, 1389,  203, 1299, 1389,

      203, 1389,  203, 1300,  203,  203,  203,  203,  203,  203,
      203,  203, 1389, 1389,  203,  203,  203, 1389, 1389,  203,
      203, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1300,  203, 1389,  203,  203,  203,  203,  203,  203, 1389,
     1389,  203,  203,  203, 1389, 1389,  203,  203,  203, 1389,
      203,  203, 1389,  203, 1389,  203, 1301, 1389,  203,  203,
      203,  203, 1389,  203, 1389, 1302,  203,  203, 1303,  203,
     1389,  203, 1389, 1389,  203,  203, 1389,  203,  203,  203,
      203, 1389,  203, 1301, 1389,  203,  203,  203,  203, 1389,
      203, 1389, 1302,  203,  203, 1303,  203,  203,  203,  203,

     1389,  203, 1389, 1305,  203, 1304,  203,  203, 1306,  203,
     1389, 1389,  203,  203, 1389, 1389, 1389,  203,  203, 1389,
     1389,  203, 1389,  203,  203, 1389,  203,  203,  203, 1389,
     1305,  203, 1304, 1389,  203, 1306,  203,  203, 1389,  203,
      203, 1389,  203,  203,  203,  203,  203,  203,  203, 1389,
      203, 1389,  203,  203,  203,  203, 1323,  203, 1389, 1389,
     1389,  203,  203,  203,  203, 1389, 1389,  203, 1389,  203,
      203,  203,  203,  203,  203,  203,  203,  203, 1389,  203,
      203,  203,  203, 1323,  203, 1326, 1325, 1389,  203,  203,
      203,  203,  203, 1389,  203, 1389,  203,  203,  203,  203,

      203,  203,  203,  203,  203, 1389,  203,  203,  203,  203,
      203, 1389, 1326, 1325,  203, 1389,  203,  203,  203,  203,
      203, 1389,  203,  203,  203, 1389,  203,  203,  203, 1389,
      203, 1389,  203,  203,  203,  203,  203,  203, 1327,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
     1328, 1389,  203,  203, 1389,  203,  203,  203,  203,  203,
     1389, 1389,  203,  203, 1389, 1327,  203,  203,  203,  203,
     1389, 1389,  203,  203,  203,  203, 1389, 1328,  203,  203,
     1389, 1389,  203,  203,  203,  203,  203, 1329, 1330, 1389,
     1389, 1389, 1331,  203,  203,  203, 1332,  203,  203,  203,

      203,  203, 1389, 1389,  203,  203,  203, 1389,  203,  203,
     1389,  203,  203,  203, 1329, 1330,  203, 1389,  203, 1331,
      203,  203, 1389, 1332,  203,  203,  203,  203,  203, 1389,
      203,  203, 1389,  203,  203,  203,  203, 1389,  203,  203,
      203, 1389,  203,  203, 1389,  203, 1389, 1389,  203, 1389,
      203, 1389,  203, 1389, 1389,  203,  203,  203,  203, 1389,
      203,  203,  203, 1389,  203,  203, 1389,  203, 1389,  203,
      203, 1334, 1333, 1389,  203,  203, 1389,  203, 1335,  203,
      203, 1389,  203,  203,  203,  203,  203,  203, 1389,  203,
     1389,  203,  203, 1389,  203, 1336,  203,  203, 1334, 1333,

      203,  203,  203, 1345, 1338, 1335,  203,  203, 1389,  203,
     1347,  203, 1389,  203,  203, 1389,  203, 1389, 1389,  203,
      203,  203, 1336,  203, 1389, 1389, 1389,  203,  203,  203,
      203, 1389,  203,  203, 1389, 1389,  203, 1347,  203, 1389,
      203,  203, 1389,  203, 1389, 1389,  203,  203,  203, 1389,
      203, 1389, 1389, 1389,  203,  203,  203,  203,  203,  203,
      203, 1389,  203,  203,  203,  203,  203,  203,  203, 1389,
      203, 1348,  203,  203,  203,  203,  203,  203,  203,  203,
     1389,  203, 1389,  203,  203,  203, 1389,  203, 1389,  203,
     1389,  203, 1389,  203, 1389,  203, 1389,  203, 1348,  203,

      203,  203,  203,  203, 1389,  203,  203,  203,  203, 1389,
      203,  203,  203, 1389,  203, 1349,  203, 1389, 1389, 1389,
      203,  203, 1389, 1389, 1389, 1389,  203,  203, 1389,  203,
     1389, 1389, 1389, 1389,  203,  203, 1389,  203,  203,  203,
      203,  203, 1349,  203, 1389,  203, 1389,  203,  203, 1389,
      203,  203, 1389,  203,  203,  203,  203, 1389,  203,  203,
      203, 1350, 1389,  203,  203,  203,  203,  203, 1389,  203,
     1389,  203,  203, 1389,  203, 1389,  203,  203,  203,  203,
     1389,  203,  203,  203, 1389,  203,  203,  203, 1350, 1389,
      203,  203, 1389,  203, 1389,  203,  203, 1389,  203,  203,

      203,  203, 1358,  203, 1389,  203,  203,  203, 1389,  203,
     1389,  203,  203, 1389, 1389,  203,  203, 1389, 1389, 1389,
     1389,  203,  203, 1389, 1389, 1389,  203,  203, 1389, 1358,
     1389, 1389,  203, 1389,  203, 1389,  203, 1389,  203,  203,
     1389, 1389,  203,  203, 1389, 1389, 1389, 1389,  203,   47,
       47,   47,   47,   47,   90, 1389, 1389,   90,   90,  188,
      188,  188, 1389,  188,  190, 1389,  190,  190,  190,  193,
     1389,  193,  193,  193,  203, 1389,  203,  203,  203,    7,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,

     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389
    } ;

static const flex_int16_t yy_chk[9157] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   27,   28,   22,   23,   30,   21,
       27,   21,   22,   28,   23,   21,   21,   31,   37,   28,

       45,   23,   22, 1392,   23,   50,   50,   23,   21,   22,
       21,   27,   28,   22,   23,   30,   21,   27,   21,   22,
       28,   23,   21,   21,   31,   37,   28,   45,   23,   22,
       42,   23,   24, 1386,   23,   25,   24,   25,   42,   56,
       24,   32,   25,  101,   33,   32,   24,   25,   33,   24,
       56,   32,   51,   51,   33,   43,   43,   42, 1385,   24,
       59,   59,   25,   24,   25,   42,   34,   24,   32,   25,
      101,   33,   32,   24,   25,   33,   24,   26,   32,   36,
       34,   33,   43,   43,  102,   26,   34,   34,   26,  105,
       36,   26,   29,   34,   26, 1384,   36,   26,   29,   29,

       29,   88,   88, 1383,   26,   29,   36,   34,  191,  191,
     1381,  102,   26,   34,   34,   26,  105,   36,   26,   29,
     1379,   26,   35,   36,   26,   29,   29,   29,  103,  106,
       35,   38,   29,  108,   35,   38,  103,   35,   35,   38,
      104,  109,   41,  104,   41,   38, 1377,   41, 1375,   35,
     1171, 1171,  112,  115, 1373,  103,  106,   35,   38, 1371,
      108,   35,   38,  103,   35,   35,   38,  104,  109,   41,
      104,   41,   38,   39,   41,   39, 1369,  111,   39,  112,
      115,   39, 1367,   39,  111,   39,   39,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57, 1365,  116,  114,

       39, 1363,   39,  116,  111,   39,  107,  107,   39,  114,
       39,  111,   39,   39,   40,  118,  118,   68,   40,   68,
      107,   40,   40,   68,   68,  116,  114,  119,   40,   68,
      116,   40, 1361,  107,  107, 1359,  114, 1308, 1308, 1355,
     1351,   40,  118,  118,   68,   40,   68,  107,   40,   40,
       68,   68,  120, 1344,  119,   40,   68, 1337,   40,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       62,   62,  121,   62,   62,   62,   62,   62,   62,  120,
       69,  123, 1322, 1307,   69, 1282,  122,  122,   69,   62,
       62,   62,   71,  125,   69,   62,   71,   62,  126,  121,

      127, 1257,   71,   62,   69,   62,  129,   69,  123,   62,
       62,   69,   71,  122,  122,   69,  130,  131, 1210,   71,
      125,   69,   62,   71,   62,  126, 1163,  127,  128,   71,
       62,   69,   62,  129,  128, 1087,   62,   62, 1011,   71,
      910,  809,  679,  130,  131,   62,   63,   63,  132,   63,
       63,   63,   63,   63,   63,  128,  549,  134,   72,   73,
       74,  128,   72,   73,   74,   63,   63,   63,   72,   73,
       74,  133,   63,   85,  133,  132,   63,   85,   72,   73,
       74,  135,   63,   85,  134,   72,   73,   74,  137,   72,
       73,   74,   63,   85,  421,   72,   73,   74,  133,   63,

       85,  133,  292,   63,   85,   72,   73,   74,  135,   63,
       85,   78,  195,   84,  138,  137,   84,   84,   78,   63,
       85,   63,   64,   84,  140,   78,   64,  141,   78,   64,
       64,   78,  142,   84,  143,  144,   64,  144,   78,   64,
       84,  138,   64,   84,   84,   78,   64,  193,  146,   64,
       84,  140,   78,   64,  141,   78,   64,   64,   78,  142,
       84,  143,  144,   64,  144,  147,   64,   92,  148,   64,
      149,   90,   79,   64,   65,  146,   79,   82,   65,   82,
       79,   82,   65,   87,   82,  151,   79,  152,   65,   82,
       86,   65,  147,   61,   86,  148,   79,  149,   65,   79,

       86,   65,   60,   79,   82,   65,   82,   79,   82,   65,
       86,   82,  151,   79,  152,   65,   82,   86,   65,   53,
       83,   86,   52,   79,   83,   65,   66,   86,   83,  145,
       66,  145,  153,   66,   83,   66,   66,   86,  150,  155,
       66,  150,  145,  156,   83,   66,   66,   83,  113,  113,
      113,   83,  113,   66,   48,   83,  145,   66,  145,  153,
       66,   83,   66,   66,   46,  150,  155,   66,  150,  145,
      156,   83,   66,   66,   67,  113,  113,  113,  117,  113,
      117,   67,   67,  117,  157,   67,  158,  159,   67,  117,
      161,   67,  162,  160,   67,   20,  117,  160,   19,  164,

       11,   67,    7,    4,    3,  117,    0,  117,   67,   67,
      117,  157,   67,  158,  159,   67,  117,  161,   67,  162,
      160,   67,   70,  117,  160,  124,  164,  124,   70,   70,
       70,  124,  163,  165,  166,   70,    0,  163,  124,  168,
       70,    0,  124,  169,  165,  163,    0,    0,    0,   70,
      163,    0,  124,  168,  124,   70,   70,   70,  124,  163,
      165,  166,   70,  139,  163,  124,  168,   70,   75,  124,
      169,  165,  163,  139,  167,   75,  170,  163,  139,  139,
      168,  171,   75,  167,  172,   75,  173,  174,   75,   75,
      139,  167,  175,  176,  177,   75,    0,    0,  174,    0,

      139,  167,   75,  170,    0,  139,  139,    0,  171,   75,
      167,  172,   75,  173,  174,   75,   75,   76,  167,  175,
      176,  177,   76,  178,   76,  174,  179,  180,  181,  182,
       76,   76,  183,  179,   76,  182,  179,   76,   76,    0,
      184,  185,  186,  178,   76,  183,    0,  295,    0,   76,
      178,   76,  297,  179,  180,  181,  182,   76,   76,  183,
      179,   76,  182,  179,   76,   76,   77,  184,  185,  186,
      178,  203,  183,   77,  295,  203,  298,   77,  300,  297,
       77,  203,  302,   77,  303,  209,   77,    0,  304,    0,
      305,  203,    0,   77,  209,    0,  209,    0,  203,    0,

       77,  209,  203,  298,   77,  300,  209,   77,  203,  302,
       77,  303,  209,   77,   80,  304,   80,  305,  203,   80,
       80,  209,   80,  209,   80,  306,   80,   80,  209,  204,
      204,  307,    0,  209,  204,  309,   80,    0,    0,  310,
      204,   80,  311,   80,    0,    0,   80,   80,    0,   80,
      204,   80,  306,   80,   80,  205,  204,  204,  307,  205,
      312,  204,  309,   80,   81,  205,  310,  204,   81,  311,
      205,   81,   81,  313,  314,  205,  315,  204,   81,  316,
      317,   81,  205,  318,  319,  320,  205,  312,   81,    0,
        0,   81,  205,    0,    0,   81,    0,  205,   81,   81,

      313,  314,  205,  315,    0,   81,  316,  317,   81,    0,
      318,  319,  320,    0,    0,   81,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  206,  321,
      206,  208,  323,  208,  324,  206,  206,  208,  208,  325,
      206,    0,  326,  208,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293,    0,  206,  321,  206,  208,  323,
      208,  324,  206,  206,  208,  208,  325,  206,  207,  326,
      208,  207,    0,  211,  327,    0,  328,    0,  211,  207,
      211,  207,  281,  329,  212,  211,  207,  331,  212,  281,
      211,  207,    0,    0,  212,  207,  281,    0,  207,  281,
      211,  327,  281,  328,  212,  211,  207,  211,  207,  281,
      329,  212,  211,  207,  331,  212,  281,  211,  207,  210,
      210,  212,  332,  281,  213,  210,  281,  210,  213,  281,
      333,  212,  210,  210,  213,    0,  214,  210,  214,  334,
        0,    0,    0,  214,  213,  335,  210,  210,  214,  332,

      336,  213,  210,  337,  210,  213,  215,  333,  217,  210,
      210,  213,  217,  214,  210,  214,  334,  215,  217,  215,
      214,  213,  335,    0,  215,  214,  338,  336,  217,  215,
      337,    0,    0,  215,    0,  217,    0,    0,  339,  217,
      340,    0,    0,    0,  215,  217,  215,    0,    0,  342,
      218,  215,    0,  338,  218,  217,  215,  216,  216,  216,
      218,  216,    0,  218,  216,  339,  222,  340,  222,  216,
      218,  343,    0,  222,  341,  222,  342,  218,  222,  219,
      344,  218,  341,  219,  216,  216,  216,  218,  216,  219,
      218,  216,  345,  222,  219,  222,  216,  218,  343,  219,

      222,  341,  222,  346,  347,  222,  219,  344,    0,  341,
      219,    0,  348,    0,    0,    0,  219,    0,    0,  345,
        0,  219,  349,    0,  223,  350,  219,  220,  223,  220,
      346,  347,  220,  351,  223,  221,  352,  221,  220,  348,
      220,  221,  221,  353,  223,  220,  224,  221,  224,  349,
      220,  223,  350,  224,  220,  223,  220,  354,  224,  220,
      351,  223,  221,  352,  221,  220,    0,  220,  221,  221,
      353,  223,  220,  224,  221,  224,    0,  220,    0,    0,
      224,  356,  226,  357,  354,  224,  225,  225,  308,    0,
      308,  226,  228,  226,  228,  225,  230,  225,  226,  228,

      230,  359,  225,  226,  228,  308,  230,  225,  356,  226,
      357,    0,  360,  225,  225,  308,  230,  308,  226,  228,
      226,  228,  225,  230,  225,  226,  228,  230,  359,  225,
      226,  228,  308,  230,  225,  227,  355,  227,  229,  360,
      229,  227,  361,  230,  362,  229,  355,  227,  227,  231,
      229,  231,  227,  364,    0,  231,  231,  227,    0,    0,
        0,  231,  227,  355,  227,  229,  365,  229,  227,  361,
        0,  362,  229,  355,  227,  227,  231,  229,  231,  227,
      364,  232,  231,  231,  227,  232,  234,  233,  231,  233,
      234,  232,  366,  365,  233,  236,  234,  236,  367,  233,

      235,  232,  236,  368,  235,  236,  234,  236,  232,    0,
      235,    0,  232,  234,  233,    0,  233,  234,  232,  366,
      235,  233,  236,  234,  236,  367,  233,  235,  232,  236,
      368,  235,  236,  234,  236,    0,  237,  235,  237,  370,
      371,  372,  238,  237,  238,  373,  374,  235,  237,  238,
      239,  238,  239,  375,  238,    0,    0,  239,  376,    0,
        0,    0,  239,  237,  363,  237,  370,  371,  372,  238,
      237,  238,  373,  374,  363,  237,  238,  239,  238,  239,
      375,  238,  240,  241,  239,  376,  240,  241,  243,  239,
      243,  363,  240,  241,  241,  243,  378,  380,  381,  377,

      243,  363,  240,  241,    0,    0,    0,  382,  383,  240,
      241,    0,    0,  240,  241,  243,    0,  243,  377,  240,
      241,  241,  243,  378,  380,  381,  377,  243,  244,  240,
      241,  242,  244,  245,  382,  383,  379,  245,  244,  242,
      384,  242,  385,  245,  386,  377,  242,  242,  244,  379,
      249,  242,  249,  245,    0,  244,  249,  249,  242,  244,
      245,    0,  249,  379,  245,  244,  242,  384,  242,  385,
      245,  386,    0,  242,  242,  244,  379,  249,  242,  249,
      245,  246,  246,  249,  249,  246,  250,  387,  250,  249,
      388,  246,  251,  250,  251,  389,  322,  390,  250,  251,

      322,  246,    0,  391,  251,  392,    0,    0,  246,  246,
        0,  322,  246,  250,  387,  250,  394,  388,  246,  251,
      250,  251,  389,  322,  390,  250,  251,  322,  246,  247,
      391,  251,  392,  247,  252,  247,  252,  247,  322,  247,
      395,  252,  252,  394,  396,  397,  252,  398,  399,  247,
        0,    0,    0,    0,  400,    0,  247,    0,  401,    0,
      247,  252,  247,  252,  247,    0,  247,  395,  252,  252,
      402,  396,  397,  252,  398,  399,  247,  248,  256,  248,
      254,  400,  254,  403,  256,  401,  256,  254,  248,  404,
      248,  256,  254,    0,  406,  248,  256,  402,    0,  408,

      248,    0,  410,    0,  248,  256,  248,  254,    0,  254,
      403,  256,    0,  256,  254,  248,  404,  248,  256,  254,
      255,  406,  248,  256,    0,  407,  408,  248,  253,  410,
      253,  255,  411,  255,  407,  253,  253,    0,  255,  253,
      253,  412,  257,  255,  257,    0,  413,  255,    0,  257,
        0,  409,  407,  409,  257,  253,    0,  253,  255,  411,
      255,  407,  253,  253,  258,  255,  253,  253,  412,  257,
      255,  257,  258,  413,  258,  259,  257,  259,  409,  258,
      409,  257,  259,  259,  258,  260,    0,  259,  414,  260,
        0,  258,  415,  416,    0,  260,    0,    0,    0,  258,

        0,  258,  259,  418,  259,  260,  258,    0,    0,  259,
      259,  258,  260,  261,  259,  414,  260,  261,    0,  415,
      416,  262,  260,  261,  417,  262,  261,  263,  417,  262,
      418,  263,  260,  261,  265,  262,  265,  263,  419,  264,
      261,  265,  550,  264,  261,  262,  265,  263,  262,  264,
      261,  417,  262,  261,  263,  417,  262,    0,  263,  264,
      261,  265,  262,  265,  263,  419,  264,    0,  265,  550,
      264,    0,  262,  265,  263,    0,  264,  267,    0,    0,
        0,  272,  267,    0,  267,  272,  264,  266,  551,  267,
      552,  272,  266,  553,  267,  268,  554,  268,  266,  555,

      266,  272,  268,  556,  267,  266,  268,  268,  272,  267,
      266,  267,  272,    0,  266,  551,  267,  552,  272,  266,
      553,  267,  268,  554,  268,  266,  555,  266,  272,  268,
      556,  557,  266,  268,  268,  269,  271,  266,    0,  269,
      271,  269,  276,  558,  271,  276,  269,  560,  563,  276,
      271,  269,    0,  564,  565,  276,  566,  568,  557,  569,
      271,    0,  269,  271,  570,  276,  269,  271,  269,  276,
      558,  271,  276,  269,  560,  563,  276,  271,  269,  270,
      564,  565,  276,  566,  568,  273,  569,  271,  270,  273,
      270,  570,  276,  273,  274,  270,  270,    0,  274,  273,

      270,    0,  571,  573,  274,    0,  270,  274,  574,  273,
      575,    0,  273,  576,  274,  270,  273,  270,  577,    0,
      273,  274,  270,  270,  275,  274,  273,  270,  275,  571,
      573,  274,  275,  578,  274,  574,  273,  575,  275,    0,
      576,  274,  277,  277,  277,  577,  278,    0,  275,  277,
      278,  275,  579,  580,  277,  275,  278,    0,  581,  275,
      578,    0,    0,    0,  279,  275,  278,    0,  279,  277,
      277,  277,  279,  278,  279,  275,  277,  278,  280,  579,
      580,  277,  280,  278,  279,  581,  582,    0,  280,  280,
      284,  279,  585,  278,  284,  279,  586,    0,  280,  279,

      284,  279,    0,  283,  283,  280,    0,  587,  283,  280,
      284,  279,    0,  582,  283,  280,  280,  284,    0,  585,
      588,  284,    0,  586,  283,  280,  282,  284,    0,  282,
      283,  283,  589,  282,  587,  283,  282,  284,  285,  282,
      285,  283,  286,  590,  285,  285,  286,  588,  591,  282,
      285,  283,  286,  282,  287,  286,  282,    0,  287,  589,
      282,    0,  286,  282,  287,  285,  282,  285,    0,  286,
      590,  285,  285,  286,  287,  591,  282,  285,  592,  286,
      288,  287,  286,  423,  288,  287,  594,  423,  289,  286,
      288,  287,  289,  423,  595,  288,  289,  427,  596,  427,

      288,  287,  289,  423,  427,  592,  597,  288,  600,  427,
      423,  288,  289,  594,  423,  289,    0,  288,    0,  289,
      423,  595,  288,  289,  427,  596,  427,  288,    0,  289,
      423,  427,    0,  597,    0,  600,  427,    0,  601,  289,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      424,  425,  426,    0,  424,  425,  426,  428,    0,  428,
      424,  425,  426,    0,  428,  601,  603,  605,  606,  428,
      424,  425,  426,  430,    0,  430,    0,  424,  425,  426,
      430,  424,  425,  426,  428,  430,  428,  424,  425,  426,
      429,  428,    0,  603,  605,  606,  428,  424,  425,  426,

      430,  429,  430,  429,  607,  431,  432,  430,  429,  431,
      432,  608,  430,  429,    0,  431,  432,  429,    0,  434,
      609,  610,  613,  434,    0,  431,  432,  617,  429,  434,
      429,  607,  431,  432,    0,  429,  431,  432,  608,  434,
      429,  433,  431,  432,  619,  433,  434,  609,  610,  613,
      434,  433,  431,  432,  617,  435,  434,  435,  436,  433,
      436,  433,  435,  620,    0,  436,  434,  435,  433,  622,
      436,  619,  433,    0,    0,  624,    0,    0,  433,  625,
        0,  626,  435,    0,  435,  436,  433,  436,  433,  435,
      620,  439,  436,    0,  435,  439,  622,  436,  437,  438,

      437,  439,  624,  438,  437,  611,  625,  439,  626,  438,
      437,  439,  438,  440,    0,  437,  611,  440,  439,  438,
      437,  440,  439,  440,    0,  437,  438,  437,  439,    0,
      438,  437,  611,  440,  439,  628,  438,  437,  439,  438,
      440,  441,  437,  611,  440,  441,  438,  437,  440,  442,
      440,  441,  629,  442,  623,  623,  441,  630,  631,  442,
      440,  441,  628,  443,  633,  634,    0,  443,  441,  442,
      636,  443,  441,    0,    0,  637,  442,  443,  441,  629,
      442,  623,  623,  441,  630,  631,  442,  443,  441,    0,
      443,  633,  634,  444,  443,  444,  442,  636,  443,    0,

      444,  445,  637,  445,  443,  444,  446,  445,  445,  638,
      446,  449,  639,  445,  443,  449,  446,  447,    0,  447,
      444,  449,  444,    0,  447,    0,  446,  444,  445,  447,
      445,  449,  444,  446,  445,  445,  638,  446,  449,  639,
      445,  640,  449,  446,  447,  448,  447,  448,  449,    0,
      451,  447,  448,  446,  451,    0,  447,  448,  449,  450,
      451,    0,  642,  450,    0,  451,  643,  450,  640,  644,
      451,    0,  448,  450,  448,  645,  452,  451,  452,  448,
      646,  451,  452,  450,  448,  648,  450,  451,  452,  642,
      450,  453,  451,  643,  450,  453,  644,  451,  452,    0,

      450,  453,  645,  452,  454,  452,    0,  646,  454,  452,
      450,  453,  648,  455,  454,  452,  455,    0,  453,  454,
      455,    0,  453,  649,  454,  452,  455,    0,  453,  457,
        0,  454,  650,  457,    0,  454,  455,    0,  453,  457,
      455,  454,  651,  455,  456,  654,  454,  455,  456,  457,
      649,  454,    0,  455,  456,  456,  457,  458,  459,  650,
      457,  458,  459,  455,  456,  655,  457,  458,  459,  651,
      461,  456,  654,  656,  461,  456,  457,  458,  459,  460,
      461,  456,  456,  460,  458,  459,  657,  460,  458,  459,
      461,  456,  655,  460,  458,  459,  462,  461,  462,  658,

      656,  461,  462,  460,  458,  459,  460,  461,  462,  463,
      460,  463,    0,  657,  460,    0,  463,  461,  462,    0,
      460,  463,  661,  462,    0,  462,  658,    0,  662,  462,
      460,    0,  464,    0,  464,  462,  463,  664,  463,  464,
      465,    0,  465,  463,  464,  462,  465,  465,  463,  661,
      467,  466,  465,  466,  467,  662,  665,    0,  466,  464,
      467,  464,  666,  466,  664,    0,  464,  465,  468,  465,
      467,  464,  468,  465,  465,    0,  468,  467,  466,  465,
      466,  467,  468,  665,  469,  466,  469,  467,  667,  666,
      466,  469,  468,    0,  470,  468,  469,  467,  470,  468,

      668,    0,  470,  468,  470,    0,    0,    0,  669,  468,
      670,  469,  471,  469,  470,  667,  471,    0,  469,  468,
      471,  470,  471,  469,    0,  470,  472,  668,  472,  470,
      671,  470,  471,  472,  473,  669,  672,  670,  472,  471,
        0,  470,    0,  471,  473,    0,  473,  471,    0,  471,
      674,  473,    0,  472,  676,  472,  473,  671,  678,  471,
      472,  473,  476,  672,  475,  472,  476,  474,  475,  474,
      475,  473,  476,  473,  474,  475,  474,  674,  473,  474,
      475,  676,  476,  473,  812,  678,    0,  814,    0,  476,
        0,  475,    0,  476,  474,  475,  474,  475,  816,  476,

      477,  474,  475,  474,  477,  817,  474,  475,  478,  476,
      477,  812,  478,  479,  814,  477,  818,  479,  478,  479,
      477,  478,    0,  479,  819,  816,    0,  477,  478,    0,
        0,  477,  817,  479,    0,  478,  820,  477,  821,  478,
      479,  822,  477,  818,  479,  478,  479,  477,  478,  480,
      479,  819,  481,  480,  482,  478,  481,  483,  482,  480,
      479,  483,  481,  820,  482,  821,    0,  483,  822,  480,
        0,    0,  481,  823,  482,    0,  480,  483,    0,  481,
      480,  482,    0,  481,  483,  482,  480,    0,  483,  481,
        0,  482,  824,  484,  483,  826,  480,  484,  485,  481,

      823,  482,  485,  484,  483,  486,  827,  486,  485,  487,
      828,  487,  486,  484,  485,    0,  487,  486,  485,  824,
      484,  487,  826,  829,  484,  485,  830,    0,    0,  485,
      484,  831,  486,  827,  486,  485,  487,  828,  487,  486,
      484,  485,  489,  487,  486,  485,  489,  488,  487,  488,
      829,  832,  489,  830,  488,  488,    0,  490,  831,  488,
        0,  490,  489,    0,    0,  834,    0,  490,    0,  489,
      835,  836,  837,  489,  488,  838,  488,  490,  832,  489,
        0,  488,  488,  493,  490,  493,  488,  493,  490,  489,
      491,  491,  834,  493,  490,  491,  839,  835,  836,  837,

      840,  491,  838,  493,  490,  494,  841,  494,    0,  494,
      493,  491,  493,    0,  493,  494,    0,  491,  491,    0,
      493,  842,  491,  839,    0,  494,    0,  840,  491,    0,
      493,  496,  494,  841,  494,  496,  494,  843,  491,  492,
      495,  496,  494,  492,  495,  844,  496,  492,  842,  492,
      495,  496,  494,  492,    0,  847,  495,    0,  496,  848,
      495,    0,  496,  492,  843,  497,  492,  495,  496,  497,
      492,  495,  844,  496,  492,  497,  492,  495,  496,  849,
      492,  497,  847,  495,  498,  497,  848,  495,  498,  499,
      492,  850,  497,  499,  498,  851,  497,  499,  500,  852,

      500,  855,  497,  499,  498,  500,  849,  858,  497,    0,
      500,  498,  497,  499,    0,  498,  499,  859,  850,    0,
      499,  498,  851,  861,  499,  500,  852,  500,  855,    0,
      499,  498,  500,  864,  858,    0,  501,  500,  501,  502,
      499,  502,  501,  501,  859,    0,  502,    0,  501,  867,
      861,  502,  503,    0,  504,  868,  503,  869,  504,  870,
      864,  871,  503,  501,  504,  501,  502,  505,  502,  501,
      501,  505,  503,  502,  504,  501,  867,  505,  502,  503,
      505,  504,  868,  503,  869,  504,  870,  505,  871,  503,
      872,  504,    0,  507,  505,  507,    0,  875,  505,  503,

      507,  504,    0,  876,  505,  507,  512,  505,  512,  509,
      509,  509,    0,  512,  505,  506,  509,  872,  512,  506,
      507,  509,  507,  506,  875,    0,  877,  507,  878,  506,
      876,    0,  507,  512,  506,  512,  509,  509,  509,  506,
      512,  860,  506,  509,  860,  512,  506,  879,  509,    0,
      506,    0,  510,  877,  510,  878,  506,  882,  511,  510,
      510,  506,    0,  511,  510,  511,  506,  508,  860,  883,
      511,  860,    0,    0,  879,  511,  508,    0,  508,  510,
      508,  510,    0,  508,  882,  511,  510,  510,  508,  513,
      511,  510,  511,  513,  508,  884,  883,  511,  886,  513,

      514,    0,  511,  508,  514,  508,    0,  508,  514,  513,
      508,  887,    0,  515,  514,  508,  513,  515,    0,    0,
      513,    0,  884,  515,  514,  886,  513,  514,  515,  888,
        0,  514,    0,  515,    0,  514,  513,  889,  887,  516,
      515,  514,  516,  516,  515,  517,  518,  517,  518,  516,
      515,  514,  517,  518,    0,  515,  888,  517,  518,  516,
      515,  519,  891,  892,  889,  519,  516,  893,    0,  516,
      516,  519,  517,  518,  517,  518,  516,  894,  895,  517,
      518,  519,  896,  520,  517,  518,  516,  520,  519,  891,
      892,  521,  519,  520,  893,  521,  522,  897,  519,  898,

      522,  521,  899,  520,  894,  895,  522,    0,  519,  896,
      520,  521,    0,    0,  520,    0,  522,    0,  521,    0,
      520,  523,  521,  522,  897,  523,  898,  522,  521,  899,
      520,  523,  901,  522,  523,  524,  525,  902,  521,  524,
      525,  523,  526,  522,  526,  524,  525,  525,  523,  526,
        0,  903,  523,  524,  526,  524,  525,    0,  523,  901,
      905,  523,  524,  525,  902,    0,  524,  525,  523,  526,
        0,  526,  524,  525,  525,    0,  526,  527,  903,  527,
      524,  526,  524,  525,  527,  527,  528,  905,  528,  527,
      529,  906,  529,  528,  528,  907, 1012,  529,  528,    0,

     1014,    0,  529,    0,  527,    0,  527,    0,    0, 1016,
        0,  527,  527,  528, 1017,  528,  527,  529,  906,  529,
      528,  528,  907, 1012,  529,  528,  530, 1014,  530,  529,
      530,    0,  531,  530,  531,  532, 1016,  532,  530,  531,
      531, 1017,  532, 1018,  531,    0, 1019,  532,  533,    0,
        0, 1021,  533,  530,    0,  530,    0,  530,  533,  531,
      530,  531,  532, 1023,  532,  530,  531,  531,  533,  532,
     1018,  531,  534, 1019,  532,  533,  534,  536, 1021,  533,
        0,  535,  534,  535,  536,  533,  536,    0,  535, 1024,
     1023,  536,  534,  535, 1025,  533,  536,  537,    0,  534,

        0,  537,  538,  534,  536,    0,  538,  537,  535,  534,
      535,  536,  538,  536,  538,  535, 1024,  537,  536,  534,
      535, 1025,  538,  536,  537,  541,  539,  541,  537,  538,
      539,    0,  541,  538,  537, 1026,  539,  541,    0,  538,
        0,  538, 1027,    0,  537, 1029,  539,  540, 1030,  538,
        0,  540,  541,  539,  541,  540, 1032,  539,  542,  541,
      542,  540, 1026,  539,  541,  542, 1034,  542,  543, 1027,
      542,  540, 1029,  539,  540, 1030,    0,  543,  540,  543,
        0,    0,  540, 1032,  543,  542,    0,  542,  540,  543,
     1037, 1039,  542, 1034,  542,  543, 1040,  542,  540,    0,

        0,  544, 1041,  544,  543,    0,  543,  545,  544,  545,
     1042,  543,  544,  544,  545,  545,  543, 1037, 1039,  545,
      546,    0,  546, 1040, 1049, 1050,  546,  546,  544, 1041,
      544,    0,  546,    0,  545,  544,  545, 1042, 1051,  544,
      544,  545,  545, 1054,  547, 1056,  545,  546,  547,  546,
      547, 1049, 1050,  546,  546,  547,  548, 1058,  548,  546,
      547,    0,  548,  548, 1060, 1051,    0,  680,  548,  680,
     1054,  547, 1056,  680,  680,  547, 1061,  547, 1062,  680,
        0,    0,  547,  548, 1058,  548,  681,  547,  681,  548,
      548, 1060,  681,  681,  680,  548,  680,    0,  681,    0,

      680,  680, 1063, 1061,  682, 1062,  680,  683,  682,    0,
     1064,  683,    0,  681,  682,  681,  685,  683,  685,  681,
      681,    0, 1065,  685,  682,  681,  684,  683,  685, 1063,
      684,  682, 1067,    0,  683,  682,  684, 1064,  683,  684,
        0,  682, 1068,  685,  683,  685,  684,    0,  686, 1065,
      685,  682,  686,  684,  683,  685, 1069,  684,  686, 1067,
      687,  688,  687,  684, 1070,  688,  684,  687,  686, 1068,
      689,  688,  687,  684,  689,  686, 1072,    0,    0,  686,
      689,  688,    0, 1069, 1074,  686, 1076,  687,  688,  687,
      689, 1070,  688,    0,  687,  686,  690,  689,  688,  687,

      690,  689,  691, 1072,  690,  692,  691,  689,  688,  692,
      690, 1074,  691, 1076, 1077,  692, 1078,  689, 1079, 1080,
      690, 1085,  691,  690, 1086,  692,  693,  690,    0,  691,
      693,  690,  692,  691,  693,    0,  692,  690,    0,  691,
      693, 1077,  692, 1078, 1168, 1079, 1080,  690, 1085,  691,
      693, 1086,  692,  693,  694,  695,  696,  693,  694,  695,
      696,  693,  694,    0,  694,  695,  696,  693,  697,  696,
     1172, 1168,  697,    0,  694,  695,  696,  693,  697,    0,
      700,  694,  695,  696,  700,  694,  695,  696,  697,  694,
      700,  694,  695,  696,  698,  697,  696, 1172,  698,  697,

      700,  694,  695,  696,  698,  697,  699,  700,  699,  698,
     1173,  700,    0,  699,  698,  697, 1176,  700,  699,  701,
     1177,  698,  702,  701, 1178,  698,  702,  700,    0,  701,
        0,  698,  702,  699,  701,  699,  698, 1173,    0,  701,
      699,  698,  702, 1176,    0,  699,  701, 1177,    0,  702,
      701, 1178, 1179,  702, 1183,  703,  701,  703, 1186,  702,
     1187,  701,  703,  704,  704,  704,  701,  703, 1190,  702,
      704,  705, 1191,  705,    0,  704,    0, 1192,  705, 1179,
      705, 1183,  703,  705,  703, 1186,    0, 1187,    0,  703,
      704,  704,  704, 1193,  703, 1190, 1196,  704,  705, 1191,

      705,  706,  704,  706, 1192,  705,  708,  705,  706,  706,
      705, 1197, 1198,  706,  707,  707,  707,  708,    0,  708,
     1193,  707,    0, 1196,  708,  709,  707,  709,  706,  708,
      706,  709,  709,  708, 1201,  706,  706,  709, 1197, 1198,
      706,  707,  707,  707,  708,  711,  708,    0,  707,  711,
     1203,  708,  709,  707,  709,  711,  708,  710,  709,  709,
     1204, 1201, 1205, 1206,  709,  711,  710,  712,  710,  712,
        0, 1207,  711,  710,  712, 1258,  711, 1203,  710,  712,
     1261,    0,  711,    0,  710, 1262,    0, 1204,    0, 1205,
     1206,    0,  711,  710,  712,  710,  712,  713, 1207,  713,

      710,  712, 1258,  715,  713,  710,  712, 1261,  714,  713,
      714,  715, 1262,  715,    0,  714,    0, 1266,  715,    0,
      714, 1267, 1270,  715,  713,    0,  713,    0,    0,    0,
      715,  713,    0,    0, 1271,  714,  713,  714,  715,  716,
      715,  716,  714,  716, 1266,  715,  716,  714, 1267, 1270,
      715,  716,  717,  718,  717,  718,  717, 1272, 1273,  717,
      718, 1271,  718,    0,  717,  718,  716, 1277,  716,    0,
      716,    0, 1278,  716,    0,    0, 1279,    0,  716,  717,
      718,  717,  718,  717, 1272, 1273,  717,  718,  719,  718,
      719,  717,  718,  720, 1277,  719,  719,    0,  722, 1278,

      719,  721,  722, 1279,  720,    0,  720,    0,  722,    0,
     1281,  720,  721,    0,  721,  719,  720,  719,  722,  721,
      720,    0,  719,  719,  721,  722, 1309,  719,  721,  722,
      723,  720,  724,  720,  723,  722,  724, 1281,  720,  721,
      723,  721,  724,  720,  725,  722,  721,  724,  725,    0,
      723,  721,  724, 1309,  725,    0,  726,  723, 1310,  724,
      726,  723, 1314,  724,  725,    0,  726,  723,    0,  724,
     1317,  725, 1320,    0,  724,  725,  726,  723,  727,  724,
      728,  725,  727,  726,  728, 1310,  727,  726, 1324, 1314,
      728,  725,  727,  726,  729, 1259, 1259, 1317,  729, 1320,

      728,    0,  727,  726,  729,  727,    0,  728,  730,  727,
        0,  728,  730,  727,  729, 1324,  730,  728,    0,  727,
        0,  729,  730,    0,  732,  729,  731,  728,  732,  727,
      731,  729,  730, 1259,  732,  730,  731,  731,  733,  730,
      733,  729, 1339,  730,  732,  733,  731, 1284, 1284,  730,
      733,  732,    0,  731,    0,  732,    0,  731,    0,  730,
     1259,  732,    0,  731,  731,  733, 1343,  733,  734, 1339,
      734,  732,  733,  731,  735,  734,  735,  733,  736,  737,
      734,  735,  736,  737, 1346, 1284,  735, 1352,  736,  737,
     1356, 1360,  737, 1343, 1362,  734, 1364,  734,  736,  737,

        0,  735,  734,  735,    0,  736,  737,  734,  735,  736,
      737, 1346, 1284,  735, 1352,  736,  737, 1356, 1360,  737,
      738, 1362,  738, 1364, 1366,  736,  737,  738,  739, 1368,
      739,  740,  738,  740,  739,  739, 1370,  740,  740, 1372,
      739, 1374, 1376,  740, 1338, 1338,    0,  738,    0,  738,
     1378, 1366,    0,    0,  738,  739, 1368,  739,  740,  738,
      740,  739,  739, 1370,  740,  740, 1372,  739, 1374, 1376,
      740,  741,  742,  743,  742,  743,  741, 1378,  741,  742,
      743,    0,  741,  741,  742,  743, 1338,    0,  741,    0,
     1345, 1345,    0,    0,    0,    0,    0,    0,  741,  742,

      743,  742,  743,  741,    0,  741,  742,  743,    0,  741,
      741,  742,  743, 1338,  744,  741,  744,  745,  746,  745,
      746,  744,    0,    0,  745,  746,  744,    0,    0,  745,
      746,    0, 1345,    0,    0,    0,    0,    0,    0,    0,
        0,  744,    0,  744,  745,  746,  745,  746,  744,    0,
        0,  745,  746,  744,    0,    0,  745,  746,  747, 1345,
      747,  748,  749,  748,  749,  747,  747,    0,  748,  749,
      747,    0,    0,  748,  749,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  747,    0,  747,  748,  749,
      748,  749,  747,  747,  750,  748,  749,  747,  750,  751,

      748,  749,  752,  751,  750,    0,  752,  754,  753,  751,
      753,  754,  752,  754,  750,  753,  753,    0,  754,  751,
      753,  750,  752,  754,    0,  750,  751,    0,    0,  752,
      751,  750,    0,  752,  754,  753,  751,  753,  754,  752,
      754,  750,  753,  753,  756,  754,  751,  753,  756,  752,
      754,  755,  757,  755,  756,    0,  757,  755,  755,    0,
        0,    0,  757,  755,  756,    0,    0,    0,    0,    0,
        0,  756,  757,    0,    0,  756,    0,    0,  755,  757,
      755,  756,    0,  757,  755,  755,  758,    0,  758,  757,
      755,  756,  758,    0,    0,    0,  759,  760,  758,  757,

      759,  760,    0,    0,    0,    0,  759,  760,  758,    0,
      760,    0,    0,  758,    0,  758,  759,  760,    0,  758,
        0,    0,    0,  759,  760,  758,  761,  759,  760,    0,
      761,    0,    0,  759,  760,  758,  761,  760,  762,  761,
        0,  763,  762,  759,  760,  763,  761,    0,  762,  763,
      764,  763,    0,  761,  764,    0,    0,  761,  762,    0,
      764,  763,    0,  761,    0,  762,  761,    0,  763,  762,
      764,    0,  763,  761,    0,  762,  763,  764,  763,  765,
      766,  764,    0,  765,  766,  762,    0,  764,  763,  765,
      766,    0,    0,    0,  767,    0,    0,  764,  767,  765,

      766,    0,  767,    0,    0,    0,  765,  766,  767,    0,
      765,  766,    0,    0,    0,    0,  765,  766,  767,    0,
      768,  767,    0,    0,  768,  767,  765,  766,  768,  767,
        0,    0,  769,  770,  768,  767,  769,  770,    0,    0,
        0,    0,  769,  770,  768,  767,  771,  768,    0,    0,
      771,  768,  769,  770,    0,  768,  771,    0,    0,  769,
      770,  768,    0,  769,  770,    0,  771,    0,  772,  769,
      770,  768,  772,  771,    0,    0,    0,  771,  772,  769,
      770,  772,  773,  771,    0,    0,  773,  774,  772,    0,
      773,  774,  773,  771,    0,  772,    0,  774,    0,  772,

      774,    0,  773,    0,    0,  772,  775,  774,  772,  773,
      775,    0,    0,  773,  774,  772,  775,  773,  774,  773,
        0,  775,    0,    0,  774,    0,  775,  774,  776,  773,
        0,  776,  777,  775,  774,  776,  777,  775,    0,    0,
        0,  776,  777,  775,    0,    0,  778,    0,  775,    0,
      778,  776,  777,  775,  778,  776,  778,    0,  776,  777,
        0,    0,  776,  777,    0,    0,  778,    0,  776,  777,
        0,    0,    0,  778,    0,  780,    0,  778,  776,  777,
      779,  778,  779,  778,  780,  781,  780,  779,    0,  781,
      782,  780,  779,  778,  782,  781,  780,    0,    0,    0,

      782,    0,  780,    0,    0,  781,    0,  779,    0,  779,
      782,  780,  781,  780,  779,    0,  781,  782,  780,  779,
      783,  782,  781,  780,  783,  785,  784,  782,  784,  785,
      783,    0,  781,  784,    0,  785,    0,  782,  784,  786,
      783,    0,    0,  786,  787,  785,    0,  783,  787,  786,
        0,  783,  785,  784,  787,  784,  785,  783,    0,  786,
      784,    0,  785,    0,  787,  784,  786,  783,    0,  788,
      786,  787,  785,  788,  789,  787,  786,    0,  789,  788,
        0,  787,    0,  790,  789,    0,  786,  790,    0,  788,
      791,  787,  791,  790,  789,    0,  788,  791,    0,    0,

      788,  789,  791,  790,    0,  789,  788,    0,    0,    0,
      790,  789,    0,    0,  790,    0,  788,  791,    0,  791,
      790,  789,    0,    0,  791,  792,  793,  792,  793,  791,
      790,    0,  792,  793,    0,  794,    0,  792,  793,    0,
        0,    0,    0,    0,  794,    0,  794,    0,    0,    0,
        0,  794,  792,  793,  792,  793,  794,    0,    0,  792,
      793,    0,  794,    0,  792,  793,    0,  795,  796,  795,
      796,  794,    0,  794,  795,  796,  795,    0,  794,  795,
      796,    0,    0,  794,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  795,  796,  795,  796,  798,    0,

        0,  795,  796,  795,    0,    0,  795,  796,  797,  798,
      797,  798,    0,    0,    0,  797,  798,  797,    0,    0,
      797,  798,  799,    0,  799,  798,    0,    0,    0,  799,
      799,    0,    0,    0,  799,  797,  798,  797,  798,    0,
        0,    0,  797,  798,  797,    0,    0,  797,  798,  799,
        0,  799,    0,  800,    0,    0,  799,  799,  800,  801,
      800,  799,  803,  801,  802,  800,  803,  802,  802,  801,
      800,    0,  803,    0,  802,    0,    0,    0,    0,  801,
      800,    0,  803,    0,  802,  800,  801,  800,    0,  803,
      801,  802,  800,  803,  802,  802,  801,  800,  804,  803,

      805,  802,  804,  806,  805,    0,  801,  806,  804,  803,
      805,  802,  807,  806,  804,    0,  807,    0,  804,    0,
      805,    0,  807,  806,    0,  804,  808,  805,  808,  804,
      806,  805,  807,  808,  806,  804,    0,  805,  808,  807,
      806,  804,    0,  807,  911,  804,  911,  805,    0,  807,
      806,  911,    0,  808,    0,  808,  911,    0,    0,  807,
      808,    0,  912,    0,  912,  808,    0,    0,  913,  912,
      913,  911,    0,  911,  912,  913,    0,    0,  911,    0,
      913,    0,  913,  911,    0,    0,  914,    0,  914,  912,
      915,  912,    0,  914,  915,  913,  912,  913,  914,    0,

      915,  912,  913,    0,  916,    0,    0,  913,  916,  913,
      915,    0,  917,  914,  916,  914,  917,  915,    0,    0,
      914,  915,  917,    0,  916,  914,    0,  915,    0,    0,
      918,  916,  917,    0,  918,  916,    0,  915,  919,  917,
      918,  916,  919,  917,    0,  918,  919,    0,    0,  917,
      918,  916,  919,  920,  920,    0,    0,  918,  920,  917,
        0,  918,  919,    0,  920,  919,    0,  918,    0,  919,
        0,    0,  918,  919,  920,    0,  921,  918,  921,  919,
      920,  920,  921,    0,    0,  920,    0,    0,  921,  919,
      922,  920,  922,    0,    0,    0,    0,  922,  921,    0,

        0,  920,  922,  921,  923,  921,  923,    0,    0,  921,
      924,  923,  923,    0,  924,  921,  923,  922,    0,  922,
      924,    0,  925,    0,  922,  921,  925,    0,    0,  922,
      924,  923,  925,  923,    0,    0,  926,  924,  923,  923,
      926,  924,  925,  923,    0,    0,  926,  924,  927,  925,
      927,    0,    0,  925,  928,  927,  926,  924,  928,  925,
      927,    0,    0,  926,  928,    0,  929,  926,    0,  925,
      929,    0,    0,  926,  928,  927,  929,  927,    0,    0,
      930,  928,  927,  926,  930,  928,  929,  927,  930,    0,
        0,  928,  932,  929,  930,    0,  932,  929,  931,    0,

      931,  928,  932,  929,  930,  931,    0,  930,    0,    0,
      931,  930,  932,  929,  933,  930,  934,    0,  933,  932,
      934,  930,    0,  932,  933,  931,  934,  931,    0,  932,
        0,  930,  931,    0,  933,    0,  934,  931,  935,  932,
      936,  933,  935,  934,  936,  933,    0,  934,  935,    0,
      936,  933,  937,  934,  937,  936,    0,    0,  935,  937,
      936,  933,    0,  934,  937,  935,    0,  936,  938,  935,
      939,  936,  938,    0,  939,  935,    0,  936,  938,  937,
      939,  937,  936,    0,    0,  935,  937,  936,  938,    0,
      939,  937,  940,    0,  941,  938,  940,  939,  941,  938,

        0,  939,  940,    0,  941,  938,    0,  939,    0,  941,
        0,    0,  940,    0,  941,  938,    0,  939,  942,  940,
        0,  941,  942,  940,    0,  941,    0,    0,  942,  940,
      943,  941,  943,  942,    0,    0,  941,  943,  942,  940,
        0,  941,  943,  944,  945,  942,  945,  944,  946,  942,
      945,    0,  946,  944,    0,  942,  945,  943,  946,  943,
      942,    0,    0,  944,  943,  942,  945,    0,  946,  943,
      944,  945,  947,  945,  944,  946,  947,  945,    0,  946,
      944,    0,  947,  945,  948,  946,    0,  949,  948,  949,
      944,  949,  947,  945,  948,  946,    0,  949,  951,  947,

      951,    0,  948,  947,  948,  951,    0,  949,    0,  947,
      951,  948,    0,  950,  949,  948,  949,  950,  949,  947,
        0,  948,    0,  950,  949,  951,    0,  951,  950,  948,
        0,  948,  951,  950,  949,    0,  952,  951,  952,  954,
      950,  954,  953,  952,  950,    0,  954,  953,  952,  953,
      950,  954,    0,    0,  953,  950,    0,    0,    0,  953,
      950,    0,    0,  952,    0,  952,  954,    0,  954,  953,
      952,    0,    0,  954,  953,  952,  953,  955,  954,  955,
      956,  953,  956,  957,  955,  957,  953,  956,  956,  955,
      957,  958,  956,  958,    0,  957,    0,    0,  958,    0,

        0,    0,    0,  958,  955,    0,  955,  956,    0,  956,
      957,  955,  957,    0,  956,  956,  955,  957,  958,  956,
      958,  959,  957,  959,    0,  958,    0,  960,  959,  959,
      958,  960,  961,  959,  961,    0,    0,  960,    0,  961,
        0,    0,  961,    0,  961,    0,    0,  960,  959,    0,
      959,    0,    0,    0,  960,  959,  959,    0,  960,  961,
      959,  961,    0,  962,  960,  962,  961,    0,    0,  961,
      962,  961,    0,    0,  960,  962,  963,  964,  963,  964,
        0,    0,    0,  963,  964,    0,    0,    0,  963,  964,
      962,    0,  962,    0,    0,    0,    0,  962,    0,  965,

        0,    0,  962,  963,  964,  963,  964,  965,    0,  965,
      963,  964,    0,    0,  965,  963,  964,    0,  966,  965,
      966,  967,    0,  967,    0,  966,  965,    0,  967,    0,
      966,    0,    0,  967,  965,    0,  965,    0,    0,  968,
        0,  965,    0,  968,    0,  966,  965,  966,  967,  968,
      967,  969,  966,  969,  970,  967,    0,  966,  969,  968,
      967,    0,    0,  969,    0,  970,  968,  970,    0,    0,
      968,    0,  970,    0,    0,    0,  968,  970,  969,    0,
      969,  970,    0,    0,    0,  969,  968,    0,    0,  971,
      969,  971,  970,    0,  970,    0,  971,  971,  973,  970,

      973,  971,    0,  972,  970,  973,  973,  972,    0,  972,
      973,    0,    0,    0,  972,    0,  971,    0,  971,  972,
        0,    0,    0,  971,  971,  973,    0,  973,  971,    0,
      972,    0,  973,  973,  972,    0,  972,  973,  974,    0,
      974,  972,  975,  976,  975,  974,  972,  976,    0,  975,
      974,    0,    0,  976,  975,    0,    0,    0,  977,    0,
        0,    0,  977,  976,    0,  974,    0,  974,  977,  975,
      976,  975,  974,  977,  976,    0,  975,  974,  977,    0,
      976,  975,  978,  978,  979,  977,    0,  978,  979,  977,
      976,    0,    0,  978,  979,  977,    0,  979,    0,    0,

      977,    0,    0,  978,  979,  977,    0,    0,    0,  978,
      978,  979,  980,  981,  978,  979,  980,  981,    0,    0,
      978,  979,  980,  981,  979,  980,    0,    0,    0,    0,
      978,  979,  980,  981,    0,    0,    0,  982,  983,  980,
      981,  982,  983,  980,  981,    0,    0,  982,  983,  980,
      981,  984,  980,    0,    0,  984,    0,  982,  983,  980,
      981,  984,    0,  985,  982,  983,  986,  985,  982,  983,
      986,  984,    0,  985,  982,  983,  986,    0,  984,    0,
        0,    0,  984,  985,  982,  983,  986,  987,  984,    0,
      985,  987,    0,  986,  985,  987,    0,  986,  984,    0,

      985,  987,    0,  986,    0,    0,    0,    0,    0,    0,
      985,  987,  988,  986,  987,    0,  988,  990,  987,    0,
      988,  990,  987,    0,  989,  989,  988,  990,  987,  989,
      991,    0,  990,    0,  991,  989,  988,  990,  987,  988,
      991,    0,    0,  988,  990,  989,    0,  988,  990,    0,
      991,  989,  989,  988,  990,    0,  989,  991,    0,  990,
        0,  991,  989,  988,  990,  992,    0,  991,    0,  992,
        0,    0,  989,  993,  993,  992,    0,  991,  993,  994,
        0,    0,    0,  994,  993,  992,    0,  994,    0,    0,
        0,    0,  992,  994,  993,    0,  992,  995,    0,  995,

      993,  993,  992,  994,  995,  993,  994,    0,    0,  995,
      994,  993,  992,    0,  994,    0,  996,    0,  996,    0,
      994,  993,  996,  996,  995,  997,  995,  997,  996,    0,
      994,  995,  997,  997,    0,  998,  995,  997,    0,    0,
        0,    0,    0,  996,    0,  996,  998,    0,  998,  996,
      996,    0,  997,  998,  997,  996,  999,    0,  998,  997,
      997,    0,  998,    0,  997,    0,    0,  999,    0,  999,
     1000,    0, 1000,  998,  999,  998,    0, 1000,    0,  999,
      998,    0, 1000,  999,    0,  998, 1001,    0, 1001,    0,
        0,    0,    0, 1001,  999,    0,  999, 1000, 1001, 1000,

        0,  999,    0,    0, 1000,    0,  999, 1002,    0, 1000,
        0, 1002,    0, 1001,    0, 1001,    0, 1002, 1003, 1003,
     1001,    0, 1004, 1003,    0, 1001, 1004, 1002,    0, 1003,
        0, 1005, 1004,    0, 1002, 1005,    0,    0, 1002, 1003,
        0, 1005, 1004,    0, 1002, 1003, 1003,    0,    0, 1004,
     1003, 1005,    0, 1004, 1002,    0, 1003,    0, 1005, 1004,
        0, 1007, 1005, 1006,    0, 1006, 1003,    0, 1005, 1004,
     1006,    0, 1007,    0, 1007, 1006,    0,    0, 1005, 1007,
     1008,    0,    0,    0, 1007,    0,    0,    0, 1007,    0,
     1006, 1008, 1006, 1008,    0,    0,    0, 1006, 1008, 1007,

        0, 1007, 1006, 1008,    0,    0, 1007, 1008,    0, 1088,
     1009, 1007, 1009, 1088, 1010,    0, 1010, 1009, 1008, 1088,
     1008, 1010, 1009,    0,    0, 1008, 1010,    0,    0, 1088,
     1008,    0,    0,    0,    0,    0, 1088, 1009,    0, 1009,
     1088, 1010,    0, 1010, 1009,    0, 1088, 1089, 1010, 1009,
        0, 1089, 1090, 1010, 1090,    0, 1088, 1089, 1091, 1090,
     1091, 1092, 1093, 1092, 1090, 1091, 1093, 1089, 1092,    0,
     1091,    0, 1093, 1092, 1089,    0,    0,    0, 1089, 1090,
        0, 1090, 1093,    0, 1089, 1091, 1090, 1091, 1092, 1093,
     1092, 1090, 1091, 1093, 1089, 1092,    0, 1091, 1094, 1093,

     1092,    0, 1094, 1095, 1096, 1095, 1096,    0, 1094, 1093,
     1095, 1096, 1097, 1094, 1097, 1095, 1096,    0, 1094, 1097,
        0,    0,    0,    0, 1097, 1094,    0,    0,    0, 1094,
     1095, 1096, 1095, 1096,    0, 1094,    0, 1095, 1096, 1097,
     1094, 1097, 1095, 1096,    0, 1094, 1097, 1098, 1099, 1098,
     1099, 1097,    0,    0, 1098, 1099, 1099,    0,    0, 1098,
     1099, 1100, 1100, 1100,    0,    0,    0,    0, 1100,    0,
        0,    0,    0, 1100, 1098, 1099, 1098, 1099,    0,    0,
        0, 1098, 1099, 1099,    0, 1101, 1098, 1099, 1100, 1100,
     1100, 1102,    0, 1102, 1101, 1100, 1101, 1103, 1102, 1103,

     1100, 1101,    0, 1102, 1103, 1103, 1101,    0,    0, 1103,
        0,    0, 1101,    0,    0, 1104,    0, 1104, 1102,    0,
     1102, 1101, 1104, 1101, 1103, 1102, 1103, 1104, 1101,    0,
     1102, 1103, 1103, 1101,    0,    0, 1103,    0, 1105,    0,
     1105, 1106, 1104,    0, 1104, 1105, 1105,    0,    0, 1104,
     1105, 1106,    0, 1106, 1104,    0,    0, 1107, 1106, 1107,
        0,    0,    0, 1106, 1107, 1105,    0, 1105, 1106, 1107,
        0,    0, 1105, 1105,    0,    0,    0, 1105, 1106,    0,
     1106,    0,    0, 1108, 1107, 1106, 1107,    0,    0,    0,
     1106, 1107, 1108, 1109, 1108, 1109, 1107,    0,    0, 1108,

     1109, 1110,    0, 1110, 1108, 1109,    0,    0, 1110,    0,
     1108,    0,    0, 1110,    0,    0,    0,    0,    0, 1108,
     1109, 1108, 1109,    0,    0,    0, 1108, 1109, 1110,    0,
     1110, 1108, 1109,    0, 1111, 1110, 1111, 1112, 1113, 1112,
     1110, 1111, 1113, 1115, 1112, 1115, 1111, 1114, 1113, 1112,
     1115, 1114,    0,    0,    0, 1115,    0, 1114, 1113,    0,
        0, 1111,    0, 1111, 1112, 1113, 1112, 1114, 1111, 1113,
     1115, 1112, 1115, 1111, 1114, 1113, 1112, 1115, 1114, 1116,
        0, 1116, 1115,    0, 1114, 1113, 1116, 1116, 1118, 1117,
     1118, 1116,    0, 1117, 1114, 1118,    0,    0,    0, 1117,

     1118,    0,    0,    0,    0,    0, 1116,    0, 1116, 1117,
        0,    0,    0, 1116, 1116, 1118, 1117, 1118, 1116,    0,
     1117, 1119, 1118, 1119,    0,    0, 1117, 1118, 1119,    0,
     1120,    0, 1120, 1119,    0,    0, 1117, 1120,    0, 1121,
        0, 1121, 1120,    0,    0,    0, 1121,    0, 1119,    0,
     1119, 1121,    0,    0,    0, 1119,    0, 1120,    0, 1120,
     1119,    0,    0, 1122, 1120, 1122, 1121,    0, 1121, 1120,
     1122,    0, 1123, 1121, 1123, 1122,    0,    0, 1121, 1123,
        0, 1124,    0, 1124, 1123, 1126,    0,    0, 1124, 1126,
     1122,    0, 1122, 1124,    0, 1126,    0, 1122,    0, 1123,

        0, 1123, 1122,    0,    0, 1126, 1123, 1125, 1124, 1125,
     1124, 1123, 1126, 1125, 1125, 1124, 1126,    0,    0, 1125,
     1124, 1127, 1126, 1128,    0, 1127,    0, 1128,    0, 1127,
        0,    0, 1126, 1128, 1125, 1127, 1125, 1130,    0, 1130,
     1125, 1125,    0, 1128, 1130, 1127, 1125, 1129, 1127, 1130,
     1128, 1129, 1127,    0, 1128,    0, 1127, 1129,    0,    0,
     1128, 1131, 1127, 1131, 1130,    0, 1130, 1129, 1131,    0,
     1128, 1130, 1127, 1131, 1129, 1132, 1130, 1132, 1129, 1133,
        0, 1133, 1132,    0, 1129,    0, 1133, 1132, 1131,    0,
     1131, 1133, 1134,    0, 1129, 1131,    0,    0,    0,    0,

     1131,    0, 1132, 1134, 1132, 1134, 1133,    0, 1133, 1132,
     1134,    0,    0, 1133, 1132, 1134, 1137,    0, 1133, 1134,
     1137, 1135,    0, 1135,    0,    0, 1137, 1136, 1135, 1136,
     1134,    0, 1134, 1135, 1136, 1136, 1137, 1134,    0, 1136,
        0,    0, 1134, 1137,    0,    0,    0, 1137, 1135,    0,
     1135,    0,    0, 1137, 1136, 1135, 1136,    0,    0,    0,
     1135, 1136, 1136, 1137, 1138, 1139, 1136, 1140, 1138, 1139,
        0, 1140,    0,    0, 1138, 1139, 1141, 1140, 1141,    0,
        0,    0,    0, 1141, 1138, 1139,    0, 1140, 1141,    0,
        0, 1138, 1139,    0, 1140, 1138, 1139,    0, 1140,    0,

        0, 1138, 1139, 1141, 1140, 1141, 1142,    0, 1142,    0,
     1141, 1138, 1139, 1142, 1140, 1141, 1143,    0, 1142,    0,
     1144,    0,    0,    0,    0, 1143,    0, 1143,    0, 1144,
        0, 1144, 1143, 1142,    0, 1142, 1144, 1143,    0,    0,
     1142, 1144,    0, 1143,    0, 1142,    0, 1144, 1145,    0,
     1145,    0, 1143,    0, 1143, 1145, 1144,    0, 1144, 1143,
     1145,    0,    0, 1144, 1143,    0,    0, 1146, 1144, 1146,
        0, 1147,    0, 1147, 1146, 1145,    0, 1145, 1147, 1146,
        0,    0, 1145, 1147,    0,    0,    0, 1145,    0,    0,
     1148,    0, 1148,    0, 1146,    0, 1146, 1148, 1147,    0,

     1147, 1146, 1148,    0,    0, 1147, 1146,    0,    0, 1149,
     1147, 1149,    0, 1150,    0, 1150, 1149, 1148,    0, 1148,
     1150, 1149,    0,    0, 1148, 1150,    0,    0,    0, 1148,
        0,    0, 1151,    0, 1151,    0, 1149,    0, 1149, 1151,
     1150,    0, 1150, 1149, 1151, 1152,    0, 1150, 1149,    0,
        0, 1153, 1150, 1157,    0, 1157, 1152,    0, 1152, 1151,
     1157, 1151, 1153, 1152, 1153, 1157, 1151,    0, 1152, 1153,
        0, 1151, 1152,    0, 1153,    0,    0, 1154, 1153,    0,
     1157,    0, 1157, 1152,    0, 1152, 1154, 1157, 1154, 1153,
     1152, 1153, 1157, 1154,    0, 1152, 1153,    0, 1154,    0,

     1155, 1153, 1155,    0, 1154,    0, 1156, 1155, 1155,    0,
        0,    0, 1155, 1154, 1156, 1154, 1156,    0,    0,    0,
     1154, 1156,    0,    0,    0, 1154, 1156, 1155,    0, 1155,
     1158,    0, 1158, 1156, 1155, 1155,    0, 1158, 1159, 1155,
     1159, 1156, 1158, 1156, 1160, 1159, 1160,    0, 1156,    0,
     1159, 1160,    0, 1156,    0,    0, 1160, 1158,    0, 1158,
        0,    0,    0,    0, 1158, 1159,    0, 1159, 1161, 1158,
     1161, 1160, 1159, 1160, 1161, 1161,    0, 1159, 1160, 1162,
     1161, 1162, 1211, 1160, 1211,    0, 1162,    0,    0, 1211,
        0, 1162,    0,    0, 1211, 1161,    0, 1161, 1212,    0,

     1212, 1161, 1161,    0,    0, 1212, 1162, 1161, 1162, 1211,
     1212, 1211, 1213, 1162, 1213,    0, 1211,    0, 1162, 1213,
        0, 1211,    0,    0, 1213, 1212, 1214, 1212, 1214,    0,
     1215,    0, 1212, 1214, 1215,    0,    0, 1212, 1214, 1213,
     1215, 1213,    0,    0, 1216,    0, 1213,    0, 1216,    0,
     1215, 1213, 1217, 1214, 1216, 1214, 1217, 1215,    0,    0,
     1214, 1215, 1217,    0, 1216, 1214,    0, 1215, 1218, 1218,
        0, 1216, 1217,    0, 1219, 1216,    0, 1215, 1219, 1217,
        0, 1216,    0, 1217, 1219,    0,    0,    0, 1220, 1217,
        0, 1216, 1220, 1218, 1219,    0, 1220, 1218,    0, 1217,

        0, 1219, 1220, 1218,    0, 1219, 1221,    0,    0,    0,
     1221, 1219, 1220, 1218,    0, 1220, 1221,    0, 1222, 1220,
     1218, 1219, 1222, 1220, 1218,    0, 1221,    0, 1222, 1220,
     1218, 1223, 1224, 1221,    0, 1223, 1224, 1221, 1222, 1220,
     1218, 1223, 1224, 1221, 1227, 1222, 1225,    0, 1227, 1222,
     1225, 1223, 1224, 1221, 1227, 1222, 1225,    0, 1223, 1224,
        0, 1225, 1223, 1224, 1227, 1222, 1225,    0, 1223, 1224,
     1226, 1227, 1226, 1225, 1226, 1227,    0, 1225, 1223, 1224,
     1226, 1227, 1228, 1225,    0, 1229, 1228,    0, 1225, 1229,
     1226, 1227, 1228, 1225,    0, 1229, 1230, 1226, 1230, 1226,

        0, 1226, 1228, 1230,    0, 1229,    0, 1226, 1230, 1228,
        0,    0, 1229, 1228,    0,    0, 1229, 1226,    0, 1228,
        0,    0, 1229, 1230, 1231, 1230, 1231,    0,    0, 1228,
     1230, 1231, 1229,    0, 1233, 1230, 1231, 1232,    0, 1232,
     1234,    0, 1234, 1233, 1232, 1233,    0, 1234,    0, 1232,
     1233, 1231, 1234, 1231,    0, 1233,    0,    0, 1231,    0,
        0, 1233,    0, 1231, 1232,    0, 1232, 1234,    0, 1234,
     1233, 1232, 1233, 1235, 1234, 1235, 1232, 1233,    0, 1234,
     1235, 1236, 1233, 1236, 1237, 1235, 1237,    0, 1236,    0,
     1237, 1237,    0, 1236, 1238,    0, 1237,    0, 1238, 1239,

     1235,    0, 1235, 1239, 1238,    0,    0, 1235, 1236, 1239,
     1236, 1237, 1235, 1237, 1238, 1236,    0, 1237, 1237, 1239,
     1236, 1238, 1240, 1237, 1240, 1238, 1239,    0,    0, 1240,
     1239, 1238,    0, 1241, 1240, 1241, 1239,    0,    0,    0,
     1241, 1238,    0,    0,    0, 1241, 1239,    0,    0, 1240,
        0, 1240, 1242,    0, 1242,    0, 1240, 1243,    0, 1242,
     1241, 1240, 1241, 1244, 1242, 1244, 1243, 1241, 1243,    0,
     1244, 1244, 1241, 1243,    0, 1244,    0,    0, 1243, 1242,
        0, 1242,    0,    0, 1243,    0, 1242,    0,    0,    0,
     1244, 1242, 1244, 1243,    0, 1243,    0, 1244, 1244,    0,

     1243,    0, 1244, 1245, 1245, 1243, 1245, 1246, 1247, 1246,
     1247, 1245,    0,    0, 1246, 1247, 1245,    0,    0, 1246,
     1247,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1245, 1245,    0, 1245, 1246, 1247, 1246, 1247, 1245,    0,
        0, 1246, 1247, 1245,    0,    0, 1246, 1247, 1248,    0,
     1248, 1249,    0, 1249,    0, 1248, 1248,    0, 1249, 1250,
     1248, 1250,    0, 1249,    0, 1250, 1250, 1251, 1251, 1251,
        0, 1250,    0,    0, 1251, 1248,    0, 1248, 1249, 1251,
     1249,    0, 1248, 1248,    0, 1249, 1250, 1248, 1250,    0,
     1249,    0, 1250, 1250, 1251, 1251, 1251, 1252, 1250, 1252,

        0, 1251,    0, 1253, 1252, 1252, 1251, 1253, 1254, 1252,
        0,    0, 1254, 1253,    0,    0,    0, 1255, 1254,    0,
        0, 1255,    0, 1253, 1252,    0, 1252, 1255, 1254,    0,
     1253, 1252, 1252,    0, 1253, 1254, 1252, 1255,    0, 1254,
     1253,    0, 1256, 1283, 1255, 1254, 1256, 1283, 1255,    0,
     1253,    0, 1256, 1283, 1255, 1254, 1283, 1285,    0,    0,
        0, 1285, 1256, 1283, 1255,    0,    0, 1285,    0, 1256,
     1283, 1286, 1287, 1256, 1283, 1286, 1287, 1285,    0, 1256,
     1283, 1286, 1287, 1283, 1285, 1287, 1286,    0, 1285, 1256,
     1283, 1286, 1287,    0, 1285,    0, 1288, 1289, 1286, 1287,

     1288, 1289, 1286, 1287, 1285,    0, 1288, 1289, 1286, 1287,
     1290,    0, 1287, 1286, 1290,    0, 1288, 1289, 1286, 1287,
     1290,    0, 1293, 1288, 1289,    0, 1293, 1288, 1289,    0,
     1290,    0, 1293, 1288, 1289, 1292, 1291, 1290, 1291, 1292,
     1291, 1290, 1293, 1288, 1289, 1292, 1291, 1290, 1294, 1293,
     1292,    0, 1294, 1293,    0, 1292, 1291, 1290, 1294, 1293,
        0,    0, 1292, 1291,    0, 1291, 1292, 1291, 1294, 1293,
        0,    0, 1292, 1291, 1295, 1294,    0, 1292, 1295, 1294,
        0,    0, 1292, 1291, 1295, 1294, 1296, 1295, 1296,    0,
        0,    0, 1297, 1296, 1295, 1294, 1298, 1297, 1296, 1297,

     1298, 1295,    0,    0, 1297, 1295, 1298,    0, 1299, 1297,
        0, 1295, 1299, 1296, 1295, 1296, 1298,    0, 1299, 1297,
     1296, 1295,    0, 1298, 1297, 1296, 1297, 1298, 1299,    0,
     1300, 1297,    0, 1298, 1300, 1299, 1297,    0, 1301, 1299,
     1300,    0, 1301, 1298,    0, 1299,    0,    0, 1301,    0,
     1300,    0, 1302,    0,    0, 1299, 1302, 1300, 1301,    0,
     1303, 1300, 1302,    0, 1303, 1301,    0, 1300,    0, 1301,
     1303, 1303, 1302,    0, 1304, 1301,    0, 1300, 1304, 1302,
     1303,    0, 1305, 1302, 1304, 1301, 1305, 1303,    0, 1302,
        0, 1303, 1305,    0, 1304, 1306, 1306, 1303, 1303, 1302,

     1306, 1304, 1305, 1323, 1323, 1304, 1306, 1303,    0, 1305,
     1325, 1304,    0, 1305, 1325,    0, 1306,    0,    0, 1305,
     1325, 1304, 1306, 1306,    0,    0,    0, 1306, 1323, 1305,
     1325,    0, 1323, 1306,    0,    0, 1326, 1325, 1323,    0,
     1326, 1325,    0, 1306,    0,    0, 1326, 1325, 1323,    0,
     1327,    0,    0,    0, 1327, 1323, 1326, 1325, 1328, 1323,
     1327,    0, 1328, 1326, 1329, 1323, 1329, 1326, 1328,    0,
     1327, 1329, 1330, 1326, 1330, 1323, 1329, 1327, 1328, 1330,
        0, 1327,    0, 1326, 1330, 1328,    0, 1327,    0, 1328,
        0, 1329,    0, 1329,    0, 1328,    0, 1327, 1329, 1330,

     1331, 1330, 1331, 1329,    0, 1328, 1330, 1331, 1332,    0,
     1332, 1330, 1331,    0, 1333, 1332, 1333,    0,    0,    0,
     1332, 1333,    0,    0,    0,    0, 1333, 1331,    0, 1331,
        0,    0,    0,    0, 1331, 1332,    0, 1332, 1334, 1331,
     1334, 1333, 1332, 1333,    0, 1334,    0, 1332, 1333,    0,
     1334, 1335,    0, 1333, 1336, 1335, 1347,    0, 1336, 1348,
     1347, 1335,    0, 1348, 1336, 1334, 1347, 1334,    0, 1348,
        0, 1335, 1334,    0, 1336,    0, 1347, 1334, 1335, 1348,
        0, 1336, 1335, 1347,    0, 1336, 1348, 1347, 1335,    0,
     1348, 1336,    0, 1347,    0, 1349, 1348,    0, 1335, 1349,

     1350, 1336, 1350, 1347,    0, 1349, 1348, 1350,    0, 1358,
        0, 1358, 1350,    0,    0, 1349, 1358,    0,    0,    0,
        0, 1358, 1349,    0,    0,    0, 1349, 1350,    0, 1350,
        0,    0, 1349,    0, 1350,    0, 1358,    0, 1358, 1350,
        0,    0, 1349, 1358,    0,    0,    0,    0, 1358, 1390,
     1390, 1390, 1390, 1390, 1391,    0,    0, 1391, 1391, 1393,
     1393, 1393,    0, 1393, 1394,    0, 1394, 1394, 1394, 1395,
        0, 1395, 1395, 1395, 1396,    0, 1396, 1396, 1396, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,

     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 3151 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 3165 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3452 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1390 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1389 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELIMITER)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ENCODING)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FOREIGN)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(QUOTE)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(REFERENCES)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 173:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 180:
#line 246 "flex_lexer.l"
case 181:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 182:
YY_RULE_SETUP
#line 256 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 261 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 271 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 277 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 282 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 283 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 284 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 285 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 286 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 288 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 290 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4493 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1390 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1390 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1389);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 290 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

