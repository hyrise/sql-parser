#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 132
#define YY_END_OF_BUFFER 133
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[914] =
    {   0,
        0,    0,    2,    2,  133,  131,    4,    4,  131,  124,
      131,  124,  124,  127,  124,  124,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  130,    1,  127,  126,
      125,  122,  121,  123,  129,  129,  129,  129,  129,  112,
      129,  113,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  114,  129,  115,  116,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  117,  118,
      119,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  120,  129,  129,
      129,  129,  129,  129,  129,  129,    2,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      128,  125,   98,  129,   99,  129,  129,  100,  101,  129,
      129,  129,  129,  129,  129,  129,  129,  102,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  103,  129,
      129,  129,  129,  129,  129,  104,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  105,  129,
      129,  106,  129,  129,  129,  129,  129,  129,  129,  129,

      107,  129,  129,  108,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  109,  129,  129,  129,  129,
      110,  129,  129,  129,  129,  111,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  129,  129,  129,  129,  129,   72,  129,   73,
      129,  129,  129,  129,   74,  129,  129,  129,  129,   75,
      129,  129,  129,   76,   77,  129,  129,  129,  129,  129,
       78,   79,   80,  129,  129,   81,  129,   82,  129,  129,
      129,  129,  129,  129,   83,  129,   84,   85,   86,  129,
       87,  129,  129,  129,  129,   88,  129,  129,  129,  129,
      129,   89,   90,  129,  129,  129,  129,  129,  129,  129,

       91,  129,  129,  129,  129,   92,   93,   94,  129,  129,
      129,  129,  129,  129,  129,   95,  129,   96,  129,   97,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,   54,   55,
      129,  129,  129,  129,  129,  129,  129,   56,  129,  129,
      129,   57,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   58,  129,  129,  129,   59,   60,  129,  129,  129,
      129,   61,   62,   63,   64,  129,  129,  129,   65,   66,
      129,  129,  129,  129,  129,   67,  129,  129,  129,  129,
       68,  129,  129,  129,   69,  129,  129,  129,   70,  129,
      129,   71,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  129,   30,  129,  129,
       31,  129,   32,  129,  129,   33,   34,  129,   35,   36,
       37,  129,   38,  129,   39,   40,  129,   41,   42,  129,
      129,   43,  129,  129,   44,  129,  129,  129,   45,  129,
       46,   47,   48,  129,   49,  129,  129,  129,   50,   51,
       52,   53,  129,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  129,   19,  129,   20,   21,
       22,   23,  129,   24,  129,  129,   25,   26,  129,   27,
       28,  129,  129,  129,   29,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      129,   10,  129,   11,  129,   12,  129,  129,   13,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  129,    7,

      129,    8,    9,    2,    2,    2,    2,    2,    5,    6,
        2,    2,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_uint16_t yy_base[921] =
    {   0,
        0,    0,   65,    0,  400, 3673,  129,  131,    0, 3673,
      361,  128,  351,  130,  129,  346,  126,  119,  134,  180,
      122,  169,  119,  138,  169,  118,  137,  188,  187,  185,
      222,  217,    0,  232,  268,  311,  234,  230,  243,    0,
      164,  256,  338,    0,  333,  153,  305,  263,  282,  294,
      368,  426,  478,  530,  578,  626,  283,  428,  674,  282,
      300,  360,  345,  726,  774,  826,  346,  418,  876,  928,
      976,  437,  436,  295,  282,  267, 3673, 3673,  293,  260,
      257, 3673, 3673, 3673,    0,  139,  157,  284,  290,  191,
      353,    0,  253,  391,  434,  177,  222,  480,  365,  285,

      294,  298,  345,  376,  482,  378,  390,  398,  416,  421,
      432,  483,  463,    0,  432,  497,  443,  458,  470,  494,
      523,  539,  515,  523,  521,  526,  535,  548,  544,    0,
      547,  532,  535,  553,  579,  572,  564,  577,  575,  574,
      575,  593,  594,  587,  612,  595,  588,  589,  585,  625,
      634,  630,  628,  637,  638,  625,    0,  347,  257,  250,
        0,    0,  345,  241,  235,    0,    0,    0,  651,  680,
      670,  713,  738,  705,  771,  672,  789,  820,  704,  788,
      777, 1028,  828,  845,  870,  811,  851,  864, 1078,  895,
      899,  900,  933,  934,  962,  974,  984,  916, 1016, 1127,

      986, 1026,  930, 1038, 1044, 1072, 1047, 1081, 1118, 1124,
     1123, 1084, 1155, 1093, 1159, 1161, 1164, 1193, 1190, 1178,
     1195, 1209, 1223, 1231, 1232, 1253, 1247, 1228, 1102, 1180,
     1261, 1266, 1282, 1283, 1285, 1295, 1316, 1307, 1301, 1318,
     3673,  204,    0,  641,    0,  649,  647,    0,    0,  674,
      671,  684,  768,  680,  693,  733,  740,    0,  757,  772,
      784,  992,  883,  882,  879,  921,  945,  970,    0,  977,
      978, 1012, 1018, 1054, 1135,    0, 1138, 1165, 1236, 1248,
     1289, 1293, 1316, 1320, 1327, 1339, 1340, 1341, 1346, 1328,
     1340,    0, 1336, 1352, 1349, 1356, 1361, 1357, 1345, 1353,

        0, 1363, 1359, 1360, 1375, 1377, 1385, 1376, 1376, 1381,
     1394, 1376, 1389, 1393, 1394,    0, 1377, 1383, 1388, 1398,
        0, 1395, 1392, 1400, 1410,    0, 1402, 1403, 1413, 1428,
     1417, 1412, 1411, 1416, 1426, 1438,    0,  194, 1443, 1444,
     1445, 1447, 1469, 1457, 1459, 1473, 1460, 1475, 1499, 1498,
     1508, 1517, 1529, 1511, 1512, 1527, 1552, 1542, 1553, 1563,
     1566, 1568, 1571, 1567, 1577, 1605, 1596, 1619, 1606, 1622,
     1607, 1611, 1637, 1641, 1662, 1651, 1660, 1673, 1676, 1695,
     1692, 1679, 1681, 1697, 1711, 1714, 1716, 1713, 1735, 1727,
     1745, 1767, 1768, 1751, 1759, 1769, 1770, 1800, 1805, 1799,

     1781, 1783, 1833, 1822, 1824, 1857, 1841, 1839, 1867, 1863,
     1873, 1876, 1889, 1891, 1902, 1878, 1899, 1921, 1915, 1931,
     1927, 1943, 1952, 1965, 1956, 1964, 1980, 1981, 1995, 1994,
     2010, 2029, 1441, 1448, 1513, 1572, 1603,    0, 1709,    0,
     1738, 1771, 1794, 1809,    0, 1848, 1858, 1913, 1973,    0,
     1973, 2002, 2010,    0,    0, 2007, 2009, 2009, 2011, 2035,
        0,    0,    0, 2038, 2024,    0, 2029,    0, 2029, 2030,
     2029, 2038, 2041, 2058,    0, 2048,    0,    0,    0, 2048,
        0, 2057, 2067, 2054, 2056,    0, 2074, 2073, 2061, 2064,
     2071,    0,    0, 2084, 2087, 2076, 2072, 2071, 2080, 2091,

        0, 2092, 2089, 2097, 2092,    0,    0, 2089, 2107, 2099,
     2093, 2118, 2102, 2116, 2121,    0, 2106,    0, 2123,    0,
     2126, 2127, 2131, 2142, 2137, 2143, 2156, 2160, 2177, 2168,
     2171, 2196, 2172, 2194, 2206, 2205, 2231, 2209, 2240, 2230,
     2235, 2239, 2244, 2263, 2268, 2273, 2284, 2285, 2276, 2294,
     2297, 2302, 2307, 2313, 2319, 2330, 2338, 2343, 2342, 2351,
     2359, 2374, 2353, 2395, 2384, 2392, 2393, 2408, 2397, 2418,
     2407, 2416, 2433, 2441, 2449, 2451, 2459, 2462, 2477, 2464,
     2467, 2505, 2507, 2513, 2495, 2516, 2518, 2519, 2529, 2537,
     2547, 2541, 2559, 2550, 2555, 2571, 2583, 2580, 2593, 2599,

     2614, 2615, 2601, 2604, 2623, 2605, 2633, 2637,    0,    0,
     2113, 2138, 2175, 2246, 2239, 2299, 2382,    0, 2395, 2403,
     2456,    0, 2451, 2602, 2645, 2647, 2634, 2639, 2641, 2654,
     2652,    0, 2661, 2652, 2652,    0,    0, 2653, 2669, 2657,
     2666,    0,    0,    0,    0, 2679, 2674, 2663,    0,    0,
     2679, 2670, 2674, 2688, 2685,    0, 2695, 2678, 2698, 2703,
     2687, 2690, 2692, 2712,    0, 2709, 2712, 2712,    0, 2699,
     2721,    0, 2721, 2722, 2725, 2723, 2727, 2733, 2755, 2751,
     2756, 2757, 2779, 2785, 2766, 2767, 2781, 2800, 2790, 2795,
     2818, 2824, 2821, 2830, 2849, 2843, 2852, 2867, 2858, 2855,

     2864, 2886, 2888, 2889, 2897, 2892, 2898, 2920, 2921, 2926,
     2934, 2923, 2932, 2942, 2951, 2963, 2972, 2955, 2980, 2966,
     2995, 2994, 2997, 3005, 3006, 3030, 3031, 3039, 3029, 3034,
     3064, 3040, 3045, 3055, 3083, 3068, 2731,    0, 2920, 2960,
     2963, 3064,    0, 3076, 3065,    0,    0, 3087,    0,    0,
        0, 3089,    0, 3084,    0,    0, 3074,    0,    0, 3084,
     3099,    0, 3093, 3108,    0, 3090, 3108, 3089,    0, 3115,
     3100,    0,    0, 3110,    0, 3122, 3123, 3107,    0,    0,
        0,    0, 3116, 3128, 3133, 3134, 3137, 3138, 3156, 3139,
     3169, 3172, 3151, 3168, 3193, 3177, 3182, 3201, 3205, 3206,

     3222, 3207, 3210, 3223, 3235, 3236, 3246, 3241, 3244, 3260,
     3276, 3265, 3275, 3277, 3278, 3281, 3311, 3300, 3306, 3310,
     3332, 3315, 3344, 3349, 3348, 3334, 3350, 3360, 3365, 3382,
        0,    0,    0,    0,    0, 3151,    0, 3158,    0,    0,
        0,    0, 3213,    0, 3199, 3247,    0,    0, 3274,    0,
        0, 3306, 3321, 3351,    0, 3373, 3374, 3383, 3384, 3386,
     3418, 3388, 3417, 3399, 3422, 3423, 3427, 3436, 3428, 3440,
     3451, 3452, 3457, 3466, 3462, 3468, 3490, 3492, 3491, 3494,
     3383,    0, 3443,    0, 3483,    0, 3477, 3490,    0, 3505,
     3502, 3516, 3506, 3535, 3534, 3540, 3545, 3544, 3542,    0,

     3532,    0,    0, 3550, 3559, 3574, 3576, 3578,    0,    0,
     3580, 3584, 3673, 3648, 3652,  164, 3656, 3660, 3664, 3668
    } ;

static yyconst flex_int16_t yy_def[921] =
    {   0,
      913,    1,  913,    3,  913,  913,  913,  913,  914,  913,
      915,  913,  913,  913,  913,  913,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  917,
      917,  913,  918,  917,  919,  917,  917,  917,  917,  917,
      920,  920,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  913,  914,  915,  913,  913,  913,  913,
      913,  913,  913,  913,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  917,  917,  918,  919,
      917,  917,  917,  917,  917,  917,  917,  917,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      913,  913,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  917,  917,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      916,  916,  916,  916,  916,  916,  916,  916,  916,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  916,  916,

      916,  916,  916,   52,   52,   52,   52,   52,  916,  916,
       52,   52,    0,  913,  913,  913,  913,  913,  913,  913
    } ;

static yyconst flex_uint16_t yy_nxt[3739] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   78,   91,   79,   81,   79,   82,
       83,   86,  110,   87,  118,  102,   93,  103,  111,   88,
      112,   89,  104,  119,  243,   92,   90,  105,  113,  162,
       94,  163,   91,   95,   96,  158,   74,   85,   86,  110,
       87,  118,  102,   93,  103,  111,   88,  112,   89,  104,
      119,  243,   92,   90,  105,  113,  114,   94,  244,  106,
       95,   96,   97,  115,  116,  107,   98,  125,  108,  117,

       99,  109,  338,  123,  120,  249,  100,  124,  121,  101,
      258,  126,  242,  114,  122,  244,  106,  127,  128,   97,
      115,  116,  107,   98,  125,  108,  117,   99,  109,  133,
      123,  120,  249,  100,  124,  121,  101,  258,  126,  129,
      134,  122,  153,  338,  127,  128,  135,  130,  136,  164,
      154,  131,  137,  259,  132,  161,  133,   74,   74,  150,
      337,  151,  155,  156,  152,  242,  129,  134,   80,  153,
      165,  163,   77,  135,  130,  136,  252,  154,  131,  137,
      259,  132,  138,  253,  139,  241,  150,  140,  151,  155,
      156,  152,  166,  167,  141,  142,   74,   74,  169,  169,

       81,   79,  247,  252,  168,  248,  194,  245,  202,  138,
      253,  139,  195,  164,  140,  246,  203,  266,  169,  169,
      267,  141,  142,  143,  144,  169,  169,  145,  268,  247,
      146,  147,  248,  194,  245,  202,  169,  148,  161,  195,
      149,  157,  246,  203,  266,  169,  169,  267,  158,   74,
      143,  144,  165,  163,  145,  268,   84,  146,  147,   80,
      269,  207,  169,  169,  148,  208,   77,  149,  157,  157,
      250,  157,  157,  157,  157,  157,  204,  157,  157,  157,
      205,  169,  169,  170,  251,  171,  206,  269,  207,  169,
      270,  172,  208,  173,  264,  265,  169,  250,  174,  913,

      913,  275,  913,  204,  913,  913,  913,  205,  169,  169,
      170,  251,  171,  206,  254,  913,  255,  270,  172,  276,
      173,  264,  265,  169,  277,  174,  157,  157,  275,  157,
      157,  157,  157,  157,  220,  157,  157,  157,  221,  278,
      196,  254,  175,  255,  169,  913,  276,  279,  197,  237,
      256,  277,  169,  169,  169,  239,  240,  238,  280,  285,
      257,  220,  176,  913,  169,  221,  278,  196,  290,  175,
      913,  169,  169,  169,  279,  197,  237,  256,  291,  169,
      169,  169,  239,  240,  238,  280,  285,  257,  283,  176,
      177,  169,  260,  284,  169,  290,  271,  261,  272,  169,

      169,  913,  273,  262,  178,  291,  292,  179,  180,  274,
      263,  293,  286,  281,  169,  283,  282,  177,  913,  260,
      284,  169,  287,  271,  261,  272,  913,  288,  289,  273,
      262,  178,  913,  292,  179,  180,  274,  263,  293,  286,
      281,  169,  181,  282,  298,  294,  182,  295,  299,  287,
      183,  296,  300,  297,  288,  289,  184,  301,  302,  185,
      303,  304,  305,  306,  307,  308,  169,  913,  913,  181,
      913,  298,  294,  182,  295,  299,  913,  183,  296,  300,
      297,  913,  313,  184,  301,  302,  185,  303,  304,  305,
      306,  307,  308,  169,  169,  309,  314,  311,  315,  310,

      317,  186,  312,  187,  318,  319,  316,  320,  188,  313,
      321,  324,  325,  189,  169,  913,  326,  327,  913,  913,
      913,  169,  309,  314,  311,  315,  310,  317,  186,  312,
      187,  318,  319,  316,  320,  188,  322,  321,  324,  325,
      189,  169,  169,  326,  327,  328,  190,  323,  329,  330,
      331,  332,  191,  333,  335,  192,  336,  433,  193,  913,
      913,  913,  169,  322,  913,  434,  334,  169,  913,  169,
      435,  913,  328,  190,  323,  329,  330,  331,  332,  191,
      333,  335,  192,  336,  433,  193,  169,  169,  169,  169,
      169,  198,  434,  334,  169,  339,  169,  435,  199,  200,

      436,  340,  913,  913,  201,  437,  169,  438,  169,  913,
      169,  913,  441,  169,  169,  169,  169,  169,  198,  345,
      352,  169,  339,  169,  442,  199,  200,  436,  340,  169,
      353,  201,  437,  169,  438,  169,  341,  169,  209,  441,
      169,  169,  169,  169,  342,  443,  345,  352,  169,  169,
      343,  442,  210,  344,  169,  913,  169,  353,  211,  212,
      913,  913,  169,  341,  913,  209,  913,  169,  169,  169,
      444,  342,  443,  445,  169,  913,  169,  343,  913,  210,
      344,  169,  439,  913,  440,  211,  212,  169,  346,  169,
      169,  213,  913,  169,  913,  446,  447,  444,  913,  214,

      445,  169,  347,  215,  169,  169,  216,  169,  355,  439,
      169,  440,  348,  169,  169,  346,  913,  169,  213,  349,
      169,  354,  446,  447,  169,  169,  214,  169,  913,  347,
      215,  169,  169,  216,  169,  355,  169,  169,  217,  348,
      169,  364,  169,  350,  169,  351,  349,  169,  354,  218,
      913,  169,  169,  913,  169,  219,  169,  360,  361,  913,
      913,  169,  169,  169,  169,  217,  365,  169,  364,  169,
      350,  169,  351,  913,  169,  913,  218,  362,  366,  913,
      169,  169,  219,  169,  360,  361,  169,  169,  169,  169,
      222,  169,  223,  365,  169,  224,  363,  450,  451,  913,

      169,  913,  225,  226,  362,  366,  169,  169,  169,  913,
      452,  169,  169,  169,  169,  169,  169,  222,  371,  223,
      913,  913,  224,  363,  450,  451,  373,  169,  372,  225,
      226,  169,  169,  169,  453,  169,  169,  452,  169,  169,
      227,  228,  169,  169,  229,  371,  169,  230,  231,  169,
      169,  913,  169,  373,  232,  372,  374,  233,  169,  169,
      375,  453,  169,  169,  169,  913,  388,  227,  228,  169,
      169,  229,  454,  169,  230,  231,  169,  169,  169,  169,
      913,  232,  913,  374,  233,  913,  455,  375,  376,  456,
      169,  169,  169,  388,  457,  913,  169,  169,  169,  454,

      169,  234,  169,  235,  377,  169,  236,  378,  448,  379,
      169,  386,  169,  455,  380,  376,  456,  169,  913,  169,
      169,  457,  169,  449,  913,  169,  458,  169,  234,  169,
      235,  377,  169,  236,  378,  448,  379,  169,  386,  169,
      356,  380,  169,  381,  169,  357,  387,  169,  459,  169,
      449,  358,  169,  458,  169,  389,  913,  913,  359,  169,
      169,  913,  169,  169,  169,  913,  390,  356,  391,  169,
      381,  169,  357,  387,  169,  459,  394,  460,  358,  169,
      169,  169,  389,  169,  392,  359,  393,  169,  169,  169,
      169,  169,  367,  390,  368,  391,  399,  169,  369,  913,

      169,  169,  913,  394,  460,  370,  395,  169,  169,  169,
      169,  392,  913,  393,  169,  169,  913,  169,  169,  367,
      169,  368,  913,  399,  169,  369,  418,  169,  913,  169,
      913,  913,  370,  395,  169,  169,  169,  419,  169,  169,
      169,  169,  382,  169,  169,  169,  398,  169,  913,  396,
      913,  461,  383,  418,  169,  397,  169,  384,  385,  169,
      169,  169,  462,  169,  419,  169,  169,  169,  913,  382,
      169,  169,  400,  398,  401,  169,  396,  169,  461,  383,
      169,  169,  397,  913,  384,  385,  169,  169,  463,  462,
      169,  169,  402,  403,  169,  169,  420,  169,  169,  400,

      169,  401,  169,  407,  169,  404,  405,  169,  408,  169,
      406,  169,  913,  409,  169,  463,  169,  913,  169,  402,
      403,  169,  169,  420,  169,  169,  169,  169,  410,  169,
      407,  169,  404,  405,  913,  408,  169,  406,  169,  169,
      409,  169,  913,  169,  169,  169,  411,  169,  169,  464,
      913,  417,  169,  169,  412,  410,  169,  413,  169,  169,
      416,  414,  913,  169,  169,  415,  169,  169,  169,  169,
      913,  169,  169,  411,  169,  169,  464,  169,  417,  913,
      465,  412,  169,  169,  413,  421,  169,  416,  414,  169,
      169,  169,  415,  422,  169,  169,  169,  169,  169,  169,

      426,  169,  169,  424,  169,  913,  425,  465,  466,  169,
      169,  169,  421,  467,  423,  427,  169,  431,  169,  169,
      422,  169,  913,  429,  169,  169,  169,  426,  169,  169,
      424,  169,  169,  425,  169,  466,  430,  169,  169,  428,
      467,  423,  427,  169,  431,  169,  169,  468,  169,  432,
      429,  469,  169,  470,  169,  471,  472,  473,  169,  169,
      476,  169,  474,  430,  169,  477,  428,  478,  479,  480,
      169,  481,  475,  482,  468,  483,  432,  484,  469,  169,
      470,  169,  471,  472,  473,  485,  486,  476,  487,  474,
      488,  489,  477,  490,  478,  479,  480,  491,  481,  475,

      482,  493,  483,  494,  484,  495,  496,  497,  498,  499,
      500,  501,  485,  486,  502,  487,  492,  488,  489,  503,
      490,  504,  505,  506,  491,  507,  508,  509,  493,  510,
      494,  511,  495,  496,  497,  498,  499,  500,  501,  512,
      513,  502,  514,  492,  515,  516,  503,  517,  504,  505,
      506,  518,  507,  508,  509,  519,  510,  520,  511,  169,
      521,  169,  913,  522,  913,  913,  512,  513,  913,  514,
      609,  515,  516,  169,  517,  169,  169,  610,  518,  169,
      169,  169,  519,  169,  520,  169,  169,  521,  169,  169,
      522,  169,  523,  169,  525,  169,  169,  609,  526,  524,

      169,  913,  169,  169,  610,  169,  169,  169,  169,  169,
      169,  169,  169,  527,  169,  528,  169,  913,  169,  523,
      169,  525,  169,  169,  169,  526,  524,  169,  533,  531,
      529,  913,  169,  169,  169,  169,  169,  913,  169,  530,
      527,  169,  528,  169,  169,  169,  913,  169,  169,  611,
      534,  169,  913,  169,  169,  533,  531,  529,  536,  532,
      169,  169,  169,  169,  535,  169,  530,  538,  169,  169,
      169,  169,  169,  537,  169,  169,  611,  534,  169,  539,
      169,  541,  169,  543,  169,  536,  532,  169,  169,  169,
      169,  535,  169,  169,  538,  169,  169,  540,  542,  169,

      537,  612,  169,  169,  169,  169,  539,  169,  541,  169,
      543,  169,  545,  169,  169,  169,  169,  544,  913,  613,
      169,  169,  169,  549,  540,  542,  169,  169,  612,  169,
      169,  169,  169,  546,  169,  169,  547,  913,  169,  545,
      169,  169,  169,  169,  544,  548,  613,  169,  169,  169,
      549,  913,  913,  169,  169,  169,  913,  169,  169,  169,
      546,  550,  169,  547,  551,  169,  913,  169,  169,  169,
      169,  913,  548,  169,  169,  552,  169,  169,  169,  554,
      169,  913,  169,  553,  169,  169,  913,  169,  550,  169,
      913,  551,  169,  555,  169,  559,  169,  560,  169,  913,

      169,  913,  552,  169,  169,  169,  554,  556,  169,  169,
      553,  169,  169,  561,  169,  169,  169,  169,  558,  169,
      555,  614,  559,  169,  560,  169,  557,  562,  169,  169,
      169,  169,  169,  169,  556,  169,  169,  563,  169,  169,
      561,  565,  169,  567,  169,  558,  564,  169,  614,  169,
      169,  169,  169,  557,  562,  169,  169,  169,  169,  169,
      169,  169,  615,  169,  563,  568,  566,  169,  565,  571,
      567,  169,  913,  564,  169,  169,  169,  169,  169,  169,
      570,  169,  569,  169,  169,  169,  169,  169,  169,  615,
      169,  572,  568,  566,  169,  169,  571,  577,  169,  578,

      616,  573,  169,  169,  169,  169,  169,  570,  169,  569,
      169,  169,  169,  169,  169,  169,  169,  169,  572,  169,
      913,  169,  169,  574,  577,  617,  578,  616,  573,  576,
      169,  169,  169,  169,  575,  169,  169,  913,  169,  618,
      169,  169,  169,  169,  169,  579,  169,  581,  169,  169,
      574,  582,  617,  584,  913,  169,  576,  169,  169,  913,
      169,  575,  169,  169,  580,  169,  618,  169,  169,  169,
      585,  619,  579,  169,  581,  169,  169,  169,  582,  587,
      584,  583,  169,  169,  169,  169,  586,  169,  913,  588,
      620,  580,  169,  169,  169,  913,  169,  585,  619,  169,

      169,  592,  169,  169,  169,  169,  587,  169,  583,  169,
      169,  913,  169,  586,  169,  169,  588,  620,  169,  169,
      169,  169,  590,  589,  913,  169,  169,  169,  592,  913,
      169,  169,  169,  591,  169,  169,  169,  169,  169,  169,
      913,  169,  169,  596,  621,  169,  594,  169,  593,  590,
      589,  169,  169,  913,  169,  913,  595,  169,  169,  169,
      591,  913,  169,  169,  169,  169,  913,  169,  169,  913,
      596,  621,  169,  594,  169,  593,  601,  597,  169,  169,
      169,  169,  600,  595,  169,  622,  169,  623,  169,  913,
      169,  598,  169,  599,  169,  169,  169,  169,  913,  169,

      169,  169,  913,  601,  597,  602,  169,  169,  169,  600,
      169,  169,  622,  603,  623,  169,  169,  169,  598,  169,
      599,  913,  624,  169,  169,  605,  169,  169,  169,  604,
      169,  169,  602,  625,  626,  606,  627,  169,  169,  607,
      603,  628,  629,  169,  169,  169,  169,  630,  608,  624,
      631,  632,  605,  169,  633,  634,  604,  169,  169,  635,
      625,  626,  606,  627,  636,  169,  607,  637,  628,  629,
      638,  641,  169,  169,  630,  608,  639,  631,  632,  642,
      643,  633,  634,  644,  645,  646,  635,  640,  647,  648,
      649,  636,  169,  650,  637,  651,  652,  638,  641,  653,

      654,  655,  656,  639,  657,  658,  642,  643,  659,  660,
      644,  645,  646,  661,  640,  647,  648,  649,  662,  663,
      650,  664,  651,  652,  665,  666,  653,  654,  655,  656,
      667,  657,  658,  668,  669,  659,  660,  670,  671,  672,
      661,  913,  169,  169,  913,  662,  663,  169,  664,  913,
      737,  665,  666,  677,  738,  673,  674,  667,  169,  169,
      668,  669,  169,  169,  670,  671,  672,  675,  678,  169,
      169,  676,  169,  169,  169,  913,  169,  737,  169,  169,
      677,  738,  673,  674,  169,  169,  169,  169,  169,  169,
      169,  739,  169,  169,  675,  678,  169,  680,  676,  169,

      169,  679,  681,  169,  169,  169,  169,  169,  169,  913,
      169,  169,  169,  169,  169,  169,  913,  683,  739,  169,
      169,  169,  169,  169,  680,  169,  682,  913,  679,  681,
      169,  169,  169,  913,  169,  169,  685,  169,  684,  169,
      169,  169,  169,  686,  683,  169,  169,  169,  169,  169,
      688,  169,  169,  682,  687,  169,  169,  169,  689,  169,
      169,  740,  913,  685,  741,  684,  169,  169,  169,  169,
      686,  169,  169,  169,  169,  169,  169,  688,  169,  169,
      169,  687,  169,  169,  169,  689,  913,  169,  740,  169,
      690,  741,  169,  169,  169,  691,  913,  694,  169,  169,

      169,  169,  169,  169,  169,  692,  169,  169,  913,  169,
      169,  169,  169,  169,  695,  693,  169,  690,  169,  169,
      169,  169,  691,  169,  694,  742,  169,  169,  169,  169,
      169,  169,  692,  169,  696,  169,  169,  169,  169,  169,
      169,  695,  693,  169,  697,  169,  169,  169,  169,  169,
      169,  913,  742,  913,  169,  169,  169,  169,  169,  169,
      169,  696,  169,  913,  698,  169,  169,  169,  913,  169,
      169,  697,  699,  169,  169,  169,  169,  700,  169,  169,
      701,  169,  169,  913,  913,  169,  169,  169,  702,  169,
      169,  698,  703,  169,  169,  169,  169,  913,  743,  699,

      169,  169,  169,  704,  700,  169,  169,  701,  169,  169,
      169,  169,  913,  169,  169,  702,  169,  169,  705,  703,
      169,  744,  169,  708,  169,  743,  745,  169,  169,  169,
      704,  169,  169,  169,  169,  169,  169,  169,  169,  706,
      169,  707,  913,  169,  169,  705,  709,  169,  744,  169,
      708,  169,  169,  745,  169,  169,  169,  169,  169,  169,
      169,  169,  710,  711,  913,  169,  706,  712,  707,  169,
      169,  169,  746,  709,  913,  169,  169,  169,  169,  169,
      169,  169,  747,  169,  169,  169,  913,  169,  713,  710,
      711,  714,  169,  169,  712,  169,  169,  913,  169,  746,

      169,  715,  169,  169,  169,  169,  913,  169,  913,  747,
      169,  169,  169,  169,  169,  713,  913,  716,  714,  717,
      169,  169,  169,  169,  719,  169,  913,  169,  715,  169,
      169,  169,  169,  722,  169,  169,  913,  718,  169,  913,
      169,  169,  721,  169,  716,  169,  717,  720,  169,  169,
      169,  719,  169,  723,  169,  169,  169,  725,  169,  169,
      722,  169,  169,  169,  718,  169,  169,  724,  169,  721,
      169,  169,  169,  169,  720,  169,  169,  169,  913,  169,
      723,  169,  169,  169,  725,  726,  169,  169,  913,  913,
      169,  169,  169,  169,  724,  169,  169,  728,  169,  169,

      169,  727,  169,  913,  169,  729,  913,  169,  913,  169,
      169,  731,  726,  169,  169,  169,  169,  734,  169,  169,
      169,  169,  169,  169,  728,  730,  169,  748,  727,  169,
      169,  169,  729,  733,  169,  169,  169,  169,  731,  169,
      169,  169,  169,  169,  734,  732,  169,  169,  169,  736,
      169,  169,  730,  169,  748,  735,  169,  169,  169,  169,
      733,  749,  169,  750,  169,  751,  169,  169,  169,  169,
      752,  753,  732,  169,  754,  755,  736,  169,  169,  756,
      169,  757,  735,  758,  759,  760,  169,  761,  749,  762,
      750,  763,  751,  764,  765,  766,  169,  752,  753,  767,

      169,  754,  755,  768,  769,  770,  756,  771,  757,  772,
      758,  759,  760,  773,  761,  774,  762,  775,  763,  776,
      764,  765,  766,  777,  778,  779,  767,  780,  781,  782,
      768,  769,  770,  783,  771,  913,  772,  169,  169,  785,
      773,  169,  774,  786,  775,  913,  776,  831,  787,  169,
      777,  778,  779,  913,  780,  781,  782,  169,  169,  169,
      783,  169,  784,  169,  169,  169,  785,  169,  169,  169,
      786,  169,  790,  169,  831,  787,  169,  789,  913,  913,
      788,  913,  793,  169,  169,  169,  169,  169,  169,  784,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  790,

      169,  169,  169,  169,  789,  791,  796,  788,  792,  793,
      169,  797,  794,  913,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  913,  169,  795,  169,  913,  169,  169,
      169,  169,  791,  796,  169,  792,  169,  169,  797,  794,
      169,  913,  169,  169,  169,  913,  169,  913,  169,  798,
      801,  800,  795,  169,  169,  799,  913,  169,  169,  169,
      169,  169,  913,  169,  169,  169,  169,  169,  169,  913,
      803,  169,  802,  169,  169,  913,  798,  801,  800,  169,
      169,  169,  799,  169,  169,  169,  169,  169,  169,  805,
      913,  169,  169,  169,  169,  169,  804,  803,  169,  802,

      169,  169,  169,  169,  807,  169,  169,  169,  169,  913,
      169,  913,  169,  169,  169,  169,  805,  806,  169,  808,
      809,  169,  169,  804,  169,  169,  913,  169,  169,  169,
      169,  807,  169,  169,  169,  169,  169,  169,  810,  169,
      169,  169,  169,  913,  806,  832,  808,  809,  169,  169,
      169,  169,  169,  811,  812,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  810,  169,  813,  169,  169,
      169,  816,  832,  913,  913,  169,  833,  169,  169,  169,
      811,  812,  169,  169,  169,  169,  169,  169,  169,  169,
      913,  169,  814,  834,  813,  169,  169,  169,  816,  169,

      817,  815,  169,  833,  913,  169,  169,  818,  169,  169,
      169,  169,  820,  169,  169,  169,  169,  821,  169,  814,
      834,  169,  169,  169,  913,  819,  169,  817,  815,  169,
      169,  169,  913,  169,  818,  169,  822,  169,  169,  820,
      169,  169,  169,  169,  821,  169,  169,  169,  169,  169,
      826,  825,  819,  913,  913,  169,  828,  169,  169,  823,
      169,  169,  824,  822,  913,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  826,  825,  827,
      169,  169,  169,  828,  169,  829,  823,  835,  169,  824,
      836,  169,  169,  169,  169,  830,  837,  169,  169,  169,

      169,  838,  169,  169,  169,  839,  827,  169,  169,  840,
      841,  169,  829,  842,  835,  843,  844,  836,  169,  169,
      845,  846,  830,  837,  847,  848,  169,  169,  838,  849,
      850,  169,  839,  851,  852,  853,  840,  841,  854,  855,
      842,  913,  843,  844,  856,  913,  169,  845,  846,  169,
      169,  847,  848,  858,  169,  169,  849,  850,  913,  857,
      851,  852,  853,  881,  169,  854,  855,  169,  859,  169,
      169,  856,  169,  169,  169,  169,  169,  169,  913,  860,
      858,  169,  169,  861,  169,  169,  857,  169,  169,  882,
      881,  169,  169,  169,  169,  859,  169,  169,  169,  169,

      169,  169,  169,  862,  169,  169,  860,  863,  169,  169,
      861,  169,  169,  169,  169,  169,  882,  169,  169,  169,
      169,  864,  169,  169,  913,  169,  169,  883,  884,  169,
      862,  169,  169,  913,  863,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  865,  864,  169,
      169,  169,  169,  169,  883,  884,  169,  868,  169,  866,
      169,  913,  169,  885,  169,  169,  169,  913,  169,  169,
      169,  169,  169,  169,  865,  867,  169,  169,  169,  169,
      169,  169,  169,  869,  868,  169,  866,  169,  870,  169,
      885,  169,  169,  872,  169,  913,  169,  169,  169,  169,

      913,  169,  867,  169,  169,  886,  871,  169,  169,  169,
      869,  169,  169,  169,  873,  870,  169,  169,  169,  169,
      872,  169,  169,  169,  169,  874,  169,  169,  169,  913,
      875,  169,  886,  871,  913,  887,  169,  913,  169,  169,
      169,  873,  169,  169,  169,  888,  169,  169,  169,  169,
      169,  169,  874,  169,  169,  876,  877,  875,  169,  913,
      169,  878,  887,  169,  169,  169,  169,  889,  169,  169,
      169,  913,  888,  169,  169,  169,  169,  169,  169,  879,
      169,  169,  876,  877,  169,  169,  169,  169,  878,  169,
      169,  169,  169,  169,  889,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  880,  879,  169,  169,  169,
      169,  169,  169,  169,  899,  169,  169,  169,  169,  169,
      169,  913,  169,  169,  169,  169,  169,  169,  169,  169,
      890,  169,  880,  169,  169,  169,  169,  169,  169,  169,
      913,  899,  169,  169,  169,  169,  169,  169,  891,  169,
      892,  169,  169,  169,  169,  913,  169,  890,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  894,  169,  893,
      169,  169,  169,  169,  900,  891,  169,  892,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  913,
      169,  169,  913,  169,  894,  169,  893,  895,  169,  169,

      169,  900,  169,  169,  169,  169,  169,  898,  169,  169,
      169,  169,  901,  902,  169,  169,  897,  903,  169,  896,
      169,  169,  169,  913,  895,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  898,  169,  904,  169,  169,  901,
      902,  169,  169,  897,  903,  169,  896,  905,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  909,  169,
      169,  169,  910,  904,  906,  169,  911,  913,  169,  169,
      169,  169,  908,  913,  905,  169,  907,  169,  169,  169,
      169,  169,  913,  169,  913,  909,  169,  169,  169,  910,
      169,  906,  169,  911,  169,  169,  169,  169,  169,  908,

      169,  913,  169,  907,  912,  913,  913,  169,  169,  913,
      169,  913,  169,  169,  169,  913,  169,  169,  913,  169,
      169,  169,  169,  169,  913,  913,  913,  169,  913,  913,
      913,  912,  913,  913,  913,  913,  913,  169,  913,  169,
      913,  169,  913,  169,  913,  913,  913,  169,   75,  913,
      913,   75,   76,  913,   76,   76,  157,  913,  157,  157,
      159,  913,  159,  159,  160,  913,  160,  160,  169,  913,
      169,  169,    5,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,

      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913
    } ;

static yyconst flex_int16_t yy_chk[3739] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   12,   18,   12,   14,   14,   15,
       15,   17,   23,   17,   26,   21,   19,   21,   23,   17,
       24,   17,   21,   27,   86,   18,   17,   21,   24,   46,
       19,   46,   18,   19,   19,   41,   41,  916,   17,   23,
       17,   26,   21,   19,   21,   23,   17,   24,   17,   21,
       27,   86,   18,   17,   21,   24,   25,   19,   87,   22,
       19,   19,   20,   25,   25,   22,   20,   30,   22,   25,

       20,   22,  338,   29,   28,   90,   20,   29,   28,   20,
       96,   30,  242,   25,   28,   87,   22,   30,   30,   20,
       25,   25,   22,   20,   30,   22,   25,   20,   22,   32,
       29,   28,   90,   20,   29,   28,   20,   96,   30,   31,
       32,   28,   38,  165,   30,   30,   32,   31,   34,  164,
       38,   31,   34,   97,   31,  160,   32,   42,   42,   37,
      159,   37,   39,   39,   37,   81,   31,   32,   80,   38,
       48,   48,   76,   32,   31,   34,   93,   38,   31,   34,
       97,   31,   35,   93,   35,   75,   37,   35,   37,   39,
       39,   37,   49,   49,   35,   35,   74,   74,   60,   57,

       79,   79,   89,   93,   50,   89,   57,   88,   60,   35,
       93,   35,   57,   47,   35,   88,   61,  100,   60,   57,
      101,   35,   35,   36,   36,   60,   57,   36,  102,   89,
       36,   36,   89,   57,   88,   60,   61,   36,   45,   57,
       36,   43,   88,   61,  100,   60,   57,  101,  158,  158,
       36,   36,  163,  163,   36,  102,   16,   36,   36,   13,
      103,   63,   67,   61,   36,   63,   11,   36,   51,   51,
       91,   51,   51,   51,   51,   51,   62,   51,   51,   51,
       62,   63,   67,   51,   91,   51,   62,  103,   63,   67,
      104,   51,   63,   51,   99,   99,   62,   91,   51,    5,

        0,  106,    0,   62,    0,    0,    0,   62,   63,   67,
       51,   91,   51,   62,   94,    0,   94,  104,   51,  107,
       51,   99,   99,   62,  108,   51,   52,   52,  106,   52,
       52,   52,   52,   52,   68,   52,   52,   52,   68,  109,
       58,   94,   52,   94,   58,    0,  107,  110,   58,   72,
       95,  108,   73,   72,   68,   73,   73,   72,  111,  115,
       95,   68,   52,    0,   58,   68,  109,   58,  117,   52,
        0,   58,   73,   72,  110,   58,   72,   95,  118,   73,
       72,   68,   73,   73,   72,  111,  115,   95,  113,   52,
       53,   58,   98,  113,   53,  117,  105,   98,  105,   73,

       72,    0,  105,   98,   53,  118,  119,   53,   53,  105,
       98,  120,  116,  112,   53,  113,  112,   53,    0,   98,
      113,   53,  116,  105,   98,  105,    0,  116,  116,  105,
       98,   53,    0,  119,   53,   53,  105,   98,  120,  116,
      112,   53,   54,  112,  123,  121,   54,  121,  124,  116,
       54,  122,  125,  122,  116,  116,   54,  126,  127,   54,
      128,  129,  131,  132,  133,  134,   54,    0,    0,   54,
        0,  123,  121,   54,  121,  124,    0,   54,  122,  125,
      122,    0,  137,   54,  126,  127,   54,  128,  129,  131,
      132,  133,  134,   54,   55,  135,  138,  136,  139,  135,

      140,   55,  136,   55,  141,  142,  139,  143,   55,  137,
      144,  146,  147,   55,   55,    0,  148,  149,    0,    0,
        0,   55,  135,  138,  136,  139,  135,  140,   55,  136,
       55,  141,  142,  139,  143,   55,  145,  144,  146,  147,
       55,   55,   56,  148,  149,  150,   56,  145,  150,  151,
      152,  153,   56,  154,  155,   56,  156,  244,   56,    0,
        0,    0,   56,  145,    0,  246,  154,  169,    0,   56,
      247,    0,  150,   56,  145,  150,  151,  152,  153,   56,
      154,  155,   56,  156,  244,   56,  171,  169,  176,   56,
       59,   59,  246,  154,  169,  170,  170,  247,   59,   59,

      250,  171,    0,    0,   59,  251,  171,  252,  176,    0,
       59,    0,  254,  171,  169,  176,  170,   59,   59,  174,
      179,  174,  170,  170,  255,   59,   59,  250,  171,  172,
      179,   59,  251,  171,  252,  176,  172,   59,   64,  254,
      179,  174,   64,  170,  172,  256,  174,  179,  174,  172,
      173,  255,   64,  173,  173,    0,  172,  179,   64,   64,
        0,    0,   64,  172,    0,   64,    0,  179,  174,   64,
      257,  172,  256,  259,  173,    0,  172,  173,    0,   64,
      173,  173,  253,    0,  253,   64,   64,  175,  175,   64,
       65,   65,    0,  181,    0,  260,  261,  257,    0,   65,

      259,  173,  175,   65,  180,  177,   65,  175,  181,  253,
       65,  253,  177,  181,  175,  175,    0,   65,   65,  177,
      181,  180,  260,  261,  180,  177,   65,  186,    0,  175,
       65,  180,  177,   65,  175,  181,  178,   65,   66,  177,
      181,  186,   66,  178,  183,  178,  177,  186,  180,   66,
        0,  180,  177,    0,  186,   66,  178,  183,  183,    0,
        0,  184,   66,  178,  183,   66,  187,  187,  186,   66,
      178,  183,  178,    0,  186,    0,   66,  184,  188,    0,
      188,  184,   66,  178,  183,  183,  185,  187,  184,   66,
       69,  183,   69,  187,  187,   69,  185,  263,  264,    0,

      188,    0,   69,   69,  184,  188,  185,  188,  184,    0,
      265,  190,   69,  185,  187,  191,  192,   69,  190,   69,
        0,    0,   69,  185,  263,  264,  192,  188,  191,   69,
       69,  190,  198,  185,  266,  191,  192,  265,  190,   69,
       70,   70,  191,  192,   70,  190,  203,   70,   70,  193,
      194,    0,  198,  192,   70,  191,  193,   70,  190,  198,
      194,  266,  191,  192,   70,    0,  203,   70,   70,  193,
      194,   70,  267,  203,   70,   70,  193,  194,  195,  198,
        0,   70,    0,  193,   70,    0,  268,  194,  195,  270,
      196,   70,   71,  203,  271,    0,  193,  194,  195,  267,

      197,   71,  201,   71,  196,  195,   71,  196,  262,  197,
      196,  201,   71,  268,  197,  195,  270,  196,    0,   71,
      197,  271,  201,  262,    0,  195,  272,  197,   71,  201,
       71,  196,  199,   71,  196,  262,  197,  196,  201,   71,
      182,  197,  202,  199,  182,  182,  202,  197,  273,  201,
      262,  182,  199,  272,  204,  204,    0,    0,  182,  199,
      205,    0,  202,  207,  182,    0,  205,  182,  205,  202,
      199,  182,  182,  202,  204,  273,  207,  274,  182,  199,
      205,  204,  204,  207,  206,  182,  206,  205,  206,  202,
      207,  182,  189,  205,  189,  205,  212,  208,  189,    0,

      212,  204,    0,  207,  274,  189,  208,  205,  206,  214,
      207,  206,    0,  206,  189,  206,    0,  208,  229,  189,
      212,  189,    0,  212,  208,  189,  229,  212,    0,  214,
        0,    0,  189,  208,  209,  206,  214,  229,  229,  211,
      210,  189,  200,  200,  208,  229,  211,  212,    0,  209,
        0,  275,  200,  229,  209,  210,  214,  200,  200,  211,
      210,  209,  277,  200,  229,  229,  211,  210,    0,  200,
      200,  213,  213,  211,  215,  215,  209,  216,  275,  200,
      217,  209,  210,    0,  200,  200,  211,  210,  278,  277,
      200,  213,  216,  217,  220,  215,  230,  216,  213,  213,

      217,  215,  215,  220,  216,  218,  219,  217,  220,  218,
      219,  221,    0,  221,  220,  278,  230,    0,  213,  216,
      217,  220,  215,  230,  216,  222,  219,  217,  222,  218,
      220,  221,  218,  219,    0,  220,  218,  219,  221,  223,
      221,  220,    0,  230,  228,  222,  223,  224,  225,  279,
        0,  228,  222,  219,  223,  222,  218,  224,  221,  223,
      227,  225,    0,  227,  228,  226,  223,  224,  225,  226,
        0,  228,  222,  223,  224,  225,  279,  231,  228,    0,
      280,  223,  232,  227,  224,  231,  223,  227,  225,  226,
      227,  228,  226,  232,  224,  225,  226,  231,  233,  234,

      235,  235,  232,  234,  231,    0,  234,  280,  281,  232,
      227,  236,  231,  282,  233,  236,  226,  239,  233,  234,
      232,  235,    0,  238,  231,  233,  234,  235,  235,  232,
      234,  236,  237,  234,  240,  281,  238,  239,  236,  237,
      282,  233,  236,  238,  239,  233,  234,  283,  235,  240,
      238,  284,  237,  285,  240,  286,  287,  288,  236,  237,
      290,  240,  289,  238,  239,  291,  237,  293,  294,  295,
      238,  296,  289,  297,  283,  298,  240,  299,  284,  237,
      285,  240,  286,  287,  288,  300,  302,  290,  303,  289,
      304,  305,  291,  306,  293,  294,  295,  307,  296,  289,

      297,  308,  298,  309,  299,  310,  311,  312,  313,  314,
      315,  317,  300,  302,  318,  303,  307,  304,  305,  319,
      306,  320,  322,  323,  307,  324,  325,  327,  308,  328,
      309,  328,  310,  311,  312,  313,  314,  315,  317,  329,
      330,  318,  331,  307,  332,  333,  319,  334,  320,  322,
      323,  335,  324,  325,  327,  335,  328,  336,  328,  339,
      340,  341,    0,  342,    0,    0,  329,  330,    0,  331,
      433,  332,  333,  344,  334,  345,  347,  434,  335,  339,
      340,  341,  335,  342,  336,  343,  339,  340,  341,  346,
      342,  348,  343,  344,  347,  345,  347,  433,  348,  346,

      344,    0,  345,  347,  434,  343,  339,  340,  341,  346,
      342,  348,  343,  349,  350,  349,  346,    0,  348,  343,
      344,  347,  345,  347,  351,  348,  346,  354,  355,  352,
      350,    0,  343,  352,  350,  349,  346,    0,  348,  351,
      349,  350,  349,  356,  351,  353,    0,  354,  355,  435,
      356,  351,    0,  352,  354,  355,  352,  350,  358,  353,
      352,  350,  349,  356,  357,  353,  351,  359,  357,  359,
      356,  351,  353,  358,  354,  355,  435,  356,  358,  360,
      352,  362,  361,  364,  362,  358,  353,  363,  357,  359,
      356,  357,  353,  365,  359,  357,  359,  361,  363,  360,

      358,  436,  361,  364,  362,  358,  360,  363,  362,  361,
      364,  362,  367,  365,  363,  357,  359,  366,    0,  437,
      365,  366,  369,  371,  361,  363,  360,  372,  436,  361,
      364,  362,  367,  368,  363,  368,  369,    0,  370,  367,
      365,  366,  369,  371,  366,  370,  437,  372,  366,  369,
      371,    0,    0,  373,  372,  368,    0,  374,  370,  367,
      368,  373,  368,  369,  374,  370,    0,  376,  366,  369,
      371,    0,  370,  373,  372,  375,  377,  374,  375,  377,
      373,    0,  368,  376,  374,  370,    0,  376,  373,  378,
        0,  374,  379,  378,  376,  382,  377,  383,  375,    0,

      373,    0,  375,  377,  374,  375,  377,  379,  381,  378,
      376,  380,  379,  384,  376,  382,  378,  383,  381,  379,
      378,  439,  382,  377,  383,  375,  380,  385,  381,  388,
      386,  380,  387,  384,  379,  381,  378,  385,  380,  379,
      384,  387,  382,  390,  383,  381,  386,  385,  439,  388,
      386,  389,  387,  380,  385,  381,  388,  386,  380,  387,
      384,  391,  441,  390,  385,  391,  389,  394,  387,  394,
      390,  389,    0,  386,  385,  395,  388,  386,  389,  387,
      393,  391,  392,  392,  393,  396,  397,  394,  391,  441,
      390,  395,  391,  389,  394,  395,  394,  401,  389,  402,

      442,  396,  395,  392,  393,  396,  397,  393,  391,  392,
      392,  393,  396,  397,  394,  400,  398,  401,  395,  402,
        0,  399,  395,  398,  401,  443,  402,  442,  396,  400,
      392,  393,  396,  397,  399,  400,  398,    0,  404,  444,
      405,  399,  400,  398,  401,  403,  402,  404,  399,  403,
      398,  405,  443,  407,    0,  408,  400,  407,  404,    0,
      405,  399,  400,  398,  403,  404,  444,  405,  399,  403,
      408,  446,  403,  406,  404,  408,  403,  407,  405,  410,
      407,  406,  408,  409,  407,  404,  409,  405,    0,  411,
      447,  403,  412,  406,  416,    0,  403,  408,  446,  410,

      406,  416,  408,  409,  407,  413,  410,  414,  406,  411,
      409,    0,  412,  409,  416,  417,  411,  447,  415,  412,
      406,  416,  414,  413,    0,  413,  410,  414,  416,    0,
      409,  419,  413,  415,  414,  417,  411,  418,  415,  412,
        0,  416,  417,  421,  448,  415,  419,  420,  418,  414,
      413,  419,  413,    0,  414,    0,  420,  418,  419,  422,
      415,    0,  417,  421,  418,  415,    0,  420,  423,    0,
      421,  448,  425,  419,  420,  418,  426,  423,  419,  422,
      426,  424,  425,  420,  418,  449,  422,  451,  423,    0,
      421,  424,  425,  424,  420,  423,  427,  428,    0,  425,

      426,  424,    0,  426,  423,  427,  422,  426,  424,  425,
      430,  429,  449,  428,  451,  423,  427,  428,  424,  425,
      424,    0,  452,  427,  428,  430,  431,  426,  424,  429,
      430,  429,  427,  453,  456,  431,  457,  430,  429,  431,
      428,  458,  459,  427,  428,  432,  431,  460,  432,  452,
      464,  465,  430,  431,  467,  469,  429,  430,  429,  470,
      453,  456,  431,  457,  471,  432,  431,  472,  458,  459,
      473,  476,  432,  431,  460,  432,  474,  464,  465,  480,
      482,  467,  469,  483,  484,  485,  470,  474,  487,  488,
      489,  471,  432,  490,  472,  491,  494,  473,  476,  495,

      496,  497,  498,  474,  499,  500,  480,  482,  502,  503,
      483,  484,  485,  504,  474,  487,  488,  489,  505,  508,
      490,  509,  491,  494,  510,  511,  495,  496,  497,  498,
      512,  499,  500,  513,  514,  502,  503,  515,  517,  519,
      504,    0,  521,  522,    0,  505,  508,  523,  509,    0,
      611,  510,  511,  525,  612,  521,  522,  512,  524,  526,
      513,  514,  521,  522,  515,  517,  519,  523,  527,  521,
      522,  524,  527,  525,  523,    0,  528,  611,  524,  526,
      525,  612,  521,  522,  530,  524,  526,  531,  533,  521,
      522,  613,  527,  529,  523,  527,  528,  530,  524,  527,

      525,  529,  531,  528,  530,  524,  526,  531,  533,    0,
      534,  530,  532,  529,  531,  533,    0,  534,  613,  527,
      529,  536,  535,  528,  530,  538,  532,    0,  529,  531,
      534,  530,  532,    0,  531,  533,  536,  534,  535,  532,
      529,  536,  535,  537,  534,  538,  540,  537,  536,  535,
      540,  541,  538,  532,  539,  542,  539,  534,  541,  532,
      543,  614,    0,  536,  615,  535,  540,  537,  536,  535,
      537,  541,  538,  540,  537,  542,  539,  540,  541,  544,
      543,  539,  542,  539,  545,  541,    0,  543,  614,  546,
      544,  615,  549,  540,  537,  545,    0,  548,  541,  544,

      547,  548,  542,  539,  545,  546,  544,  543,    0,  546,
      550,  545,  549,  551,  552,  547,  546,  544,  552,  549,
      547,  548,  545,  553,  548,  616,  544,  547,  548,  554,
      550,  545,  546,  551,  553,  555,  546,  550,  552,  549,
      551,  552,  547,  553,  555,  552,  556,  547,  548,  554,
      553,    0,  616,    0,  557,  555,  554,  550,  559,  558,
      551,  553,  555,    0,  557,  552,  556,  560,    0,  563,
      553,  555,  558,  556,  557,  561,  554,  559,  559,  558,
      560,  557,  555,    0,    0,  559,  558,  560,  561,  563,
      562,  557,  562,  556,  560,  561,  563,    0,  617,  558,

      565,  557,  561,  562,  559,  559,  558,  560,  566,  567,
      562,  564,    0,  569,  560,  561,  563,  562,  564,  562,
      565,  619,  561,  571,  568,  617,  620,  565,  566,  567,
      562,  564,  572,  569,  570,  566,  567,  562,  564,  568,
      569,  570,    0,  571,  568,  564,  572,  565,  619,  573,
      571,  568,  572,  620,  570,  566,  567,  574,  564,  572,
      569,  570,  573,  575,    0,  575,  568,  576,  570,  573,
      571,  568,  621,  572,    0,  577,  573,  574,  578,  572,
      580,  570,  623,  581,  574,  575,    0,  576,  577,  573,
      575,  578,  575,  579,  576,  577,  573,    0,  578,  621,

      580,  579,  577,  581,  574,  578,    0,  580,    0,  623,
      581,  585,  575,  579,  576,  577,    0,  582,  578,  583,
      579,  582,  577,  583,  585,  578,    0,  580,  579,  584,
      581,  585,  586,  588,  587,  588,    0,  584,  585,    0,
      579,  582,  587,  583,  582,  589,  583,  586,  582,  584,
      583,  585,  586,  590,  587,  588,  584,  592,  585,  586,
      588,  587,  588,  591,  584,  589,  594,  591,  582,  587,
      583,  595,  589,  590,  586,  593,  584,  592,    0,  586,
      590,  587,  588,  591,  592,  593,  594,  596,    0,    0,
      591,  595,  589,  594,  591,  593,  598,  597,  595,  597,

      590,  596,  593,    0,  592,  598,    0,  596,    0,  599,
      591,  600,  593,  594,  596,  600,  598,  603,  595,  597,
      604,  606,  593,  598,  597,  599,  597,  624,  596,  599,
      601,  602,  598,  602,  596,  600,  599,  603,  600,  605,
      604,  606,  600,  598,  603,  601,  597,  604,  606,  607,
      601,  602,  599,  608,  624,  605,  599,  601,  602,  605,
      602,  625,  600,  626,  603,  627,  605,  604,  606,  607,
      628,  629,  601,  608,  630,  631,  607,  601,  602,  633,
      608,  634,  605,  635,  638,  639,  605,  640,  625,  641,
      626,  646,  627,  647,  648,  651,  607,  628,  629,  652,

      608,  630,  631,  653,  654,  655,  633,  657,  634,  658,
      635,  638,  639,  659,  640,  660,  641,  661,  646,  662,
      647,  648,  651,  663,  664,  666,  652,  667,  668,  670,
      653,  654,  655,  671,  657,    0,  658,  673,  674,  676,
      659,  675,  660,  677,  661,    0,  662,  737,  678,  678,
      663,  664,  666,    0,  667,  668,  670,  673,  674,  676,
      671,  675,  675,  677,  673,  674,  676,  680,  675,  678,
      677,  679,  681,  682,  737,  678,  678,  680,    0,    0,
      679,    0,  685,  686,  673,  674,  676,  680,  675,  675,
      677,  679,  681,  682,  680,  683,  678,  687,  679,  681,

      682,  684,  685,  686,  680,  683,  689,  679,  684,  685,
      686,  690,  687,    0,  680,  683,  688,  687,  679,  681,
      682,  684,  683,    0,  687,  688,  689,    0,  684,  685,
      686,  690,  683,  689,  691,  684,  688,  693,  690,  687,
      692,    0,  683,  688,  687,    0,  694,    0,  684,  691,
      694,  693,  688,  689,  691,  692,    0,  693,  690,  696,
      692,  691,    0,  688,  693,  695,  694,  692,  697,    0,
      697,  700,  695,  694,  699,    0,  691,  694,  693,  696,
      701,  691,  692,  698,  693,  695,  696,  692,  697,  699,
        0,  700,  695,  694,  699,  697,  698,  697,  700,  695,

      701,  699,  702,  698,  703,  704,  696,  701,  706,    0,
      698,    0,  695,  705,  707,  697,  699,  702,  700,  704,
      705,  699,  702,  698,  703,  704,    0,  701,  706,  702,
      698,  703,  704,  705,  707,  706,  708,  709,  710,  712,
      705,  707,  710,    0,  702,  739,  704,  705,  713,  702,
      711,  703,  704,  711,  712,  706,  708,  709,  714,  712,
      705,  707,  710,  708,  709,  710,  712,  715,  713,  710,
      711,  718,  739,    0,    0,  713,  740,  711,  714,  716,
      711,  712,  720,  708,  709,  714,  712,  715,  717,  710,
        0,  718,  716,  741,  715,  713,  719,  711,  718,  716,

      719,  717,  720,  740,    0,  714,  716,  721,  717,  720,
      722,  721,  723,  723,  715,  717,  719,  724,  718,  716,
      741,  724,  725,  719,    0,  722,  716,  719,  717,  720,
      722,  721,    0,  723,  721,  717,  725,  722,  721,  723,
      723,  724,  725,  719,  724,  729,  726,  727,  724,  725,
      730,  728,  722,    0,    0,  728,  732,  722,  721,  726,
      723,  733,  727,  725,    0,  729,  726,  727,  724,  725,
      730,  734,  729,  726,  727,  728,  732,  730,  728,  731,
      731,  733,  728,  732,  736,  734,  726,  742,  733,  727,
      744,  734,  729,  726,  727,  735,  745,  730,  734,  735,

      731,  748,  728,  732,  736,  752,  731,  731,  733,  754,
      757,  736,  734,  760,  742,  761,  763,  744,  734,  735,
      764,  766,  735,  745,  767,  768,  735,  731,  748,  770,
      771,  736,  752,  774,  776,  777,  754,  757,  778,  783,
      760,    0,  761,  763,  784,    0,  735,  764,  766,  785,
      786,  767,  768,  787,  788,  790,  770,  771,    0,  786,
      774,  776,  777,  836,  784,  778,  783,  793,  788,  785,
      786,  784,  789,  787,  788,  790,  785,  786,    0,  789,
      787,  788,  790,  791,  794,  791,  786,  793,  792,  838,
      836,  784,  789,  796,  793,  788,  785,  786,  797,  789,

      787,  788,  790,  792,  794,  791,  789,  795,  792,  795,
      791,  794,  791,  796,  793,  792,  838,  798,  797,  789,
      796,  799,  800,  802,    0,  797,  803,  843,  845,  795,
      792,  794,  791,    0,  795,  792,  795,  798,  801,  804,
      796,  799,  800,  802,  798,  797,  803,  801,  799,  800,
      802,  805,  806,  803,  843,  845,  795,  808,  801,  804,
      809,    0,  807,  846,  798,  801,  804,    0,  799,  800,
      802,  805,  806,  803,  801,  807,  810,  808,  805,  806,
      809,  812,  807,  810,  808,  801,  804,  809,  811,  807,
      846,  813,  811,  814,  815,    0,  810,  816,  805,  806,

        0,  812,  807,  810,  808,  849,  813,  809,  812,  807,
      810,  813,  811,  814,  815,  811,  818,  816,  813,  811,
      814,  815,  819,  810,  816,  817,  820,  817,  812,    0,
      818,  822,  849,  813,    0,  852,  818,    0,  813,  811,
      814,  815,  819,  818,  816,  853,  820,  817,  821,  819,
      826,  822,  817,  820,  817,  821,  823,  818,  822,    0,
      823,  824,  852,  818,  825,  824,  827,  854,  821,  819,
      826,    0,  853,  820,  817,  821,  828,  826,  822,  825,
      823,  829,  821,  823,  825,  824,  827,  823,  824,  856,
      857,  825,  824,  827,  854,  821,  828,  826,  830,  858,

      859,  829,  860,  828,  862,  830,  825,  823,  829,  856,
      857,  825,  824,  827,  881,  864,  856,  857,  830,  858,
      859,    0,  860,  828,  862,  830,  858,  859,  829,  860,
      861,  862,  830,  863,  861,  864,  856,  857,  865,  866,
        0,  881,  864,  867,  869,  830,  858,  859,  863,  860,
      868,  862,  868,  863,  861,    0,  870,  861,  865,  866,
      863,  861,  864,  867,  869,  865,  866,  871,  872,  870,
      867,  869,  868,  873,  883,  863,  870,  868,  875,  868,
      863,  861,  874,  870,  876,  865,  866,  871,  872,    0,
      867,  869,    0,  873,  871,  872,  870,  874,  875,  868,

      873,  883,  874,  870,  876,  875,  877,  879,  878,  874,
      880,  876,  885,  887,  871,  872,  878,  888,  891,  877,
      873,  890,  893,    0,  874,  875,  877,  879,  878,  874,
      880,  876,  892,  877,  879,  878,  890,  880,  891,  885,
      887,  890,  893,  878,  888,  891,  877,  892,  890,  893,
      895,  894,  892,  877,  879,  878,  896,  880,  899,  892,
      898,  897,  901,  890,  894,  891,  904,    0,  890,  893,
      895,  894,  897,    0,  892,  905,  896,  895,  894,  892,
      898,  897,    0,  896,    0,  899,  904,  898,  897,  901,
      906,  894,  907,  904,  908,  905,  911,  895,  894,  897,

      912,    0,  905,  896,  906,    0,    0,  898,  897,    0,
      906,    0,  907,  904,  908,    0,  911,  906,    0,  907,
      912,  908,  905,  911,    0,    0,    0,  912,    0,    0,
        0,  906,    0,    0,    0,    0,    0,  906,    0,  907,
        0,  908,    0,  911,    0,    0,    0,  912,  914,    0,
        0,  914,  915,    0,  915,  915,  917,    0,  917,  917,
      918,    0,  918,  918,  919,    0,  919,  919,  920,    0,
      920,  920,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,

      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1584 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

			int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 1871 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 914 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 913 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 125:
#line 183 "flex_lexer.l"
case 126:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2600 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 914 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 914 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 913);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    hsql_set_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 213 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
