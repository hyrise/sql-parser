#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 189
#define YY_END_OF_BUFFER 190
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1350] =
    {   0,
        0,    0,  186,  186,    2,    2,  190,  188,    4,    4,
      188,  188,  174,  184,  174,  174,  181,  174,  174,  174,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  174,  186,  187,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  169,    0,    1,    0,
      176,  175,  181,    0,  171,  170,  168,  172,  183,  183,

      183,  183,  183,  183,   12,  183,  183,  183,   19,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,   71,  183,  183,   74,   83,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  101,  183,
      183,  106,  109,  110,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  146,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  173,  186,  185,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  182,    0,
        0,  175,    0,    0,  177,    5,  183,    7,  183,  183,

       10,  183,   13,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,   34,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
       48,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,   59,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,   78,  183,  183,   86,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  102,
      183,  183,  183,  107,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  132,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  147,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    0,
      179,    0,  178,  183,  183,  183,  183,  183,  183,  183,
      183,  183,   20,  183,   22,   23,   24,  183,  183,  183,
       29,  183,  183,  183,   32,   35,  183,  183,  183,  183,
      183,   41,  183,  183,  183,   46,   47,  183,  183,  183,
      183,  183,  183,  183,   56,  183,  183,  183,   61,   62,

      183,  183,   66,  183,   68,   69,  183,  183,  183,  183,
      183,  183,   82,  183,   85,   87,   88,  183,   90,  183,
      183,   93,  183,  183,  183,  183,  183,  104,  183,  183,
      183,  183,  113,  183,  183,  116,  183,  183,  183,  183,
      121,  183,  183,  183,  183,  126,  183,  183,  183,  183,
      134,  135,  183,  183,  183,  183,  183,  142,  143,  144,
      183,  149,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  159,  183,  161,  183,  163,  164,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    0,    6,    8,  183,
       11,  183,   15,  183,  183,  183,  183,  183,  183,  183,
      183,  183,   31,  183,  183,  183,  183,  183,  183,   40,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
       55,   57,  183,  183,  183,   64,  183,   70,   72,  183,
       75,   76,  183,  183,  183,  183,   89,   91,  183,   94,
       95,  183,   98,  183,  183,  183,  183,  111,  112,  183,
      183,  183,  183,  183,  120,  183,  183,  124,  183,  183,
      183,  183,  133,  183,  183,  183,  139,  183,  183,  183,
      183,  183,  152,  183,  183,  183,  156,  183,  183,  183,

      162,  165,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  183,

       14,  183,   17,  183,  183,  183,   25,   27,  183,   30,
      183,  183,  183,  183,  183,   39,  183,   43,  183,   45,
       49,   50,  183,   52,  183,  183,  183,   60,   63,   65,
       67,   73,   77,  183,  183,  183,   84,   92,   96,   99,
      183,  103,  183,  108,  183,  183,  183,  183,  183,  122,
      183,  183,  127,  129,  131,  183,  137,  183,  140,  183,
      183,  183,  183,  183,  153,  154,  155,  157,  183,  183,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    9,   16,   18,   21,  183,   26,   28,
      183,  183,  183,   37,   38,  183,  183,   51,   53,   54,
      183,   79,  183,  183,   97,  100,  183,  183,  183,  183,
      118,  119,  183,  183,  128,  130,  183,  138,  183,  183,
      183,  183,  183,  158,  160,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  183,
        0,   33,  183,   42,   44,  183,  183,   81,  105,  183,
      183,  183,  123,  125,  136,  183,  183,  183,  150,  183,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,  183,    0,  183,   58,   80,  183,  115,
      117,  141,  145,  183,  151,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    0,

        0,   36,  114,  183,    2,    2,    2,    2,    2,    2,
        0,    0,  166,  148,    2,    2,    2,    2,    0,    0,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,  167,
        2,    2,    0,    2,    0,    2,  180,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    8,    6,    9,   10,    6,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,    6,    6,   21,
       22,   23,    6,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        6,    1,    6,    6,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,    6,   77,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    5,    5,    6,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    8,    8,    8,    8,    9,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    9,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[1363] =
    {   0,
        0,    0,  695,  692,   77,    0,  696, 9003,  153,  155,
      664,    0, 9003, 9003,  150,  149,  161,  150,  648,  635,
      190,  146,  155,  209,  140,  254,  150,  198,  246,  138,
      152,  196,  207,  246,  283,  297,    0,  302,  342,  385,
      294,  255,  313,  153,  572,    0,  637,    0,  195,  240,
      604,  620,    0,    0,  220,  371,  444,  271,  591,  587,
      499,  576,  630,  682,  730,  782,  377,  464,  825,  499,
      514,  562,  563,  876,  925,  974,  564,  608, 1020, 1072,
      613,  652,  681,  694,  528,  297, 9003,  582, 9003,  543,
      155,  160,  346,  295, 9003, 9003, 9003, 9003,    0,  211,

      210,  307,  398,  228,  309,  441,  307,  314,    0,  369,
      342,  745,  382,  334,  443,  786,  425,  350,  368,  373,
      421,  442,  831,  448,  452,  451,  489,  452,  497,  495,
      500,  503,  506,  500,    0,  534,  549,  733,  566,  574,
      559,  587,  630,  737,  579,  605,  608,  622,  651,  669,
      684,  687,    0,  691,  682,  700,  703,  740,  790,  729,
      814,  743,  823,  767,  869,  828,  784,  795,  823,  847,
      850,  856,  854,  869,  867,  884,  891,  883,  879,  883,
      918,  885,  872,  901, 9003,    0, 9003,    0,  396,    0,
      545,    0,  536, 1137, 1182, 1228, 1276,    0,    0,    0,

        0,  929,  975, 1059, 1020, 1273, 1064, 1272, 1319, 1269,
      978, 1060, 1142, 1316, 1359, 1354, 1359, 1388, 1440, 1189,
     1143, 1413, 1368, 1463, 1439, 1512, 1484, 1510, 1511, 1548,
     1560, 1559, 1565, 1599, 1597, 1601, 1641, 1615, 1654, 1659,
     1708, 1659, 1694, 1699, 1728, 1776, 1828, 1726, 1754, 1820,
     1829, 1869, 1872, 1893, 1916, 1885, 1929, 1952, 1781, 1964,
     1996, 1794, 1971, 2001, 2027, 2031, 2045, 2094, 2084, 2085,
     2114, 2129, 2148, 2153, 2174, 2187, 2213, 2225, 2251, 2298,
     2212, 2266, 2270, 2317, 2336, 2351, 2376,    0, 9003,  522,
      419,  930,  421, 1155, 1253,    0,  932,    0,  936,  930,

        0,  944,    0,  934,  942,  954,  976,  976,  979, 1133,
      976,  976,  986, 1023, 1061, 1088, 1074, 1076, 1136, 1139,
     1147, 1190, 1199, 1231, 1199, 1199, 1185, 1208, 1195, 1207,
        0, 1251, 1248, 1252, 1270, 1282, 1277, 1281, 1300, 1306,
     1297, 1316, 1336, 1342, 1359, 1364, 1381, 1385, 1397, 1405,
     1418, 1418, 1429, 1434, 1442, 1457, 1436, 1469,    0, 1472,
     1501, 1502, 1508, 1530, 1506, 1511, 1529, 1532, 1536,    0,
     1575, 1579, 1577, 1587, 1618, 1625, 1627, 1728, 1635, 1781,
     1645, 1660, 1658, 1687, 1705, 1734, 1771, 1769, 1789, 1783,
     1822,    0, 1817, 1814, 1822, 1833, 1830, 1831, 1843, 1844,

     1843, 1859, 1893,    0, 1888, 1933, 1912, 1944, 1935, 1950,
     1967, 1966, 1989, 1981, 2013, 2057, 2027, 2018,    0,  512,
     2444, 2454, 2502, 2472, 2482, 2375, 2495, 2496, 2497, 2273,
     2324, 2522, 2540, 2551, 2560, 2565, 2589, 2594, 2608, 2657,
     2619, 2621, 2643, 2671, 2669, 2697, 2696, 2712, 2723, 2742,
     2748, 2759, 2777, 2795, 2803, 2821, 2829, 2857, 2859, 2883,
     2885, 2911, 2898, 2939, 2937, 2943, 2978, 2981, 3001, 3003,
     3022, 3035, 3038, 3046, 3081, 3082, 3090, 3129, 3130, 3138,
     3164, 3179, 3182, 3194, 3208, 3220, 3232, 3247, 3251, 3275,
     3276, 3295, 3320, 3372, 3298, 3334, 3369, 3333, 3394, 3397,

     3422, 3429, 3443, 3457, 3468, 3482, 3497, 3549, 3497, 3599,
     3532, 3575, 3516, 3627, 3586, 3635, 3648, 3671, 3683, 3688,
     3691, 3696, 3732, 3737, 3740, 3739, 3747, 3783, 3787, 3796,
     3829, 3832, 3849, 3852, 3878, 3881, 3901, 3906, 3903, 3951,
     3922, 3950, 3978, 3992, 4006, 4022, 4036, 4060,  471, 4100,
     4124, 4134, 4144, 2031, 2038, 2040, 2049, 2077, 2089, 2099,
     2091, 2120,    0, 2142,    0,    0, 2147, 2151, 2158, 2154,
        0, 2157, 2160, 2178, 2177,    0, 2196, 2196, 2210, 2213,
     2245, 2229, 2248, 2247, 2251,    0,    0, 2285, 2288, 2285,
     2297, 2319, 2324, 2341,    0, 2335, 2352, 2378,    0,    0,

     2385, 2373,    0, 2378,    0, 2376, 2391, 2379, 2375, 2407,
     2413, 2506,    0, 2441,    0,    0,    0, 2434,    0, 2443,
     2451,    0, 2452, 2496, 2495, 2490, 2508,    0, 2515, 2521,
     2537, 2539,    0, 2549, 2563,    0, 2573, 2610, 2615, 2618,
        0, 2652, 2652, 2670, 2698,    0, 2701, 2702, 2716, 2739,
        0,    0, 2738, 2747, 2760, 2765, 2761,    0,    0, 2761,
     2771,    0, 2795, 2793, 2802, 2800, 2822, 2804, 2833, 2847,
     2848,    0, 2837,    0, 2855,    0, 2850,  468, 4154, 4164,
     4174, 4184, 4170, 4173, 4181, 4195, 4217, 4222, 4235, 4260,
     4261, 4273, 4295, 4303, 4317, 4329, 4343, 4355, 4381, 4369,

     4383, 4390, 4407, 4433, 4419, 4433, 4454, 4477, 4490, 4520,
     4528, 4546, 4445, 4569, 4570, 4588, 4612, 4621, 4635, 4665,
     4668, 4689, 4690, 4716, 4718, 4742, 4744, 4766, 4768, 4794,
     4796, 4808, 4823, 4837, 4851, 4862, 4890, 4872, 4915, 4926,
     4971, 4929, 4945, 4980, 4989, 5013, 5022, 5031, 5062, 5070,
     5075, 5084, 5109, 5123, 5120, 5148, 5163, 5172, 5198, 5201,
     5213, 5227, 5251, 5242, 5277, 5280, 5295, 5325, 5330, 5333,
     5355, 5374, 5389, 5403, 5408, 5433, 5410, 5440, 5457, 5462,
     5475, 5464, 5487, 5511, 5513, 5516, 5525, 5551, 5550, 5561,
     5580, 5594, 5608, 5622, 5636, 5650, 5674, 5678, 5573, 5701,

     5713, 5725, 5726, 5739, 5751, 5760,  467,    0,    0, 2844,
        0, 2872,    0, 2873, 2886, 2913, 2914, 2928, 2918, 2918,
     2931, 2947,    0, 2946, 2963, 2959, 2979, 2974, 2993,    0,
     2994, 2991, 3001, 3035, 3039, 3044, 3052, 3061, 3079, 3087,
        0,    0, 3090, 3099, 3112, 3118, 3142,    0,    0, 3138,
        0,    0, 3139, 3163, 3260, 3166,    0,    0, 3189,    0,
        0, 3196, 3193, 3221, 3207, 3234, 3231,    0,    0, 3312,
     3299, 3329, 3318, 3337,    0, 3356, 3355,    0, 3370, 3388,
     3389, 3387,    0, 3404, 3414, 3424, 3413, 3420, 3431, 3462,
     3471, 3472,    0, 3487, 3501, 3520,    0, 3507, 3540, 3558,

        0,    0,  466, 5776, 5790, 5804, 5820, 5833, 5847, 5855,
     5873, 5885, 5897, 5921, 5926, 5940, 5953, 5965, 5979, 5984,
     5997, 6009, 6027, 6034, 6035, 6057, 6059, 6083, 6088, 6081,
     6111, 6135, 6136, 6140, 6133, 6187, 6184, 6189, 6219, 6228,
     6226, 6235, 6271, 6270, 6279, 6312, 6315, 6321, 6356, 6364,
     6369, 6380, 6410, 6411, 6424, 6452, 6455, 6463, 6468, 6499,
     6510, 6523, 6551, 6554, 6565, 6571, 6605, 6613, 6641, 6649,
     6663, 6675, 6687, 6699, 6717, 6729, 6743, 6757, 6731, 6755,
     6796, 6787, 6794, 6812, 6830, 6854, 6860, 6873, 6884, 6911,
     6913, 6937, 6945, 6947, 6966, 6990, 6987, 6996,  461, 3556,

        0, 3549,    0, 3551, 3561, 3550, 3557,    0, 3568,    0,
     3575, 3591, 3605, 3605, 3610,    0, 3632,    0, 3633,    0,
        0,    0, 3643,    0, 3638, 3633, 3655,    0,    0,    0,
        0,    0,    0, 3659, 3677, 3701,    0,    0, 3688,    0,
     3742,    0, 3790,    0, 3776, 3791, 3795, 3800, 3784,    0,
     3810, 3822, 3826, 3836,    0, 3846,    0, 3850,    0, 3868,
     3897, 3900, 3920, 3947,    0,    0,    0,    0, 3939, 3947,
      460, 7025, 7034, 7032, 7041, 7050, 7043, 7079, 7086, 7094,
     7095, 7130, 7136, 7139, 7181, 7177, 7190, 7221, 7232, 7235,
     7263, 7276, 7277, 7307, 7315, 7320, 7320, 7356, 7364, 7369,

     7383, 7405, 7408, 7413, 7427, 7449, 7457, 7475, 7483, 7497,
     7502, 7518, 7526, 7532, 7562, 7556, 7580, 7600, 7605, 7613,
     7635, 7649, 7663, 7677, 7684, 7692, 7698, 7722, 7728, 7736,
     7752, 7771, 7795, 7794, 7818, 7839, 7836, 7842, 7860, 7883,
     7886, 7902,  464,    0,    0,    0,    0, 3967,    0,    0,
      432, 3975, 3981,    0,    0, 3980, 3974,    0,    0,    0,
     3981,    0, 3997, 3993,    0,    0, 3992, 4030, 4024, 4035,
        0,    0, 4034, 4045,    0,    0, 4038,    0, 4041, 4067,
     4178, 4196, 4197,    0,    0,  463, 7916, 7930, 7944, 7958,
     7779, 7969, 7983, 8007, 7998, 8032, 8033, 8046, 8047, 8061,

     8085, 8086, 8087, 8112, 8121, 8140, 8154, 8163, 8182, 8198,
     8183, 8215, 8217, 8236, 8240, 8264, 8278, 8282, 8306, 8320,
     8324, 8350, 8364, 8373, 8375, 8393, 8417, 8425,  458, 4185,
     4272,    0, 4218,    0,    0, 4241, 4234,    0,    0, 4238,
     4244, 4257,    0,    0,    0, 4255, 4273, 4283,    0, 4290,
      454, 8447, 4527, 8439, 8465, 8473, 8491, 8513, 8499, 8525,
     8527, 8553, 8562, 8568, 8592, 8598, 8606, 8631, 8645, 8650,
     8653, 8675,  418,  471, 4287, 4309,    0,    0, 4305,    0,
        0,    0,    0, 4321,    0,  382, 8714, 4325, 8699, 8711,
     8713, 8718, 8748, 8756, 8759, 8762, 8806, 8807,  375, 4574,

     4323,    0,    0, 4336,  332, 4576, 4339, 8809, 8821, 8848,
      327, 4365, 9003,    0,  324, 4399,    0, 8852,  325, 4392,
      313, 4438,  308, 4438,  292, 4451,  283, 4477,  267, 4479,
      258, 4478,  255, 4485,  255, 4501,  251, 4504,  237, 9003,
      229,    0,  189,  184,  173,  171, 9003,    0, 9003, 8926,
     8935, 8939, 8942, 8951, 8960, 8969, 8978, 8981, 8984, 8989,
     8992, 8995
    } ;

static const flex_int16_t yy_def[1363] =
    {   0,
     1349,    1, 1350, 1350, 1349,    5, 1349, 1349, 1349, 1349,
     1349, 1351, 1349, 1349, 1349, 1349, 1352, 1349, 1349, 1349,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1349, 1354, 1349, 1355, 1355, 1349,
     1355, 1356, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1357, 1357,   62,   62,   62,   63,   65,   62,   65,   62,
       62,   62,   62,   63,   63,   63,   62,   62,   62,   62,
       65,   62,   62,   62, 1355, 1349, 1349, 1351, 1349, 1349,
     1358, 1359, 1352, 1360, 1349, 1349, 1349, 1349, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1349, 1354, 1349, 1355, 1355, 1355,
     1356, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,

     1355,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       62,   62,   65,   65,   65,   62,   62,   62,   65,   65,
       65,   62,   65,   65,   65,   62,   65,   65,   62,   65,
       62,   65,   62,   62,   65,   65,   65,   65,   62,   62,
       65,   65,   62,   62,   62,   62,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   62,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   62,   62,   62,   65,   62,   62,   62,   63,   62,
       62,   62,   65,   62,   62,   62,   62, 1355, 1349, 1349,
     1361, 1359, 1362, 1349, 1349, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1355, 1355,
     1355, 1355, 1355, 1355, 1355,   62,   62,   62,   62,   65,
       65,   65,   65,   62,   62,   62,   62,   65,   65,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   62,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   65,   65,   65,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   62,   62,   65,   65,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   65, 1349, 1349,
     1349, 1349, 1349, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1355, 1355, 1355,
     1355, 1355,   65,   65,   62,   62,   62,   65,   62,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   65,   62,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   62,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   65,   65,   65,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   62,
       62,   62,   65,   65,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   62,   62,
       62,   65,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,

       62,   62,   62,   62,   62,   65, 1349, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1355,   65,   65,   65,   65,   62,   62,   62,
       62,   62,   62,   62,   65,   65,   62,   62,   62,   65,
       62,   62,   62,   65,   62,   62,   62,   62,   65,   62,
       62,   62,   62,   65,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   62,
       65,   65,   65,   65,   65,   65,   65,   62,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   62,
       62,   62,   62,   65,   65,   65,   65,   65, 1349, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1355,   62,   62,   65,   65,   65,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   65,   65,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65, 1349, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1355,   65,   65,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   62,   62, 1349, 1353,
     1349, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1355,   62, 1355,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   62, 1349, 1353, 1349, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1355,   62, 1355,   62,   62,
       62,   65,   65,   65,   65,   65,   62,   62, 1349, 1349,

     1349, 1353, 1353, 1353, 1355, 1355, 1355,   62,   62,   65,
     1349, 1349, 1349, 1353, 1355, 1355, 1355,   65, 1349, 1349,
     1355, 1355, 1349, 1349, 1355, 1355, 1349, 1349, 1355, 1355,
     1349, 1349, 1355, 1355, 1349, 1349, 1355, 1355, 1349, 1349,
     1355, 1355, 1349, 1355, 1349, 1355, 1349, 1355,    0, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349
    } ;

static const flex_int16_t yy_nxt[9081] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   13,   15,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   53,   55,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   90,
       92,   95,   96,  106,  120,  140,  121,  107,  110,  141,
      184,  122,  291,  108,  130,  111,  123,  293,   94, 1348,
      131, 1347,  112,  109, 1346,  113,  189,   86,  114, 1345,

      106,  120,  140,  121,  107,  110,  141,  184,  122,  291,
      108,  130,  111,  123,  293,   94,  100,  131,  101,  112,
      109,  132,  113,  142,  102,  114,  103,  143,  192,  133,
      104,  105,  115,  144,  145,  134,  116,  296,  146,  193,
      117,   86,   86,  100,  147,  101,  118, 1344,  132,  119,
      142,  102,  297,  103,  143, 1343,  133,  104,  105,  115,
      144,  145,  134,  116,  296,  146, 1341,  117,  302,  148,
     1339,  147, 1337,  118,  135, 1335,  119,  124,  180,  297,
      136,  137,  138,  149, 1333,  125,  181,  139,  126,  150,
      151,  127,  198,  199,  128,  302,  148,  129,   86,   86,

     1331,  135,  294,  294,  124,  180, 1329,  136,  137,  138,
      149,  152,  125,  181,  139,  126,  150,  151,  127,  153,
      157,  128, 1327,  154,  129,  160,  155,  156, 1325,  161,
      177,  158,  178,  162,  303,  179,  307,  159,  152,  163,
     1323,  298, 1321,  182,  183, 1319,  153,  157, 1315,  299,
      154,  308,  160,  155,  156,   92,  161,  177,  158,  178,
      162,  303,  179,  307,  159,  311,  163,  164,  298,  165,
      182,  183,  166,   94,  318,  167,  299,  168,  308,  169,
      170,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194, 1311,  311,  328,  164, 1305,  165,  189,   86,  166,

       94,  318,  167,  309,  168,  329,  169,  170,  171,  316,
      310,  233,  172,  202,  330,  173,  174,  234,  202,  317,
      328,  300,  175,  202,  301,  176,  550,  550,  552,  552,
      309, 1299,  329, 1231, 1231,  171,  316,  310,  233,  172,
      202,  330,  173,  174,  234,  202,  317,  331,  300,  175,
      202,  301,  176,  195,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1286,  326,  327,  332, 1273,  304,
      305,  197, 1300, 1300,  331, 1251, 1229, 1186, 1143, 1071,
      999,  903,  338,  306,  807,  319,  339,  235,  340,  343,
      320,  202,  326,  327,  332,  236,  304,  305,  197,  188,

      188,  237,  188,  188,  188,  188,  188,  188,  188,  338,
      306,  202,  319,  339,  235,  340,  343,  320,  202,  188,
      188,  188,  236,  341,  678,  203,  202,  204,  237,  342,
      202,  344,  345,  205,  549,  206,  243,  346,  202,  207,
      208,  244,  349,  350,  347,  202,  202,  348,  420,  419,
      341,  202,  203,  202,  204,  290,  342,  202,  344,  345,
      205,  202,  206,  243,  346,  351,  207,  208,  244,  349,
      350,  347,  202,  202,  348,  188,  188,  188,  202,  188,
      188,  188,  188,  188,  188,  188,  289,  352,  202,  245,
      248,  202,  351,  246,  249,  202,  188,  188,  188,  247,

      250,  202,  357,  209,  288,  358,  359,  210,  201,  202,
      202,  202,  200,  211,  352,  360,  245,  248,  202,  366,
      246,  249,  202,  212,  188,  190,  247,  250,  202,  357,
      209,  263,  358,  359,  210,  264,  202,  202,  202,  265,
      211,  367,  360,  187,  368,  266,  366,  202,  185,  280,
      212,  281,  188,  213,  282,  202,   98,  202,  263,  202,
      214,  202,  264,  361,  369,  362,  265,  215,  367,   97,
      216,  368,  266,  217,  202,  283,  280,  202,  281,  202,
      213,  282,  202,  284,  202,   87,  202,  214,  202,  202,
      361,  369,  362,  370,  215, 1349,  371,  216,   47,  202,

      217,   47,  283,  372,  202,  218,  202,  373,  202,  219,
      284,  285,  286,  220, 1349,  374,  202,  375,  202,  221,
      370,  287,  222,  371,  376,  202,  202,  377,  202,  202,
      372,  202,  218, 1349,  373,  202,  219, 1349,  285,  286,
      220,  202,  374,  378,  375,  202,  221, 1349,  287,  222,
     1349,  376,  202, 1349,  377,  202,  202,  202,  202,  353,
      363,  202,  364,  379,  223,  382,  224,  202,  202,  354,
      378,  225,  386,  365,  355,  356,  226,  202, 1349,  312,
      313,  314, 1349,  315,  202, 1349,  353,  363,  202,  364,
      379,  223,  382,  224,  202, 1349,  354,  389,  225,  386,

      365,  355,  356,  226,  202,  227,  312,  313,  314,  321,
      315,  322,  202,  228,  323,  395,  229,  380,  396,  230,
      324,  381,  231, 1349,  389,  232, 1349,  325, 1349, 1349,
     1349, 1349,  227, 1349, 1349, 1349,  321,  383,  322,  202,
      228,  323,  395,  229,  380,  396,  230,  324,  381,  231,
      384,  393,  232,  238,  325,  385,  333,  387,  334,  239,
      240,  241,  335,  397,  383,  394,  242, 1349,  388,  336,
      398,  202, 1349,  337,  399, 1349, 1349,  384,  393, 1349,
      238,  402,  385,  333,  387,  334,  239,  240,  241,  335,
      397,  400,  394,  242,  390,  388,  336,  398,  202,  251,

      337,  399,  401,  391,  403,  404,  202,  405,  402,  410,
      411,  392,  416,  252,  417,  407,  202,  412,  400,  253,
      254,  390,  408,  413,  418,  409,  251,  406, 1349,  401,
      391,  403,  404,  202,  405, 1349,  410,  411,  392,  416,
      252,  417,  407,  202,  412,  414,  253,  254,  202,  408,
      413,  418,  409,  255,  406,  202,  202,  293,  415,  554,
      202,  256,  202,  555,  556,  257,  202,  557,  258,  259,
     1349,  558,  414,  559, 1349,  202,  202, 1349, 1349, 1349,
      255, 1349,  202,  202,  293,  415,  554,  202,  256,  202,
      555,  556,  257,  202,  557,  258,  259,  260,  558,  560,

      559,  426,  202,  202,  202,  202,  202,  561,  261,  202,
      562,  202,  202,  563,  262,  438,  567,  202, 1349,  568,
     1349,  569,  202, 1349,  260,  202,  560, 1349,  426,  202,
     1349,  202,  202,  202,  561,  261,  202,  562,  202,  202,
      563,  262,  438,  567,  202,  267,  568,  268,  569,  202,
      269,  202,  202,  270,  428,  271,  202,  272,  273, 1349,
     1349,  202,  429, 1349, 1349,  570,  202,  202, 1349, 1349,
     1349, 1349,  267, 1349,  268, 1349, 1349,  269,  202, 1349,
      270,  428,  271,  202,  272,  273,  202,  202,  202,  429,
      202,  202,  570,  202,  202,  274,  202,  202,  202,  275,

      202,  427,  276,  277,  432,  202,  202,  202,  571,  278,
      202,  572,  279,  202,  202,  573,  574,  202,  202,  202,
     1349, 1349,  274,  202,  202,  202,  275,  202,  427,  276,
      277,  432,  202,  202,  202,  571,  278,  202,  572,  279,
     1349, 1349,  573,  574, 1349, 1349,  202,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194, 1349,  564, 1349,
      565, 1349, 1349,  575,  421,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  566,  439,  202,  202,  202,
      576,  577, 1349,  440,  202,  564,  458,  565,  202,  202,
      575,  421,  422,  422,  422,  422,  422,  422,  422,  422,

      422,  422,  566,  439,  202,  202,  202,  576,  577,  423,
      440,  202, 1349,  458, 1349,  202,  202, 1349, 1349, 1349,
     1349,  578,  579,  202,  582,  202,  583,  584, 1349,  456,
      457, 1349,  585,  586,  587,  202,  423,  195,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  578,  579,
      202,  582,  202,  583,  584,  197,  456,  457,  580,  585,
      586,  587,  202,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  581,  588,  589, 1349,  590, 1349, 1349,
     1349, 1349,  197,  424,  424,  580,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  430,  433,  437,  431,

      581,  588,  589,  202,  590,  202,  202,  202,  202,  202,
      202,  591, 1349,  202,  202,  202,  592,  593,  202,  202,
     1349, 1349,  594,  430,  433,  437,  431,  595, 1349,  596,
      202,  597,  202,  202,  202,  202,  202,  202,  591,  441,
      202,  202,  202,  592,  593,  202,  202,  434,  435,  594,
      202,  598,  202,  202,  595,  202,  596,  202,  597, 1349,
      202,  436,  202, 1349, 1349,  202,  441, 1349, 1349, 1349,
     1349,  599, 1349, 1349,  434,  435,  600,  202,  598,  202,
      202,  446,  202,  601,  202,  202,  202,  202,  436,  202,
      202,  447,  202,  442,  443,  444,  202,  445,  599,  448,

      202,  202,  202,  600,  202,  202,  202,  602,  446,  460,
      601,  603,  202,  202,  202,  202,  604,  202,  447,  202,
      442,  443,  444,  202,  445,  202,  448,  202,  202,  202,
      449,  202,  202,  202,  602,  450,  460, 1349,  603,  605,
      202,  202,  202,  604,  202,  606,  202, 1349, 1349, 1349,
      459,  607,  202, 1349, 1349,  608,  609,  449, 1349, 1349,
      202,  610,  450,  451,  462,  452,  605,  202,  453,  611,
     1349,  202,  606,  202,  454,  202,  202,  459,  607,  614,
      202,  455,  608,  609,  612,  202,  202,  202,  610,  461,
      451,  462,  452, 1349,  613,  453,  611,  202, 1349,  202,

      202,  454,  202,  202,  202,  615,  614,  202,  455,  202,
     1349,  612,  202,  202,  616, 1349,  461, 1349,  468, 1349,
      202,  613, 1349, 1349,  202,  202,  202, 1349,  617, 1349,
      202,  202,  615,  618,  619,  622,  202,  463,  202,  464,
      623,  616,  202,  465,  469,  468,  202,  202,  470,  202,
      466,  202,  202,  620,  467,  617,  202,  202,  202,  202,
      618,  619,  622,  621,  463,  202,  464,  623, 1349,  202,
      465,  469,  624,  202,  625,  470,  202,  466,  202,  626,
      620,  467,  471,  202,  202,  202,  202,  202,  472,  202,
      621,  202,  202,  474,  202,  202,  202,  473,  627,  624,

      202,  625,  475, 1349, 1349,  202,  626,  202, 1349,  471,
     1349,  202,  202,  628,  202,  472,  202,  629,  202,  202,
      474,  202,  202,  202,  473,  627,  202,  202,  630,  475,
      202,  202,  202,  202,  202,  202,  476,  479,  477,  202,
      628,  478,  202,  202,  629,  631,  202,  202, 1349,  202,
     1349,  202,  632,  202, 1349,  630,  202,  202,  202, 1349,
      202,  202,  202,  476,  479,  477, 1349,  633,  478,  202,
      202,  636,  631,  202,  202,  202,  202,  202,  202,  632,
      639,  202,  202,  202,  480,  481,  202,  202,  202,  640,
      202,  202,  641,  202,  633,  487,  202,  482,  636, 1349,

      202,  202,  202, 1349,  202,  202,  202,  639,  202,  202,
      642,  480,  481,  202,  202, 1349,  640,  202,  202,  641,
      202,  202,  487,  202,  482,  488,  202,  202,  202, 1349,
      202,  202,  202,  202,  483, 1349,  202,  642, 1349, 1349,
     1349,  202,  202, 1349,  484, 1349,  489,  643,  202,  485,
      486,  634,  488,  202,  202,  202,  490,  202,  202,  202,
      202,  483,  202,  202,  644,  202,  496,  202,  202,  202,
      635,  484,  202,  489,  643,  202,  485,  486,  634, 1349,
     1349,  202,  202,  490, 1349, 1349,  202,  202,  202,  202,
      497,  644,  202,  496,  202,  202, 1349,  635, 1349,  202,

      202, 1349,  202,  202, 1349,  645,  637,  202,  507,  491,
      646,  492,  202,  202, 1349,  202,  647,  497,  202,  638,
      648,  510,  202,  202, 1349,  511, 1349,  202,  202, 1349,
      202,  202,  645,  637,  202,  507,  491,  646,  492,  202,
      202,  202, 1349,  647, 1349,  202,  638,  648,  510,  649,
      202,  493,  511,  494,  202,  202,  498,  650,  202,  651,
      652,  202,  202,  202,  495,  202,  202,  653,  202,  202,
      202,  499,  654,  655,  202,  202,  649,  656,  493, 1349,
      494,  202,  657,  498,  650,  658,  651,  652,  202,  202,
      202,  495,  202,  202,  653,  659,  202,  202,  499,  654,

      655,  202,  202,  202,  656,  202,  502, 1349,  202,  657,
      202,  500,  658,  202,  501,  202,  503, 1349,  202,  202,
      660,  202,  659, 1349,  661, 1349,  202,  202, 1349,  202,
      202,  202,  202,  502,  202,  202, 1349,  202,  500,  202,
      202,  501,  202,  503,  504,  202,  202,  660,  202,  664,
      202,  661,  202,  202,  202,  505,  202,  202,  202, 1349,
      662,  202,  202,  202, 1349,  202,  202, 1349, 1349,  663,
      202,  504,  667,  668, 1349,  202,  664,  202, 1349,  202,
     1349,  665,  505,  666,  202, 1349,  202,  662,  202,  202,
      202,  202,  202,  202,  506,  202,  663,  202,  202,  667,

      668,  202,  202,  669,  508,  202, 1349,  512,  665,  670,
      666,  202,  202,  202,  671,  202, 1349,  202,  202,  509,
      202,  506,  202,  202,  513,  202,  672,  202,  202, 1349,
      669,  508,  202,  202,  512,  202,  670,  514,  202,  202,
     1349,  671,  515,  202,  202, 1349,  509,  202, 1349, 1349,
      202,  513, 1349,  672,  202,  673,  516,  676,  677, 1349,
      202,  202,  202,  202,  514,  517, 1349,  202,  202,  515,
      202,  808,  202,  202,  202,  519,  518,  202,  809,  202,
     1349,  202,  673,  516,  676,  677,  202,  810,  202, 1349,
      202,  202,  517,  674,  202,  202,  811,  675,  808,  202,

      202, 1349,  519,  518,  202,  809,  202,  523,  202, 1349,
     1349,  202,  202,  202,  810,  202,  525,  812,  202,  520,
      674,  524,  202,  811,  675,  813,  814,  815,  521, 1349,
      202,  202,  202, 1349,  523,  202,  522,  526,  202,  202,
      202,  202,  202,  525,  812,  202,  520,  816,  524,  202,
     1349,  202,  813,  814,  815,  521,  202,  202,  202,  202,
      202,  202,  202,  522,  526,  817,  202,  202,  202,  527,
      818,  528,  202, 1349,  816,  202,  202,  529,  202,  202,
      202, 1349, 1349,  202,  202,  202,  819,  202,  202,  820,
      202, 1349,  817,  202,  821,  202,  527,  818,  528,  822,

      202,  823,  202,  202,  529,  824,  202,  202,  202,  530,
      202,  202,  202,  819,  532,  202,  820,  202,  202,  825,
      531,  821,  202, 1349,  202, 1349,  822,  202,  823, 1349,
      826,  827,  824, 1349,  202,  202,  530,  202,  540,  202,
      202,  532,  202,  202,  202,  202,  825,  531,  533,  202,
      202,  202,  202,  828, 1349,  829,  202,  826,  827,  202,
      202,  202,  202,  534, 1349,  540,  202,  202,  830,  831,
      202,  202,  202,  832,  535,  533,  202,  202,  833,  202,
      828,  202,  829,  202, 1349,  834,  202,  202,  202,  202,
      534,  202, 1349,  202,  536,  830,  831,  541, 1349,  202,

      832,  535, 1349,  202,  542,  833,  202,  685,  202,  202,
      543,  202,  834,  202,  202,  202,  202, 1349,  202,  202,
      202,  536,  537,  835,  541,  202,  836, 1349,  837,  538,
      202,  542,  539,  202,  685,  202,  202,  543,  202,  838,
      202,  202,  839,  202,  544,  202,  202,  840,  202,  537,
      835, 1349,  202,  836,  202,  837,  538,  545,  202,  539,
      202, 1349,  202,  546,  202,  202,  838,  202,  841,  839,
      202,  544,  202,  202,  840,  202, 1349,  842,  202, 1349,
     1349,  202,  202,  202,  545,  202, 1349,  202,  202,  843,
      546,  202,  202,  547,  202,  841, 1349,  202,  202,  548,

      202,  844,  202,  202,  842,  202,  202,  202,  845,  202,
      202,  846,  202,  202,  847,  202,  843,  848,  849,  850,
      547,  851,  202,  202, 1349,  202,  548, 1349,  844,  202,
      202, 1349, 1349,  202,  202,  845, 1349, 1349,  846,  202,
      202,  847, 1349, 1349,  848,  849,  850,  852,  851,  202,
      202,  679,  679,  853,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  852,  856,  857,  858,  859,  860,
      853,  423,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  856,  857,  858,  859,  860, 1349,  423,  681,
      681, 1349,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  683,  202,  684,  863,  202,  202,  202, 1349,
      864, 1349,  202,  202,  202,  854, 1349,  861,  862,  865,
      866, 1349,  202,  202,  202,  686,  855, 1349,  867,  683,
      202,  684,  863,  202,  202,  202,  202,  864,  202,  202,
      202,  202,  854,  202,  861,  862,  865,  866,  202,  202,
      202,  202,  686,  855,  202,  867,  202,  868,  202,  869,
     1349,  202,  202,  202,  870,  202,  202,  202,  687, 1349,
      202,  688,  202, 1349,  871,  202,  202,  202,  202, 1349,

      872,  202,  202,  202,  868,  202,  869,  202,  202,  202,
      689,  870,  202,  202,  202,  687,  202, 1349,  688,  202,
      690,  871, 1349,  202,  202,  202,  202,  872,  691,  202,
      202, 1349, 1349,  873,  202,  202,  202,  689,  874,  202,
      202, 1349,  692,  202,  202,  875,  202,  690,  202,  202,
      202, 1349,  202,  202,  202,  691,  202,  202,  202,  696,
      873, 1349,  202,  202,  697,  874,  202,  202,  202,  692,
      202,  202,  875,  202,  202,  202,  202,  202,  698,  202,
      202,  202,  693,  202,  694,  202,  696,  876,  202, 1349,
      202,  697,  877,  202,  202,  202,  202,  202,  202,  695,

      202,  202,  202, 1349,  202,  698,  202,  202,  202,  693,
     1349,  694,  878,  699,  876,  202,  700,  202,  202,  877,
      701,  202,  879,  202,  202,  202,  695,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  880,  702,  881,  878,
      699,  882,  202,  700,  202,  202,  202,  701,  202,  879,
      704,  202,  703,  202,  202,  202, 1349,  202,  202,  202,
      202,  202, 1349,  880,  702,  881,  883, 1349,  882,  202,
      202,  202,  884,  202,  885,  202,  202,  704,  202,  703,
      202,  202,  706,  705,  202,  202,  202,  202,  202,  202,
      707,  886,  887,  883,  202, 1349,  202,  202,  888,  884,

      708,  885,  889,  202,  202,  202,  202, 1349,  202,  706,
      705,  202,  890,  202,  202,  202,  202,  707,  886,  887,
      891,  202,  709,  202,  202,  888,  202,  708,  711,  889,
      202,  202,  202,  202,  202,  202,  892,  710,  893,  890,
      202,  202,  202,  894, 1349,  895,  896,  891,  712,  709,
      202,  202,  202,  202, 1349,  711,  202,  202,  202,  202,
      202,  202,  897,  892,  710,  893,  202,  202,  202,  202,
      894,  713,  895,  896,  898,  712,  202,  202,  899,  202,
      900,  714,  901,  202,  202,  202,  202,  202,  202,  897,
      202,  902, 1000,  202,  202,  202,  202,  715,  713, 1001,

     1002,  898, 1349,  202,  202,  899,  202,  900,  714,  901,
      716,  202,  202,  202,  202,  202,  202,  202,  902, 1000,
      202,  202,  202,  202,  715,  718, 1001, 1002, 1003,  202,
      202,  202,  202,  202,  717,  202, 1004,  716,  202,  202,
     1005,  202,  202,  202, 1349,  202, 1349,  202,  202,  202,
     1349, 1349,  718, 1006, 1007, 1003,  202,  202,  202,  202,
     1008,  717,  202, 1004,  719,  202,  202, 1005, 1009,  202,
      202,  202,  202,  202, 1010,  202,  202,  721,  720,  202,
     1006, 1007, 1011,  202,  202,  202,  202, 1008, 1349,  202,
     1349,  719, 1349,  202, 1012, 1009, 1013,  202,  202, 1349,

      202, 1010, 1014,  202,  721,  720,  202, 1349, 1015, 1011,
      202,  202,  202,  202,  202,  202,  202,  202,  722,  202,
     1016, 1012,  723, 1013,  202, 1017,  725,  202,  724, 1014,
      202, 1349,  202, 1018,  202, 1015, 1349, 1019,  202,  202,
      202,  202,  202, 1349,  202,  722,  202, 1016,  202,  723,
      202,  202, 1017,  725,  202,  724,  726,  202,  202,  202,
     1018,  202, 1020,  202, 1019,  202, 1021,  202,  202,  202,
      727,  202,  202,  728,  202,  202,  202,  202, 1349,  202,
      729,  202,  202,  726,  202,  202, 1022,  202, 1349, 1020,
      202, 1349,  202, 1021, 1023,  202,  202,  727,  202,  202,

      728,  202, 1024,  202, 1349,  730,  202,  729,  202,  202,
     1025,  202, 1026, 1022,  202,  202,  202,  202,  202,  202,
      732, 1023,  202,  202,  202,  731,  202,  202,  202, 1024,
     1349,  202,  730, 1349, 1349, 1027,  202, 1025, 1349, 1026,
     1349, 1028,  202,  202,  202,  202, 1029,  732, 1349,  202,
      202,  202,  731,  202,  202,  202,  202,  202,  202, 1030,
      733,  202, 1027,  202, 1349,  202,  202,  202, 1028,  202,
     1349, 1031,  734, 1029, 1349,  202,  202,  202,  735, 1349,
     1032, 1033, 1349,  202,  202,  202, 1030,  733,  202, 1349,
     1034,  202,  202,  202,  202,  202,  202,  736, 1031,  734,

     1037,  202,  202,  202,  202,  735,  202, 1032, 1033,  738,
      202,  202,  202,  202, 1349, 1038,  737, 1034,  202,  202,
     1349,  739,  202, 1039,  736,  202,  202, 1037,  202,  202,
     1349,  202, 1349,  202, 1040,  740,  738,  202,  202,  202,
      202,  202, 1038,  737, 1041,  202,  202,  741,  739, 1042,
     1039,  202,  202,  202, 1349,  202,  202,  742,  202,  202,
     1349, 1040,  740,  202, 1043, 1349,  202,  202,  202,  202,
     1349, 1041,  202, 1044,  741,  743, 1042, 1349,  202,  202,
     1349,  202,  202,  744,  742,  202,  202,  202,  202, 1349,
      202, 1043,  202,  202,  202, 1349,  202,  202, 1349, 1349,

     1044, 1035,  743,  746, 1036, 1349,  202,  202,  202,  202,
      744,  202,  202,  202,  202,  202,  202,  745, 1349,  202,
      202,  202,  202,  202,  202,  202,  747,  751, 1035,  202,
      746, 1036,  202, 1349,  202,  202,  202, 1349,  202, 1045,
      202, 1046,  202,  202,  745,  202,  748,  202,  202,  202,
      202,  202,  202,  747,  751, 1047,  202,  202, 1048,  202,
      202,  202,  202,  752,  202,  202, 1045,  202, 1046,  202,
      202,  202,  202,  748,  202,  754, 1349, 1049,  202, 1349,
      202,  202, 1047, 1050,  202, 1048, 1051,  202,  202, 1349,
      752,  202,  202, 1052,  202,  749,  202,  202,  202,  202,

      202, 1349,  754,  202, 1049,  750,  202,  202,  202,  202,
     1050, 1053,  753, 1051, 1349, 1054,  202, 1349, 1349,  202,
     1052,  202,  749,  202,  202,  202,  202,  202,  202, 1055,
      202,  202,  750,  202,  202, 1056,  202,  755, 1053,  753,
     1057,  202, 1054,  202,  202,  756,  202, 1058,  202,  202,
     1349,  202,  202,  202, 1059,  202, 1055, 1349,  202,  202,
     1060,  202, 1056,  757,  755,  202, 1349, 1057,  202,  202,
      202,  202,  756, 1061, 1058,  202,  202,  202, 1349,  202,
      202, 1059, 1349,  758,  202, 1062,  202, 1060, 1349,  202,
      757,  202,  202,  202, 1063,  760,  202,  202,  759,  202,

     1061, 1349,  202,  202,  202,  202,  202, 1349, 1064,  761,
      758,  202, 1062,  202, 1065,  202,  202, 1349,  202,  202,
      202, 1063,  760, 1349,  202,  759,  202, 1066,  202,  202,
      202,  202,  202,  765,  202, 1064,  761,  762,  202, 1349,
      202, 1065,  202,  202,  202, 1349,  202, 1067, 1068, 1349,
      770,  202,  202, 1349, 1066,  202,  202,  202,  202, 1349,
      765,  202,  202, 1069,  762,  202,  202,  768,  202, 1349,
      202,  202,  763,  202, 1067, 1068,  202,  770,  202,  202,
      202, 1070, 1349, 1144,  202, 1145,  202, 1146, 1147,  202,
     1069,  764, 1148,  202,  768,  202,  202, 1349, 1149,  763,

      202, 1349, 1150,  202,  769,  202, 1349,  202, 1070,  202,
     1144,  202, 1145,  202, 1146, 1147,  202, 1151,  764, 1148,
      202,  202,  202,  202,  766, 1149, 1152,  202,  772, 1150,
     1153,  769,  202,  202, 1349,  202,  202,  767,  202, 1154,
      202, 1349, 1349,  202, 1151,  202, 1349,  202,  202,  202,
      771,  766, 1155, 1152,  202,  772, 1156, 1153, 1157,  202,
      202,  202,  202,  202,  767,  773, 1154,  202,  202,  202,
     1158,  202,  202,  202, 1159, 1160,  202,  771, 1349, 1155,
     1349,  202,  774, 1156,  202, 1157, 1161, 1349,  202,  202,
      202, 1349,  773, 1349,  202,  202,  202, 1158,  202, 1162,

      202, 1159, 1160,  202, 1163,  202, 1349,  202,  202,  774,
      776,  202,  775, 1161,  202,  202,  202,  202,  778,  202,
      202,  202,  202,  202, 1164,  777, 1162,  202,  202, 1165,
      202, 1163,  202,  202,  202,  202, 1349,  776,  202,  775,
     1349,  202,  202,  202,  202,  778,  202,  202, 1349,  202,
      202, 1164,  777, 1349,  202,  202, 1165,  202, 1349,  202,
      202, 1349,  202,  202,  202,  202, 1349,  202,  202,  202,
      202,  202,  779,  782,  202,  202, 1166,  202,  781,  202,
      202,  202,  780,  202,  202,  202,  202,  202,  202,  783,
      202,  202, 1349,  202,  202,  202,  202, 1349,  202,  779,

      782,  202,  202, 1166,  202,  781,  202,  202,  202,  780,
      202,  202,  202, 1167,  202,  202,  783,  202, 1168,  202,
      202,  785, 1169,  202,  202,  784, 1170, 1171,  202,  202,
      202, 1172,  202,  202,  786, 1173, 1349,  202, 1349, 1349,
     1167, 1349,  202, 1349,  202, 1168,  202, 1174,  785, 1169,
      202,  202,  784, 1170, 1171,  202,  202,  202, 1172,  202,
      202,  786, 1173,  202,  202,  202,  202, 1175,  788,  202,
      202,  787, 1349,  202, 1174,  202,  789, 1176,  202,  202,
      202, 1349, 1177,  202, 1178, 1349,  202, 1349, 1349,  202,
      202, 1179,  202,  202, 1175,  788,  202,  202,  787,  202,

      202, 1349,  202,  789, 1176,  202,  202,  202,  791, 1177,
      202, 1178,  202,  202,  790,  202,  202,  792, 1179,  202,
     1180, 1349,  202,  202,  202, 1181,  202,  202,  202, 1349,
      202, 1349,  202,  202,  202,  791, 1349,  202,  793,  202,
      796,  790,  202,  794,  792,  795,  202, 1180,  202,  202,
      202,  202, 1181,  202,  202,  202,  202,  202,  798,  202,
      202,  202, 1182,  202,  202,  793, 1349,  796,  202, 1349,
      794, 1349,  795, 1183,  797,  202, 1349,  202,  202, 1184,
      202, 1185,  202,  202,  202,  798,  202, 1349,  202, 1182,
      202,  202, 1349,  799, 1230,  202,  202, 1349,  202, 1349,

     1183,  797, 1232,  800, 1233,  202, 1184, 1234, 1185,  202,
     1349,  202,  202,  202,  202,  202, 1235, 1236,  202,  202,
      799, 1230, 1237,  202,  202,  202,  202, 1238,  202, 1232,
      800, 1233, 1239,  202, 1234, 1349, 1349,  801,  202,  202,
      202,  202,  202, 1235, 1236, 1349,  202,  202,  802, 1237,
     1349,  202,  202,  202, 1238,  202,  202, 1240,  803, 1239,
      202, 1241,  804,  202,  801,  202,  805,  202,  202,  202,
      202, 1242,  202, 1349,  202,  802, 1243,  202, 1244,  202,
     1245, 1246,  202,  202, 1240,  803, 1349, 1349, 1241,  804,
      202, 1349, 1349,  805,  202,  202,  202,  202, 1242,  202,

      806,  202, 1247, 1243,  202, 1244,  202, 1245, 1246,  202,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
     1349,  202, 1349,  202, 1349, 1349, 1349,  806,  202, 1247,
     1349, 1349, 1349,  202,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  202, 1349,  202,  202,  202,  202,
      904,  202,  202,  905,  202, 1349,  202, 1349,  202,  202,
     1248, 1349,  202, 1249, 1250, 1274,  202, 1349,  906, 1349,
     1349,  202,  202,  202,  202,  202,  202,  904,  202,  202,
      905,  202,  907,  202,  202,  202,  202, 1248,  202,  202,
     1249, 1250, 1274,  202,  202,  906,  202,  908,  909,  202,
     1276, 1349,  910,  202,  202, 1349,  202, 1349,  202,  907,
     1277,  202,  202, 1231, 1231,  202, 1278, 1349, 1279, 1349,
     1280,  202,  202,  202,  908,  909, 1281, 1276,  912,  910,
      202,  202,  202,  202,  202,  202,  911, 1277,  202,  202,

      202,  202, 1282, 1278,  202, 1279,  202, 1280,  202,  202,
      202, 1283, 1275, 1281, 1284,  912, 1285, 1349,  913,  202,
      202,  202,  202,  911, 1301,  202,  202,  202,  202, 1282,
      202,  202,  202,  202,  202,  202, 1302,  202, 1283, 1275,
      202, 1284,  202, 1285,  202,  913, 1303,  202,  202,  202,
      202, 1301,  914,  202,  202, 1349,  202,  202, 1304,  202,
      202,  202, 1307, 1302,  202, 1349,  202,  202, 1313,  202,
      202,  202, 1314, 1303,  202,  202,  202,  202,  915,  914,
      202,  202,  202,  202, 1317, 1304,  916,  202, 1320, 1307,
      202,  202,  202,  202, 1349, 1313,  202,  202, 1349, 1314,

      202,  202,  202,  202, 1349,  915,  202,  202,  202,  202,
      202, 1317,  202,  916,  202, 1320,  202,  202,  202,  202,
      202,  917, 1322,  202,  202,  918,  202,  202,  202,  202,
      202,  919, 1324,  202,  920,  202,  202,  202,  202,  202,
     1349,  202, 1349,  202,  202,  202,  202,  202,  917, 1322,
      202,  202,  918,  202,  202,  202,  202,  202,  919, 1324,
      202,  920, 1349,  202,  202,  202,  202,  922, 1349,  202,
      202,  202,  202,  202,  202,  921,  929,  202, 1326,  202,
      202,  202,  202,  202, 1349, 1328, 1349,  202,  202,  923,
      202,  202,  202,  202,  922,  202,  202,  202, 1330,  202,

      202,  202,  921,  929, 1349, 1326,  202,  202, 1332,  202,
     1334,  202, 1328,  202, 1336,  202,  923,  202,  202,  202,
      924, 1338,  202,  202,  202, 1330,  202,  202, 1253, 1231,
     1340,  202,  925, 1342, 1349, 1332,  202, 1334,  202, 1349,
      202, 1336, 1349,  926, 1349,  202, 1349,  924, 1338, 1349,
      202,  202, 1349,  202,  202, 1349,  202, 1340,  202,  925,
     1342,  202,  202,  202,  202, 1349,  202, 1288,  927,  202,
      926,  928, 1349, 1349,  202, 1300, 1300, 1306, 1300, 1349,
      202,  202,  202,  202, 1349, 1349, 1349,  202,  202,  202,
     1349,  202,  202,  202, 1288,  927,  202, 1349,  928, 1349,

     1349,  202, 1349,  930,  202,  202,  202,  202, 1349,  202,
      202,  202, 1349, 1349,  202,  202,  202, 1349, 1312,  202,
     1316, 1349,  202, 1349,  202, 1349, 1349, 1349, 1349,  202,
      930,  202,  202,  202,  202, 1349, 1349,  202,  202, 1349,
     1349, 1349,  202,  202, 1349, 1312,  202, 1316,  202,  202,
      931,  202, 1349,  202, 1349,  202,  202,  202,  202,  932,
     1349,  202,  202, 1349, 1349, 1349, 1349,  202, 1349,  202,
     1349,  202, 1349,  202, 1349,  202,  202,  931,  933, 1349,
      202,  202,  202, 1349,  202,  202,  932, 1349, 1349,  202,
     1349,  935, 1349, 1349,  202, 1349,  202, 1349,  202,  202,

     1349,  202,  202,  202,  202,  933,  202,  934,  202,  202,
     1349,  202,  936, 1349,  202, 1349, 1349,  937,  935, 1349,
     1349,  202, 1349,  202, 1349,  202,  202,  202,  202,  202,
      202,  202, 1349,  202,  934,  202,  202,  202,  202,  936,
     1349,  202, 1349,  202,  937,  202, 1349,  202,  202,  202,
      202, 1349,  202,  202,  202,  202, 1349,  202, 1349, 1349,
      938, 1349,  202,  202,  202,  202, 1349,  940, 1349,  202,
      202,  202,  202,  202,  202,  202,  202, 1349, 1349,  939,
      202,  202,  202, 1349, 1349, 1349, 1349,  938, 1349,  202,
      202,  202,  202,  202,  940,  202,  202,  202,  202,  202,

      202, 1349,  202,  202, 1349,  202,  939, 1349,  202, 1349,
     1349, 1349, 1349,  202, 1349,  202,  202,  941,  202, 1349,
      202,  202,  202,  202,  202,  202,  202,  202, 1349, 1349,
      202,  202,  202,  202,  942,  202, 1349, 1349, 1349,  202,
      202,  202,  202,  202,  941,  202, 1349, 1349,  202, 1349,
      202, 1349,  202, 1349,  202,  202, 1349,  202,  202,  943,
      202,  942,  202, 1349,  202, 1349,  202, 1349,  202,  202,
      202,  202,  202,  202, 1349, 1349, 1349, 1349,  202, 1349,
     1349, 1349,  202,  202,  202,  202,  943,  202, 1349,  945,
     1349,  202,  944,  202, 1349, 1349,  202,  202,  202,  202,

      202, 1349, 1349, 1349, 1349,  202,  202, 1349,  202,  202,
      202, 1349,  202,  202,  202, 1349,  945,  202,  947,  944,
      202,  202, 1349, 1349,  202, 1349,  202,  202, 1349, 1349,
      946, 1349, 1349,  202, 1349,  202,  202,  202, 1349, 1349,
      202, 1349, 1349, 1349,  202,  947, 1349, 1349,  202,  202,
     1349,  202, 1349, 1349,  202,  948,  202,  946, 1349, 1349,
      202,  202,  202,  202,  202,  202,  949,  202, 1349, 1349,
      202, 1349,  202, 1349, 1349,  202,  202, 1349,  202,  952,
     1349,  202,  948,  202, 1349, 1349,  202,  202,  202,  202,
      202,  202,  202,  949,  202, 1349, 1349,  202, 1349,  202,

      950, 1349,  202, 1349, 1349,  202,  952,  202,  202, 1349,
     1349,  951,  202,  202,  202, 1349,  202,  202,  202, 1349,
     1349,  202, 1349,  202, 1349,  202,  202,  950, 1349, 1349,
      202, 1349,  202, 1349,  202,  202, 1349, 1349,  951,  202,
     1349,  202, 1349,  202,  202, 1349, 1349,  202,  202,  202,
      202, 1349,  202,  202,  202, 1349,  202,  202,  202,  202,
     1349, 1349,  202,  202,  953,  202, 1349,  202,  202, 1349,
     1349, 1349,  202, 1349,  202, 1349,  202,  202, 1349, 1349,
     1349,  202, 1349,  202, 1349,  202,  202, 1349, 1349, 1349,
      202,  953,  202, 1349,  202,  202,  954,  955,  202,  202,

     1349,  202,  202,  202,  202, 1349,  202,  202,  202, 1349,
     1349,  956,  202, 1349, 1349,  202, 1349,  202, 1349, 1349,
     1349,  202,  202,  954,  955,  202, 1349, 1349,  202,  202,
      202,  202, 1349,  202,  202,  202, 1349, 1349,  956,  202,
     1349, 1349,  202,  202,  202,  202, 1349, 1349,  202,  202,
      957,  958, 1349,  959,  202,  202,  202,  202,  202,  202,
      960,  202, 1349, 1349,  202, 1349,  202, 1349, 1349,  202,
      202, 1349,  202, 1349, 1349,  202, 1349,  957,  958,  961,
      959,  202,  202,  202,  202,  202,  202,  960,  202, 1349,
      202,  202, 1349,  202,  202,  202,  202,  962, 1349,  202,

      202, 1349,  202,  202, 1349, 1349,  961, 1349, 1349,  202,
      202, 1349,  202, 1349, 1349, 1349, 1349,  202, 1349,  202,
     1349,  202,  202, 1349,  962,  963,  202,  202,  202,  202,
      202, 1349,  202, 1349, 1349,  202,  202,  202,  202, 1349,
      202,  964, 1349, 1349,  202,  202,  202, 1349,  202, 1349,
      202, 1349,  963,  965,  202,  202,  202, 1349,  202,  202,
      202, 1349,  202, 1349,  202,  202, 1349,  202,  964,  202,
     1349,  202,  202,  967,  202,  202, 1349,  202,  202,  202,
      965,  202,  202, 1349, 1349,  202,  966,  202,  202,  202,
     1349,  202, 1349, 1349, 1349, 1349,  202, 1349,  202, 1349,

      967,  202, 1349, 1349,  202,  202,  202,  968,  202,  202,
     1349,  202, 1349,  966,  202,  202,  202,  202,  969, 1349,
     1349, 1349,  202, 1349,  202,  202,  202,  202, 1349, 1349,
     1349,  202,  202, 1349,  968,  202, 1349, 1349,  202, 1349,
     1349,  202,  202, 1349,  202,  969, 1349, 1349,  970,  202,
     1349,  202,  202,  202,  202, 1349,  202,  971, 1349,  202,
      202,  202,  202, 1349,  202, 1349, 1349,  202, 1349,  202,
      202, 1349,  202, 1349, 1349,  970, 1349,  202, 1349,  202,
      202, 1349,  202,  202,  971, 1349,  202,  202,  202,  202,
      972,  202,  202, 1349,  202, 1349, 1349,  202, 1349,  202,

     1349,  202,  202, 1349,  202,  202, 1349,  202, 1349,  202,
     1349,  202, 1349,  202,  973, 1349,  202,  972, 1349,  202,
      202,  202, 1349, 1349, 1349, 1349,  202,  975,  202,  202,
      202,  974,  202, 1349,  202,  202,  202, 1349,  202,  202,
      202,  973, 1349,  202,  202,  202,  977,  202,  202, 1349,
      202,  202, 1349,  202,  975,  202,  202,  202,  974, 1349,
      202,  202,  202,  202,  202,  978,  202,  202,  976, 1349,
      202,  202,  202,  977,  202, 1349,  202,  202,  202, 1349,
      202,  202,  202,  202,  979, 1349,  202,  202,  202,  202,
     1349,  202,  978,  202,  202,  976, 1349,  202,  980,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  979,  202,  202,  981,  202,  202, 1349,  202, 1349,
      202,  202,  202, 1349,  202,  980,  202,  202, 1349,  202,
     1349,  202,  202,  202,  202, 1349,  202,  202,  202,  202,
      983,  981,  982,  202,  202,  202, 1349,  202,  202,  202,
      202,  202,  202,  984, 1349, 1349,  202, 1349,  202, 1349,
      202,  202,  202,  202, 1349,  202, 1349,  983, 1349,  982,
      202,  202,  202, 1349,  202,  202, 1349,  202,  202,  202,
      984, 1349,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  985, 1349, 1349, 1349,  202,  202,  202,  202,  202,

      994, 1349,  986, 1349,  202,  202, 1349,  202, 1349,  202,
      202,  202, 1349,  202,  202,  202,  202, 1349,  985,  987,
      202,  202,  202,  202,  202,  202,  202,  994,  202,  986,
      202,  202, 1349, 1349,  202,  202, 1349,  202, 1349, 1349,
      202,  202,  202,  202,  202, 1349,  987,  202,  202,  202,
     1349,  988, 1349,  202,  202,  202,  202,  202,  989, 1349,
     1349, 1349,  202,  202, 1349, 1349, 1349,  202,  202,  202,
      202,  202,  202,  991, 1349, 1349,  202,  202,  988,  990,
     1349,  202,  202,  202,  202,  989,  202, 1349, 1349, 1349,
      202,  202, 1349, 1349, 1349,  202,  202,  202, 1349,  202,

      991, 1349, 1349, 1349,  202, 1349,  990,  993,  202,  202,
      202,  202,  202,  202,  202,  202,  992, 1349,  202,  202,
      202, 1349, 1349,  202,  202, 1349, 1349, 1349,  202, 1349,
     1349,  995,  202, 1349,  993,  202, 1349,  202,  202,  202,
      202,  202,  202,  992,  202, 1349,  202,  202,  202, 1349,
      202,  202,  202,  202, 1349,  202,  202,  202,  995,  202,
      202, 1349,  202,  202, 1349,  202,  997,  202,  996, 1349,
      202,  202,  202,  202, 1349,  202,  202,  202,  202,  202,
      202, 1349,  202,  202,  202, 1349,  202,  202,  202,  202,
      202, 1349, 1349,  997,  202,  996,  202,  202,  202,  202,

      202,  998, 1349,  202, 1349,  202,  202, 1349, 1349,  202,
      202, 1349,  202,  202, 1349,  202, 1349,  202, 1349, 1349,
     1349,  202,  202,  202,  202,  202,  202, 1349,  998, 1349,
     1349,  202, 1349,  202, 1349, 1349,  202,  202,  202,  202,
      202, 1349, 1349, 1349,  202,  202, 1349, 1349, 1349,  202,
      202,  202, 1072,  202,  202, 1349,  202, 1349,  202, 1349,
     1073,  202, 1349,  202,  202,  202,  202,  202, 1349, 1349,
      202, 1349,  202, 1349,  202, 1349, 1349,  202,  202, 1072,
      202,  202, 1074,  202,  202, 1349,  202, 1073,  202, 1349,
     1349,  202,  202,  202,  202, 1349, 1349,  202, 1349, 1349,

      202,  202,  202, 1349,  202,  202, 1349,  202, 1076, 1074,
      202,  202,  202,  202, 1349, 1075,  202, 1349, 1349,  202,
      202,  202,  202, 1077,  202, 1349, 1349,  202,  202,  202,
     1349,  202,  202, 1349,  202, 1076, 1349,  202, 1349,  202,
     1349, 1349, 1075,  202,  202, 1349, 1078,  202,  202,  202,
     1077,  202,  202, 1349, 1349,  202, 1349, 1349,  202,  202,
      202,  202, 1079, 1349, 1349, 1349, 1349,  202,  202, 1349,
     1349,  202,  202, 1078,  202,  202,  202, 1349, 1349,  202,
      202,  202, 1080, 1349,  202,  202,  202,  202, 1349, 1079,
     1081, 1349, 1082, 1349,  202,  202,  202, 1349, 1349,  202,

      202,  202,  202,  202, 1349, 1349,  202,  202,  202, 1080,
      202,  202,  202,  202, 1349, 1349,  202, 1081,  202, 1082,
     1083, 1349, 1349,  202,  202,  202,  202,  202, 1084,  202,
      202, 1349, 1349,  202,  202, 1349,  202,  202, 1349,  202,
      202, 1349, 1349,  202,  202,  202, 1085, 1083, 1349, 1349,
     1086,  202,  202,  202,  202, 1084,  202,  202,  202, 1349,
     1349,  202, 1088,  202,  202, 1349,  202,  202, 1087, 1349,
      202,  202,  202, 1085,  202,  202, 1349, 1086, 1349, 1349,
      202,  202,  202,  202,  202,  202,  202, 1349,  202, 1088,
     1089,  202, 1349,  202,  202, 1087,  202,  202, 1349,  202,

     1349,  202,  202, 1349,  202, 1349,  202,  202, 1092,  202,
      202,  202,  202,  202,  202,  202, 1349, 1089,  202, 1349,
      202,  202,  202,  202, 1091, 1090, 1349, 1349,  202,  202,
      202,  202, 1349,  202,  202, 1092, 1349,  202, 1093,  202,
     1349,  202,  202, 1349, 1349,  202, 1349,  202,  202,  202,
     1349, 1091, 1090, 1349, 1349,  202,  202,  202,  202, 1349,
      202,  202,  202,  202, 1097, 1093,  202,  202, 1349,  202,
      202, 1349,  202,  202,  202,  202,  202, 1094, 1095, 1349,
      202, 1096,  202,  202, 1349,  202,  202,  202, 1349,  202,
      202, 1097, 1349,  202,  202, 1349, 1349,  202, 1349,  202,

      202,  202, 1349,  202, 1094, 1095, 1349,  202, 1096,  202,
      202,  202, 1098,  202,  202,  202,  202, 1349,  202, 1349,
      202,  202, 1349, 1349,  202, 1349,  202, 1349, 1349, 1349,
     1349,  202, 1349, 1349,  202, 1349,  202, 1349,  202, 1098,
     1349,  202,  202,  202, 1349,  202,  202,  202,  202, 1349,
      202,  202, 1349,  202, 1349,  202,  202, 1349,  202,  202,
     1101,  202,  202,  202, 1099,  202,  202,  202, 1349,  202,
     1100,  202,  202,  202, 1349,  202, 1102,  202, 1349, 1349,
     1349,  202,  202,  202, 1349, 1349,  202, 1101, 1349,  202,
     1349, 1099,  202,  202,  202, 1349,  202, 1100,  202,  202,

     1103, 1349,  202, 1102,  202,  202,  202,  202,  202, 1349,
     1349,  202,  202,  202, 1349,  202,  202,  202, 1349, 1349,
      202, 1349, 1349, 1349, 1349,  202, 1349, 1103, 1349, 1349,
     1349,  202,  202,  202,  202, 1349, 1349, 1349,  202,  202,
      202, 1349,  202,  202,  202, 1349,  202,  202,  202,  202,
     1349,  202,  202,  202, 1104,  202,  202,  202,  202, 1349,
     1349,  202,  202, 1349, 1349, 1349, 1349,  202, 1349, 1349,
     1349, 1349, 1349,  202, 1349,  202,  202, 1349,  202, 1349,
      202, 1104,  202,  202,  202,  202, 1349, 1349,  202,  202,
      202, 1106,  202, 1349,  202,  202, 1349,  202, 1105, 1349,

     1349,  202,  202,  202, 1349,  202, 1349, 1349, 1349, 1349,
     1107,  202, 1349, 1108, 1109,  202,  202,  202, 1106,  202,
     1349,  202,  202, 1349,  202, 1105,  202, 1349,  202,  202,
      202, 1349,  202, 1349, 1349, 1349, 1349, 1107,  202, 1349,
     1108, 1109,  202,  202,  202,  202,  202,  202,  202, 1349,
     1110,  202,  202,  202, 1349, 1349,  202,  202,  202, 1349,
      202, 1349, 1349, 1349, 1349,  202, 1349, 1349, 1349, 1349,
      202,  202,  202,  202,  202, 1349, 1349, 1110,  202,  202,
     1349, 1349, 1349,  202,  202,  202,  202,  202,  202,  202,
     1111,  202,  202,  202,  202, 1349,  202,  202,  202, 1349,

      202,  202,  202, 1349,  202, 1349, 1349, 1349, 1349, 1112,
      202, 1349, 1349,  202,  202,  202,  202, 1111,  202, 1349,
      202,  202, 1113,  202, 1349,  202, 1349,  202,  202,  202,
     1349,  202, 1349,  202, 1349,  202, 1112,  202, 1349, 1349,
      202,  202, 1349, 1349,  202,  202,  202, 1349, 1349, 1113,
     1349,  202, 1114, 1115, 1349, 1349,  202,  202, 1349,  202,
      202, 1349,  202, 1349,  202, 1349, 1349,  202, 1349,  202,
     1349,  202,  202,  202, 1349, 1349, 1349, 1349,  202, 1114,
     1115, 1349, 1349,  202,  202,  202,  202,  202,  202, 1349,
      202,  202,  202, 1116, 1349,  202,  202,  202, 1117,  202,

      202,  202,  202, 1349, 1349, 1349,  202, 1349,  202, 1349,
     1349,  202,  202, 1349,  202,  202, 1349,  202,  202,  202,
     1116, 1349,  202, 1349,  202, 1117,  202,  202,  202,  202,
     1349, 1349,  202,  202, 1349,  202,  202, 1349,  202, 1119,
      202, 1349,  202, 1349,  202,  202, 1349, 1118, 1349, 1349,
      202, 1349,  202, 1349, 1349, 1349, 1349, 1349, 1349,  202,
      202, 1349, 1349,  202, 1349, 1349, 1119,  202,  202,  202,
     1349,  202,  202, 1349, 1118, 1349,  202,  202,  202,  202,
      202, 1120, 1349, 1349, 1349, 1349,  202,  202,  202, 1121,
      202, 1349, 1349, 1349,  202,  202,  202, 1349, 1349,  202,

      202, 1349, 1122,  202, 1349,  202,  202,  202, 1120, 1349,
      202, 1349,  202,  202,  202,  202, 1121,  202, 1123, 1349,
     1349,  202,  202,  202,  202, 1349,  202,  202, 1349, 1122,
      202, 1349, 1349,  202,  202, 1349,  202,  202, 1349,  202,
     1124,  202, 1349, 1349,  202, 1123,  202, 1349,  202,  202,
     1349,  202, 1125,  202,  202, 1349,  202,  202,  202, 1349,
      202,  202,  202,  202,  202, 1349,  202, 1124,  202, 1126,
      202,  202, 1349,  202,  202,  202,  202, 1349,  202, 1125,
      202,  202,  202,  202,  202,  202, 1128,  202,  202,  202,
      202,  202,  202,  202,  202,  202, 1126,  202, 1349, 1127,

     1349,  202,  202,  202,  202,  202, 1349,  202, 1349,  202,
     1130,  202, 1349, 1128,  202,  202, 1349,  202,  202,  202,
     1349,  202, 1129,  202,  202, 1349, 1127,  202,  202,  202,
      202,  202, 1349,  202,  202, 1131, 1349, 1130, 1349, 1349,
      202,  202, 1349,  202, 1349,  202,  202, 1349,  202, 1129,
      202,  202, 1132,  202,  202,  202, 1349,  202,  202, 1349,
      202,  202, 1131, 1349,  202, 1349,  202,  202, 1349, 1349,
      202,  202, 1133,  202, 1349,  202,  202, 1134, 1349, 1132,
      202, 1349, 1349, 1135, 1349,  202, 1349, 1349,  202, 1349,
      202,  202, 1349,  202,  202,  202,  202, 1349,  202, 1133,

      202,  202, 1349,  202, 1134, 1349,  202,  202, 1349, 1136,
     1135, 1349, 1349, 1349,  202,  202, 1349,  202,  202,  202,
      202,  202,  202,  202, 1349,  202, 1349,  202,  202, 1349,
      202, 1349, 1349,  202,  202, 1349, 1136, 1349, 1137, 1138,
      202,  202,  202, 1349,  202,  202,  202,  202,  202, 1349,
      202, 1349,  202, 1349, 1349, 1349, 1349,  202,  202, 1349,
      202, 1349, 1349, 1349, 1139, 1137, 1138,  202,  202,  202,
     1349,  202,  202, 1349,  202,  202,  202,  202, 1349, 1349,
     1349,  202,  202,  202,  202,  202, 1349,  202, 1140, 1141,
     1349, 1139,  202,  202, 1349,  202, 1349, 1349, 1349,  202,

      202,  202,  202,  202, 1349, 1349, 1349,  202,  202,  202,
      202,  202,  202, 1142, 1349, 1140, 1141, 1349, 1349,  202,
      202,  202, 1349,  202,  202, 1349,  202,  202,  202,  202,
      202,  202,  202,  202,  202, 1349,  202,  202, 1349,  202,
     1142, 1349,  202, 1349, 1349, 1349, 1349, 1349,  202, 1349,
      202,  202, 1187,  202, 1349,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202, 1349, 1188,  202,
     1190,  202,  202,  202,  202,  202, 1349,  202,  202, 1187,
      202,  202,  202,  202,  202, 1349, 1189,  202,  202,  202,
      202,  202,  202,  202, 1349, 1188,  202, 1190,  202,  202,

      202,  202,  202, 1349,  202,  202,  202,  202,  202,  202,
      202,  202, 1349, 1189,  202, 1349,  202,  202,  202, 1349,
      202, 1191,  202,  202, 1349, 1349,  202, 1192,  202, 1193,
      202,  202,  202,  202, 1349,  202,  202,  202, 1349, 1349,
      202,  202, 1349,  202, 1349, 1349, 1349,  202, 1191,  202,
     1349, 1349, 1349,  202, 1192,  202, 1193,  202,  202,  202,
     1349, 1349,  202,  202,  202, 1349,  202,  202,  202, 1349,
      202,  202,  202,  202, 1195,  202,  202,  202, 1194, 1349,
      202, 1349,  202, 1349, 1349,  202, 1349, 1349, 1349, 1349,
     1349,  202, 1349,  202, 1349, 1349, 1349,  202,  202,  202,

      202, 1195,  202,  202,  202, 1194, 1196,  202, 1349,  202,
     1349, 1197,  202,  202, 1349,  202, 1349,  202,  202, 1349,
     1349, 1349,  202,  202,  202, 1349,  202,  202, 1349, 1349,
     1349,  202, 1198, 1196, 1349, 1349,  202, 1349, 1197, 1349,
      202, 1349,  202, 1349,  202,  202, 1349, 1349, 1349,  202,
      202,  202, 1349,  202,  202,  202, 1199,  202,  202, 1198,
     1349, 1349,  202,  202, 1349, 1349,  202,  202,  202,  202,
     1349,  202, 1349,  202, 1349, 1349,  202, 1349,  202, 1349,
     1349,  202,  202, 1199,  202, 1349, 1349, 1349, 1200,  202,
     1349, 1349, 1349,  202,  202,  202,  202,  202,  202,  202,

      202, 1349, 1349,  202,  202,  202, 1349, 1349,  202,  202,
      202,  202,  202,  202, 1349, 1200, 1349,  202,  202, 1349,
     1349, 1349,  202,  202,  202, 1349,  202, 1349, 1349, 1349,
     1349,  202, 1349, 1349, 1349, 1349,  202,  202,  202,  202,
      202,  202, 1201,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202, 1349, 1202,  202, 1349, 1349,
     1349,  202,  202, 1349, 1349, 1349,  202,  202,  202, 1201,
      202, 1349, 1349,  202,  202,  202, 1349, 1349,  202,  202,
      202,  202, 1349, 1202,  202, 1349, 1349, 1349,  202,  202,
      202,  202,  202,  202,  202, 1204,  202,  202, 1203, 1349,

      202,  202,  202, 1349, 1349, 1349,  202, 1349, 1349, 1349,
      202,  202, 1349, 1349,  202, 1349,  202,  202,  202,  202,
      202, 1349, 1204,  202,  202, 1203, 1349,  202,  202,  202,
      202, 1349,  202,  202, 1349,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202, 1349,  202, 1349, 1349,
      202, 1349,  202, 1349,  202,  202, 1349,  202,  202,  202,
      202, 1349,  202,  202,  202, 1349,  202,  202, 1349,  202,
     1349,  202,  202, 1349,  202, 1349,  202,  202, 1349,  202,
      202,  202,  202, 1349, 1206,  202,  202,  202,  202, 1205,
     1349,  202, 1349, 1349,  202, 1349,  202, 1349, 1207, 1349,

     1349,  202,  202,  202,  202, 1349,  202,  202, 1349, 1349,
      202, 1206,  202,  202,  202,  202, 1205, 1349, 1349, 1349,
      202,  202,  202,  202,  202, 1207, 1349, 1349,  202,  202,
      202,  202, 1349,  202,  202, 1349,  202,  202,  202,  202,
     1349,  202, 1349, 1208,  202, 1349, 1349,  202,  202,  202,
     1349,  202,  202, 1349,  202,  202, 1349,  202, 1349,  202,
     1209,  202,  202,  202,  202,  202,  202,  202,  202, 1349,
     1208,  202,  202,  202, 1349,  202, 1349, 1349,  202,  202,
     1349,  202, 1349, 1349, 1349, 1210,  202, 1209, 1349,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202, 1349,  202,  202, 1349,  202, 1349, 1349,  202, 1349,
     1349, 1349, 1210, 1349,  202, 1349,  202,  202, 1349,  202,
     1349,  202, 1211,  202,  202,  202,  202,  202, 1349,  202,
      202, 1212,  202, 1349, 1349,  202, 1213,  202, 1349, 1349,
     1214,  202,  202,  202,  202, 1349, 1349,  202,  202, 1211,
      202, 1349,  202,  202,  202, 1349, 1349, 1349, 1212,  202,
      202, 1349,  202, 1213,  202, 1349,  202, 1214, 1349,  202,
     1349,  202,  202, 1349,  202, 1349,  202,  202, 1349,  202,
      202, 1349, 1215, 1349, 1349, 1349,  202,  202, 1216,  202,
      202, 1349, 1349,  202,  202, 1349,  202, 1349, 1349,  202,

      202, 1349, 1217,  202,  202, 1349, 1349,  202,  202, 1215,
      202, 1349, 1349,  202,  202, 1216, 1349,  202,  202, 1349,
      202,  202, 1349,  202,  202, 1218,  202,  202,  202, 1217,
      202,  202,  202, 1219,  202,  202, 1349,  202,  202,  202,
     1349,  202, 1349, 1349,  202,  202, 1349,  202, 1349, 1349,
     1349,  202, 1218,  202, 1349,  202,  202,  202, 1220,  202,
     1219,  202,  202,  202,  202,  202,  202, 1349,  202,  202,
     1221,  202,  202, 1349,  202, 1349, 1349,  202, 1349, 1349,
     1349, 1349,  202,  202, 1349, 1220,  202, 1349,  202,  202,
      202,  202, 1349,  202, 1222,  202,  202, 1221,  202,  202,

     1349,  202, 1349, 1349,  202,  202, 1252,  202, 1349,  202,
      202, 1349,  202,  202, 1349,  202,  202,  202, 1223, 1224,
      202, 1222, 1349, 1349, 1349,  202,  202, 1349,  202,  202,
      202,  202,  202, 1252,  202,  202,  202,  202, 1349,  202,
      202,  202, 1349,  202,  202, 1223, 1224, 1349, 1349, 1349,
     1349, 1349,  202,  202,  202,  202,  202,  202,  202,  202,
     1225, 1349,  202,  202,  202, 1226, 1349,  202,  202, 1349,
      202, 1349,  202,  202, 1349,  202,  202,  202,  202,  202,
      202,  202,  202,  202, 1349,  202,  202, 1225,  202, 1349,
     1349,  202, 1226, 1349,  202, 1349,  202,  202, 1349,  202,

      202,  202,  202,  202,  202,  202,  202,  202, 1349,  202,
      202, 1349,  202, 1349, 1349,  202, 1349,  202, 1349,  202,
      202,  202,  202,  202,  202, 1349, 1227,  202,  202,  202,
     1349, 1349,  202,  202, 1349, 1349, 1228, 1349,  202, 1349,
     1349, 1349, 1349,  202,  202, 1349,  202,  202,  202,  202,
      202,  202,  202, 1227,  202, 1349,  202,  202, 1349,  202,
     1349, 1349,  202, 1228,  202,  202,  202, 1349, 1349, 1349,
      202,  202, 1349, 1349, 1349,  202,  202,  202,  202,  202,
      202, 1349, 1349, 1349,  202,  202, 1349, 1349, 1349,  202,
      202,  202,  202,  202,  202, 1349,  202, 1349,  202,  202,

      202, 1349, 1349,  202,  202,  202,  202,  202, 1253, 1231,
      202, 1349,  202, 1349,  202, 1349,  202,  202, 1349,  202,
      202,  202, 1349,  202, 1349, 1254,  202,  202, 1349,  202,
      202,  202, 1349,  202,  202,  202, 1349,  202,  202, 1349,
     1349,  202, 1349,  202,  202,  202, 1349,  202, 1349, 1349,
     1349, 1349, 1254, 1349,  202, 1255,  202,  202, 1349,  202,
      202,  202,  202,  202,  202,  202, 1349, 1349, 1349,  202,
      202,  202,  202,  202, 1256, 1349, 1349,  202,  202,  202,
      202,  202, 1255,  202,  202, 1349,  202,  202,  202, 1349,
      202,  202,  202,  202,  202, 1349,  202,  202,  202, 1349,

      202, 1256, 1349, 1257,  202,  202,  202,  202,  202, 1349,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202, 1349, 1349, 1349, 1349,
     1257, 1349,  202,  202,  202,  202, 1349, 1349, 1349,  202,
      202,  202, 1349,  202,  202,  202,  202, 1349, 1258,  202,
      202,  202, 1349,  202, 1349,  202, 1349,  202,  202,  202,
      202,  202,  202, 1349, 1349, 1259, 1349,  202, 1349, 1349,
     1349, 1349, 1349,  202,  202, 1258,  202, 1349, 1349, 1349,
      202,  202,  202, 1349,  202,  202,  202, 1349, 1260,  202,
      202, 1349, 1259, 1349,  202,  202, 1349,  202, 1349,  202,

      202,  202, 1349,  202,  202, 1349, 1349, 1349,  202,  202,
     1262, 1349, 1349,  202,  202, 1260,  202,  202,  202, 1349,
      202, 1349,  202,  202,  202, 1349,  202,  202,  202, 1349,
      202,  202,  202, 1349,  202, 1349,  202, 1262, 1261,  202,
     1349,  202,  202,  202,  202,  202,  202,  202, 1349, 1349,
      202,  202, 1263, 1264, 1349,  202, 1349,  202,  202,  202,
     1349,  202,  202,  202, 1349, 1261,  202, 1349, 1349,  202,
      202,  202,  202,  202,  202, 1349,  202,  202,  202, 1263,
     1264,  202,  202, 1349, 1349,  202,  202, 1349, 1349,  202,
      202, 1349, 1349, 1349, 1349, 1349, 1349,  202,  202,  202,

      202,  202, 1349,  202,  202,  202, 1265, 1349,  202,  202,
      202, 1266,  202,  202,  202, 1349,  202, 1349,  202,  202,
     1349, 1349, 1349,  202,  202,  202, 1349,  202,  202, 1349,
     1349, 1349,  202, 1265, 1349, 1349, 1349,  202, 1266,  202,
      202,  202,  202,  202, 1349,  202,  202,  202, 1349, 1349,
      202,  202,  202, 1349,  202,  202,  202, 1349,  202, 1349,
      202,  202, 1267, 1349, 1349,  202,  202,  202, 1349,  202,
      202, 1349, 1349, 1349,  202, 1349, 1349, 1349, 1349,  202,
     1349,  202, 1349,  202,  202,  202,  202,  202,  202, 1267,
     1268,  202,  202,  202, 1349, 1349,  202,  202,  202, 1269,

      202, 1349, 1271, 1349, 1349,  202,  202,  202, 1349,  202,
      202,  202,  202,  202,  202, 1270, 1349, 1268,  202,  202,
     1272, 1349,  202,  202,  202,  202, 1269,  202, 1349, 1271,
      202, 1349,  202,  202,  202, 1349,  202,  202, 1349,  202,
      202,  202, 1270, 1349,  202, 1349,  202, 1272,  202,  202,
     1349,  202,  202, 1349,  202, 1349,  202,  202, 1349, 1349,
     1349, 1349,  202, 1349,  202, 1349,  202,  202, 1349, 1349,
      202,  202,  202, 1349,  202,  202,  202, 1349,  202,  202,
     1349,  202, 1349,  202,  202, 1349,  202, 1287, 1349,  202,
     1349,  202,  202,  202,  202, 1349,  202,  202, 1349,  202,

      202,  202,  202,  202,  202,  202, 1349, 1289, 1349, 1349,
      202,  202,  202,  202, 1287, 1349, 1349, 1349,  202,  202,
      202,  202,  202,  202, 1349, 1349,  202,  202,  202,  202,
      202,  202, 1349, 1349, 1289, 1349,  202,  202,  202,  202,
      202, 1291, 1290, 1349,  202,  202,  202,  202, 1349,  202,
      202, 1349,  202,  202,  202,  202,  202,  202,  202, 1349,
      202, 1349,  202,  202,  202,  202, 1349,  202, 1291, 1290,
     1349,  202,  202,  202,  202, 1349, 1349,  202, 1349,  202,
      202,  202, 1349,  202,  202,  202, 1349,  202, 1349,  202,
      202,  202, 1349, 1292, 1349, 1349,  202, 1294, 1293,  202,

      202,  202,  202,  202,  202, 1349, 1349,  202,  202,  202,
     1349,  202, 1349, 1349,  202, 1349, 1349,  202, 1349, 1349,
     1292, 1349, 1349,  202, 1294, 1293,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202, 1349,  202,  202,
      202,  202,  202, 1349,  202, 1349, 1349,  202, 1349, 1349,
     1349, 1349,  202,  202, 1349,  202, 1349, 1349,  202,  202,
      202,  202,  202, 1349, 1349,  202,  202,  202,  202,  202,
     1349,  202,  202, 1349,  202, 1349,  202,  202, 1295,  202,
      202, 1297,  202, 1296,  202,  202, 1349,  202, 1349,  202,
      202, 1349,  202, 1349, 1349,  202, 1349,  202, 1349,  202,

      202, 1298,  202,  202,  202, 1295,  202,  202, 1297,  202,
     1296,  202,  202, 1349,  202, 1306, 1300,  202, 1349,  202,
     1349, 1349,  202, 1349,  202, 1349, 1308,  202, 1298,  202,
      202, 1349, 1349,  202, 1349, 1349,  202, 1349,  202,  202,
      202,  202,  202, 1349,  202,  202,  202, 1349,  202,  202,
      202,  202,  202, 1308,  202, 1349, 1349,  202,  202, 1309,
      202,  202, 1349,  202,  202,  202, 1349,  202,  202,  202,
     1349,  202,  202,  202, 1349,  202, 1349,  202,  202,  202,
     1349,  202,  202, 1349,  202,  202, 1309,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202, 1349,

      202, 1349,  202,  202, 1349,  202, 1349, 1349,  202,  202,
     1349,  202, 1349, 1349, 1349, 1349,  202,  202, 1349,  202,
      202,  202,  202,  202,  202,  202, 1349,  202, 1349,  202,
      202, 1349,  202,  202,  202,  202,  202,  202,  202, 1349,
      202, 1349, 1349, 1310,  202, 1349,  202, 1349,  202, 1349,
     1349, 1349,  202,  202,  202, 1349,  202, 1349,  202, 1349,
      202,  202, 1349,  202,  202,  202, 1349,  202,  202, 1349,
     1310,  202, 1349,  202, 1349,  202, 1349, 1349, 1349,  202,
      202,  202,  202,  202, 1318,  202,  202, 1349,  202,  202,
     1349, 1349, 1349,  202,  202,  202, 1349, 1349,  202, 1349,

     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,  202,
     1349, 1318, 1349,  202, 1349,  202,  202, 1349, 1349, 1349,
      202,  202, 1349, 1349, 1349,  202,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   88, 1349, 1349,   88,   88,
       88,   88,   88,   88,   93,   93, 1349,   93,   99,   99,
       99,  186,  186,  186, 1349,  186,  186,  186,  186,  186,
      188, 1349,  188,  188,  188,  188,  188,  188,  188,  191,
     1349,  191,  191,  191,  191,  191,  191,  191,  202, 1349,
      202,  202,  202,  202,  202,  202,  202,   91, 1349,   91,
      292, 1349,  292,  295, 1349,  295,  551, 1349,  551,  553,

     1349,  553,    7, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349
    } ;

static const flex_int16_t yy_chk[9081] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   15,
       17,   18,   18,   22,   25,   30,   25,   22,   23,   31,
       44,   25,   91,   22,   27,   23,   25,   92,   17, 1346,
       27, 1345,   23,   22, 1344,   23,   49,   49,   23, 1343,

       22,   25,   30,   25,   22,   23,   31,   44,   25,   91,
       22,   27,   23,   25,   92,   17,   21,   27,   21,   23,
       22,   28,   23,   32,   21,   23,   21,   32,   55,   28,
       21,   21,   24,   32,   33,   28,   24,  100,   33,   55,
       24,   50,   50,   21,   33,   21,   24, 1341,   28,   24,
       32,   21,  101,   21,   32, 1339,   28,   21,   21,   24,
       32,   33,   28,   24,  100,   33, 1337,   24,  104,   34,
     1335,   33, 1333,   24,   29, 1331,   24,   26,   42,  101,
       29,   29,   29,   34, 1329,   26,   42,   29,   26,   34,
       34,   26,   58,   58,   26,  104,   34,   26,   86,   86,

     1327,   29,   94,   94,   26,   42, 1325,   29,   29,   29,
       34,   35,   26,   42,   29,   26,   34,   34,   26,   35,
       36,   26, 1323,   35,   26,   38,   35,   35, 1321,   38,
       41,   36,   41,   38,  105,   41,  107,   36,   35,   38,
     1319,  102, 1315,   43,   43, 1311,   35,   36, 1305,  102,
       35,  108,   38,   35,   35,   93,   38,   41,   36,   41,
       38,  105,   41,  107,   36,  111,   38,   39,  102,   39,
       43,   43,   39,   93,  114,   39,  102,   39,  108,   39,
       39,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56, 1299,  111,  118,   39, 1286,   39,  189,  189,   39,

       93,  114,   39,  110,   39,  119,   39,   39,   40,  113,
      110,   67,   40,   67,  120,   40,   40,   67,   67,  113,
      118,  103,   40,   67,  103,   40,  291,  291,  293,  293,
      110, 1273,  119, 1151, 1151,   40,  113,  110,   67,   40,
       67,  120,   40,   40,   67,   67,  113,  121,  103,   40,
       67,  103,   40,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57, 1251,  117,  117,  122, 1229,  106,
      106,   57, 1274, 1274,  121, 1186, 1143, 1071,  999,  903,
      807,  678,  124,  106,  549,  115,  125,   68,  126,  128,
      115,   68,  117,  117,  122,   68,  106,  106,   57,   61,

       61,   68,   61,   61,   61,   61,   61,   61,   61,  124,
      106,   68,  115,  125,   68,  126,  128,  115,   68,   61,
       61,   61,   68,  127,  420,   61,   70,   61,   68,  127,
       70,  129,  130,   61,  290,   61,   70,  131,   68,   61,
       61,   71,  133,  134,  132,   71,   70,  132,  193,  191,
      127,   71,   61,   70,   61,   90,  127,   70,  129,  130,
       61,   71,   61,   70,  131,  136,   61,   61,   71,  133,
      134,  132,   71,   70,  132,   61,   62,   62,   71,   62,
       62,   62,   62,   62,   62,   62,   88,  137,   71,   72,
       73,   77,  136,   72,   73,   77,   62,   62,   62,   72,

       73,   77,  139,   62,   85,  140,  141,   62,   60,   72,
       73,   77,   59,   62,  137,  142,   72,   73,   77,  145,
       72,   73,   77,   62,   52,   51,   72,   73,   77,  139,
       62,   78,  140,  141,   62,   78,   72,   73,   77,   78,
       62,  146,  142,   47,  147,   78,  145,   81,   45,   81,
       62,   81,   62,   63,   81,   78,   20,   63,   78,   81,
       63,   63,   78,  143,  148,  143,   78,   63,  146,   19,
       63,  147,   78,   63,   81,   82,   81,   63,   81,   82,
       63,   81,   78,   82,   63,   11,   81,   63,   63,   82,
      143,  148,  143,  149,   63,    7,  149,   63,    4,   82,

       63,    3,   82,  150,   63,   64,   82,  151,   83,   64,
       82,   83,   83,   64,    0,  152,   82,  154,   83,   64,
      149,   84,   64,  149,  155,   84,   82,  156,   83,   64,
      150,   84,   64,    0,  151,   83,   64,    0,   83,   83,
       64,   84,  152,  157,  154,   83,   64,    0,   84,   64,
        0,  155,   84,    0,  156,   83,   64,   65,   84,  138,
      144,   65,  144,  158,   65,  160,   65,   65,   84,  138,
      157,   65,  162,  144,  138,  138,   65,   65,    0,  112,
      112,  112,    0,  112,   65,    0,  138,  144,   65,  144,
      158,   65,  160,   65,   65,    0,  138,  164,   65,  162,

      144,  138,  138,   65,   65,   66,  112,  112,  112,  116,
      112,  116,   66,   66,  116,  167,   66,  159,  168,   66,
      116,  159,   66,    0,  164,   66,    0,  116,    0,    0,
        0,    0,   66,    0,    0,    0,  116,  161,  116,   66,
       66,  116,  167,   66,  159,  168,   66,  116,  159,   66,
      161,  166,   66,   69,  116,  161,  123,  163,  123,   69,
       69,   69,  123,  169,  161,  166,   69,    0,  163,  123,
      170,   69,    0,  123,  171,    0,    0,  161,  166,    0,
       69,  173,  161,  123,  163,  123,   69,   69,   69,  123,
      169,  172,  166,   69,  165,  163,  123,  170,   69,   74,

      123,  171,  172,  165,  174,  175,   74,  176,  173,  178,
      179,  165,  182,   74,  183,  177,   74,  180,  172,   74,
       74,  165,  177,  180,  184,  177,   74,  176,    0,  172,
      165,  174,  175,   74,  176,    0,  178,  179,  165,  182,
       74,  183,  177,   74,  180,  181,   74,   74,   75,  177,
      180,  184,  177,   75,  176,   75,  202,  292,  181,  297,
      202,   75,   75,  299,  300,   75,  202,  302,   75,   75,
        0,  304,  181,  305,    0,   75,  202,    0,    0,    0,
       75,    0,   75,  202,  292,  181,  297,  202,   75,   75,
      299,  300,   75,  202,  302,   75,   75,   76,  304,  306,

      305,  203,  203,  202,   76,  211,  203,  307,   76,  211,
      308,   76,  203,  309,   76,  211,  311,   76,    0,  312,
        0,  313,  203,    0,   76,  211,  306,    0,  203,  203,
        0,   76,  211,  203,  307,   76,  211,  308,   76,  203,
      309,   76,  211,  311,   76,   79,  312,   79,  313,  203,
       79,   79,  211,   79,  205,   79,  205,   79,   79,    0,
        0,  205,  205,    0,    0,  314,  205,   79,    0,    0,
        0,    0,   79,    0,   79,    0,    0,   79,   79,    0,
       79,  205,   79,  205,   79,   79,  204,  212,  205,  205,
      204,  212,  314,  205,   79,   80,  204,  212,  207,   80,

      207,  204,   80,   80,  207,  207,  204,  212,  315,   80,
      207,  316,   80,  204,  212,  317,  318,  204,  212,   80,
        0,    0,   80,  204,  212,  207,   80,  207,  204,   80,
       80,  207,  207,  204,  212,  315,   80,  207,  316,   80,
        0,    0,  317,  318,    0,    0,   80,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,    0,  310,    0,
      310,    0,    0,  319,  194,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  310,  213,  221,  213,  221,
      320,  321,    0,  213,  221,  310,  221,  310,  213,  221,
      319,  194,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  310,  213,  221,  213,  221,  320,  321,  195,
      213,  221,    0,  221,    0,  213,  221,    0,    0,    0,
        0,  322,  323,  220,  325,  220,  326,  327,    0,  220,
      220,    0,  328,  329,  330,  220,  195,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  322,  323,
      220,  325,  220,  326,  327,  196,  220,  220,  324,  328,
      329,  330,  220,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  324,  332,  333,    0,  334,    0,    0,
        0,    0,  196,  197,  197,  324,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  206,  208,  210,  206,

      324,  332,  333,  210,  334,  210,  208,  206,  208,  206,
      210,  335,    0,  208,  206,  210,  336,  337,  208,  206,
        0,    0,  338,  206,  208,  210,  206,  339,    0,  340,
      210,  341,  210,  208,  206,  208,  206,  210,  335,  214,
      208,  206,  210,  336,  337,  208,  206,  209,  209,  338,
      214,  342,  214,  209,  339,  209,  340,  214,  341,    0,
      209,  209,  214,    0,    0,  209,  214,    0,    0,    0,
        0,  343,    0,    0,  209,  209,  344,  214,  342,  214,
      209,  216,  209,  345,  214,  216,  217,  209,  209,  214,
      217,  216,  209,  215,  215,  215,  217,  215,  343,  217,

      215,  216,  223,  344,  223,  215,  217,  346,  216,  223,
      345,  347,  216,  217,  223,  218,  348,  217,  216,  218,
      215,  215,  215,  217,  215,  218,  217,  215,  216,  223,
      218,  223,  215,  217,  346,  218,  223,    0,  347,  349,
      222,  223,  218,  348,  222,  350,  218,    0,    0,    0,
      222,  351,  218,    0,    0,  352,  353,  218,    0,    0,
      222,  354,  218,  219,  225,  219,  349,  222,  219,  355,
        0,  222,  350,  225,  219,  225,  219,  222,  351,  357,
      225,  219,  352,  353,  356,  225,  219,  222,  354,  224,
      219,  225,  219,    0,  356,  219,  355,  224,    0,  224,

      225,  219,  225,  219,  224,  358,  357,  225,  219,  224,
        0,  356,  225,  219,  360,    0,  224,    0,  227,    0,
      227,  356,    0,    0,  224,  227,  224,    0,  361,    0,
      227,  224,  358,  362,  363,  365,  224,  226,  229,  226,
      366,  360,  229,  226,  228,  227,  228,  227,  229,  226,
      226,  228,  227,  364,  226,  361,  228,  227,  229,  226,
      362,  363,  365,  364,  226,  229,  226,  366,    0,  229,
      226,  228,  367,  228,  368,  229,  226,  226,  228,  369,
      364,  226,  230,  228,  230,  229,  226,  231,  230,  230,
      364,  231,  233,  232,  230,  232,  233,  231,  371,  367,

      232,  368,  233,    0,    0,  232,  369,  231,    0,  230,
        0,  230,  233,  372,  231,  230,  230,  373,  231,  233,
      232,  230,  232,  233,  231,  371,  234,  232,  374,  233,
      234,  235,  232,  235,  231,  236,  234,  236,  235,  233,
      372,  235,  236,  235,  373,  375,  234,  236,    0,  238,
        0,  238,  376,  234,    0,  374,  238,  234,  235,    0,
      235,  238,  236,  234,  236,  235,    0,  377,  235,  236,
      235,  379,  375,  234,  236,  237,  238,  237,  238,  376,
      381,  239,  237,  238,  237,  239,  240,  237,  238,  382,
      240,  239,  383,  242,  377,  242,  240,  240,  379,    0,

      242,  239,  237,    0,  237,  242,  240,  381,  239,  237,
      384,  237,  239,  240,  237,    0,  382,  240,  239,  383,
      242,  243,  242,  240,  240,  243,  244,  242,  239,    0,
      244,  243,  242,  240,  241,    0,  244,  384,    0,    0,
        0,  243,  241,    0,  241,    0,  244,  385,  243,  241,
      241,  378,  243,  244,  241,  245,  245,  244,  243,  245,
      248,  241,  248,  244,  386,  245,  248,  248,  243,  241,
      378,  241,  248,  244,  385,  245,  241,  241,  378,    0,
        0,  241,  245,  245,    0,    0,  245,  248,  249,  248,
      249,  386,  245,  248,  248,  249,    0,  378,    0,  248,

      249,    0,  245,  246,    0,  387,  380,  246,  259,  246,
      388,  246,  259,  246,    0,  249,  389,  249,  259,  380,
      390,  262,  249,  246,    0,  262,    0,  249,  259,    0,
      246,  262,  387,  380,  246,  259,  246,  388,  246,  259,
      246,  262,    0,  389,    0,  259,  380,  390,  262,  391,
      246,  247,  262,  247,  250,  259,  250,  393,  262,  394,
      395,  250,  247,  251,  247,  251,  250,  396,  262,  247,
      251,  251,  397,  398,  247,  251,  391,  399,  247,    0,
      247,  250,  400,  250,  393,  401,  394,  395,  250,  247,
      251,  247,  251,  250,  396,  402,  247,  251,  251,  397,

      398,  247,  251,  252,  399,  252,  253,    0,  253,  400,
      252,  252,  401,  253,  252,  252,  254,    0,  253,  256,
      403,  256,  402,    0,  405,    0,  256,  254,    0,  254,
      252,  256,  252,  253,  254,  253,    0,  252,  252,  254,
      253,  252,  252,  254,  255,  253,  256,  403,  256,  407,
      255,  405,  255,  256,  254,  257,  254,  255,  256,    0,
      406,  254,  255,  257,    0,  257,  254,    0,    0,  406,
      257,  255,  409,  410,    0,  257,  407,  255,    0,  255,
        0,  408,  257,  408,  255,    0,  258,  406,  258,  255,
      257,  260,  257,  258,  258,  260,  406,  257,  258,  409,

      410,  260,  257,  411,  260,  263,    0,  263,  408,  412,
      408,  260,  263,  258,  413,  258,    0,  263,  260,  261,
      258,  258,  260,  261,  264,  258,  414,  261,  260,    0,
      411,  260,  263,  261,  263,  264,  412,  264,  260,  263,
        0,  413,  264,  261,  263,    0,  261,  264,    0,    0,
      261,  264,    0,  414,  261,  415,  265,  417,  418,    0,
      261,  265,  264,  265,  264,  266,    0,  266,  265,  264,
      261,  554,  266,  265,  264,  267,  266,  266,  555,  267,
        0,  267,  415,  265,  417,  418,  267,  556,  265,    0,
      265,  267,  266,  416,  266,  265,  557,  416,  554,  266,

      265,    0,  267,  266,  266,  555,  267,  269,  267,    0,
        0,  269,  270,  267,  556,  269,  270,  558,  267,  268,
      416,  269,  270,  557,  416,  559,  560,  561,  268,    0,
      268,  269,  270,    0,  269,  268,  268,  271,  269,  270,
      268,  271,  269,  270,  558,  271,  268,  562,  269,  270,
        0,  271,  559,  560,  561,  268,  272,  268,  269,  270,
      272,  271,  268,  268,  271,  564,  272,  268,  271,  272,
      567,  273,  271,    0,  562,  273,  272,  274,  271,  273,
      274,    0,    0,  272,  274,  273,  568,  272,  271,  569,
      274,    0,  564,  272,  570,  273,  272,  567,  273,  572,

      274,  573,  273,  272,  274,  574,  273,  274,  275,  275,
      275,  274,  273,  568,  276,  275,  569,  274,  276,  575,
      275,  570,  273,    0,  276,    0,  572,  274,  573,    0,
      577,  578,  574,    0,  276,  275,  275,  275,  281,  281,
      277,  276,  275,  281,  277,  276,  575,  275,  277,  281,
      277,  276,  278,  579,    0,  580,  278,  577,  578,  281,
      277,  276,  278,  278,    0,  281,  281,  277,  581,  582,
      281,  277,  278,  583,  279,  277,  281,  277,  584,  278,
      579,  279,  580,  278,    0,  585,  281,  277,  279,  278,
      278,  279,    0,  282,  279,  581,  582,  282,    0,  278,

      583,  279,    0,  282,  283,  584,  283,  430,  279,  430,
      283,  283,  585,  282,  430,  279,  283,    0,  279,  430,
      282,  279,  280,  588,  282,  280,  589,    0,  590,  280,
      282,  283,  280,  283,  430,  280,  430,  283,  283,  591,
      282,  430,  592,  283,  284,  280,  430,  593,  284,  280,
      588,    0,  280,  589,  284,  590,  280,  284,  431,  280,
      431,    0,  280,  285,  284,  431,  591,  285,  594,  592,
      431,  284,  280,  285,  593,  284,    0,  596,  286,    0,
        0,  284,  286,  285,  284,  431,    0,  431,  286,  597,
      285,  284,  431,  286,  285,  594,    0,  431,  286,  287,

      285,  598,  426,  287,  596,  286,  426,  287,  601,  286,
      285,  602,  426,  287,  604,  286,  597,  606,  607,  608,
      286,  609,  426,  287,    0,  286,  287,    0,  598,  426,
      287,    0,    0,  426,  287,  601,    0,    0,  602,  426,
      287,  604,    0,    0,  606,  607,  608,  610,  609,  426,
      287,  421,  421,  611,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  610,  614,  618,  620,  621,  623,
      611,  422,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  614,  618,  620,  621,  623,    0,  422,  423,
      423,    0,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  427,  428,  429,  625,  427,  428,  429,    0,
      626,    0,  427,  428,  429,  612,    0,  624,  624,  627,
      629,    0,  427,  428,  429,  432,  612,    0,  630,  427,
      428,  429,  625,  427,  428,  429,  432,  626,  432,  427,
      428,  429,  612,  432,  624,  624,  627,  629,  432,  427,
      428,  429,  432,  612,  433,  630,  433,  631,  434,  632,
        0,  433,  434,  432,  634,  432,  433,  435,  434,    0,
      432,  435,  436,    0,  635,  432,  436,  435,  434,    0,

      637,  433,  436,  433,  631,  434,  632,  435,  433,  434,
      436,  634,  436,  433,  435,  434,  437,    0,  435,  436,
      437,  635,    0,  436,  435,  434,  437,  637,  438,  436,
      438,    0,    0,  638,  435,  438,  437,  436,  639,  436,
      438,    0,  439,  437,  439,  640,  441,  437,  442,  439,
      441,    0,  442,  437,  439,  438,  441,  438,  442,  441,
      638,    0,  438,  437,  442,  639,  441,  438,  442,  439,
      443,  439,  640,  441,  443,  442,  439,  441,  443,  442,
      443,  439,  440,  441,  440,  442,  441,  642,  440,    0,
      443,  442,  643,  441,  440,  442,  445,  443,  444,  440,

      445,  443,  444,    0,  440,  443,  445,  443,  444,  440,
        0,  440,  644,  444,  642,  440,  445,  443,  444,  643,
      446,  440,  645,  445,  446,  444,  440,  445,  446,  444,
      447,  440,  447,  445,  446,  444,  647,  447,  648,  644,
      444,  649,  447,  445,  446,  444,  448,  446,  448,  645,
      449,  446,  448,  448,  449,  446,    0,  447,  448,  447,
      449,  446,    0,  647,  447,  648,  650,    0,  649,  447,
      449,  446,  653,  448,  654,  448,  450,  449,  450,  448,
      448,  449,  451,  450,  451,  448,  452,  449,  450,  451,
      452,  655,  656,  650,  451,    0,  452,  449,  657,  653,

      453,  654,  660,  450,  453,  450,  452,    0,  453,  451,
      450,  451,  661,  452,  453,  450,  451,  452,  655,  656,
      663,  451,  454,  452,  453,  657,  454,  453,  455,  660,
      455,  453,  454,  452,  455,  453,  664,  454,  665,  661,
      455,  453,  454,  666,    0,  667,  668,  663,  456,  454,
      455,  453,  456,  454,    0,  455,  457,  455,  456,  454,
      457,  455,  669,  664,  454,  665,  457,  455,  456,  454,
      666,  457,  667,  668,  670,  456,  457,  455,  671,  456,
      673,  458,  675,  457,  458,  456,  459,  457,  458,  669,
      459,  677,  810,  457,  458,  456,  459,  459,  457,  812,

      814,  670,    0,  457,  458,  671,  459,  673,  458,  675,
      460,  458,  461,  459,  460,  458,  461,  459,  677,  810,
      460,  458,  461,  459,  459,  463,  812,  814,  815,  463,
      460,  458,  461,  459,  462,  463,  816,  460,  462,  461,
      817,  460,  462,  461,    0,  463,    0,  460,  462,  461,
        0,    0,  463,  818,  819,  815,  463,  460,  462,  461,
      820,  462,  463,  816,  464,  462,  464,  817,  821,  462,
      464,  465,  463,  465,  822,  462,  464,  466,  465,  466,
      818,  819,  824,  465,  466,  462,  464,  820,    0,  466,
        0,  464,    0,  464,  825,  821,  826,  464,  465,    0,

      465,  822,  827,  464,  466,  465,  466,    0,  828,  824,
      465,  466,  467,  464,  467,  468,  466,  468,  467,  467,
      829,  825,  468,  826,  467,  831,  470,  468,  469,  827,
      470,    0,  469,  832,  470,  828,    0,  833,  469,  467,
      470,  467,  468,    0,  468,  467,  467,  829,  469,  468,
      470,  467,  831,  470,  468,  469,  471,  470,  471,  469,
      832,  470,  834,  471,  833,  469,  835,  470,  471,  472,
      472,  472,  473,  473,  473,  469,  472,  470,    0,  473,
      474,  472,  474,  471,  473,  471,  836,  474,    0,  834,
      471,    0,  474,  835,  837,  471,  472,  472,  472,  473,

      473,  473,  838,  472,    0,  475,  473,  474,  472,  474,
      839,  473,  840,  836,  474,  475,  476,  475,  476,  474,
      477,  837,  475,  476,  477,  476,  477,  475,  476,  838,
        0,  477,  475,    0,    0,  843,  477,  839,    0,  840,
        0,  844,  475,  476,  475,  476,  845,  477,    0,  475,
      476,  477,  476,  477,  475,  476,  478,  479,  477,  846,
      478,  479,  843,  477,    0,  480,  478,  479,  844,  480,
        0,  847,  479,  845,    0,  480,  478,  479,  480,    0,
      850,  853,    0,  478,  479,  480,  846,  478,  479,    0,
      854,  481,  480,  478,  479,  481,  480,  481,  847,  479,

      856,  481,  480,  478,  479,  480,  482,  850,  853,  483,
      482,  481,  480,  483,    0,  859,  482,  854,  481,  483,
        0,  484,  481,  862,  481,  484,  482,  856,  481,  483,
        0,  484,    0,  482,  863,  485,  483,  482,  481,  485,
      483,  484,  859,  482,  864,  485,  483,  486,  484,  865,
      862,  486,  484,  482,    0,  485,  483,  486,  484,  487,
        0,  863,  485,  487,  866,    0,  485,  486,  484,  487,
        0,  864,  485,  867,  486,  487,  865,    0,  486,  487,
        0,  488,  485,  488,  486,  489,  487,  489,  488,    0,
      487,  866,  489,  488,  486,    0,  487,  489,    0,    0,

      867,  855,  487,  491,  855,    0,  487,  491,  488,  490,
      488,  490,  489,  491,  489,  488,  490,  490,    0,  489,
      488,  490,  492,  491,  489,  495,  492,  495,  855,  495,
      491,  855,  492,    0,  491,  495,  490,    0,  490,  870,
      491,  871,  492,  490,  490,  495,  493,  493,  490,  492,
      491,  493,  495,  492,  495,  872,  495,  493,  873,  492,
      498,  496,  495,  496,  498,  496,  870,  493,  871,  492,
      498,  496,  495,  493,  493,  498,    0,  874,  493,    0,
      498,  496,  872,  876,  493,  873,  877,  498,  496,    0,
      496,  498,  496,  879,  493,  494,  497,  498,  496,  494,

      497,    0,  498,  494,  874,  494,  497,  498,  496,  494,
      876,  880,  497,  877,    0,  881,  497,    0,    0,  494,
      879,  499,  494,  497,  500,  499,  494,  497,  500,  882,
      494,  499,  494,  497,  500,  884,  494,  499,  880,  497,
      885,  499,  881,  497,  500,  501,  494,  886,  499,  501,
        0,  500,  499,  501,  887,  500,  882,    0,  499,  501,
      888,  500,  884,  502,  499,  502,    0,  885,  499,  501,
      502,  500,  501,  889,  886,  502,  501,  503,    0,  503,
      501,  887,    0,  503,  503,  890,  501,  888,    0,  503,
      502,  504,  502,  504,  891,  505,  501,  502,  504,  505,

      889,    0,  502,  504,  503,  505,  503,    0,  892,  506,
      503,  503,  890,  506,  894,  505,  503,    0,  504,  506,
      504,  891,  505,    0,  507,  504,  505,  895,  507,  506,
      504,  509,  505,  509,  507,  892,  506,  507,  509,    0,
      506,  894,  505,  509,  507,    0,  506,  896,  898,    0,
      513,  507,  513,    0,  895,  507,  506,  513,  509,    0,
      509,  507,  513,  899,  507,  509,  511,  511,  511,    0,
      509,  507,  508,  511,  896,  898,  508,  513,  511,  513,
      508,  900,    0, 1000,  513, 1002,  508, 1004, 1005,  513,
      899,  508, 1006,  511,  511,  511,  508,    0, 1007,  508,

      511,    0, 1009,  508,  512,  511,    0,  508,  900,  512,
     1000,  512, 1002,  508, 1004, 1005,  512, 1011,  508, 1006,
      515,  512,  515,  508,  510, 1007, 1012,  515,  515, 1009,
     1013,  512,  515,  510,    0,  510,  512,  510,  512, 1014,
      510,    0,    0,  512, 1011,  510,    0,  515,  512,  515,
      514,  510, 1015, 1012,  515,  515, 1017, 1013, 1019,  515,
      510,  514,  510,  514,  510,  516, 1014,  510,  514,  516,
     1023,  516,  510,  514, 1025, 1026,  516,  514,    0, 1015,
        0,  516,  517, 1017,  517, 1019, 1027,    0,  514,  517,
      514,    0,  516,    0,  517,  514,  516, 1023,  516, 1034,

      514, 1025, 1026,  516, 1035,  518,    0,  518,  516,  517,
      519,  517,  518, 1027,  519,  520,  517,  518,  521,  520,
      519,  517,  521,  522, 1036,  520, 1034,  522,  521, 1039,
      519, 1035,  518,  522,  518,  520,    0,  519,  521,  518,
        0,  519,  520,  522,  518,  521,  520,  519,    0,  521,
      522, 1036,  520,    0,  522,  521, 1039,  519,    0,  523,
      522,    0,  520,  523,  524,  521,    0,  525,  524,  523,
      522,  525,  523,  526,  524,  526, 1041,  525,  525,  523,
      526,  527,  524,  527,  524,  526,  523,  525,  527,  527,
      523,  524,    0,  527,  525,  524,  523,    0,  525,  523,

      526,  524,  526, 1041,  525,  525,  523,  526,  527,  524,
      527,  524,  526, 1043,  525,  527,  527,  528, 1045,  528,
      527,  529, 1046,  529,  528,  528, 1047, 1048,  529,  528,
      530, 1049,  530,  529,  530, 1051,    0,  530,    0,    0,
     1043,    0,  530,    0,  528, 1045,  528, 1052,  529, 1046,
      529,  528,  528, 1047, 1048,  529,  528,  530, 1049,  530,
      529,  530, 1051,  531,  530,  531,  532, 1053,  532,  530,
      531,  531,    0,  532, 1052,  531,  533, 1054,  532,  534,
      533,    0, 1056,  534, 1058,    0,  533,    0,    0,  534,
      531, 1060,  531,  532, 1053,  532,  533,  531,  531,  534,

      532,    0,  531,  533, 1054,  532,  534,  533,  536, 1056,
      534, 1058,  535,  533,  535,  536,  534,  536, 1060,  535,
     1061,    0,  536,  533,  535, 1062,  534,  536,  537,    0,
      539,    0,  537,  538,  539,  536,    0,  538,  537,  535,
      539,  535,  536,  538,  536,  538,  535, 1061,  537,  536,
      539,  535, 1062,  538,  536,  537,  541,  539,  541,  537,
      538,  539, 1063,  541,  538,  537,    0,  539,  541,    0,
      538,    0,  538, 1064,  540,  537,    0,  539,  540, 1069,
      538, 1070,  540,  541,  542,  541,  542,    0,  540, 1063,
      541,  542,    0,  542, 1148,  541,  542,    0,  540,    0,

     1064,  540, 1152,  543, 1153,  540, 1069, 1156, 1070,  540,
        0,  542,  543,  542,  543,  540, 1157, 1161,  542,  543,
      542, 1148, 1163,  542,  543,  540,  544, 1164,  544, 1152,
      543, 1153, 1167,  544, 1156,    0,    0,  544,  544,  543,
      545,  543,  545, 1157, 1161,    0,  543,  545,  545, 1163,
        0,  543,  545,  544, 1164,  544,  546, 1168,  546, 1167,
      544, 1169,  546,  546,  544,  544,  547,  545,  546,  545,
      547, 1170,  547,    0,  545,  545, 1173,  547, 1174,  545,
     1177, 1179,  547,  546, 1168,  546,    0,    0, 1169,  546,
      546,    0,    0,  547,  548,  546,  548,  547, 1170,  547,

      548,  548, 1180, 1173,  547, 1174,  548, 1177, 1179,  547,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
        0,  548,    0,  548,    0,    0,    0,  548,  548, 1180,
        0,    0,    0,  548,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  683,    0,  683,  684,  685,  684,
      683,  683,  685,  684,  684,    0,  683,    0,  685,  684,
     1181,    0,  686, 1182, 1183, 1230,  686,    0,  685,    0,
        0,  683,  686,  683,  684,  685,  684,  683,  683,  685,
      684,  684,  686,  683,  687,  685,  684, 1181,  687,  686,
     1182, 1183, 1230,  686,  687,  685,  688,  687,  688,  686,
     1233,    0,  689,  688,  687,    0,  689,    0,  688,  686,
     1236,  687,  689, 1231, 1231,  687, 1237,    0, 1240,    0,
     1241,  687,  689,  688,  687,  688, 1242, 1233,  691,  689,
      688,  687,  691,  689,  690,  688,  690, 1236,  691,  689,

      692,  690, 1246, 1237,  692, 1240,  690, 1241,  691,  689,
      692, 1247, 1231, 1242, 1248,  691, 1250,    0,  693,  691,
      692,  690,  693,  690, 1275,  691,  693,  692,  690, 1246,
      694,  692,  693,  690,  694,  691, 1276,  692, 1247, 1231,
      694, 1248,  693, 1250,  695,  693, 1279,  692,  695,  693,
      694, 1275,  696,  693,  695,    0,  696,  694, 1284,  693,
      696,  694, 1288, 1276,  695,    0,  696,  694, 1301,  693,
      697,  695, 1304, 1279,  697,  695,  696,  694,  697,  696,
      697,  695,  698,  696, 1307, 1284,  698,  696, 1312, 1288,
      697,  695,  698,  696,    0, 1301,  700,  697,    0, 1304,

      700,  697,  698,  696,    0,  697,  700,  697,  699,  698,
      701, 1307,  699,  698,  701, 1312,  700,  697,  699,  698,
      701,  699, 1316,  700,  702,  701,  702,  700,  699,  698,
      701,  702, 1320,  700,  703,  699,  702,  701,  703,  699,
        0,  701,    0,  700,  703,  699,  705,  701,  699, 1316,
      705,  702,  701,  702,  703,  699,  705,  701,  702, 1320,
      704,  703,    0,  702,  704,  703,  705,  706,    0,  706,
      704,  703,  713,  705,  706,  704,  713,  705, 1322,  706,
      704,  703,  713,  705,    0, 1324,    0,  704,  707,  707,
      707,  704,  713,  705,  706,  707,  706,  704, 1326,  713,

      707,  706,  704,  713,    0, 1322,  706,  704, 1328,  713,
     1330,  708, 1324,  708, 1332,  707,  707,  707,  708,  713,
      708, 1334,  707,  708,  709, 1326,  709,  707, 1253, 1253,
     1336,  709,  709, 1338,    0, 1328,  709, 1330,  708,    0,
      708, 1332,    0,  710,    0,  708,    0,  708, 1334,    0,
      708,  709,    0,  709,  710,    0,  710, 1336,  709,  709,
     1338,  710,  711,  709,  711,    0,  710, 1253,  711,  711,
      710,  712,    0,    0,  711, 1300, 1300, 1306, 1306,    0,
      712,  710,  712,  710,    0,    0,    0,  712,  710,  711,
        0,  711,  712,  710, 1253,  711,  711,    0,  712,    0,

        0,  711,    0,  714,  715,  714,  715,  712,    0,  712,
      714,  715,    0,    0,  712,  714,  715,    0, 1300,  712,
     1306,    0,  716,    0,  716,    0,    0,    0,    0,  716,
      714,  715,  714,  715,  716,    0,    0,  714,  715,    0,
        0,    0,  714,  715,    0, 1300,  717, 1306,  717,  716,
      717,  716,    0,  717,    0,  718,  716,  718,  717,  718,
        0,  716,  718,    0,    0,    0,    0,  718,    0,  719,
        0,  719,    0,  717,    0,  717,  719,  717,  719,    0,
      717,  719,  718,    0,  718,  717,  718,    0,    0,  718,
        0,  721,    0,    0,  718,    0,  719,    0,  719,  720,

        0,  720,  721,  719,  721,  719,  720,  720,  719,  721,
        0,  720,  722,    0,  721,    0,    0,  723,  721,    0,
        0,  723,    0,  722,    0,  722,  720,  723,  720,  721,
      722,  721,    0,  720,  720,  722,  721,  723,  720,  722,
        0,  721,    0,  724,  723,  725,    0,  724,  723,  725,
      722,    0,  722,  724,  723,  725,    0,  722,    0,    0,
      725,    0,  722,  724,  723,  725,    0,  727,    0,  726,
      724,  727,  725,  726,  724,  727,  725,    0,    0,  726,
      724,  727,  725,    0,    0,    0,    0,  725,    0,  726,
      724,  727,  725,  728,  727,  729,  726,  728,  727,  729,

      726,    0,  727,  728,    0,  729,  726,    0,  727,    0,
        0,    0,    0,  728,    0,  729,  726,  730,  727,    0,
      728,  730,  729,  731,  728,  730,  729,  731,    0,    0,
      728,  730,  729,  731,  731,  732,    0,    0,    0,  732,
      728,  730,  729,  731,  730,  732,    0,    0,  730,    0,
      731,    0,  730,    0,  731,  732,    0,  733,  730,  733,
      731,  731,  732,    0,  733,    0,  732,    0,  730,  733,
      731,  734,  732,  734,    0,    0,    0,    0,  734,    0,
        0,    0,  732,  734,  733,  735,  733,  735,    0,  736,
        0,  733,  735,  736,    0,    0,  733,  735,  734,  736,

      734,    0,    0,    0,    0,  734,  738,    0,  738,  736,
      734,    0,  735,  738,  735,    0,  736,  737,  738,  735,
      736,  737,    0,    0,  735,    0,  736,  737,    0,    0,
      737,    0,    0,  738,    0,  738,  736,  737,    0,    0,
      738,    0,    0,    0,  737,  738,    0,    0,  737,  739,
        0,  739,    0,    0,  737,  739,  739,  737,    0,    0,
      740,  739,  740,  742,  737,  742,  740,  740,    0,    0,
      742,    0,  740,    0,    0,  742,  739,    0,  739,  743,
        0,  743,  739,  739,    0,    0,  743,  740,  739,  740,
      742,  743,  742,  740,  740,    0,    0,  742,    0,  740,

      741,    0,  742,    0,    0,  741,  743,  741,  743,    0,
        0,  741,  741,  743,  744,    0,  744,  741,  743,    0,
        0,  744,    0,  745,    0,  745,  744,  741,    0,    0,
      745,    0,  741,    0,  741,  745,    0,    0,  741,  741,
        0,  744,    0,  744,  741,    0,    0,  746,  744,  746,
      745,    0,  745,  744,  746,    0,  747,  745,  747,  746,
        0,    0,  745,  747,  747,  748,    0,  748,  747,    0,
        0,    0,  748,    0,  746,    0,  746,  748,    0,    0,
        0,  746,    0,  747,    0,  747,  746,    0,    0,    0,
      747,  747,  748,    0,  748,  747,  749,  750,  749,  748,

        0,  750,  751,  749,  748,    0,  751,  750,  749,    0,
        0,  752,  751,    0,    0,  752,    0,  750,    0,    0,
        0,  752,  751,  749,  750,  749,    0,    0,  750,  751,
      749,  752,    0,  751,  750,  749,    0,    0,  752,  751,
        0,    0,  752,  753,  750,  753,    0,    0,  752,  751,
      753,  753,    0,  754,  755,  753,  755,  754,  752,  754,
      755,  755,    0,    0,  754,    0,  755,    0,    0,  754,
      753,    0,  753,    0,    0,  756,    0,  753,  753,  756,
      754,  755,  753,  755,  754,  756,  754,  755,  755,    0,
      757,  754,    0,  755,  757,  756,  754,  758,    0,  758,

      757,    0,  756,  758,    0,    0,  756,    0,    0,  758,
      757,    0,  756,    0,    0,    0,    0,  757,    0,  758,
        0,  757,  756,    0,  758,  759,  758,  757,  760,  759,
      758,    0,  760,    0,    0,  759,  758,  757,  760,    0,
      761,  760,    0,    0,  761,  759,  758,    0,  760,    0,
      761,    0,  759,  761,  762,  760,  759,    0,  762,  760,
      761,    0,  759,    0,  762,  760,    0,  761,  760,  764,
        0,  761,  759,  764,  762,  760,    0,  761,  763,  764,
      761,  762,  763,    0,    0,  762,  763,  761,  763,  764,
        0,  762,    0,    0,    0,    0,  764,    0,  763,    0,

      764,  762,    0,    0,  765,  763,  764,  766,  765,  763,
        0,  766,    0,  763,  765,  763,  764,  766,  767,    0,
        0,    0,  767,    0,  765,  763,  767,  766,    0,    0,
        0,  765,  767,    0,  766,  765,    0,    0,  766,    0,
        0,  765,  767,    0,  766,  767,    0,    0,  768,  767,
        0,  765,  768,  767,  766,    0,  768,  769,    0,  767,
      770,  769,  768,    0,  770,    0,    0,  769,    0,  767,
      770,    0,  768,    0,    0,  768,    0,  769,    0,  768,
      770,    0,  771,  768,  769,    0,  771,  770,  769,  768,
      771,  770,  771,    0,  769,    0,    0,  770,    0,  768,

        0,  772,  771,    0,  769,  772,    0,  770,    0,  771,
        0,  772,    0,  771,  772,    0,  773,  771,    0,  771,
      773,  772,    0,    0,    0,    0,  773,  774,  772,  771,
      774,  773,  772,    0,  774,  775,  773,    0,  772,  775,
      774,  772,    0,  773,  777,  775,  777,  773,  772,    0,
      774,  777,    0,  773,  774,  775,  777,  774,  773,    0,
      776,  774,  775,  773,  776,  778,  775,  774,  776,    0,
      776,  777,  775,  777,  778,    0,  778,  774,  777,    0,
      776,  778,  775,  777,  779,    0,  778,  776,  779,  780,
        0,  776,  778,  780,  779,  776,    0,  776,  782,  780,

      782,  778,  781,  778,  779,  782,  781,  776,  778,  780,
      782,  779,  781,  778,  783,  779,  780,    0,  783,    0,
      780,  779,  781,    0,  783,  782,  780,  782,    0,  781,
        0,  779,  782,  781,  783,    0,  780,  782,  784,  781,
      785,  783,  784,  786,  785,  783,    0,  786,  784,  781,
      785,  783,  787,  786,    0,    0,  787,    0,  784,    0,
      785,  783,  787,  786,    0,  784,    0,  785,    0,  784,
      786,  785,  787,    0,  786,  784,    0,  785,  788,  787,
      786,    0,  788,  787,  789,  784,  789,  785,  788,  787,
      786,  789,    0,    0,    0,  790,  789,  790,  788,  787,

      799,    0,  790,    0,  799,  788,    0,  790,    0,  788,
      799,  789,    0,  789,  791,  788,  791,    0,  789,  792,
      799,  791,  790,  789,  790,  788,  791,  799,  792,  790,
      792,  799,    0,    0,  790,  792,    0,  799,    0,    0,
      792,  791,  793,  791,  793,    0,  792,  799,  791,  793,
        0,  793,    0,  791,  793,  792,  794,  792,  794,    0,
        0,    0,  792,  794,    0,    0,    0,  792,  794,  793,
      795,  793,  795,  796,    0,    0,  793,  795,  793,  795,
        0,  793,  795,  794,  796,  794,  796,    0,    0,    0,
      794,  796,    0,    0,    0,  794,  796,  795,    0,  795,

      796,    0,    0,    0,  795,    0,  795,  798,  797,  795,
      797,  796,  798,  796,  798,  797,  797,    0,  796,  798,
      797,    0,    0,  796,  798,    0,    0,    0,  800,    0,
        0,  800,  800,    0,  798,  797,    0,  797,  800,  798,
      801,  798,  797,  797,  801,    0,  798,  797,  800,    0,
      801,  798,  802,  803,    0,  800,  802,  803,  800,  800,
      801,    0,  802,  803,    0,  800,  804,  801,  802,    0,
      804,  801,  802,  803,    0,  800,  804,  801,  805,  802,
      803,    0,  805,  802,  803,    0,  804,  801,  805,  802,
      803,    0,    0,  804,  806,  802,  806,  804,  805,  802,

      803,  806,    0,  804,    0,  805,  806,    0,    0,  805,
      904,    0,  904,  804,    0,  805,    0,  904,    0,    0,
        0,  806,  904,  806,  905,  805,  905,    0,  806,    0,
        0,  905,    0,  806,    0,    0,  905,  904,  906,  904,
      906,    0,    0,    0,  904,  906,    0,    0,    0,  904,
      906,  905,  906,  905,  907,    0,  907,    0,  905,    0,
      908,  907,    0,  905,  908,  906,  907,  906,    0,    0,
      908,    0,  906,    0,  909,    0,    0,  906,  909,  906,
      908,  907,  910,  907,  909,    0,  910,  908,  907,    0,
        0,  908,  910,  907,  909,    0,    0,  908,    0,    0,

      911,  909,  910,    0,  911,  909,    0,  908,  912,  910,
      911,  909,  912,  910,    0,  911,  912,    0,    0,  910,
      911,  909,  912,  913,  913,    0,    0,  911,  913,  910,
        0,  911,  912,    0,  913,  912,    0,  911,    0,  912,
        0,    0,  911,  912,  913,    0,  914,  911,  914,  912,
      913,  913,  914,    0,    0,  913,    0,    0,  914,  912,
      915,  913,  915,    0,    0,    0,    0,  915,  914,    0,
        0,  913,  915,  914,  916,  914,  916,    0,    0,  914,
      917,  916,  916,    0,  917,  914,  916,  915,    0,  915,
      917,    0,  918,    0,  915,  914,  918,    0,    0,  915,

      917,  916,  918,  916,    0,    0,  919,  917,  916,  916,
      919,  917,  918,  916,    0,    0,  919,  917,  920,  918,
      920,    0,    0,  918,  921,  920,  919,  917,  921,  918,
      920,    0,    0,  919,  921,    0,  922,  919,    0,  918,
      922,    0,    0,  919,  921,  920,  922,  920,    0,    0,
      923,  921,  920,  919,  923,  921,  922,  920,  923,    0,
        0,  921,  925,  922,  923,    0,  925,  922,  924,    0,
      924,  921,  925,  922,  923,  924,    0,  923,    0,    0,
      924,  923,  925,  922,  926,  923,  927,    0,  926,  925,
      927,  923,    0,  925,  926,  924,  927,  924,    0,  925,

        0,  923,  924,    0,  926,    0,  927,  924,  930,  925,
      928,  926,  930,  927,  928,  926,    0,  927,  930,    0,
      928,  926,  929,  927,  929,  928,    0,    0,  930,  929,
      928,  926,    0,  927,  929,  930,    0,  928,  931,  930,
        0,  928,  931,    0,    0,  930,    0,  928,  931,  929,
        0,  929,  928,    0,    0,  930,  929,  928,  931,    0,
      935,  929,  932,  933,  935,  931,  932,  933,    0,  931,
      935,    0,  932,  933,  934,  931,  934,  932,  933,    0,
      935,  934,  932,  933,    0,  931,  934,  935,    0,  932,
      933,  935,    0,  932,  933,    0,    0,  935,    0,  932,

      933,  934,    0,  934,  932,  933,    0,  935,  934,  932,
      933,  937,  936,  934,  936,  937,  938,    0,  936,    0,
      938,  937,    0,    0,  936,    0,  938,    0,    0,    0,
        0,  937,    0,    0,  936,    0,  938,    0,  937,  936,
        0,  936,  937,  938,    0,  936,  939,  938,  937,    0,
      939,  936,    0,  938,    0,  940,  939,    0,  937,  940,
      941,  936,  941,  938,  939,  940,  939,  941,    0,  942,
      940,  942,  941,  939,    0,  940,  942,  939,    0,    0,
        0,  942,  940,  939,    0,    0,  940,  941,    0,  941,
        0,  939,  940,  939,  941,    0,  942,  940,  942,  941,

      943,    0,  940,  942,  944,  943,  944,  943,  942,    0,
        0,  944,  943,  945,    0,  945,  944,  943,    0,    0,
      945,    0,    0,    0,    0,  945,    0,  943,    0,    0,
        0,  944,  943,  944,  943,    0,    0,    0,  944,  943,
      945,    0,  945,  944,  943,    0,  946,  945,  946,  947,
        0,  947,  945,  946,  946,  948,  947,  948,  946,    0,
        0,  947,  948,    0,    0,    0,    0,  948,    0,    0,
        0,    0,    0,  946,    0,  946,  947,    0,  947,    0,
      946,  946,  948,  947,  948,  946,    0,    0,  947,  948,
      949,  950,  949,    0,  948,  950,    0,  949,  949,    0,

        0,  950,  949,  951,    0,  951,    0,    0,    0,    0,
      951,  950,    0,  951,  952,  951,  952,  949,  950,  949,
        0,  952,  950,    0,  949,  949,  952,    0,  950,  949,
      951,    0,  951,    0,    0,    0,    0,  951,  950,    0,
      951,  952,  951,  952,  953,  954,  953,  954,  952,    0,
      955,  953,  954,  952,    0,    0,  953,  954,  955,    0,
      955,    0,    0,    0,    0,  955,    0,    0,    0,    0,
      955,  953,  954,  953,  954,    0,    0,  955,  953,  954,
        0,    0,    0,  953,  954,  955,  956,  955,  956,  957,
      958,  957,  955,  956,  958,    0,  957,  955,  956,    0,

      958,  957,  959,    0,  959,    0,    0,    0,    0,  959,
      958,    0,    0,  956,  959,  956,  957,  958,  957,    0,
      956,  958,  960,  957,    0,  956,    0,  958,  957,  959,
        0,  959,    0,  960,    0,  960,  959,  958,    0,    0,
      960,  959,    0,    0,  961,  960,  961,    0,    0,  960,
        0,  961,  961,  962,    0,    0,  961,  962,    0,  962,
      960,    0,  960,    0,  962,    0,    0,  960,    0,  962,
        0,  961,  960,  961,    0,    0,    0,    0,  961,  961,
      962,    0,    0,  961,  962,  963,  962,  963,  964,    0,
      964,  962,  963,  963,    0,  964,  962,  963,  966,  965,

      964,  965,  966,    0,    0,    0,  965,    0,  966,    0,
        0,  965,  963,    0,  963,  964,    0,  964,  966,  963,
      963,    0,  964,    0,  963,  966,  965,  964,  965,  966,
        0,    0,  967,  965,    0,  966,  967,    0,  965,  968,
      968,    0,  967,    0,  968,  966,    0,  967,    0,    0,
      968,    0,  967,    0,    0,    0,    0,    0,    0,  967,
      968,    0,    0,  967,    0,    0,  968,  968,  969,  967,
        0,  968,  969,    0,  967,    0,  970,  968,  969,  967,
      970,  969,    0,    0,    0,    0,  970,  968,  969,  970,
      971,    0,    0,    0,  971,  969,  970,    0,    0,  969,

      971,    0,  972,  970,    0,  969,  972,  970,  969,    0,
      971,    0,  972,  970,  973,  969,  970,  971,  973,    0,
        0,  971,  972,  970,  973,    0,  974,  971,    0,  972,
      974,    0,    0,  972,  973,    0,  974,  971,    0,  972,
      975,  973,    0,    0,  975,  973,  974,    0,  975,  972,
        0,  973,  976,  974,  975,    0,  976,  974,  979,    0,
      976,  973,  979,  974,  975,    0,  976,  975,  979,  977,
      977,  975,    0,  974,  977,  975,  976,    0,  979,  976,
      977,  975,  980,  976,  978,  979,  980,  976,  978,  979,
      977,  975,  980,  976,  978,  979,  977,  977,    0,  978,

        0,  977,  980,  976,  978,  979,    0,  977,    0,  980,
      982,  978,    0,  980,  982,  978,    0,  977,  982,  980,
        0,  978,  981,  981,  982,    0,  978,  981,  983,  980,
      983,  978,    0,  981,  982,  983,    0,  982,    0,    0,
      983,  982,    0,  981,    0,  982,  984,    0,  984,  981,
      981,  982,  984,  984,  981,  983,    0,  983,  984,    0,
      981,  982,  983,    0,  985,    0,  985,  983,    0,    0,
      981,  985,  985,  984,    0,  984,  985,  986,    0,  984,
      984,    0,    0,  987,    0,  984,    0,    0,  986,    0,
      986,  985,    0,  985,  987,  986,  987,    0,  985,  985,

      986,  987,    0,  985,  986,    0,  987,  988,    0,  988,
      987,    0,    0,    0,  988,  986,    0,  986,  989,  988,
      989,  987,  986,  987,    0,  989,    0,  986,  987,    0,
      989,    0,    0,  987,  988,    0,  988,    0,  990,  991,
      991,  988,  990,    0,  991,  989,  988,  989,  990,    0,
      991,    0,  989,    0,    0,    0,    0,  989,  990,    0,
      991,    0,    0,    0,  992,  990,  991,  991,  992,  990,
        0,  991,  993,    0,  992,  990,  993,  991,    0,    0,
        0,  994,  993,  994,  992,  990,    0,  991,  994,  995,
        0,  992,  993,  994,    0,  992,    0,    0,    0,  993,

      995,  992,  995,  993,    0,    0,    0,  995,  994,  993,
      994,  992,  995,  996,    0,  994,  995,    0,    0,  993,
      994,  997,    0,  997,  996,    0,  996,  995,  997,  995,
      998,  996,  998,  997,  995,    0,  996,  998,    0,  995,
      996,    0,  998,    0,    0,    0,    0,    0,  997,    0,
      997,  996, 1072,  996,    0,  997, 1072,  998,  996,  998,
      997, 1073, 1072,  996,  998, 1073, 1074,    0, 1074,  998,
     1077, 1073, 1072, 1074, 1077, 1075,    0, 1075, 1074, 1072,
     1077, 1073, 1075, 1072, 1076,    0, 1076, 1075, 1073, 1072,
     1077, 1076, 1073, 1074,    0, 1074, 1076, 1077, 1073, 1072,

     1074, 1077, 1075,    0, 1075, 1074, 1078, 1077, 1073, 1075,
     1078, 1076,    0, 1076, 1075,    0, 1078, 1077, 1076,    0,
     1079, 1078, 1079, 1076,    0,    0, 1078, 1079, 1080, 1081,
     1080, 1081, 1079, 1078,    0, 1080, 1081, 1078,    0,    0,
     1080, 1081,    0, 1078,    0,    0,    0, 1079, 1078, 1079,
        0,    0,    0, 1078, 1079, 1080, 1081, 1080, 1081, 1079,
        0,    0, 1080, 1081, 1082,    0, 1082, 1080, 1081,    0,
     1083, 1082, 1083, 1084, 1084, 1084, 1082, 1083, 1083,    0,
     1084,    0, 1083,    0,    0, 1084,    0,    0,    0,    0,
        0, 1082,    0, 1082,    0,    0,    0, 1083, 1082, 1083,

     1084, 1084, 1084, 1082, 1083, 1083, 1085, 1084,    0, 1083,
        0, 1086, 1084, 1086,    0, 1085,    0, 1085, 1086,    0,
        0,    0, 1085, 1086, 1087,    0, 1087, 1085,    0,    0,
        0, 1087, 1087, 1085,    0,    0, 1087,    0, 1086,    0,
     1086,    0, 1085,    0, 1085, 1086,    0,    0,    0, 1085,
     1086, 1087,    0, 1087, 1085, 1088, 1089, 1088, 1087, 1087,
        0,    0, 1088, 1087,    0,    0, 1089, 1088, 1089, 1090,
        0, 1090,    0, 1089,    0,    0, 1090,    0, 1089,    0,
        0, 1090, 1088, 1089, 1088,    0,    0,    0, 1091, 1088,
        0,    0,    0, 1089, 1088, 1089, 1090, 1091, 1090, 1091,

     1089,    0,    0, 1090, 1091, 1089,    0,    0, 1090, 1091,
     1092, 1093, 1092, 1093,    0, 1091,    0, 1092, 1093,    0,
        0,    0, 1092, 1093, 1091,    0, 1091,    0,    0,    0,
        0, 1091,    0,    0,    0,    0, 1091, 1092, 1093, 1092,
     1093, 1094, 1095, 1094, 1092, 1093, 1095, 1096, 1094, 1092,
     1093, 1096, 1095, 1094, 1097,    0, 1097, 1096,    0,    0,
        0, 1097, 1095,    0,    0,    0, 1097, 1096, 1094, 1095,
     1094,    0,    0, 1095, 1096, 1094,    0,    0, 1096, 1095,
     1094, 1097,    0, 1097, 1096,    0,    0,    0, 1097, 1095,
     1098, 1099, 1098, 1097, 1096, 1099, 1100, 1098, 1098,    0,

     1100, 1099, 1098,    0,    0,    0, 1100,    0,    0,    0,
     1101, 1099,    0,    0, 1101,    0, 1100, 1098, 1099, 1098,
     1101,    0, 1099, 1100, 1098, 1098,    0, 1100, 1099, 1098,
     1101,    0, 1102, 1100,    0, 1103, 1102, 1101, 1099, 1103,
     1104, 1101, 1102, 1100, 1104, 1103,    0, 1101,    0,    0,
     1104,    0, 1102,    0, 1105, 1103,    0, 1101, 1105, 1102,
     1104,    0, 1103, 1102, 1105,    0, 1103, 1104,    0, 1102,
        0, 1104, 1103,    0, 1105,    0, 1106, 1104,    0, 1102,
     1106, 1105, 1103,    0, 1107, 1105, 1106, 1104, 1107, 1106,
        0, 1105,    0,    0, 1107,    0, 1106,    0, 1108,    0,

        0, 1105, 1108, 1106, 1107,    0, 1108, 1106,    0,    0,
     1109, 1107, 1108, 1106, 1109, 1107, 1106,    0,    0,    0,
     1109, 1107, 1108, 1106, 1110, 1108,    0,    0, 1110, 1108,
     1109, 1107,    0, 1108, 1110,    0, 1111, 1109, 1111, 1108,
        0, 1109,    0, 1111, 1110,    0,    0, 1109, 1111, 1108,
        0, 1110, 1112,    0, 1112, 1110,    0, 1109,    0, 1112,
     1113, 1110, 1113, 1111, 1112, 1111, 1114, 1113, 1114,    0,
     1111, 1110, 1113, 1114,    0, 1111,    0,    0, 1114, 1112,
        0, 1112,    0,    0,    0, 1115, 1112, 1113,    0, 1113,
     1116, 1112, 1116, 1114, 1113, 1114, 1115, 1116, 1115, 1113,

     1114,    0, 1116, 1115,    0, 1114,    0,    0, 1115,    0,
        0,    0, 1115,    0, 1117,    0, 1117, 1116,    0, 1116,
        0, 1117, 1117, 1115, 1116, 1115, 1117, 1118,    0, 1116,
     1115, 1118, 1119,    0,    0, 1115, 1119, 1118,    0,    0,
     1120, 1117, 1119, 1117, 1120,    0,    0, 1118, 1117, 1117,
     1120,    0, 1119, 1117, 1118,    0,    0,    0, 1118, 1119,
     1120,    0, 1121, 1119, 1118,    0, 1121, 1120,    0, 1119,
        0, 1120, 1121,    0, 1118,    0, 1122, 1120,    0, 1119,
     1122,    0, 1121,    0,    0,    0, 1122, 1120, 1123, 1121,
     1123,    0,    0, 1121, 1123,    0, 1122,    0,    0, 1121,

     1123,    0, 1124, 1122, 1124,    0,    0, 1122, 1124, 1121,
     1123,    0,    0, 1122, 1124, 1123,    0, 1123, 1125,    0,
     1125, 1123,    0, 1122, 1124, 1125, 1126, 1123, 1126, 1124,
     1125, 1124, 1127, 1126, 1127, 1124,    0, 1123, 1126, 1127,
        0, 1124,    0,    0, 1127, 1125,    0, 1125,    0,    0,
        0, 1124, 1125, 1126,    0, 1126, 1128, 1125, 1128, 1127,
     1126, 1127, 1129, 1128, 1129, 1126, 1127,    0, 1128, 1129,
     1130, 1127, 1130,    0, 1129,    0,    0, 1130,    0,    0,
        0,    0, 1130, 1128,    0, 1128, 1131,    0, 1131, 1129,
     1128, 1129,    0, 1131, 1132, 1128, 1129, 1130, 1131, 1130,

        0, 1129,    0,    0, 1130, 1132, 1191, 1132,    0, 1130,
     1191,    0, 1132, 1131,    0, 1131, 1191, 1132, 1133, 1134,
     1131, 1132,    0,    0,    0, 1131, 1191,    0, 1134, 1133,
     1134, 1133, 1132, 1191, 1132, 1134, 1133, 1191,    0, 1132,
     1134, 1133,    0, 1191, 1132, 1133, 1134,    0,    0,    0,
        0,    0, 1135, 1191, 1135, 1134, 1133, 1134, 1133, 1135,
     1135,    0, 1134, 1133, 1135, 1136,    0, 1134, 1133,    0,
     1137,    0, 1137, 1136,    0, 1136, 1138, 1137, 1138, 1135,
     1136, 1135, 1137, 1138,    0, 1136, 1135, 1135, 1138,    0,
        0, 1135, 1136,    0, 1139,    0, 1139, 1137,    0, 1137,

     1136, 1139, 1136, 1138, 1137, 1138, 1139, 1136,    0, 1137,
     1138,    0, 1136,    0,    0, 1138,    0, 1140,    0, 1140,
     1141, 1139, 1141, 1139, 1140,    0, 1141, 1141, 1139, 1140,
        0,    0, 1141, 1139,    0,    0, 1142,    0, 1142,    0,
        0,    0,    0, 1142, 1140,    0, 1140, 1141, 1142, 1141,
     1187, 1140, 1187, 1141, 1141,    0, 1140, 1187,    0, 1141,
        0,    0, 1187, 1142, 1188, 1142, 1188,    0,    0,    0,
     1142, 1188,    0,    0,    0, 1142, 1188, 1187, 1189, 1187,
     1189,    0,    0,    0, 1187, 1189,    0,    0,    0, 1187,
     1189, 1188, 1190, 1188, 1190,    0, 1192,    0, 1188, 1190,

     1192,    0,    0, 1188, 1190, 1189, 1192, 1189, 1194, 1194,
     1193,    0, 1189,    0, 1193,    0, 1192, 1189,    0, 1190,
     1193, 1190,    0, 1192,    0, 1195, 1190, 1192,    0, 1195,
     1193, 1190,    0, 1192, 1194, 1195,    0, 1193, 1194,    0,
        0, 1193,    0, 1192, 1194, 1195,    0, 1193,    0,    0,
        0,    0, 1195,    0, 1194, 1196, 1195, 1193,    0, 1196,
     1197, 1194, 1195, 1196, 1197, 1194,    0,    0,    0, 1196,
     1197, 1194, 1195, 1198, 1199,    0,    0, 1198, 1199, 1196,
     1197, 1194, 1196, 1198, 1199,    0, 1196, 1197, 1200,    0,
     1196, 1197, 1200, 1198, 1199,    0, 1196, 1197, 1200,    0,

     1198, 1199,    0, 1200, 1198, 1199, 1196, 1197, 1200,    0,
     1198, 1199, 1201, 1202, 1203, 1200, 1201, 1202, 1203, 1200,
     1198, 1199, 1201, 1202, 1203, 1200,    0,    0,    0,    0,
     1200,    0, 1201, 1202, 1203, 1200,    0,    0,    0, 1201,
     1202, 1203,    0, 1201, 1202, 1203, 1204,    0, 1204, 1201,
     1202, 1203,    0, 1204,    0, 1205,    0, 1205, 1204, 1201,
     1202, 1203, 1205,    0,    0, 1206,    0, 1205,    0,    0,
        0,    0,    0, 1204, 1206, 1204, 1206,    0,    0,    0,
     1204, 1206, 1205,    0, 1205, 1204, 1206,    0, 1207, 1205,
     1207,    0, 1206,    0, 1205, 1207,    0, 1208,    0, 1208,

     1207, 1206,    0, 1206, 1208,    0,    0,    0, 1206, 1208,
     1211,    0,    0, 1206, 1211, 1207, 1209, 1207, 1209,    0,
     1211,    0, 1207, 1209, 1208,    0, 1208, 1207, 1209,    0,
     1211, 1208, 1210,    0, 1210,    0, 1208, 1211, 1210, 1210,
        0, 1211, 1212, 1209, 1210, 1209, 1212, 1211,    0,    0,
     1209, 1213, 1212, 1213,    0, 1209,    0, 1211, 1213, 1210,
        0, 1210, 1212, 1213,    0, 1210, 1210,    0,    0, 1212,
     1214, 1210, 1214, 1212, 1215,    0, 1215, 1214, 1213, 1212,
     1213, 1215, 1214,    0,    0, 1213, 1215,    0,    0, 1212,
     1213,    0,    0,    0,    0,    0,    0, 1214, 1216, 1214,

     1216, 1215,    0, 1215, 1214, 1216, 1216,    0, 1215, 1214,
     1216, 1217, 1217, 1215, 1217,    0, 1218,    0, 1218, 1217,
        0,    0,    0, 1218, 1217, 1216,    0, 1216, 1218,    0,
        0,    0, 1216, 1216,    0,    0,    0, 1216, 1217, 1217,
     1219, 1217, 1219, 1218,    0, 1218, 1217, 1219,    0,    0,
     1218, 1217, 1219,    0, 1220, 1218, 1220,    0, 1221,    0,
     1221, 1220, 1220,    0,    0, 1221, 1220, 1219,    0, 1219,
     1221,    0,    0,    0, 1219,    0,    0,    0,    0, 1219,
        0, 1220,    0, 1220, 1222, 1221, 1222, 1221, 1220, 1220,
     1222, 1222, 1221, 1220,    0,    0, 1222, 1221, 1223, 1223,

     1223,    0, 1225,    0,    0, 1223, 1225, 1224,    0, 1224,
     1223, 1222, 1225, 1222, 1224, 1224,    0, 1222, 1222, 1224,
     1226,    0, 1225, 1222, 1226, 1223, 1223, 1223,    0, 1225,
     1226,    0, 1223, 1225, 1224,    0, 1224, 1223,    0, 1225,
     1226, 1224, 1224,    0, 1227,    0, 1224, 1226, 1227, 1225,
        0, 1226, 1228,    0, 1227,    0, 1228, 1226,    0,    0,
        0,    0, 1228,    0, 1227,    0, 1254, 1226,    0,    0,
     1254, 1227, 1228,    0, 1252, 1227, 1254,    0, 1252, 1228,
        0, 1227,    0, 1228, 1252,    0, 1254, 1252,    0, 1228,
        0, 1227, 1255, 1254, 1252,    0, 1255, 1254,    0, 1228,

     1256, 1252, 1255, 1254, 1256, 1252,    0, 1255,    0,    0,
     1256, 1252, 1255, 1254, 1252,    0,    0,    0, 1257, 1255,
     1256, 1252, 1257, 1255,    0,    0, 1259, 1256, 1257, 1255,
     1259, 1256,    0,    0, 1255,    0, 1259, 1256, 1257, 1255,
     1258, 1259, 1258,    0, 1258, 1257, 1259, 1256,    0, 1257,
     1258,    0, 1260, 1259, 1261, 1257, 1260, 1259, 1261,    0,
     1258,    0, 1260, 1259, 1261, 1257,    0, 1258, 1259, 1258,
        0, 1258, 1260, 1259, 1261,    0,    0, 1258,    0, 1260,
     1262, 1261,    0, 1260, 1262, 1261,    0, 1258,    0, 1260,
     1262, 1261,    0, 1262,    0,    0, 1263, 1264, 1263, 1260,

     1262, 1261, 1264, 1263, 1264,    0,    0, 1262, 1263, 1264,
        0, 1262,    0,    0, 1264,    0,    0, 1262,    0,    0,
     1262,    0,    0, 1263, 1264, 1263, 1265, 1262, 1265, 1264,
     1263, 1264, 1266, 1265, 1266, 1263, 1264,    0, 1265, 1266,
     1267, 1264, 1267,    0, 1266,    0,    0, 1267,    0,    0,
        0,    0, 1267, 1265,    0, 1265,    0,    0, 1268, 1266,
     1265, 1266, 1268,    0,    0, 1265, 1266, 1267, 1268, 1267,
        0, 1266, 1269,    0, 1267,    0, 1269, 1270, 1268, 1267,
     1271, 1270, 1269, 1269, 1271, 1268,    0, 1270,    0, 1268,
     1271,    0, 1269,    0,    0, 1268,    0, 1270,    0, 1269,

     1271, 1272, 1272, 1269, 1270, 1268, 1272, 1271, 1270, 1269,
     1269, 1271, 1272,    0, 1270, 1287, 1287, 1271,    0, 1269,
        0,    0, 1272,    0, 1270,    0, 1289, 1271, 1272, 1272,
     1289,    0,    0, 1272,    0,    0, 1289,    0, 1290, 1272,
     1291, 1287, 1290,    0, 1291, 1287, 1289,    0, 1290, 1272,
     1291, 1287, 1292, 1289, 1292,    0,    0, 1289, 1290, 1292,
     1291, 1287,    0, 1289, 1292, 1290,    0, 1291, 1287, 1290,
        0, 1291, 1287, 1289,    0, 1290,    0, 1291, 1287, 1292,
        0, 1292, 1293,    0, 1293, 1290, 1292, 1291, 1287, 1293,
     1294, 1292, 1294, 1295, 1293, 1295, 1296, 1294, 1296,    0,

     1295,    0, 1294, 1296,    0, 1295,    0,    0, 1296, 1293,
        0, 1293,    0,    0,    0,    0, 1293, 1294,    0, 1294,
     1295, 1293, 1295, 1296, 1294, 1296,    0, 1295,    0, 1294,
     1296,    0, 1295, 1297, 1298, 1296, 1308, 1297, 1298,    0,
     1308,    0,    0, 1297, 1298,    0, 1308,    0, 1309,    0,
        0,    0, 1309, 1297, 1298,    0, 1308,    0, 1309,    0,
     1297, 1298,    0, 1308, 1297, 1298,    0, 1308, 1309,    0,
     1297, 1298,    0, 1308,    0, 1309,    0,    0,    0, 1309,
     1297, 1298, 1310, 1308, 1310, 1309, 1318,    0, 1318, 1310,
        0,    0,    0, 1318, 1310, 1309,    0,    0, 1318,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1310,
        0, 1310,    0, 1318,    0, 1318, 1310,    0,    0,    0,
     1318, 1310,    0,    0,    0, 1318, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1351,    0,    0, 1351, 1351,
     1351, 1351, 1351, 1351, 1352, 1352,    0, 1352, 1353, 1353,
     1353, 1354, 1354, 1354,    0, 1354, 1354, 1354, 1354, 1354,
     1355,    0, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1356,
        0, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1357,    0,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358,    0, 1358,
     1359,    0, 1359, 1360,    0, 1360, 1361,    0, 1361, 1362,

        0, 1362, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 3122 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 3136 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			yy_size_t yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3423 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1350 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1349 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 168:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 175:
#line 241 "flex_lexer.l"
case 176:
#line 242 "flex_lexer.l"
case 177:
#line 243 "flex_lexer.l"
case 178:
#line 244 "flex_lexer.l"
case 179:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{
  yylval->fval = atof(yytext) ;
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 180:
YY_RULE_SETUP
#line 254 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 259 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 269 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 275 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 280 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 281 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 282 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 283 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 284 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 286 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 288 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4445 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1350 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1350 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1349);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 288 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

