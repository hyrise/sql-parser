#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 133
#define YY_END_OF_BUFFER 134
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[922] =
    {   0,
        0,    0,    2,    2,  134,  132,    4,    4,  132,  125,
      132,  125,  125,  128,  125,  125,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  131,    1,  128,  127,
      126,  123,  122,  124,  130,  130,  130,  130,  130,  130,
      113,  130,  114,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  115,  130,  116,  117,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  118,
      119,  120,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  121,  130,
      130,  130,  130,  130,  130,  130,  130,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  129,  126,   99,  130,  100,  130,  130,  101,
      130,  102,  130,  130,  130,  130,  130,  130,  130,  130,
      103,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  104,  130,  130,  130,  130,  130,  130,  105,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  106,  130,  130,  107,  130,  130,  130,  130,  130,

      130,  130,  130,  108,  130,  130,  109,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  110,  130,
      130,  130,  130,  111,  130,  130,  130,  130,  112,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  130,  130,  130,  130,
      130,  130,   73,  130,   74,  130,  130,  130,  130,   75,
      130,  130,  130,  130,   76,  130,  130,  130,   77,   78,
      130,  130,  130,  130,  130,   79,   80,   81,  130,  130,
       82,  130,   83,  130,  130,  130,  130,  130,  130,   84,
      130,   85,   86,   87,  130,   88,  130,  130,  130,  130,
       89,  130,  130,  130,  130,  130,   90,   91,  130,  130,

      130,  130,  130,  130,  130,   92,  130,  130,  130,  130,
       93,   94,   95,  130,  130,  130,  130,  130,  130,  130,
       96,  130,   97,  130,   98,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   54,   55,  130,   56,  130,  130,
      130,  130,  130,  130,   57,  130,  130,  130,   58,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   59,  130,
      130,  130,   60,   61,  130,  130,  130,  130,   62,   63,
       64,   65,  130,  130,  130,   66,   67,  130,  130,  130,
      130,  130,   68,  130,  130,  130,  130,   69,  130,  130,
      130,   70,  130,  130,  130,   71,  130,  130,   72,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  130,   30,  130,  130,   31,  130,
       32,  130,  130,   33,   34,  130,   35,   36,   37,  130,
       38,  130,   39,   40,  130,   41,   42,  130,  130,   43,
      130,  130,   44,  130,  130,  130,   45,  130,   46,   47,
       48,  130,   49,  130,  130,  130,   50,   51,   52,   53,
      130,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   15,
       16,   17,   18,  130,   19,  130,   20,   21,   22,   23,
      130,   24,  130,  130,   25,   26,  130,   27,   28,  130,
      130,  130,   29,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  130,   10,
      130,   11,  130,   12,  130,  130,   13,    2,    2,    2,

        2,    2,    2,    2,    2,    2,  130,    7,  130,    8,
        9,    2,    2,    2,    2,    2,    5,    6,    2,    2,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static const flex_int16_t yy_base[929] =
    {   0,
        0,    0,   65,    0,  355, 3717,  129,  131,    0, 3717,
      346,  128,  342,  130,  129,  339,  126,  126,  134,  180,
      122,  173,  121,  141,  186,  122,  138,  178,  181,  222,
      224,  223,    0,  197,  270,  313,  220,  246,  139,    0,
      164,  206,  345,    0,  341,  206,  335,  252,  253,  328,
      370,  428,  480,  532,  580,  628,  271,  325,  676,  304,
      179,  420,  272,  728,  776,  828,  235,  362,  878,  930,
      978,  438,  432,  268,  315,  307, 3717, 3717,  283,  302,
      291, 3717, 3717, 3717,    0,  280,  270,  286,  350,  275,
      349,  366,    0,  361,  371,  427,  353,  372,  481,  430,

      383,  419,  419,  440,  443,  508,  438,  433,  464,  471,
      473,  474,  472,  482,    0,  476,  535,  488,  494,  479,
      501,  532,  545,  517,  522,  522,  532,  541,  555,  553,
        0,  557,  551,  569,  588,  586,  582,  583,  585,  588,
      582,  584,  602,  605,  597,  626,  606,  600,  599,  604,
      632,  641,  638,  636,  651,  646,  637,    0,  301,  264,
      260,    0,    0,  298,  249,  231,    0,    0,    0,  654,
      687,  695,  720,  706,  739,  743,  773,  662,  791,  822,
      807,  813,  850, 1030,  839,  847,  873,  882,  912,  921,
     1080,  917,  922,  956,  974,  975,  980, 1015, 1034,  952,

      986, 1129, 1040, 1065,  991, 1046, 1089, 1090, 1106, 1094,
     1120, 1139, 1157, 1152, 1160, 1052, 1169, 1158, 1190, 1198,
     1193, 1192, 1209, 1223, 1227, 1231, 1235, 1263, 1252, 1257,
     1273, 1260, 1289, 1285, 1295, 1294, 1327, 1313, 1330, 1335,
     1329, 1331, 3717,  210,    0,  653,    0,  656,  685,    0,
      698,    0,  688,  712,  724,  783,  744,  767,  798,  785,
        0,  837,  838,  891, 1352,  893,  901,  889,  939,  944,
      996,    0, 1013, 1028, 1043, 1084, 1097, 1123,    0, 1236,
     1311, 1337, 1323, 1340, 1355, 1348, 1350, 1358, 1369, 1371,
     1372, 1381, 1364, 1374,    0, 1369, 1385, 1383, 1389, 1393,

     1391, 1381, 1384,    0, 1394, 1389, 1389, 1404, 1405, 1410,
     1400, 1402, 1409, 1423, 1406, 1419, 1423, 1426,    0, 1416,
     1420, 1422, 1431,    0, 1428, 1426, 1433, 1443,    0, 1436,
     1444, 1437, 1455, 1446, 1441, 1440, 1444, 1454, 1457,    0,
      159, 1471, 1473, 1475, 1476, 1492, 1477, 1505, 1488, 1507,
     1511, 1530, 1516, 1533, 1546, 1551, 1545, 1542, 1548, 1583,
     1585, 1567, 1599, 1584, 1600, 1616, 1618, 1601, 1633, 1639,
     1634, 1651, 1650, 1667, 1652, 1655, 1684, 1683, 1688, 1673,
     1706, 1718, 1724, 1727, 1740, 1705, 1721, 1737, 1762, 1743,
     1776, 1761, 1778, 1775, 1797, 1780, 1814, 1811, 1816, 1819,

     1829, 1845, 1847, 1850, 1848, 1851, 1873, 1881, 1899, 1903,
     1886, 1907, 1921, 1885, 1916, 1925, 1935, 1944, 1958, 1940,
     1956, 1970, 1969, 1979, 1975, 1992, 1998, 2020, 1994, 2028,
     2029, 2042, 2043, 2053, 2074, 2078, 1466, 1500, 1559, 1576,
     1628, 1669,    0, 1711,    0, 1720, 1716, 1731, 1777,    0,
     1787, 1799, 1811, 1834,    0, 1904, 1900, 1932,    0,    0,
     1998, 1999, 2007, 2012, 2037,    0,    0,    0, 2048, 2041,
        0, 2055,    0, 2056, 2059, 2058, 2069, 2071, 2084,    0,
     2085,    0,    0,    0, 2081,    0, 2095, 2103, 2092, 2094,
        0, 2114, 2115, 2103, 2104, 2110,    0,    0, 2124, 2126,

     2118, 2114, 2113, 2123, 2134,    0, 2135, 2132, 2137, 2128,
        0,    0, 2126, 2143, 2137, 2132, 2154, 2136, 2150, 2156,
        0, 2141,    0, 2160,    0, 2161, 2169, 2166, 2170, 2172,
     2171, 2180, 2206, 2194, 2195, 2211, 2205, 2223, 2228, 2239,
     2240, 2234, 2269, 2257, 2274, 2278, 2288, 2280, 2290, 2291,
     2303, 2312, 2331, 2340, 2306, 2334, 2342, 2348, 2345, 2357,
     2370, 2366, 2388, 2394, 2382, 2399, 2403, 2418, 2422, 2433,
     2424, 2432, 2436, 2455, 2437, 2454, 2466, 2476, 2472, 2478,
     2489, 2491, 2495, 2507, 2521, 2504, 2506, 2532, 2543, 2537,
     2549, 2558, 2567, 2583, 2571, 2577, 2595, 2586, 2601, 2592,

     2607, 2609, 2637, 2631, 2625, 2653, 2655, 2659, 2663, 2665,
     2671, 2669, 2674, 2693,    0,    0, 2214,    0, 2236, 2244,
     2294, 2288, 2337, 2349,    0, 2354, 2393, 2473,    0, 2546,
     2584, 2616, 2617, 2662, 2666, 2681, 2695, 2696,    0, 2703,
     2694, 2694,    0,    0, 2696, 2715, 2703, 2712,    0,    0,
        0,    0, 2727, 2721, 2710,    0,    0, 2727, 2715, 2716,
     2731, 2729,    0, 2739, 2722, 2740, 2745, 2729, 2732, 2732,
     2752,    0, 2749, 2754, 2757,    0, 2745, 2765,    0, 2763,
     2765, 2773, 2769, 2771, 2777, 2779, 2802, 2803, 2781, 2787,
     2815, 2836, 2817, 2819, 2833, 2845, 2831, 2841, 2859, 2867,

     2857, 2869, 2890, 2885, 2891, 2895, 2913, 2899, 2903, 2921,
     2907, 2925, 2944, 2929, 2947, 2953, 2957, 2962, 2983, 2975,
     2961, 2979, 2987, 2992, 2998, 2996, 3020, 3001, 3033, 3035,
     3037, 3046, 3054, 3052, 3070, 3087, 3071, 3076, 3089, 3086,
     3100, 3105, 3108, 3102, 2782,    0, 2934, 3031, 3080, 3104,
        0, 3126, 3111,    0,    0, 3132,    0,    0,    0, 3137,
        0, 3130,    0,    0, 3120,    0,    0, 3128, 3142,    0,
     3136, 3148,    0, 3130, 3148, 3130,    0, 3156, 3142,    0,
        0, 3151,    0, 3163, 3164, 3146,    0,    0,    0,    0,
     3155, 3173, 3174, 3182, 3176, 3178, 3190, 3179, 3213, 3207,

     3208, 3212, 3216, 3230, 3231, 3242, 3244, 3245, 3247, 3246,
     3248, 3261, 3270, 3276, 3285, 3279, 3280, 3302, 3314, 3284,
     3301, 3313, 3315, 3318, 3346, 3350, 3347, 3352, 3356, 3355,
     3358, 3384, 3386, 3368, 3369, 3392, 3398, 3410,    0,    0,
        0,    0,    0, 3328,    0, 3315,    0,    0,    0,    0,
     3389,    0, 3387, 3408,    0,    0, 3394,    0,    0, 3407,
     3413, 3422,    0, 3423, 3426, 3432, 3434, 3438, 3455, 3440,
     3456, 3442, 3464, 3466, 3468, 3474, 3477, 3492, 3480, 3490,
     3496, 3514, 3506, 3508, 3518, 3522, 3520, 3544, 3494,    0,
     3510,    0, 3533,    0, 3528, 3539,    0, 3559, 3560, 3563,

     3562, 3568, 3572, 3576, 3593, 3594, 3570,    0, 3570,    0,
        0, 3598, 3602, 3612, 3616, 3617,    0,    0, 3627, 3628,
     3717, 3692, 3696,  132, 3700, 3704, 3708, 3712
    } ;

static const flex_int16_t yy_def[929] =
    {   0,
      921,    1,  921,    3,  921,  921,  921,  921,  922,  921,
      923,  921,  921,  921,  921,  921,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  925,
      925,  921,  926,  925,  927,  925,  925,  925,  925,  925,
      928,  928,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  921,  922,  923,  921,  921,  921,  921,
      921,  921,  921,  921,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,

      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  925,  925,  926,
      927,  925,  925,  925,  925,  925,  925,  925,  925,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  921,  921,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,

      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  925,
      925,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,

      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  924,  924,
      924,  924,  924,  924,  924,  924,  924,   52,   52,   52,

       52,   52,   52,   52,   52,   52,  924,  924,  924,  924,
      924,   52,   52,   52,   52,   52,  924,  924,   52,   52,
        0,  921,  921,  921,  921,  921,  921,  921
    } ;

static const flex_int16_t yy_nxt[3783] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   78,   85,   79,   81,   79,   82,
       83,   86,   92,   87,  111,  103,   94,  104,  119,   88,
      112,   89,  105,  113,  120,   90,   91,  106,  156,  157,
       95,  114,   93,   96,   97,  159,   74,  341,   86,   92,
       87,  111,  103,   94,  104,  119,   88,  112,   89,  105,
      113,  120,   90,   91,  106,  156,  157,   95,  114,   93,
       96,   97,   98,  107,  121,  205,   99,  124,  122,  108,

      100,  125,  109,  115,  123,  110,  101,   74,   74,  102,
      116,  117,  163,  137,  164,  170,  118,  138,  244,   98,
      107,  121,  205,   99,  124,  122,  108,  100,  125,  109,
      115,  123,  110,  101,  126,  134,  102,  116,  117,  341,
      137,  130,  170,  118,  138,  151,  135,  152,  127,  131,
      153,  170,  136,  132,  128,  129,  133,  165,  154,  166,
      164,  126,  134,  167,  168,  162,  155,  340,  130,   74,
       74,  170,  151,  135,  152,  127,  131,  153,  170,  136,
      132,  128,  129,  133,  139,  154,  140,  170,  209,  141,
       81,   79,  210,  155,  196,  245,  142,  143,  170,  244,

      197,  246,  159,   74,  251,  166,  164,  170,  170,  247,
       80,  139,   77,  140,  170,  209,  141,  248,  243,  210,
      170,  196,  245,  142,  143,  144,  145,  197,  246,  146,
      204,  251,  147,  148,  170,  170,  247,  198,  169,  149,
      170,  170,  150,  165,  248,  199,  162,  170,  158,   84,
       80,   77,  144,  145,  921,  921,  146,  204,  921,  147,
      148,  170,  249,  252,  198,  250,  149,  170,  170,  150,
      158,  158,  199,  158,  158,  158,  158,  158,  222,  158,
      158,  158,  223,  253,  255,  171,  261,  172,  170,  249,
      252,  256,  250,  173,  257,  174,  258,  254,  170,  175,

      176,  921,  921,  262,  921,  222,  921,  921,  921,  223,
      253,  255,  171,  261,  172,  269,  921,  921,  256,  921,
      173,  257,  174,  258,  254,  170,  175,  176,  158,  158,
      262,  158,  158,  158,  158,  158,  206,  158,  158,  158,
      207,  921,  269,  259,  177,  270,  208,  921,  170,  271,
      239,  241,  242,  260,  170,  272,  170,  273,  240,  267,
      268,  278,  279,  206,  178,  921,  921,  207,  170,  921,
      259,  177,  270,  208,  170,  170,  271,  239,  241,  242,
      260,  170,  272,  170,  273,  240,  267,  268,  278,  279,
      280,  178,  179,  263,  281,  170,  170,  921,  264,  282,

      283,  170,  284,  288,  265,  285,  180,  286,  921,  181,
      182,  266,  287,  293,  294,  295,  170,  280,  296,  179,
      263,  281,  274,  170,  275,  264,  282,  283,  276,  284,
      288,  265,  285,  180,  286,  277,  181,  182,  266,  287,
      293,  294,  295,  170,  183,  296,  301,  302,  184,  274,
      289,  275,  185,  303,  297,  276,  298,  299,  186,  300,
      290,  187,  277,  304,  305,  291,  292,  306,  170,  921,
      307,  183,  308,  301,  302,  184,  921,  289,  921,  185,
      303,  297,  309,  298,  299,  186,  300,  290,  187,  921,
      304,  305,  291,  292,  306,  170,  170,  307,  310,  308,

      311,  316,  312,  188,  317,  189,  313,  314,  320,  309,
      190,  318,  315,  321,  322,  191,  170,  921,  323,  319,
      324,  921,  327,  170,  328,  310,  329,  311,  316,  312,
      188,  317,  189,  313,  314,  320,  330,  190,  318,  315,
      321,  322,  191,  170,  170,  323,  319,  324,  192,  327,
      325,  328,  331,  329,  193,  332,  333,  194,  334,  335,
      195,  326,  338,  330,  170,  921,  921,  336,  339,  437,
      170,  170,  438,  921,  921,  192,  921,  325,  170,  331,
      337,  193,  332,  333,  194,  334,  335,  195,  326,  338,
      170,  170,  170,  200,  336,  339,  437,  170,  170,  438,

      201,  202,  342,  170,  921,  170,  203,  337,  439,  921,
      440,  170,  170,  921,  441,  921,  921,  170,  346,  170,
      200,  347,  170,  170,  921,  170,  343,  201,  202,  342,
      170,  170,  921,  203,  921,  439,  170,  440,  170,  170,
      211,  441,  170,  344,  170,  346,  442,  443,  347,  170,
      170,  345,  921,  343,  212,  170,  170,  349,  170,  170,
      213,  214,  921,  170,  170,  921,  921,  211,  348,  170,
      344,  170,  921,  442,  443,  170,  446,  921,  345,  170,
      921,  212,  170,  170,  349,  921,  170,  213,  214,  170,
      350,  170,  170,  215,  921,  348,  921,  444,  447,  445,

      921,  216,  170,  446,  351,  217,  170,  170,  218,  170,
      448,  921,  170,  921,  352,  449,  170,  350,  921,  170,
      215,  353,  921,  356,  444,  447,  445,  170,  216,  170,
      921,  351,  217,  357,  170,  218,  170,  448,  170,  170,
      219,  352,  449,  170,  170,  354,  358,  355,  353,  170,
      356,  220,  921,  450,  170,  170,  170,  221,  170,  921,
      357,  451,  921,  170,  170,  170,  170,  219,  364,  365,
      170,  170,  354,  358,  355,  170,  170,  921,  220,  366,
      450,  359,  170,  170,  221,  170,  170,  921,  451,  170,
      170,  170,  224,  170,  225,  364,  365,  226,  170,  367,

      921,  921,  170,  452,  227,  228,  366,  455,  359,  170,
      170,  921,  368,  170,  170,  921,  170,  456,  170,  224,
      457,  225,  921,  921,  226,  170,  367,  369,  170,  921,
      452,  227,  228,  170,  455,  370,  170,  170,  170,  368,
      375,  170,  229,  230,  456,  170,  231,  457,  170,  232,
      233,  376,  458,  170,  369,  170,  234,  170,  170,  235,
      170,  921,  370,  921,  170,  170,  170,  375,  170,  229,
      230,  459,  170,  231,  921,  170,  232,  233,  376,  458,
      170,  921,  377,  234,  170,  170,  235,  921,  170,  921,
      170,  170,  170,  170,  170,  170,  170,  378,  459,  170,

      921,  379,  170,  236,  921,  237,  380,  170,  238,  377,
      170,  170,  460,  385,  170,  170,  170,  170,  170,  170,
      921,  170,  170,  170,  378,  461,  921,  392,  379,  170,
      236,  170,  237,  380,  170,  238,  921,  170,  170,  460,
      385,  170,  360,  170,  462,  381,  170,  361,  382,  170,
      170,  170,  461,  362,  392,  921,  170,  463,  170,  383,
      363,  921,  170,  393,  384,  390,  170,  921,  170,  360,
      170,  462,  381,  170,  361,  382,  170,  170,  170,  921,
      362,  170,  170,  170,  463,  391,  383,  363,  170,  170,
      393,  384,  390,  170,  371,  170,  372,  170,  921,  921,

      373,  170,  396,  170,  397,  170,  170,  374,  170,  170,
      170,  394,  391,  395,  464,  170,  170,  921,  921,  399,
      465,  371,  170,  372,  921,  170,  170,  373,  170,  396,
      170,  397,  170,  170,  374,  398,  170,  170,  394,  466,
      395,  464,  170,  170,  386,  170,  399,  465,  921,  170,
      921,  400,  170,  170,  387,  170,  170,  170,  921,  388,
      389,  921,  398,  170,  403,  170,  466,  921,  170,  170,
      401,  386,  170,  170,  170,  170,  170,  404,  400,  921,
      402,  387,  170,  170,  405,  170,  388,  389,  170,  406,
      921,  403,  170,  170,  170,  170,  170,  401,  921,  921,

      170,  170,  170,  170,  404,  170,  170,  402,  170,  409,
      408,  405,  170,  410,  170,  170,  406,  411,  921,  407,
      170,  170,  412,  170,  921,  170,  170,  413,  170,  170,
      921,  921,  170,  170,  170,  170,  409,  408,  921,  170,
      410,  170,  414,  170,  411,  170,  407,  170,  921,  412,
      415,  170,  170,  170,  413,  170,  170,  417,  416,  170,
      467,  170,  921,  170,  418,  420,  170,  170,  170,  414,
      170,  170,  170,  170,  170,  419,  424,  415,  170,  170,
      421,  921,  921,  921,  417,  416,  170,  467,  170,  170,
      170,  418,  420,  170,  170,  170,  170,  422,  170,  170,

      170,  170,  419,  424,  921,  170,  170,  421,  423,  170,
      170,  170,  426,  425,  428,  170,  170,  429,  921,  921,
      170,  170,  921,  170,  422,  170,  170,  427,  170,  170,
      170,  170,  170,  431,  468,  423,  170,  170,  170,  426,
      425,  428,  430,  170,  429,  435,  170,  170,  170,  170,
      469,  433,  170,  432,  427,  470,  170,  170,  170,  471,
      431,  468,  436,  170,  434,  170,  170,  170,  453,  430,
      170,  170,  435,  170,  170,  472,  170,  469,  433,  473,
      432,  474,  470,  454,  475,  476,  471,  477,  478,  436,
      170,  434,  170,  170,  170,  453,  481,  479,  170,  482,

      483,  484,  472,  485,  486,  487,  473,  480,  474,  488,
      454,  475,  476,  489,  477,  478,  490,  491,  492,  493,
      494,  495,  496,  481,  479,  498,  482,  483,  484,  499,
      485,  486,  487,  500,  480,  501,  488,  502,  503,  504,
      489,  497,  505,  490,  491,  492,  493,  494,  495,  496,
      506,  507,  498,  508,  509,  510,  499,  511,  512,  513,
      500,  514,  501,  517,  502,  503,  504,  518,  497,  505,
      515,  519,  516,  520,  521,  522,  525,  506,  507,  523,
      508,  509,  510,  524,  511,  512,  513,  170,  514,  526,
      517,  170,  527,  170,  518,  615,  921,  515,  519,  516,

      520,  521,  522,  525,  170,  921,  523,  170,  170,  170,
      524,  170,  170,  170,  170,  528,  526,  529,  170,  527,
      170,  170,  615,  170,  170,  921,  921,  170,  170,  616,
      533,  170,  534,  530,  170,  170,  170,  921,  170,  170,
      170,  170,  528,  170,  529,  531,  170,  170,  170,  170,
      170,  170,  170,  532,  170,  170,  616,  533,  170,  534,
      530,  170,  170,  537,  539,  535,  170,  170,  170,  170,
      170,  921,  531,  170,  170,  538,  170,  536,  170,  170,
      532,  170,  170,  542,  170,  170,  921,  170,  170,  170,
      537,  539,  535,  170,  170,  617,  170,  541,  543,  170,

      545,  170,  538,  170,  536,  170,  540,  921,  170,  170,
      542,  170,  618,  544,  170,  170,  170,  549,  921,  170,
      170,  170,  617,  921,  541,  543,  170,  545,  170,  547,
      170,  546,  170,  540,  170,  170,  170,  170,  921,  618,
      544,  921,  170,  170,  549,  548,  170,  170,  170,  170,
      551,  550,  170,  921,  170,  170,  547,  619,  546,  170,
      921,  170,  170,  170,  170,  552,  170,  170,  555,  170,
      170,  170,  548,  921,  921,  170,  170,  551,  550,  170,
      553,  170,  170,  170,  619,  620,  170,  170,  170,  170,
      554,  170,  552,  170,  170,  555,  170,  170,  170,  170,

      170,  558,  170,  170,  170,  559,  557,  553,  556,  170,
      170,  921,  620,  170,  170,  170,  170,  554,  170,  170,
      170,  565,  170,  621,  170,  560,  170,  170,  558,  921,
      170,  170,  559,  557,  170,  556,  170,  566,  561,  921,
      170,  170,  170,  170,  622,  623,  170,  170,  565,  170,
      621,  170,  560,  567,  170,  562,  170,  170,  563,  170,
      170,  170,  624,  170,  566,  561,  564,  170,  170,  170,
      170,  622,  623,  170,  921,  570,  170,  170,  568,  170,
      567,  170,  562,  170,  170,  563,  170,  170,  569,  624,
      170,  573,  170,  564,  170,  575,  170,  170,  170,  921,

      170,  571,  570,  170,  170,  568,  170,  625,  921,  572,
      626,  170,  170,  170,  170,  569,  170,  574,  573,  170,
      921,  170,  575,  170,  170,  170,  576,  170,  571,  577,
      170,  627,  170,  170,  625,  170,  572,  626,  170,  170,
      170,  170,  628,  170,  574,  170,  629,  170,  578,  921,
      170,  579,  170,  576,  170,  170,  577,  170,  627,  170,
      170,  170,  170,  170,  583,  170,  170,  584,  580,  628,
      921,  921,  170,  629,  170,  578,  581,  170,  579,  170,
      582,  170,  170,  170,  170,  585,  170,  170,  170,  170,
      170,  583,  170,  170,  584,  580,  921,  170,  590,  921,

      921,  593,  170,  581,  586,  921,  587,  582,  170,  170,
      170,  170,  585,  170,  170,  170,  170,  170,  630,  170,
      631,  170,  170,  170,  170,  590,  588,  589,  593,  170,
      921,  586,  594,  587,  921,  170,  170,  170,  591,  170,
      592,  170,  170,  170,  170,  630,  170,  631,  170,  170,
      170,  170,  170,  588,  589,  632,  170,  170,  921,  594,
      170,  170,  170,  598,  170,  591,  170,  592,  170,  595,
      170,  170,  170,  921,  170,  596,  170,  921,  170,  170,
      170,  921,  632,  170,  170,  170,  170,  170,  170,  597,
      598,  602,  170,  921,  170,  170,  595,  599,  170,  170,

      600,  170,  596,  170,  601,  170,  170,  170,  170,  921,
      170,  170,  170,  170,  170,  170,  597,  921,  602,  170,
      606,  170,  170,  603,  599,  633,  634,  600,  170,  921,
      170,  601,  170,  170,  170,  170,  170,  170,  170,  635,
      607,  170,  170,  636,  170,  170,  604,  606,  605,  637,
      603,  921,  633,  634,  608,  170,  170,  170,  170,  170,
      638,  170,  921,  170,  170,  170,  635,  607,  639,  170,
      636,  170,  170,  604,  609,  605,  637,  610,  170,  170,
      640,  608,  641,  170,  611,  170,  170,  638,  642,  170,
      170,  170,  170,  643,  170,  639,  170,  614,  644,  612,

      645,  609,  646,  613,  610,  170,  170,  640,  648,  641,
      170,  611,  649,  647,  170,  642,  170,  170,  650,  651,
      643,  170,  652,  653,  614,  644,  612,  645,  654,  646,
      613,  655,  656,  657,  658,  648,  659,  170,  660,  649,
      647,  170,  661,  662,  663,  650,  651,  664,  665,  652,
      653,  666,  667,  668,  669,  654,  670,  671,  655,  656,
      657,  658,  672,  659,  673,  660,  674,  675,  676,  661,
      662,  663,  677,  678,  664,  665,  679,  170,  666,  667,
      668,  669,  170,  670,  671,  170,  170,  685,  170,  672,
      680,  673,  921,  674,  675,  676,  170,  170,  681,  677,

      678,  684,  682,  679,  170,  170,  683,  170,  170,  170,
      170,  170,  170,  170,  685,  170,  170,  680,  686,  687,
      921,  170,  170,  170,  170,  681,  921,  170,  684,  682,
      170,  170,  170,  683,  170,  170,  689,  170,  170,  170,
      688,  170,  170,  170,  170,  686,  687,  170,  170,  170,
      170,  745,  746,  690,  170,  170,  170,  170,  170,  170,
      747,  921,  691,  689,  170,  693,  170,  688,  170,  170,
      170,  170,  692,  170,  170,  170,  170,  170,  745,  746,
      690,  694,  170,  170,  921,  170,  170,  747,  695,  691,
      170,  170,  693,  170,  170,  921,  170,  170,  696,  692,

      170,  921,  170,  170,  170,  170,  170,  170,  694,  748,
      170,  697,  170,  749,  170,  695,  170,  170,  698,  170,
      170,  170,  170,  170,  170,  696,  170,  170,  170,  921,
      699,  170,  170,  170,  170,  921,  748,  170,  697,  170,
      749,  170,  170,  170,  700,  698,  170,  170,  170,  170,
      170,  170,  702,  170,  170,  170,  170,  699,  170,  921,
      703,  170,  701,  750,  170,  751,  170,  170,  921,  170,
      170,  700,  704,  170,  170,  170,  170,  170,  170,  702,
      752,  170,  170,  170,  170,  170,  170,  703,  170,  701,
      750,  170,  751,  170,  170,  705,  921,  170,  170,  704,

      170,  921,  170,  170,  170,  170,  170,  752,  170,  170,
      170,  170,  921,  170,  706,  170,  753,  708,  170,  170,
      170,  921,  705,  707,  170,  170,  921,  921,  709,  170,
      170,  170,  710,  170,  170,  170,  711,  170,  170,  170,
      170,  706,  170,  753,  708,  170,  170,  712,  170,  170,
      707,  170,  170,  170,  170,  709,  713,  170,  170,  710,
      170,  170,  170,  711,  921,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  712,  170,  170,  715,  921,  170,
      170,  170,  716,  713,  921,  170,  714,  170,  170,  754,
      170,  170,  170,  921,  170,  170,  170,  170,  170,  170,

      170,  718,  170,  719,  715,  170,  717,  720,  170,  716,
      921,  170,  170,  714,  170,  170,  754,  170,  170,  170,
      170,  170,  170,  170,  721,  170,  921,  170,  718,  170,
      719,  170,  170,  717,  720,  170,  722,  170,  170,  170,
      170,  170,  170,  170,  724,  723,  921,  170,  170,  170,
      170,  721,  170,  170,  170,  725,  921,  170,  170,  170,
      921,  726,  921,  722,  170,  170,  921,  170,  170,  170,
      170,  724,  723,  170,  170,  170,  921,  755,  727,  170,
      170,  921,  725,  170,  170,  170,  170,  170,  726,  728,
      921,  729,  170,  731,  170,  170,  921,  730,  921,  170,

      170,  170,  733,  170,  755,  727,  170,  170,  170,  756,
      170,  170,  170,  170,  170,  732,  728,  170,  729,  170,
      731,  170,  170,  170,  730,  170,  170,  734,  170,  733,
      170,  170,  757,  758,  170,  170,  756,  170,  170,  735,
      170,  170,  732,  170,  170,  170,  170,  170,  921,  170,
      170,  736,  170,  170,  734,  170,  737,  738,  170,  757,
      758,  170,  921,  921,  170,  739,  735,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  921,  741,  736,  742,
      170,  170,  921,  737,  738,  170,  740,  170,  170,  170,
      744,  170,  739,  759,  170,  170,  170,  760,  170,  170,

      170,  170,  170,  743,  741,  170,  742,  170,  170,  170,
      170,  761,  170,  740,  170,  762,  170,  744,  170,  763,
      759,  764,  170,  765,  760,  766,  170,  767,  170,  170,
      743,  768,  170,  769,  170,  770,  170,  170,  761,  771,
      772,  773,  762,  774,  775,  776,  763,  777,  764,  778,
      765,  779,  766,  780,  767,  781,  170,  782,  768,  783,
      769,  784,  770,  785,  786,  787,  771,  772,  773,  788,
      774,  775,  776,  789,  777,  790,  778,  791,  779,  170,
      780,  170,  781,  921,  782,  170,  783,  793,  784,  170,
      785,  786,  787,  794,  795,  170,  788,  798,  839,  170,

      789,  170,  790,  170,  791,  170,  170,  170,  170,  170,
      792,  921,  170,  170,  793,  170,  170,  170,  170,  170,
      794,  795,  170,  170,  798,  839,  170,  796,  170,  797,
      170,  170,  170,  801,  170,  170,  170,  792,  170,  170,
      170,  799,  170,  921,  170,  170,  170,  804,  921,  170,
      170,  170,  170,  170,  796,  170,  797,  805,  170,  800,
      801,  170,  170,  921,  802,  170,  170,  170,  799,  170,
      803,  921,  170,  170,  804,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  805,  170,  800,  808,  170,  809,
      806,  802,  921,  170,  170,  170,  170,  803,  807,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  811,
      170,  170,  170,  810,  808,  170,  809,  806,  921,  170,
      170,  170,  170,  815,  812,  807,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  811,  170,  170,  170,
      810,  170,  170,  170,  813,  170,  170,  921,  170,  170,
      815,  812,  814,  170,  170,  816,  170,  170,  170,  840,
      170,  170,  170,  170,  170,  170,  170,  817,  170,  170,
      170,  813,  170,  170,  818,  921,  170,  170,  170,  814,
      170,  921,  816,  170,  170,  921,  840,  170,  170,  170,
      170,  170,  170,  170,  817,  170,  170,  170,  170,  170,

      170,  818,  819,  821,  170,  170,  820,  170,  170,  921,
      170,  170,  824,  921,  170,  170,  170,  170,  170,  170,
      170,  822,  170,  170,  170,  170,  170,  823,  170,  819,
      821,  921,  170,  820,  170,  170,  170,  170,  170,  824,
      825,  170,  170,  921,  170,  826,  170,  841,  822,  170,
      170,  170,  828,  170,  823,  170,  170,  921,  829,  170,
      921,  170,  170,  170,  170,  921,  827,  825,  170,  170,
      170,  170,  826,  170,  841,  921,  170,  921,  170,  828,
      170,  831,  170,  170,  830,  829,  170,  170,  170,  170,
      170,  921,  834,  827,  921,  170,  170,  170,  170,  833,

      170,  832,  836,  170,  835,  170,  170,  170,  831,  170,
      842,  830,  170,  170,  170,  170,  170,  170,  170,  834,
      838,  170,  170,  170,  170,  170,  833,  843,  832,  836,
      170,  835,  170,  170,  170,  837,  170,  842,  170,  170,
      844,  170,  845,  170,  170,  170,  846,  838,  170,  170,
      170,  170,  170,  847,  843,  848,  849,  850,  851,  852,
      853,  854,  837,  170,  855,  170,  856,  844,  170,  845,
      857,  170,  858,  846,  859,  860,  861,  862,  863,  921,
      847,  921,  848,  849,  850,  851,  852,  853,  854,  864,
      170,  855,  866,  856,  170,  170,  921,  857,  170,  858,

      921,  859,  860,  861,  862,  863,  170,  865,  867,  170,
      170,  921,  170,  868,  170,  170,  864,  170,  170,  866,
      921,  170,  170,  170,  170,  170,  170,  869,  170,  170,
      871,  921,  170,  170,  865,  867,  170,  170,  870,  170,
      868,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  869,  170,  170,  871,  170,  170,
      872,  170,  170,  170,  170,  870,  170,  170,  921,  921,
      170,  170,  873,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  872,  170,  170,
      170,  170,  170,  170,  170,  876,  170,  874,  921,  873,

      170,  170,  921,  921,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  875,  170,  170,  170,  170,  170,
      170,  170,  876,  170,  874,  877,  878,  170,  170,  880,
      170,  170,  879,  170,  170,  921,  921,  170,  170,  170,
      889,  875,  170,  170,  170,  170,  890,  170,  170,  170,
      170,  881,  877,  878,  170,  921,  880,  170,  170,  879,
      882,  170,  170,  170,  170,  170,  170,  889,  170,  921,
      885,  170,  170,  890,  170,  921,  170,  170,  881,  884,
      883,  170,  170,  170,  170,  170,  170,  882,  170,  170,
      170,  170,  170,  170,  170,  170,  886,  885,  170,  170,

      170,  170,  170,  891,  170,  170,  884,  883,  170,  170,
      170,  170,  170,  170,  170,  170,  892,  887,  170,  170,
      170,  170,  170,  886,  893,  894,  170,  170,  170,  170,
      891,  170,  170,  888,  170,  170,  895,  896,  897,  170,
      921,  170,  170,  892,  887,  921,  170,  170,  170,  170,
      170,  893,  894,  170,  170,  170,  170,  921,  170,  170,
      888,  170,  170,  895,  896,  897,  170,  898,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  921,
      170,  170,  170,  170,  170,  170,  170,  899,  900,  170,
      170,  170,  170,  170,  898,  170,  902,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  899,  900,  170,  170,  170,  170,
      170,  901,  170,  902,  170,  907,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  906,  170,  170,  170,
      170,  908,  170,  170,  170,  903,  905,  904,  901,  170,
      170,  170,  907,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  909,  906,  910,  170,  911,  921,  908,  170,
      921,  170,  903,  905,  904,  170,  170,  170,  170,  170,
      170,  170,  921,  170,  170,  170,  917,  170,  170,  909,
      912,  910,  170,  911,  913,  170,  170,  914,  170,  170,

      918,  921,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  915,  917,  919,  170,  921,  912,  170,  170,
      916,  913,  170,  170,  914,  170,  170,  918,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  915,
      921,  919,  920,  170,  170,  170,  921,  916,  170,  921,
      921,  921,  170,  170,  921,  170,  170,  170,  921,  170,
      170,  170,  921,  170,  170,  170,  921,  921,  921,  920,
      170,  170,  921,  921,  921,  170,  921,  921,  921,  170,
      170,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      170,  170,   75,  921,  921,   75,   76,  921,   76,   76,

      158,  921,  158,  158,  160,  921,  160,  160,  161,  921,
      161,  161,  170,  921,  170,  170,    5,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921
    } ;

static const flex_int16_t yy_chk[3783] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   12,  924,   12,   14,   14,   15,
       15,   17,   18,   17,   23,   21,   19,   21,   26,   17,
       23,   17,   21,   24,   27,   17,   17,   21,   39,   39,
       19,   24,   18,   19,   19,   41,   41,  341,   17,   18,
       17,   23,   21,   19,   21,   26,   17,   23,   17,   21,
       24,   27,   17,   17,   21,   39,   39,   19,   24,   18,
       19,   19,   20,   22,   28,   61,   20,   29,   28,   22,

       20,   29,   22,   25,   28,   22,   20,   42,   42,   20,
       25,   25,   46,   34,   46,   61,   25,   34,  244,   20,
       22,   28,   61,   20,   29,   28,   22,   20,   29,   22,
       25,   28,   22,   20,   30,   32,   20,   25,   25,  166,
       34,   31,   61,   25,   34,   37,   32,   37,   30,   31,
       37,   67,   32,   31,   30,   30,   31,  165,   38,   48,
       48,   30,   32,   49,   49,  161,   38,  160,   31,   74,
       74,   67,   37,   32,   37,   30,   31,   37,   67,   32,
       31,   30,   30,   31,   35,   38,   35,   57,   63,   35,
       79,   79,   63,   38,   57,   86,   35,   35,   67,   81,

       57,   87,  159,  159,   90,  164,  164,   57,   63,   88,
       80,   35,   76,   35,   57,   63,   35,   88,   75,   63,
       60,   57,   86,   35,   35,   36,   36,   57,   87,   36,
       60,   90,   36,   36,   57,   63,   88,   58,   50,   36,
       60,   58,   36,   47,   88,   58,   45,   60,   43,   16,
       13,   11,   36,   36,    5,    0,   36,   60,    0,   36,
       36,   58,   89,   91,   58,   89,   36,   60,   58,   36,
       51,   51,   58,   51,   51,   51,   51,   51,   68,   51,
       51,   51,   68,   92,   94,   51,   97,   51,   58,   89,
       91,   94,   89,   51,   95,   51,   95,   92,   68,   51,

       51,    0,    0,   98,    0,   68,    0,    0,    0,   68,
       92,   94,   51,   97,   51,  101,    0,    0,   94,    0,
       51,   95,   51,   95,   92,   68,   51,   51,   52,   52,
       98,   52,   52,   52,   52,   52,   62,   52,   52,   52,
       62,    0,  101,   96,   52,  102,   62,    0,   73,  103,
       72,   73,   73,   96,   72,  104,   62,  105,   72,  100,
      100,  107,  108,   62,   52,    0,    0,   62,   73,    0,
       96,   52,  102,   62,   72,   73,  103,   72,   73,   73,
       96,   72,  104,   62,  105,   72,  100,  100,  107,  108,
      109,   52,   53,   99,  110,   73,   53,    0,   99,  111,

      112,   72,  113,  116,   99,  113,   53,  114,    0,   53,
       53,   99,  114,  118,  119,  120,   53,  109,  121,   53,
       99,  110,  106,   53,  106,   99,  111,  112,  106,  113,
      116,   99,  113,   53,  114,  106,   53,   53,   99,  114,
      118,  119,  120,   53,   54,  121,  124,  125,   54,  106,
      117,  106,   54,  126,  122,  106,  122,  123,   54,  123,
      117,   54,  106,  127,  128,  117,  117,  129,   54,    0,
      130,   54,  132,  124,  125,   54,    0,  117,    0,   54,
      126,  122,  133,  122,  123,   54,  123,  117,   54,    0,
      127,  128,  117,  117,  129,   54,   55,  130,  134,  132,

      135,  138,  136,   55,  139,   55,  136,  137,  141,  133,
       55,  140,  137,  142,  143,   55,   55,    0,  144,  140,
      145,    0,  147,   55,  148,  134,  149,  135,  138,  136,
       55,  139,   55,  136,  137,  141,  150,   55,  140,  137,
      142,  143,   55,   55,   56,  144,  140,  145,   56,  147,
      146,  148,  151,  149,   56,  151,  152,   56,  153,  154,
       56,  146,  156,  150,   56,    0,    0,  155,  157,  246,
      170,   56,  248,    0,    0,   56,    0,  146,  178,  151,
      155,   56,  151,  152,   56,  153,  154,   56,  146,  156,
      170,   56,   59,   59,  155,  157,  246,  170,  178,  248,

       59,   59,  171,  171,    0,  178,   59,  155,  249,    0,
      251,  172,   59,    0,  253,    0,    0,  170,  174,   59,
       59,  174,  174,  171,    0,  178,  172,   59,   59,  171,
      171,  172,    0,   59,    0,  249,  173,  251,  172,   59,
       64,  253,  174,  173,   64,  174,  254,  255,  174,  174,
      171,  173,    0,  172,   64,  175,  173,  176,  172,  176,
       64,   64,    0,  173,   64,    0,    0,   64,  175,  174,
      173,   64,    0,  254,  255,  175,  257,    0,  173,  176,
        0,   64,  175,  173,  176,    0,  176,   64,   64,  177,
      177,   64,   65,   65,    0,  175,    0,  256,  258,  256,

        0,   65,  175,  257,  177,   65,  176,  179,   65,  177,
      259,    0,   65,    0,  179,  260,  177,  177,    0,   65,
       65,  179,    0,  181,  256,  258,  256,  179,   65,  182,
        0,  177,   65,  181,  179,   65,  177,  259,  180,   65,
       66,  179,  260,  181,   66,  180,  182,  180,  179,  182,
      181,   66,    0,  262,  179,  185,  182,   66,  180,    0,
      181,  263,    0,  186,   66,  180,  183,   66,  185,  185,
      181,   66,  180,  182,  180,  185,  182,    0,   66,  186,
      262,  183,  185,  186,   66,  180,  183,    0,  263,  187,
      186,   66,   69,  183,   69,  185,  185,   69,  188,  187,

        0,    0,  185,  264,   69,   69,  186,  266,  183,  187,
      186,    0,  188,  183,   69,    0,  187,  267,  188,   69,
      268,   69,    0,    0,   69,  188,  187,  189,  189,    0,
      264,   69,   69,  192,  266,  190,  187,  190,  193,  188,
      192,   69,   70,   70,  267,  188,   70,  268,  189,   70,
       70,  193,  269,  192,  189,  189,   70,  190,  193,   70,
      192,    0,  190,    0,  190,  193,   70,  192,  200,   70,
       70,  270,  194,   70,    0,  189,   70,   70,  193,  269,
      192,    0,  194,   70,  190,  193,   70,    0,  200,    0,
      195,  196,  194,   70,   71,  200,  197,  195,  270,  194,

        0,  196,  201,   71,    0,   71,  197,  205,   71,  194,
      195,  196,  271,  201,   71,  200,  197,  195,  196,  194,
        0,   71,  201,  197,  195,  273,    0,  205,  196,  201,
       71,  198,   71,  197,  205,   71,    0,  195,  196,  271,
      201,   71,  184,  197,  274,  198,  184,  184,  198,  201,
      199,  198,  273,  184,  205,    0,  203,  275,  198,  199,
      184,    0,  206,  206,  199,  203,  184,    0,  216,  184,
      199,  274,  198,  184,  184,  198,  203,  199,  198,    0,
      184,  204,  206,  203,  275,  204,  199,  184,  216,  206,
      206,  199,  203,  184,  191,  216,  191,  199,    0,    0,

      191,  204,  208,  203,  208,  207,  208,  191,  204,  206,
      210,  207,  204,  207,  276,  216,  191,    0,    0,  210,
      277,  191,  209,  191,    0,  207,  208,  191,  204,  208,
      210,  208,  207,  208,  191,  209,  211,  210,  207,  278,
      207,  276,  209,  191,  202,  202,  210,  277,    0,  209,
        0,  211,  207,  208,  202,  212,  211,  210,    0,  202,
      202,    0,  209,  211,  214,  202,  278,    0,  214,  209,
      212,  202,  202,  213,  218,  212,  215,  215,  211,    0,
      213,  202,  212,  211,  217,  217,  202,  202,  214,  218,
        0,  214,  202,  213,  218,  214,  215,  212,    0,    0,

      213,  218,  212,  215,  215,  217,  219,  213,  222,  221,
      220,  217,  217,  221,  220,  214,  218,  222,    0,  219,
      213,  218,  222,  215,    0,  223,  219,  223,  222,  221,
        0,    0,  217,  219,  220,  222,  221,  220,    0,  224,
      221,  220,  224,  225,  222,  223,  219,  226,    0,  222,
      225,  227,  223,  219,  223,  222,  221,  226,  225,  224,
      280,  220,    0,  225,  227,  229,  224,  226,  229,  224,
      225,  227,  223,  230,  226,  228,  232,  225,  227,  228,
      230,    0,    0,    0,  226,  225,  224,  280,  229,  231,
      225,  227,  229,  230,  226,  229,  232,  231,  227,  228,

      230,  234,  228,  232,    0,  233,  228,  230,  231,  231,
      236,  235,  234,  233,  236,  229,  231,  236,    0,    0,
      230,  234,    0,  232,  231,  233,  228,  235,  234,  238,
      236,  235,  233,  238,  281,  231,  231,  236,  235,  234,
      233,  236,  237,  237,  236,  241,  239,  242,  234,  238,
      282,  240,  233,  239,  235,  283,  238,  236,  235,  284,
      238,  281,  242,  237,  240,  241,  239,  242,  265,  237,
      237,  240,  241,  239,  242,  285,  238,  282,  240,  286,
      239,  287,  283,  265,  288,  289,  284,  290,  291,  242,
      237,  240,  241,  239,  242,  265,  293,  292,  240,  294,

      296,  297,  285,  298,  299,  300,  286,  292,  287,  301,
      265,  288,  289,  302,  290,  291,  303,  305,  306,  307,
      308,  309,  310,  293,  292,  311,  294,  296,  297,  312,
      298,  299,  300,  313,  292,  314,  301,  315,  316,  317,
      302,  310,  318,  303,  305,  306,  307,  308,  309,  310,
      320,  321,  311,  322,  323,  325,  312,  326,  327,  328,
      313,  330,  314,  332,  315,  316,  317,  333,  310,  318,
      331,  334,  331,  335,  336,  337,  339,  320,  321,  338,
      322,  323,  325,  338,  326,  327,  328,  342,  330,  343,
      332,  344,  345,  347,  333,  437,    0,  331,  334,  331,

      335,  336,  337,  339,  349,    0,  338,  342,  346,  343,
      338,  344,  345,  347,  342,  346,  343,  348,  344,  345,
      347,  348,  437,  350,  349,    0,    0,  351,  346,  438,
      353,  349,  353,  350,  342,  346,  343,    0,  344,  345,
      347,  348,  346,  350,  348,  351,  352,  351,  348,  354,
      350,  349,  353,  352,  351,  346,  438,  353,  358,  353,
      350,  357,  355,  356,  359,  354,  352,  356,  348,  354,
      350,    0,  351,  352,  351,  357,  354,  355,  358,  353,
      352,  357,  355,  362,  359,  358,    0,  356,  357,  355,
      356,  359,  354,  352,  356,  439,  354,  361,  362,  360,

      364,  361,  357,  362,  355,  358,  360,    0,  357,  355,
      362,  359,  440,  363,  356,  363,  365,  368,    0,  360,
      364,  361,  439,    0,  361,  362,  360,  364,  361,  366,
      362,  365,  366,  360,  367,  363,  365,  368,    0,  440,
      363,    0,  363,  365,  368,  367,  360,  364,  361,  369,
      371,  370,  366,    0,  367,  370,  366,  441,  365,  366,
        0,  367,  363,  365,  368,  372,  373,  372,  375,  369,
      371,  376,  367,    0,    0,  370,  369,  371,  370,  366,
      373,  367,  370,  374,  441,  442,  373,  372,  375,  380,
      374,  376,  372,  373,  372,  375,  369,  371,  376,  378,

      377,  379,  370,  374,  379,  380,  378,  373,  377,  380,
      374,    0,  442,  373,  372,  375,  380,  374,  376,  378,
      377,  386,  381,  444,  379,  381,  378,  377,  379,    0,
      374,  379,  380,  378,  382,  377,  380,  387,  382,    0,
      383,  386,  381,  384,  446,  447,  378,  377,  386,  381,
      444,  379,  381,  388,  382,  383,  385,  387,  384,  390,
      383,  382,  448,  384,  387,  382,  385,  383,  386,  381,
      384,  446,  447,  388,    0,  390,  385,  392,  389,  390,
      388,  382,  383,  385,  387,  384,  390,  383,  389,  448,
      384,  394,  391,  385,  393,  396,  396,  392,  389,    0,

      388,  391,  390,  385,  392,  389,  390,  449,    0,  393,
      451,  394,  391,  395,  393,  389,  396,  395,  394,  391,
        0,  393,  396,  396,  392,  389,  397,  398,  391,  398,
      397,  452,  399,  395,  449,  400,  393,  451,  394,  391,
      395,  393,  453,  396,  395,  401,  454,  398,  399,    0,
      397,  400,  399,  397,  398,  400,  398,  397,  452,  399,
      395,  402,  400,  403,  405,  401,  404,  406,  402,  453,
        0,    0,  401,  454,  398,  399,  403,  397,  400,  399,
      404,  402,  400,  403,  405,  407,  404,  406,  402,  407,
      403,  405,  401,  404,  406,  402,    0,  408,  411,    0,

        0,  414,  411,  403,  407,    0,  408,  404,  402,  407,
      403,  405,  407,  404,  406,  409,  407,  408,  456,  410,
      457,  414,  411,  412,  408,  411,  409,  410,  414,  411,
        0,  407,  415,  408,    0,  409,  407,  413,  412,  410,
      413,  416,  409,  412,  408,  456,  410,  457,  414,  411,
      412,  417,  415,  409,  410,  458,  420,  413,    0,  415,
      418,  416,  409,  420,  413,  412,  410,  413,  416,  417,
      412,  417,  421,    0,  419,  418,  420,    0,  417,  415,
      418,    0,  458,  420,  413,  423,  422,  418,  416,  419,
      420,  425,  421,    0,  419,  424,  417,  422,  417,  421,

      423,  419,  418,  420,  424,  423,  422,  418,  426,    0,
      429,  425,  423,  422,  427,  424,  419,    0,  425,  421,
      429,  419,  424,  427,  422,  461,  462,  423,  426,    0,
      429,  424,  423,  422,  427,  426,  428,  429,  425,  463,
      430,  427,  424,  464,  430,  431,  428,  429,  428,  465,
      427,    0,  461,  462,  431,  426,  428,  429,  432,  433,
      469,  427,    0,  428,  430,  431,  463,  430,  470,  434,
      464,  430,  431,  428,  432,  428,  465,  433,  432,  433,
      472,  431,  474,  428,  434,  432,  433,  469,  475,  434,
      435,  430,  431,  476,  436,  470,  434,  436,  477,  435,

      478,  432,  479,  435,  433,  432,  433,  472,  481,  474,
      435,  434,  485,  479,  436,  475,  434,  435,  487,  488,
      476,  436,  489,  490,  436,  477,  435,  478,  492,  479,
      435,  493,  494,  495,  496,  481,  499,  435,  500,  485,
      479,  436,  501,  502,  503,  487,  488,  504,  505,  489,
      490,  507,  508,  509,  510,  492,  513,  514,  493,  494,
      495,  496,  515,  499,  516,  500,  517,  518,  519,  501,
      502,  503,  520,  522,  504,  505,  524,  526,  507,  508,
      509,  510,  528,  513,  514,  527,  529,  531,  530,  515,
      526,  516,    0,  517,  518,  519,  532,  526,  527,  520,

      522,  530,  528,  524,  526,  527,  529,  531,  530,  528,
      534,  535,  527,  529,  531,  530,  532,  526,  533,  535,
        0,  537,  533,  532,  526,  527,    0,  536,  530,  528,
      534,  535,  527,  529,  531,  530,  537,  534,  535,  538,
      536,  537,  533,  532,  539,  533,  535,  536,  537,  533,
      542,  617,  619,  538,  536,  540,  541,  534,  535,  538,
      620,    0,  540,  537,  539,  542,  538,  536,  537,  533,
      542,  539,  541,  544,  536,  540,  541,  542,  617,  619,
      538,  543,  540,  541,    0,  543,  538,  620,  545,  540,
      545,  539,  542,  544,  546,    0,  548,  542,  546,  541,

      544,    0,  540,  541,  547,  543,  549,  550,  543,  621,
      545,  547,  543,  622,  546,  545,  548,  545,  550,  551,
      544,  546,  555,  548,  547,  546,  549,  550,  552,    0,
      551,  547,  543,  549,  550,    0,  621,  545,  547,  551,
      622,  546,  555,  548,  552,  550,  551,  553,  552,  555,
      556,  547,  554,  549,  550,  552,  554,  551,  557,    0,
      558,  559,  553,  623,  558,  624,  551,  553,    0,  555,
      556,  552,  559,  560,  553,  552,  554,  556,  557,  554,
      626,  559,  562,  554,  558,  557,  561,  558,  559,  553,
      623,  558,  624,  560,  553,  561,    0,  556,  565,  559,

      560,    0,  562,  554,  563,  557,  561,  626,  559,  562,
      564,  558,    0,  561,  563,  566,  627,  565,  565,  567,
      560,    0,  561,  564,  563,  565,    0,    0,  566,  562,
      564,  563,  567,  561,  568,  566,  568,  564,  569,  567,
      571,  563,  566,  627,  565,  565,  567,  568,  572,  570,
      564,  563,  573,  575,  568,  566,  570,  564,  569,  567,
      571,  568,  566,  568,    0,  569,  567,  571,  572,  570,
      576,  574,  573,  575,  568,  572,  570,  576,    0,  573,
      575,  568,  577,  570,    0,  569,  574,  571,  579,  628,
      576,  574,  578,    0,  580,  572,  570,  576,  574,  573,

      575,  579,  577,  581,  576,  581,  578,  582,  579,  577,
        0,  583,  578,  574,  580,  579,  628,  576,  574,  578,
      586,  580,  587,  584,  583,  581,    0,  582,  579,  577,
      581,  583,  581,  578,  582,  579,  584,  585,  583,  578,
      586,  580,  587,  584,  588,  585,    0,  586,  588,  587,
      584,  583,  581,  590,  582,  589,    0,  585,  583,  589,
        0,  590,    0,  584,  585,  591,    0,  586,  588,  587,
      584,  588,  585,  590,  592,  588,    0,  630,  591,  589,
      590,    0,  589,  593,  585,  591,  589,  595,  590,  592,
        0,  593,  591,  596,  592,  588,    0,  594,    0,  594,

      590,  592,  598,  593,  630,  591,  589,  595,  600,  631,
      593,  597,  591,  596,  595,  597,  592,  599,  593,  594,
      596,  592,  598,  601,  594,  602,  594,  599,  600,  598,
      593,  597,  632,  633,  595,  600,  631,  599,  597,  602,
      596,  605,  597,  601,  599,  602,  594,  604,    0,  598,
      601,  603,  602,  603,  599,  600,  604,  605,  597,  632,
      633,  605,    0,    0,  599,  606,  602,  604,  605,  606,
      601,  607,  602,  603,  604,  608,    0,  608,  603,  609,
      603,  610,    0,  604,  605,  612,  607,  611,  605,  606,
      613,  607,  606,  634,  604,  608,  606,  635,  607,  609,

      603,  610,  608,  611,  608,  612,  609,  611,  610,  614,
      613,  636,  612,  607,  611,  637,  606,  613,  607,  638,
      634,  640,  608,  641,  635,  642,  609,  645,  610,  614,
      611,  646,  612,  647,  611,  648,  614,  613,  636,  653,
      654,  655,  637,  658,  659,  660,  638,  661,  640,  662,
      641,  664,  642,  665,  645,  666,  614,  667,  646,  668,
      647,  669,  648,  670,  671,  673,  653,  654,  655,  674,
      658,  659,  660,  675,  661,  677,  662,  678,  664,  680,
      665,  681,  666,    0,  667,  683,  668,  684,  669,  682,
      670,  671,  673,  685,  686,  686,  674,  689,  745,  680,

      675,  681,  677,  690,  678,  683,  680,  684,  681,  682,
      682,    0,  683,  685,  684,  686,  682,  689,  687,  688,
      685,  686,  686,  690,  689,  745,  680,  687,  681,  688,
      690,  691,  683,  693,  684,  694,  682,  682,  687,  688,
      685,  691,  686,    0,  689,  687,  688,  697,    0,  695,
      690,  691,  692,  693,  687,  694,  688,  698,  691,  692,
      693,  696,  694,    0,  695,  687,  688,  697,  691,  695,
      696,    0,  692,  701,  697,  699,  695,  698,  691,  692,
      693,  696,  694,  700,  698,  702,  692,  701,  696,  702,
      699,  695,    0,  701,  697,  699,  695,  696,  700,  692,

      701,  704,  699,  700,  698,  702,  703,  705,  696,  705,
      700,  706,  702,  703,  701,  708,  702,  699,    0,  709,
      701,  704,  699,  711,  706,  700,  703,  705,  704,  707,
      700,  706,  702,  703,  705,  708,  705,  710,  706,  709,
      703,  712,  708,  711,  707,  714,  709,    0,  704,  707,
      711,  706,  710,  703,  705,  712,  707,  710,  706,  747,
      713,  712,  708,  715,  710,  714,  709,  713,  712,  716,
      711,  707,  714,  717,  718,    0,  707,  721,  718,  710,
      713,    0,  712,  715,  710,    0,  747,  713,  712,  716,
      715,  720,  714,  717,  713,  722,  716,  721,  718,  719,

      717,  718,  719,  723,  721,  718,  720,  713,  724,    0,
      715,  720,  726,    0,  725,  722,  716,  728,  720,  719,
      717,  724,  722,  723,  721,  718,  719,  725,  724,  719,
      723,    0,  726,  720,  725,  724,  727,  728,  720,  726,
      727,  725,  722,    0,  728,  729,  719,  748,  724,  729,
      723,  730,  731,  731,  725,  724,  727,    0,  732,  726,
        0,  725,  732,  727,  728,    0,  730,  727,  734,  729,
      733,  730,  729,  731,  748,    0,  729,    0,  730,  731,
      731,  734,  732,  727,  733,  732,  735,  737,  734,  732,
      733,    0,  738,  730,    0,  734,  729,  733,  730,  736,

      731,  735,  740,  736,  739,  739,  735,  737,  734,  732,
      749,  733,  738,  735,  737,  734,  741,  733,  744,  738,
      743,  742,  740,  736,  743,  739,  736,  750,  735,  740,
      736,  739,  739,  735,  737,  742,  741,  749,  744,  738,
      752,  742,  753,  741,  743,  744,  756,  743,  742,  740,
      736,  743,  739,  760,  750,  762,  765,  768,  769,  771,
      772,  774,  742,  741,  775,  744,  776,  752,  742,  753,
      778,  743,  779,  756,  782,  784,  785,  786,  791,    0,
      760,    0,  762,  765,  768,  769,  771,  772,  774,  792,
      793,  775,  795,  776,  796,  798,    0,  778,  794,  779,

        0,  782,  784,  785,  786,  791,  797,  794,  796,  792,
      793,    0,  795,  797,  796,  798,  792,  793,  794,  795,
        0,  796,  798,  800,  801,  794,  797,  799,  802,  799,
      803,    0,  803,  797,  794,  796,  792,  793,  800,  795,
      797,  796,  798,  800,  801,  794,  804,  805,  802,  799,
      800,  801,  803,  797,  799,  802,  799,  803,  806,  803,
      807,  808,  810,  809,  811,  800,  804,  805,    0,    0,
      800,  801,  809,  804,  805,  802,  799,  812,  806,  803,
      807,  808,  810,  809,  811,  806,  813,  807,  808,  810,
      809,  811,  814,  804,  805,  816,  817,  812,    0,  809,

      820,  815,    0,    0,  812,  806,  813,  807,  808,  810,
      809,  811,  814,  813,  815,  816,  817,  821,  818,  814,
      820,  815,  816,  817,  812,  818,  819,  820,  815,  822,
      819,  823,  821,  813,  824,    0,    0,  821,  818,  814,
      844,  815,  816,  817,  821,  818,  846,  820,  815,  822,
      819,  823,  818,  819,  824,    0,  822,  819,  823,  821,
      825,  824,  825,  827,  821,  818,  826,  844,  828,    0,
      831,  830,  829,  846,  831,    0,  822,  819,  823,  829,
      826,  824,  825,  827,  834,  835,  826,  825,  828,  825,
      827,  830,  829,  826,  831,  828,  832,  831,  830,  829,

      832,  831,  833,  851,  834,  835,  829,  826,  836,  825,
      827,  834,  835,  826,  837,  828,  853,  833,  830,  829,
      832,  831,  833,  832,  854,  857,  838,  832,  836,  833,
      851,  834,  835,  838,  837,  836,  860,  861,  862,  864,
        0,  837,  865,  853,  833,    0,  838,  832,  866,  833,
      867,  854,  857,  838,  868,  836,  870,    0,  872,  864,
      838,  837,  865,  860,  861,  862,  864,  869,  866,  865,
      867,  869,  871,  838,  868,  866,  870,  867,  872,    0,
      873,  868,  874,  870,  875,  872,  864,  871,  876,  865,
      876,  869,  871,  877,  869,  866,  879,  867,  869,  871,

      873,  868,  874,  870,  875,  872,  880,  873,  878,  874,
      876,  875,  881,  877,  871,  876,  879,  876,  869,  871,
      877,  878,  883,  879,  884,  889,  880,  873,  878,  874,
      882,  875,  881,  880,  885,  878,  887,  876,  886,  881,
      877,  891,  883,  879,  884,  882,  886,  885,  878,  883,
      882,  884,  889,  880,  885,  878,  887,  882,  886,  881,
      888,  885,  893,  887,  895,  886,  896,    0,  891,  883,
        0,  884,  882,  886,  885,  898,  899,  882,  901,  900,
      888,  885,    0,  887,  902,  886,  907,  888,  903,  893,
      898,  895,  904,  896,  900,  898,  899,  902,  901,  900,

      909,    0,  898,  899,  902,  901,  900,  888,  903,  905,
      906,  902,  904,  907,  912,  903,    0,  898,  913,  904,
      905,  900,  898,  899,  902,  901,  900,  909,  914,  905,
      906,  902,  915,  916,  912,  903,  905,  906,  913,  904,
        0,  912,  914,  919,  920,  913,    0,  905,  914,    0,
        0,    0,  915,  916,    0,  914,  905,  906,    0,  915,
      916,  912,    0,  919,  920,  913,    0,    0,    0,  914,
      919,  920,    0,    0,    0,  914,    0,    0,    0,  915,
      916,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      919,  920,  922,    0,    0,  922,  923,    0,  923,  923,

      925,    0,  925,  925,  926,    0,  926,  926,  927,    0,
      927,  927,  928,    0,  928,  928,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

#line 1810 "flex_lexer.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1823 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 2109 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 922 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 921 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 126:
#line 184 "flex_lexer.l"
case 127:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2843 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 922 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 922 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 921);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 214 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

