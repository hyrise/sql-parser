#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[988] =
    {   0,
        0,    0,    2,    2,  145,  143,    4,    4,  143,  143,
      136,  143,  136,  136,  139,  136,  136,  136,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  136,    2,    2,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    4,  131,    0,    0,  142,    1,  139,  138,  137,
      133,  132,  130,  134,  141,  141,  141,  141,  141,  141,

      115,  141,  116,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  117,  141,  141,  118,  119,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  120,  121,  122,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  123,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  135,    2,    2,    2,    2,    2,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  140,  137,  101,  141,  102,  141,
      141,  103,  141,  104,  141,  141,  141,  141,  141,  141,
      141,  141,  105,  141,  127,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  106,  141,  141,  141,  141,  141,

      141,  141,  107,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  108,  141,  141,
      109,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      110,  141,  141,  111,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  112,  141,  141,  141,
      141,  113,  141,  141,  141,  141,  114,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  141,  141,  141,  141,  141,  141,   74,  141,
       75,  141,  141,  141,  141,   76,  141,  141,  141,  141,
       77,  141,  141,  141,   78,   79,  141,  141,  141,  141,

      141,  141,   80,   81,   82,  141,  141,   83,  141,   84,
      141,  126,  141,  141,  141,  141,  141,  141,   85,  141,
       86,   87,   88,  141,   90,  141,  141,  141,  141,  141,
       91,  141,  141,  141,  141,  141,   92,   93,  141,  141,
      141,  141,  141,  141,  141,  141,   94,  141,  141,  141,
      141,   95,   96,   97,  141,  141,  141,  141,  141,  141,
      141,   98,  141,   99,  141,  100,  129,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   55,   56,  141,   57,  141,  141,  141,  141,
      141,  141,   58,  141,  141,  141,   59,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,   60,  141,  141,
       89,  141,   61,   62,  141,  141,  141,  141,   63,   64,

       65,   66,  141,  128,  141,  141,  141,   67,   68,  141,
      141,  141,  141,  141,   69,  141,  141,  141,  141,  141,
       70,  141,  141,  141,   71,  141,  141,  141,   72,  141,
      141,   73,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,  141,   30,  141,  141,   31,  141,   32,  141,
      141,   33,   34,  141,   35,   36,   37,  141,   38,  141,
      141,   40,   41,  141,   42,   43,  141,  141,   44,  125,
      141,  141,   45,  141,  141,  141,   46,  141,   47,  124,
       48,   49,  141,   50,  141,  141,  141,   51,   52,   53,
       54,  141,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,   14,   15,   16,   17,   18,  141,   19,  141,
       20,   21,   39,   22,   23,  141,   24,  141,  141,   25,
       26,  141,   27,   28,  141,  141,  141,   29,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  141,   10,  141,   11,  141,   12,
      141,  141,   13,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  141,    7,  141,    8,    9,    2,    2,    2,
        2,    2,    5,    6,    2,    2,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_uint16_t yy_base[995] =
    {   0,
        0,    0,   67,    0,  523, 3889,  133,  135,  462,    0,
     3889,  463,  131,  456,  133,  132,  451,  434,  129,  129,
      137,  135,  145,  179,  127,  184,  189,  131,  144,  201,
      202,  224,  235,  230,    0,  200,  262,  305,  241,  253,
      255,  146,  366,    0,  200,  224,  391,  357,    0,  348,
      264,  327,  222,  251,  297,  294,  363,  430,  484,  536,
      584,  632,  283,  359,  680,  294,  293,  361,  422,  732,
      780,  431,  348,  435,  830,  882,  472,  530,  443,  360,
      225,  296, 3889,  279,  246, 3889, 3889,  306,  226,  207,
     3889, 3889, 3889, 3889,    0,  243,  280,  359,  438,  293,

      309,  474,    0,  395,  478,  373,  294,  473,  537,  427,
      296,  306,  353,  379,  386,  537,  426,  463,  481,  488,
      486,  490,  525,  571,  485,    0,  539,  534,  587,  538,
      550,  535,  586,  582,  596,  576,  586,  588,  584,  585,
      599,  612,  609,    0,  635,  623,  626,  644,  643,  632,
      642,  646,  684,  640,  638,  660,  660,  651,  678,  690,
      684,  682,  679,  699,  697,  694,  695,  731,  710,  696,
      716, 3889,    0,  340,    0,  206,  198,    0,    0,  335,
      190,  161,    0,    0,    0,    0,  736,  741,  745,  770,
      795,  811,  834,  869,  778,  873,  901,  799,  871,  923,

      975,  926,  829,  931,  960,  957,  934, 1025,  972,  997,
     1011, 1008, 1033, 1039, 1051, 1073, 1014,  985, 1077, 1064,
     1126, 1074, 1085, 1000, 1117, 1122, 1131, 1123, 1139, 1165,
     1161, 1179, 1177, 1187, 1189, 1171, 1220, 1215, 1225, 1231,
     1228, 1260, 1241, 1263, 1279, 1271, 1282, 1315, 1292, 1317,
     1328, 1202, 1323, 1314, 1333, 1365, 1357, 1367, 1359, 1368,
     1382, 1390, 1401,    0, 3889,  145,    0,  735,    0,  746,
      740,    0,  761,    0,  776,  792,  828, 1305,  823,  832,
      852,  849,    0,  903,    0,  910,  929, 1403,  938,  942,
      949,  989, 1058, 1079,    0, 1092, 1107, 1135, 1182, 1230,

     1260, 1327,    0, 1338, 1382, 1403, 1391, 1408, 1409, 1404,
     1405, 1409, 1417, 1415, 1426, 1431, 1433, 1441, 1419, 1427,
        0, 1424, 1442, 1439, 1445, 1458, 1453, 1440, 1442, 1443,
        0, 1454, 1451, 1451, 1467, 1472, 1478, 1464, 1464, 1468,
     1481, 1464, 1477, 1485, 1477, 1489,    0, 1472, 1480, 1481,
     1490,    0, 1487, 1490, 1499, 1509,    0, 1501, 1501, 1505,
     1522, 1510, 1505, 1508, 1512, 1520, 1525, 1517,    0,  140,
     1531, 1539, 1541, 1543, 1562, 1544, 1577, 1547, 1565, 1581,
     1598, 1595, 1587, 1616, 1617, 1619, 1621, 1627, 1629, 1650,
     1655, 1652, 1661, 1653, 1683, 1665, 1693, 1687, 1691, 1709,

     1695, 1719, 1721, 1743, 1745, 1706, 1727, 1749, 1760, 1755,
     1773, 1761, 1795, 1783, 1786, 1804, 1812, 1809, 1814, 1823,
     1827, 1838, 1837, 1840, 1835, 1863, 1852, 1869, 1892, 1881,
     1866, 1906, 1894, 1907, 1897, 1925, 1935, 1937, 1911, 1920,
     1946, 1956, 1960, 1977, 1990, 1974, 1999, 1991, 1995, 2000,
     2008, 2023, 2025, 2033, 2044, 2034, 2062, 2059, 2049, 2036,
     2057, 2088, 2093, 2092, 2094, 2098, 2111, 2126, 2122, 2143,
     2147, 2148, 1536, 1539, 1563, 1564, 1656, 1701,    0, 1728,
        0, 1770, 1858, 1873, 1888,    0, 1896, 1927, 1964, 2043,
        0, 2130, 2129, 2144,    0,    0, 2146, 2148, 2146, 2150,

     2170, 2176,    0,    0,    0, 2180, 2169,    0, 2172,    0,
     2172,    0, 2185, 2174, 2172, 2183, 2184, 2198,    0, 2191,
        0,    0,    0, 2186,    0, 2195, 2204, 2191, 2207, 2200,
        0, 2217, 2216, 2204, 2206, 2212,    0,    0, 2225, 2226,
     2218, 2217, 2219, 2227, 2227, 2241,    0, 2241, 2241, 2250,
     2241,    0,    0, 2238, 2256, 2246, 2240, 2262, 2244, 2258,
     2264,    0, 2249,    0, 2267,    0,    0, 2275, 2276, 2270,
     2273, 2298, 2299, 2301, 2309, 2304, 2327, 2330, 2340, 2339,
     2314, 2358, 2352, 2349, 2388, 2363, 2373, 2397, 2402, 2394,
     2403, 2407, 2426, 2431, 2440, 2442, 2443, 2432, 2448, 2456,

     2461, 2480, 2472, 2477, 2485, 2496, 2494, 2502, 2515, 2511,
     2526, 2534, 2550, 2517, 2560, 2545, 2548, 2551, 2569, 2556,
     2586, 2582, 2585, 2588, 2601, 2604, 2619, 2610, 2623, 2625,
     2634, 2640, 2653, 2659, 2668, 2676, 2658, 2674, 2699, 2693,
     2710, 2677, 2712, 2718, 2727, 2731, 2728, 2733, 2736, 2744,
     2752, 2766, 2785, 2787, 2790, 2776, 2784, 2800, 2795, 2798,
     2801, 2806,    0,    0, 2259,    0, 2306, 2310, 2390, 2397,
     2461, 2493,    0, 2499, 2615, 2656,    0, 2675, 2734, 2762,
     2767, 2782, 2815, 2821, 2832, 2840, 2832,    0, 2838, 2828,
        0, 2829,    0,    0, 2831, 2849, 2836, 2844,    0,    0,

        0,    0, 2852,    0, 2858, 2852, 2841,    0,    0, 2858,
     2846, 2847, 2861, 2860,    0, 2873, 2871, 2857, 2875, 2879,
     2866, 2871, 2874, 2894,    0, 2892, 2894, 2894,    0, 2881,
     2902,    0, 2903, 2904, 2906, 2908, 2909, 2912, 2914, 2937,
     2938, 2942, 2943, 2966, 2960, 2952, 2968, 2977, 2982, 2978,
     2981, 2996, 3006, 3000, 3030, 3012, 3035, 3031, 3044, 3036,
     3040, 3065, 3052, 3054, 3075, 3066, 3084, 3089, 3088, 3094,
     3100, 3106, 3110, 3118, 3128, 3129, 3119, 3140, 3142, 3143,
     3158, 3164, 3152, 3182, 3154, 3192, 3194, 3180, 3197, 3210,
     3218, 3234, 3216, 3246, 3208, 3240, 3250, 3248, 3251, 3272,

     3283, 3262, 2918,    0, 2935, 2947, 3056, 3218,    0, 3228,
     3249,    0,    0, 3282,    0,    0,    0, 3284,    0, 3276,
     3273,    0,    0, 3270,    0,    0, 3281, 3296,    0,    0,
     3293, 3305,    0, 3287, 3304, 3285,    0, 3310, 3300,    0,
        0,    0, 3309,    0, 3322, 3324, 3307,    0,    0,    0,
        0, 3317, 3326, 3334, 3339, 3336, 3338, 3337, 3340, 3370,
     3362, 3372, 3374, 3378, 3380, 3388, 3391, 3393, 3396, 3422,
     3414, 3406, 3410, 3412, 3424, 3428, 3447, 3445, 3446, 3450,
     3476, 3468, 3462, 3484, 3478, 3480, 3481, 3514, 3502, 3486,
     3517, 3518, 3535, 3520, 3536, 3550, 3551, 3548, 3552, 3554,

     3560, 3584,    0,    0,    0,    0,    0, 3346,    0, 3421,
        0,    0,    0,    0,    0, 3454,    0, 3517, 3558,    0,
        0, 3561,    0,    0, 3573, 3580, 3589,    0, 3590, 3592,
     3594, 3600, 3602, 3628, 3605, 3623, 3606, 3634, 3636, 3640,
     3642, 3646, 3657, 3659, 3658, 3668, 3674, 3676, 3680, 3682,
     3697, 3708, 3692, 3711, 3593,    0, 3683,    0, 3700,    0,
     3694, 3709,    0, 3730, 3722, 3733, 3732, 3751, 3734, 3736,
     3762, 3765, 3766,    0, 3753,    0,    0, 3768, 3770, 3787,
     3776, 3784,    0,    0, 3786, 3799, 3889, 3864, 3868,  136,
     3872, 3876, 3880, 3884

    } ;

static yyconst flex_int16_t yy_def[995] =
    {   0,
      987,    1,  987,    3,  987,  987,  987,  987,  987,  988,
      987,  989,  987,  987,  987,  987,  987,  987,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  987,  991,  991,  987,  991,  992,  991,  993,
      991,  991,  991,  991,  991,  991,  994,  994,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
      991,  987,  987,  988,  989,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  987,  991,  991,  991,  992,  993,  991,  991,  991,
      991,  991,  991,  991,  991,  991,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  991,  987,  987,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  991,  991,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,  990,  990,  990,  990,  990,  990,
      990,  990,  990,   58,   58,   58,   58,   58,   58,   58,
       58,   58,  990,  990,  990,  990,  990,   58,   58,   58,
       58,   58,  990,  990,   58,   58,    0,  987,  987,  987,
      987,  987,  987,  987

    } ;

static yyconst flex_uint16_t yy_nxt[3957] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   35,   42,   35,    6,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   35,   42,   35,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,

       77,   78,   79,   73,   80,   73,   44,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       73,   80,   73,   81,   82,   82,   82,   82,   87,   95,
       88,   90,   88,   91,   92,   96,  102,   97,  108,  370,
      104,  121,  109,   98,  266,   99,  110,  122,  131,  100,
      101,  132,  111,  171,  105,  112,  103,  106,  107,  113,
      370,  114,   96,  102,   97,  108,  115,  104,  121,  109,
       98,  116,   99,  110,  122,  131,  100,  101,  132,  111,
      171,  105,  112,  103,  106,  107,  113,  123,  114,  181,

      117,  174,   82,  115,  178,  124,  118,  126,  116,  119,
      369,  125,  120,  127,  128,  129,  266,  150,  133,  136,
      130,  151,  134,  137,  123,   82,   82,  117,  135,  138,
      182,  180,  124,  118,  126,   89,  119,  139,  125,  120,
      127,  128,  129,  147,  150,  133,  136,  130,  151,  134,
      137,  140,   86,  143,  148,  135,  138,  141,  142,  267,
      149,  144,  183,  184,  139,  145,  167,  164,  146,  165,
      147,  179,  166,  180,  168,  169,  170,  152,  140,  153,
      143,  148,  154,  265,  141,  142,  267,  149,  144,  155,
      156,  264,  145,  167,  164,  146,  165,   82,   82,  166,

      187,  168,  169,  170,  152,  186,  153,  213,  185,  154,
      224,  187,  268,  214,   90,   88,  155,  156,  157,  158,
      187,  223,  159,  273,  274,  160,  161,  187,  283,  292,
      187,  187,  162,  293,  213,  163,  181,  224,  187,  268,
      214,  174,   82,  182,  180,  157,  158,  187,  223,  159,
      273,  274,  160,  161,  178,  283,  292,  187,  187,  162,
      293,  173,  163,  173,  173,  187,  173,  173,  173,  173,
      173,  173,  215,  173,  173,  173,  187,  263,  225,  188,
      216,  189,  226,  269,  294,  187,  217,  190,  227,  191,
      281,  270,  187,  192,  193,  295,  187,  187,  187,  215,

      282,  296,  175,  187,  263,  225,  188,  216,  189,  226,
      269,  294,  187,  217,  190,  227,  191,  281,  270,  277,
      192,  193,  295,  187,  187,  187,  278,  282,  296,  173,
      173,  173,  172,  173,  173,  173,  173,  173,  173,  228,
      173,  173,  173,  229,  239,   94,  277,  194,  187,  230,
      302,  271,  242,  278,  272,  240,  243,  290,  291,  187,
      187,  241,   93,  261,  262,   89,  228,  195,  187,   86,
      229,  239,  187,   83,  194,  187,  230,  302,  271,  242,
      187,  272,  240,  243,  290,  291,  187,  187,  241,  187,
      261,  262,  275,  303,  195,  187,  173,  196,  256,  187,

      257,  187,  279,  258,  280,  284,  276,  187,  304,  187,
      285,  197,  305,  306,  198,  199,  187,  307,  312,  275,
      303,  187,  987,  987,  196,  256,  987,  257,  187,  279,
      258,  280,  284,  276,  987,  304,  187,  285,  197,  305,
      306,  198,  199,  259,  307,  312,  987,  187,  187,  200,
      286,  260,  297,  201,  298,  287,  308,  202,  299,  309,
      313,  288,  314,  203,  319,  300,  204,  187,  289,  301,
      259,  320,  321,  187,  187,  987,  200,  286,  260,  297,
      201,  298,  287,  308,  202,  299,  309,  313,  288,  314,
      203,  319,  300,  204,  187,  289,  301,  310,  320,  321,

      187,  187,  311,  315,  322,  323,  327,  324,  205,  325,
      206,  326,  328,  316,  329,  207,  330,  331,  317,  318,
      208,  187,  987,  332,  310,  333,  987,  334,  187,  311,
      315,  322,  323,  327,  324,  205,  325,  206,  326,  328,
      316,  329,  207,  330,  331,  317,  318,  208,  187,  187,
      332,  335,  333,  209,  334,  336,  337,  338,  341,  210,
      339,  343,  211,  342,  340,  212,  344,  348,  349,  187,
      987,  987,  987,  350,  351,  352,  187,  987,  335,  987,
      209,  987,  336,  337,  338,  341,  210,  339,  343,  211,
      342,  340,  212,  344,  348,  349,  187,  187,  218,  345,

      350,  351,  352,  353,  219,  220,  221,  355,  346,  356,
      357,  222,  358,  361,  354,  362,  347,  187,  987,  363,
      359,  987,  987,  360,  187,  218,  345,  366,  367,  368,
      353,  219,  220,  221,  355,  346,  356,  357,  222,  358,
      361,  354,  362,  347,  187,  231,  363,  359,  364,  187,
      360,  987,  473,  187,  366,  367,  368,  371,  187,  232,
      987,  365,  187,  474,  475,  233,  234,  987,  987,  187,
      987,  987,  231,  187,  476,  364,  187,  372,  187,  473,
      187,  987,  187,  987,  371,  187,  232,  187,  365,  187,
      474,  475,  233,  234,  373,  187,  187,  187,  235,  987,

      187,  476,  374,  477,  372,  187,  236,  187,  375,  187,
      237,  376,  187,  238,  187,  187,  385,  187,  987,  987,
      987,  373,  187,  987,  187,  235,  386,  478,  187,  374,
      477,  987,  187,  236,  187,  375,  187,  237,  376,  187,
      238,  377,  187,  385,  187,  244,  187,  245,  187,  378,
      246,  187,  479,  386,  478,  187,  482,  247,  248,  187,
      987,  987,  396,  187,  483,  484,  187,  187,  377,  987,
      987,  187,  244,  187,  245,  187,  378,  246,  187,  479,
      485,  987,  987,  482,  247,  248,  187,  379,  187,  396,
      187,  483,  484,  187,  187,  249,  250,  381,  187,  251,

      987,  380,  252,  253,  382,  387,  187,  485,  187,  254,
      187,  987,  255,  187,  379,  187,  987,  187,  187,  187,
      486,  987,  249,  250,  381,  383,  251,  384,  380,  252,
      253,  382,  387,  187,  487,  187,  254,  187,  187,  255,
      187,  987,  488,  187,  987,  187,  187,  486,  187,  400,
      987,  187,  383,  491,  384,  388,  394,  395,  397,  492,
      389,  487,  987,  187,  987,  187,  987,  187,  187,  488,
      187,  187,  987,  399,  187,  187,  400,  187,  187,  987,
      491,  493,  388,  394,  395,  397,  492,  389,  390,  187,
      187,  398,  187,  391,  187,  187,  406,  187,  187,  392,

      399,  187,  187,  494,  187,  987,  393,  987,  493,  187,
      987,  987,  187,  987,  187,  390,  187,  187,  398,  187,
      391,  187,  187,  406,  187,  187,  392,  407,  187,  187,
      494,  187,  409,  393,  187,  987,  187,  425,  408,  187,
      401,  187,  402,  987,  187,  187,  403,  416,  187,  187,
      187,  187,  187,  404,  407,  187,  187,  405,  187,  409,
      410,  187,  187,  987,  425,  408,  411,  401,  187,  402,
      187,  987,  187,  403,  416,  187,  187,  187,  187,  987,
      404,  187,  412,  187,  405,  413,  495,  410,  187,  187,
      187,  187,  418,  411,  187,  187,  496,  187,  417,  414,

      423,  187,  187,  187,  415,  497,  424,  987,  187,  412,
      187,  187,  413,  495,  187,  187,  987,  187,  187,  418,
      987,  187,  187,  496,  498,  417,  414,  423,  187,  187,
      987,  415,  497,  424,  187,  426,  987,  187,  187,  187,
      187,  187,  419,  187,  429,  427,  430,  428,  187,  187,
      499,  498,  420,  431,  187,  987,  187,  421,  422,  187,
      187,  187,  426,  187,  987,  432,  187,  187,  187,  419,
      187,  429,  427,  430,  428,  187,  187,  499,  187,  420,
      431,  187,  187,  187,  421,  422,  187,  187,  187,  987,
      187,  433,  432,  434,  187,  187,  187,  987,  187,  987,

      437,  436,  187,  187,  187,  187,  187,  438,  187,  187,
      987,  435,  987,  500,  187,  187,  187,  987,  433,  459,
      434,  187,  987,  187,  187,  187,  187,  437,  436,  187,
      987,  187,  187,  187,  438,  187,  439,  187,  435,  187,
      500,  187,  187,  187,  442,  443,  459,  440,  187,  444,
      987,  187,  187,  187,  501,  441,  987,  187,  187,  187,
      447,  987,  187,  439,  187,  187,  187,  987,  187,  187,
      987,  442,  443,  987,  440,  187,  444,  187,  187,  187,
      187,  501,  441,  448,  187,  187,  445,  447,  187,  187,
      502,  446,  187,  987,  449,  187,  187,  187,  452,  187,

      187,  987,  987,  450,  187,  187,  455,  187,  187,  187,
      448,  451,  453,  445,  987,  187,  187,  502,  446,  187,
      480,  449,  481,  187,  187,  452,  187,  187,  454,  187,
      450,  187,  187,  455,  187,  187,  187,  987,  451,  453,
      187,  456,  461,  187,  503,  187,  187,  480,  460,  481,
      187,  187,  187,  457,  187,  454,  187,  987,  187,  187,
      187,  187,  987,  504,  458,  187,  462,  187,  456,  461,
      187,  503,  187,  465,  187,  460,  187,  187,  187,  187,
      457,  187,  187,  467,  187,  468,  463,  187,  466,  464,
      504,  458,  187,  462,  187,  987,  187,  187,  469,  470,

      465,  187,  187,  187,  187,  187,  505,  187,  987,  187,
      467,  187,  468,  463,  472,  466,  464,  506,  187,  187,
      489,  187,  471,  187,  507,  469,  470,  187,  508,  187,
      509,  187,  187,  505,  187,  490,  510,  511,  187,  512,
      513,  472,  514,  515,  506,  187,  187,  489,  516,  471,
      517,  507,  520,  521,  187,  508,  522,  509,  518,  523,
      524,  525,  490,  510,  511,  187,  512,  513,  519,  514,
      515,  526,  527,  528,  529,  516,  530,  517,  531,  520,
      521,  532,  533,  522,  534,  518,  523,  524,  525,  535,
      538,  536,  539,  540,  541,  519,  542,  543,  526,  527,

      528,  529,  544,  530,  545,  531,  546,  547,  532,  533,
      537,  534,  548,  549,  550,  551,  535,  538,  536,  539,
      540,  541,  552,  542,  543,  553,  554,  555,  556,  544,
      557,  545,  558,  546,  547,  559,  560,  537,  561,  548,
      549,  550,  551,  562,  563,  566,  564,  567,  187,  552,
      565,  987,  553,  554,  555,  556,  568,  557,  187,  558,
      569,  187,  559,  560,  187,  561,  663,  987,  187,  664,
      562,  563,  566,  564,  567,  187,  187,  565,  187,  187,
      187,  187,  187,  568,  187,  187,  570,  569,  187,  987,
      571,  187,  572,  663,  187,  187,  664,  987,  187,  187,

      665,  666,  187,  187,  187,  187,  187,  187,  187,  187,
      575,  187,  576,  570,  187,  187,  573,  571,  187,  572,
      577,  187,  574,  987,  187,  187,  187,  665,  666,  187,
      579,  187,  187,  187,  187,  187,  187,  575,  187,  576,
      987,  187,  187,  573,  581,  187,  187,  577,  578,  574,
      580,  187,  987,  187,  187,  987,  187,  579,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  583,  584,
      587,  581,  187,  187,  582,  578,  586,  580,  187,  589,
      187,  187,  187,  187,  585,  187,  667,  187,  987,  187,
      187,  187,  187,  187,  187,  583,  584,  587,  187,  187,

      187,  582,  187,  586,  591,  187,  589,  987,  187,  187,
      187,  585,  593,  667,  187,  588,  187,  187,  668,  187,
      187,  590,  592,  598,  187,  187,  187,  187,  187,  187,
      187,  591,  187,  987,  594,  187,  187,  187,  187,  593,
      987,  669,  588,  187,  187,  668,  187,  187,  590,  592,
      598,  187,  595,  187,  987,  187,  187,  187,  187,  187,
      187,  594,  187,  187,  187,  187,  187,  596,  669,  601,
      187,  187,  187,  187,  599,  597,  987,  187,  187,  595,
      187,  603,  187,  187,  600,  187,  187,  187,  987,  187,
      187,  187,  187,  187,  596,  670,  601,  187,  187,  187,

      187,  599,  597,  187,  187,  187,  602,  187,  603,  187,
      187,  600,  187,  187,  987,  605,  604,  187,  606,  187,
      187,  187,  670,  187,  187,  187,  187,  187,  987,  187,
      187,  610,  187,  602,  607,  608,  609,  187,  987,  187,
      611,  187,  605,  604,  612,  606,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  613,  187,  187,  610,  187,
      187,  607,  608,  609,  187,  614,  616,  611,  187,  618,
      615,  612,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  613,  187,  187,  622,  187,  187,  671,  187,
      619,  187,  614,  616,  621,  617,  618,  615,  187,  187,

      187,  187,  187,  187,  187,  672,  187,  187,  620,  187,
      187,  187,  622,  187,  187,  671,  187,  619,  187,  673,
      674,  621,  617,  187,  187,  187,  624,  187,  629,  187,
      187,  187,  672,  187,  187,  620,  187,  630,  187,  623,
      625,  187,  187,  187,  187,  187,  673,  674,  187,  626,
      187,  187,  187,  624,  187,  629,  187,  187,  187,  631,
      675,  187,  187,  187,  630,  627,  623,  625,  628,  187,
      187,  187,  187,  187,  187,  187,  626,  187,  632,  187,
      987,  187,  633,  187,  187,  987,  631,  675,  634,  187,
      187,  187,  627,  187,  187,  628,  676,  187,  987,  187,

      187,  187,  635,  636,  187,  632,  637,  187,  639,  633,
      187,  187,  187,  987,  187,  634,  187,  641,  187,  638,
      187,  187,  640,  676,  187,  187,  987,  187,  187,  635,
      636,  987,  187,  637,  187,  639,  187,  187,  187,  187,
      187,  187,  187,  187,  641,  187,  638,  987,  987,  640,
      187,  187,  187,  649,  187,  187,  677,  643,  642,  187,
      187,  187,  187,  187,  187,  644,  187,  187,  645,  187,
      187,  187,  187,  187,  187,  648,  187,  187,  187,  187,
      649,  187,  987,  677,  643,  642,  187,  187,  187,  187,
      646,  647,  644,  187,  187,  645,  187,  187,  187,  187,

      187,  187,  648,  187,  987,  187,  187,  654,  187,  187,
      187,  187,  987,  187,  650,  187,  987,  646,  647,  653,
      651,  187,  652,  187,  655,  187,  187,  987,  187,  187,
      187,  187,  187,  987,  654,  187,  187,  187,  187,  187,
      987,  650,  187,  187,  656,  678,  653,  651,  187,  652,
      679,  655,  187,  987,  658,  187,  187,  187,  187,  187,
      187,  657,  187,  187,  187,  187,  187,  661,  680,  659,
      187,  656,  678,  660,  681,  187,  682,  679,  662,  683,
      187,  658,  684,  685,  187,  187,  187,  187,  657,  686,
      187,  187,  187,  687,  661,  680,  659,  688,  689,  690,

      660,  681,  691,  682,  692,  662,  683,  187,  693,  684,
      685,  187,  187,  694,  695,  698,  686,  696,  699,  700,
      687,  701,  702,  703,  688,  689,  690,  704,  697,  691,
      705,  692,  706,  707,  708,  693,  709,  710,  711,  712,
      694,  695,  698,  713,  696,  699,  700,  714,  701,  702,
      703,  715,  716,  717,  704,  697,  718,  705,  719,  706,
      707,  708,  720,  709,  710,  711,  712,  721,  722,  723,
      713,  724,  725,  726,  714,  727,  728,  729,  715,  716,
      717,  730,  731,  718,  732,  719,  987,  187,  987,  720,
      187,  987,  187,  187,  721,  722,  723,  803,  724,  725,

      726,  987,  727,  728,  729,  733,  734,  735,  730,  731,
      736,  732,  187,  187,  187,  187,  738,  187,  187,  187,
      187,  187,  739,  804,  803,  987,  187,  805,  737,  987,
      987,  187,  733,  734,  735,  187,  187,  736,  187,  187,
      187,  187,  187,  738,  187,  187,  187,  187,  187,  739,
      804,  187,  740,  187,  805,  737,  187,  187,  187,  987,
      741,  987,  187,  187,  187,  187,  187,  187,  187,  187,
      743,  187,  742,  187,  187,  187,  187,  187,  187,  740,
      187,  746,  744,  187,  187,  745,  187,  741,  748,  187,
      187,  187,  987,  187,  187,  187,  187,  743,  987,  742,

      187,  747,  187,  187,  187,  187,  806,  187,  746,  744,
      187,  187,  745,  187,  187,  748,  187,  187,  749,  187,
      187,  987,  187,  807,  187,  187,  750,  187,  747,  987,
      987,  187,  187,  806,  187,  751,  987,  187,  187,  187,
      187,  187,  987,  187,  187,  749,  187,  187,  187,  187,
      807,  187,  187,  750,  752,  755,  756,  187,  187,  187,
      187,  187,  751,  187,  753,  187,  187,  187,  187,  187,
      187,  187,  754,  187,  757,  187,  187,  187,  187,  187,
      187,  752,  755,  756,  187,  187,  187,  187,  808,  187,
      187,  753,  187,  187,  187,  187,  187,  187,  187,  754,

      187,  757,  187,  759,  187,  187,  187,  187,  758,  187,
      809,  187,  187,  187,  187,  808,  187,  187,  987,  761,
      187,  187,  187,  760,  187,  187,  810,  987,  187,  187,
      759,  187,  187,  187,  187,  758,  187,  809,  187,  187,
      187,  187,  987,  187,  187,  762,  761,  763,  187,  187,
      760,  187,  187,  810,  187,  187,  764,  987,  187,  187,
      187,  187,  187,  187,  765,  187,  187,  187,  187,  766,
      187,  187,  762,  187,  763,  187,  987,  187,  187,  187,
      767,  187,  187,  764,  768,  187,  187,  187,  187,  187,
      187,  765,  187,  187,  187,  187,  766,  187,  187,  771,

      187,  769,  187,  187,  187,  187,  187,  767,  774,  187,
      770,  768,  187,  187,  187,  187,  772,  773,  187,  187,
      187,  187,  187,  187,  187,  187,  771,  777,  769,  187,
      187,  775,  187,  187,  776,  774,  187,  770,  187,  811,
      187,  187,  187,  772,  773,  187,  187,  187,  187,  187,
      187,  187,  187,  778,  777,  779,  187,  187,  775,  780,
      187,  776,  187,  187,  987,  187,  811,  187,  187,  187,
      187,  187,  781,  812,  187,  187,  187,  187,  187,  987,
      778,  782,  779,  187,  187,  187,  780,  187,  784,  187,
      187,  187,  987,  187,  187,  187,  187,  187,  187,  781,

      812,  783,  187,  187,  187,  187,  785,  813,  782,  987,
      187,  187,  187,  187,  187,  784,  187,  187,  187,  787,
      187,  187,  187,  187,  786,  788,  987,  187,  783,  789,
      187,  987,  187,  785,  813,  187,  187,  187,  187,  790,
      187,  187,  987,  187,  791,  187,  787,  187,  187,  187,
      187,  786,  788,  187,  187,  187,  789,  187,  792,  794,
      814,  187,  187,  187,  187,  187,  790,  793,  187,  187,
      187,  791,  187,  187,  187,  187,  187,  187,  795,  815,
      187,  187,  187,  187,  816,  792,  794,  814,  187,  187,
      987,  187,  187,  800,  793,  187,  187,  187,  797,  796,

      187,  187,  187,  187,  187,  795,  815,  187,  187,  799,
      187,  816,  187,  187,  817,  802,  187,  187,  187,  798,
      800,  187,  187,  187,  187,  797,  796,  187,  187,  187,
      187,  187,  187,  801,  187,  187,  799,  187,  187,  187,
      187,  817,  802,  187,  187,  187,  798,  818,  187,  187,
      187,  187,  819,  820,  187,  821,  822,  823,  824,  187,
      801,  825,  187,  826,  187,  187,  827,  828,  829,  830,
      187,  831,  832,  833,  818,  834,  835,  836,  837,  819,
      820,  838,  821,  822,  823,  824,  839,  840,  825,  841,
      826,  842,  843,  827,  828,  829,  830,  844,  831,  832,

      833,  845,  834,  835,  836,  837,  846,  847,  838,  848,
      849,  850,  851,  839,  840,  852,  841,  987,  842,  843,
      187,  187,  987,  187,  844,  187,  854,  987,  845,  855,
      856,  187,  987,  846,  847,  903,  848,  849,  850,  851,
      187,  187,  852,  187,  853,  187,  187,  187,  187,  187,
      187,  187,  187,  854,  187,  187,  855,  856,  187,  859,
      187,  904,  903,  857,  905,  858,  987,  187,  187,  862,
      187,  853,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  861,  187,  859,  187,  904,  187,
      857,  905,  858,  860,  187,  865,  862,  187,  866,  187,

      987,  187,  187,  187,  187,  187,  187,  187,  864,  863,
      187,  861,  187,  187,  187,  187,  187,  187,  187,  187,
      860,  187,  865,  187,  187,  866,  187,  871,  867,  187,
      187,  869,  187,  187,  987,  864,  863,  187,  868,  987,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  870,  187,  187,  871,  867,  187,  187,  869,  872,
      187,  187,  987,  873,  187,  868,  874,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  870,  187,
      187,  187,  187,  877,  187,  987,  872,  906,  187,  187,
      873,  187,  187,  874,  187,  187,  187,  875,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  876,  187,  187,
      877,  187,  187,  879,  906,  878,  187,  187,  187,  187,
      987,  187,  987,  187,  875,  187,  187,  880,  187,  187,
      187,  187,  187,  187,  876,  187,  187,  187,  187,  187,
      879,  881,  878,  187,  187,  187,  187,  187,  187,  882,
      187,  883,  187,  187,  880,  187,  187,  187,  187,  187,
      884,  987,  187,  187,  187,  187,  187,  987,  881,  887,
      187,  187,  187,  187,  187,  187,  882,  187,  883,  187,
      187,  187,  187,  187,  187,  987,  187,  884,  885,  187,
      987,  187,  187,  187,  886,  187,  887,  187,  187,  187,

      987,  187,  187,  888,  187,  889,  187,  187,  187,  187,
      890,  187,  891,  892,  187,  885,  187,  187,  187,  187,
      987,  886,  187,  893,  187,  187,  187,  187,  187,  187,
      888,  187,  889,  187,  187,  187,  187,  890,  187,  891,
      892,  187,  907,  908,  187,  187,  187,  187,  896,  894,
      893,  187,  187,  187,  187,  187,  187,  898,  187,  897,
      187,  187,  187,  187,  895,  900,  899,  187,  187,  907,
      908,  187,  187,  987,  187,  896,  894,  187,  187,  187,
      187,  909,  187,  187,  898,  187,  897,  187,  187,  187,
      187,  895,  900,  899,  187,  187,  902,  910,  187,  187,

      187,  911,  912,  901,  187,  913,  187,  914,  909,  187,
      187,  915,  187,  916,  187,  187,  187,  917,  918,  919,
      187,  920,  921,  902,  910,  922,  187,  187,  911,  912,
      901,  923,  913,  924,  914,  925,  187,  926,  915,  927,
      916,  928,  987,  929,  917,  918,  919,  187,  920,  921,
      987,  187,  922,  931,  187,  187,  187,  187,  923,  955,
      924,  933,  925,  187,  926,  930,  927,  987,  928,  932,
      929,  187,  987,  187,  187,  187,  187,  187,  187,  187,
      931,  187,  187,  187,  187,  934,  955,  187,  933,  187,
      187,  187,  930,  936,  935,  187,  932,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      937,  187,  934,  187,  187,  187,  187,  187,  187,  987,
      936,  935,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  937,  187,  187,
      187,  187,  187,  187,  187,  187,  939,  187,  938,  940,
      187,  187,  187,  956,  187,  187,  187,  187,  187,  187,
      187,  187,  942,  187,  187,  187,  187,  187,  187,  957,
      187,  987,  187,  939,  187,  938,  940,  941,  187,  187,
      956,  944,  187,  187,  187,  187,  187,  187,  187,  942,
      187,  187,  187,  187,  187,  946,  957,  187,  187,  187,

      943,  187,  987,  187,  941,  187,  187,  987,  944,  187,
      187,  187,  187,  187,  187,  187,  945,  947,  187,  187,
      187,  187,  946,  187,  187,  187,  187,  943,  187,  948,
      187,  187,  187,  949,  187,  187,  987,  187,  987,  187,
      187,  987,  187,  945,  947,  187,  187,  958,  187,  951,
      187,  187,  187,  187,  187,  187,  948,  187,  187,  950,
      949,  187,  187,  952,  187,  187,  187,  187,  187,  187,
      987,  187,  187,  187,  958,  959,  951,  187,  187,  187,
      187,  187,  187,  953,  187,  187,  950,  187,  187,  187,
      952,  187,  187,  960,  187,  187,  187,  187,  187,  187,

      187,  187,  959,  961,  187,  962,  963,  187,  954,  187,
      953,  187,  187,  987,  187,  187,  187,  187,  187,  187,
      960,  187,  187,  187,  187,  973,  987,  187,  187,  187,
      961,  187,  962,  963,  187,  954,  187,  187,  187,  187,
      187,  964,  187,  187,  187,  187,  187,  987,  187,  187,
      187,  187,  973,  187,  187,  965,  187,  187,  187,  187,
      187,  966,  987,  187,  187,  187,  187,  187,  964,  187,
      187,  187,  187,  187,  187,  968,  187,  187,  187,  187,
      187,  987,  965,  187,  187,  187,  187,  187,  966,  967,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  968,  187,  187,  187,  187,  987,  969,  972,
      187,  187,  187,  187,  187,  974,  967,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  970,  187,  187,
      975,  976,  187,  971,  187,  969,  972,  977,  187,  187,
      187,  187,  974,  987,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  970,  187,  187,  975,  976,  187,
      971,  187,  978,  987,  977,  979,  187,  187,  187,  187,
      187,  187,  187,  981,  187,  187,  187,  187,  187,  187,
      187,  980,  187,  983,  984,  985,  187,  187,  187,  978,
      982,  987,  979,  187,  187,  187,  187,  187,  187,  187,

      981,  187,  187,  187,  187,  187,  187,  187,  980,  187,
      983,  984,  985,  187,  187,  187,  187,  982,  986,  987,
      187,  187,  987,  187,  187,  987,  187,  987,  187,  187,
      187,  187,  187,  987,  187,  987,  187,  987,  987,  987,
      187,  987,  987,  187,  987,  986,  987,  987,  187,  987,
      187,  187,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  187,   84,  987,  987,   84,   85,  987,
       85,   85,  173,  987,  173,  173,  176,  987,  176,  176,
      177,  987,  177,  177,  187,  987,  187,  187,    5,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987
    } ;

static yyconst flex_int16_t yy_chk[3957] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   13,  990,
       13,   15,   15,   16,   16,   19,   20,   19,   22,  370,
       21,   25,   22,   19,  266,   19,   22,   25,   28,   19,
       19,   29,   22,   42,   21,   22,   20,   21,   21,   23,
      182,   23,   19,   20,   19,   22,   23,   21,   25,   22,
       19,   23,   19,   22,   25,   28,   19,   19,   29,   22,
       42,   21,   22,   20,   21,   21,   23,   26,   23,  181,

       24,   45,   45,   23,  177,   26,   24,   27,   23,   24,
      176,   26,   24,   27,   27,   27,   90,   36,   30,   31,
       27,   36,   30,   31,   26,   46,   46,   24,   30,   31,
       53,   53,   26,   24,   27,   89,   24,   32,   26,   24,
       27,   27,   27,   34,   36,   30,   31,   27,   36,   30,
       31,   32,   85,   33,   34,   30,   31,   32,   32,   96,
       34,   33,   54,   54,   32,   33,   40,   39,   33,   39,
       34,   51,   39,   51,   40,   41,   41,   37,   32,   37,
       33,   34,   37,   84,   32,   32,   96,   34,   33,   37,
       37,   81,   33,   40,   39,   33,   39,   82,   82,   39,

       63,   40,   41,   41,   37,   56,   37,   63,   55,   37,
       67,   66,   97,   63,   88,   88,   37,   37,   38,   38,
       63,   66,   38,  100,  101,   38,   38,   63,  107,  111,
       67,   66,   38,  112,   63,   38,   52,   67,   66,   97,
       63,  174,  174,  180,  180,   38,   38,   63,   66,   38,
      100,  101,   38,   38,   50,  107,  111,   67,   66,   38,
      112,   48,   38,   57,   57,   73,   57,   57,   57,   57,
       57,   57,   64,   57,   57,   57,   64,   80,   68,   57,
       64,   57,   68,   98,  113,   73,   64,   57,   68,   57,
      106,   98,   73,   57,   57,  114,   64,   80,   68,   64,

      106,  115,   47,   64,   80,   68,   57,   64,   57,   68,
       98,  113,   73,   64,   57,   68,   57,  106,   98,  104,
       57,   57,  114,   64,   80,   68,  104,  106,  115,   57,
       58,   58,   43,   58,   58,   58,   58,   58,   58,   69,
       58,   58,   58,   69,   72,   18,  104,   58,   72,   69,
      117,   99,   74,  104,   99,   72,   74,  110,  110,   69,
       79,   72,   17,   79,   79,   14,   69,   58,   72,   12,
       69,   72,   74,    9,   58,   72,   69,  117,   99,   74,
       79,   99,   72,   74,  110,  110,   69,   79,   72,   77,
       79,   79,  102,  118,   58,   72,   58,   59,   77,   74,

       77,   59,  105,   77,  105,  108,  102,   79,  119,   77,
      108,   59,  120,  121,   59,   59,   77,  122,  125,  102,
      118,   59,    5,    0,   59,   77,    0,   77,   59,  105,
       77,  105,  108,  102,    0,  119,   77,  108,   59,  120,
      121,   59,   59,   78,  122,  125,    0,   78,   59,   60,
      109,   78,  116,   60,  116,  109,  123,   60,  116,  123,
      127,  109,  128,   60,  130,  116,   60,   78,  109,  116,
       78,  131,  132,   60,   78,    0,   60,  109,   78,  116,
       60,  116,  109,  123,   60,  116,  123,  127,  109,  128,
       60,  130,  116,   60,   78,  109,  116,  124,  131,  132,

       60,   61,  124,  129,  133,  134,  136,  134,   61,  135,
       61,  135,  137,  129,  138,   61,  139,  140,  129,  129,
       61,   61,    0,  141,  124,  142,    0,  143,   61,  124,
      129,  133,  134,  136,  134,   61,  135,   61,  135,  137,
      129,  138,   61,  139,  140,  129,  129,   61,   61,   62,
      141,  145,  142,   62,  143,  146,  147,  148,  150,   62,
      149,  151,   62,  150,  149,   62,  152,  154,  155,   62,
        0,    0,    0,  156,  157,  158,   62,    0,  145,    0,
       62,    0,  146,  147,  148,  150,   62,  149,  151,   62,
      150,  149,   62,  152,  154,  155,   62,   65,   65,  153,

      156,  157,  158,  159,   65,   65,   65,  160,  153,  161,
      162,   65,  163,  165,  159,  166,  153,   65,    0,  167,
      164,    0,    0,  164,   65,   65,  153,  169,  170,  171,
      159,   65,   65,   65,  160,  153,  161,  162,   65,  163,
      165,  159,  166,  153,   65,   70,  167,  164,  168,   70,
      164,    0,  268,  187,  169,  170,  171,  188,  188,   70,
        0,  168,  189,  270,  271,   70,   70,    0,    0,   70,
        0,    0,   70,  187,  273,  168,   70,  189,  188,  268,
      187,    0,  189,    0,  188,  188,   70,  190,  168,  189,
      270,  271,   70,   70,  190,  195,   70,   71,   71,    0,

      187,  273,  190,  275,  189,  188,   71,  190,  191,  189,
       71,  191,  191,   71,  190,  195,  198,   71,    0,    0,
        0,  190,  195,    0,   71,   71,  198,  276,  192,  190,
      275,    0,  191,   71,  190,  191,  198,   71,  191,  191,
       71,  192,  195,  198,   71,   75,  203,   75,  192,  193,
       75,  193,  277,  198,  276,  192,  279,   75,   75,  191,
        0,    0,  203,  198,  280,  281,  203,   75,  192,    0,
        0,  193,   75,  203,   75,  192,  193,   75,  193,  277,
      282,    0,    0,  279,   75,   75,  194,  194,  199,  203,
      196,  280,  281,  203,   75,   76,   76,  196,  193,   76,

        0,  194,   76,   76,  196,  199,  194,  282,  199,   76,
      196,    0,   76,  194,  194,  199,    0,  196,  197,   76,
      284,    0,   76,   76,  196,  197,   76,  197,  194,   76,
       76,  196,  199,  194,  286,  199,   76,  196,  197,   76,
      200,    0,  287,  202,    0,  197,   76,  284,  204,  207,
        0,  207,  197,  289,  197,  200,  202,  202,  204,  290,
      200,  286,    0,  202,    0,  197,    0,  200,  204,  287,
      202,  207,    0,  206,  206,  204,  207,  205,  207,    0,
      289,  291,  200,  202,  202,  204,  290,  200,  201,  209,
      202,  205,  201,  201,  206,  204,  209,  205,  207,  201,

      206,  206,  218,  292,  205,    0,  201,    0,  291,  209,
        0,    0,  201,    0,  210,  201,  209,  224,  205,  201,
      201,  206,  218,  209,  205,  212,  201,  210,  211,  218,
      292,  217,  212,  201,  210,    0,  209,  224,  211,  201,
      208,  210,  208,    0,  224,  212,  208,  217,  211,  218,
      213,  217,  212,  208,  210,  211,  214,  208,  217,  212,
      213,  210,  208,    0,  224,  211,  214,  208,  215,  208,
      213,    0,  212,  208,  217,  211,  214,  213,  217,    0,
      208,  220,  215,  214,  208,  215,  293,  213,  215,  208,
      216,  222,  220,  214,  219,  215,  294,  213,  219,  216,

      222,  220,  223,  214,  216,  296,  223,    0,  220,  215,
      216,  222,  215,  293,  219,  215,    0,  216,  222,  220,
        0,  219,  223,  294,  297,  219,  216,  222,  220,  223,
        0,  216,  296,  223,  225,  225,    0,  216,  222,  226,
      228,  219,  221,  221,  227,  226,  227,  226,  227,  223,
      298,  297,  221,  228,  225,    0,  229,  221,  221,  226,
      228,  225,  225,  221,    0,  229,  226,  228,  227,  221,
      221,  227,  226,  227,  226,  227,  229,  298,  231,  221,
      228,  225,  230,  229,  221,  221,  226,  228,  236,    0,
      221,  230,  229,  231,  233,  227,  232,    0,  231,    0,

      234,  233,  230,  229,  234,  231,  235,  235,  236,  230,
        0,  232,    0,  299,  233,  236,  232,    0,  230,  252,
      231,  233,    0,  232,  234,  231,  235,  234,  233,  230,
        0,  234,  238,  235,  235,  236,  237,  237,  232,  252,
      299,  233,  239,  232,  240,  241,  252,  238,  240,  241,
        0,  234,  238,  235,  300,  239,    0,  237,  243,  238,
      243,    0,  239,  237,  237,  241,  252,    0,  240,  239,
        0,  240,  241,    0,  238,  240,  241,  242,  243,  238,
      244,  300,  239,  244,  237,  243,  242,  243,  246,  239,
      301,  242,  241,    0,  245,  240,  245,  242,  246,  247,

      244,    0,    0,  245,  242,  243,  249,  244,  246,  249,
      244,  245,  247,  242,    0,  246,  245,  301,  242,  247,
      278,  245,  278,  245,  242,  246,  247,  244,  248,  249,
      245,  254,  248,  249,  250,  246,  249,    0,  245,  247,
      253,  250,  254,  245,  302,  251,  247,  278,  253,  278,
      255,  254,  248,  251,  250,  248,  249,    0,  254,  248,
      253,  250,    0,  304,  251,  251,  255,  253,  250,  254,
      255,  302,  251,  257,  257,  253,  259,  255,  254,  248,
      251,  250,  256,  259,  258,  260,  256,  253,  258,  256,
      304,  251,  251,  255,  257,    0,  259,  255,  260,  261,

      257,  257,  256,  259,  258,  260,  305,  262,    0,  256,
      259,  258,  260,  256,  263,  258,  256,  306,  263,  261,
      288,  257,  262,  259,  307,  260,  261,  262,  308,  256,
      309,  258,  260,  305,  262,  288,  310,  311,  263,  312,
      313,  263,  314,  315,  306,  263,  261,  288,  316,  262,
      317,  307,  319,  320,  262,  308,  322,  309,  318,  323,
      324,  325,  288,  310,  311,  263,  312,  313,  318,  314,
      315,  326,  327,  328,  329,  316,  330,  317,  332,  319,
      320,  333,  334,  322,  335,  318,  323,  324,  325,  336,
      338,  337,  339,  340,  341,  318,  342,  343,  326,  327,

      328,  329,  344,  330,  345,  332,  346,  348,  333,  334,
      337,  335,  349,  350,  351,  353,  336,  338,  337,  339,
      340,  341,  354,  342,  343,  355,  356,  358,  359,  344,
      359,  345,  360,  346,  348,  361,  362,  337,  363,  349,
      350,  351,  353,  364,  365,  367,  366,  368,  371,  354,
      366,    0,  355,  356,  358,  359,  372,  359,  373,  360,
      374,  376,  361,  362,  378,  363,  473,    0,  371,  474,
      364,  365,  367,  366,  368,  371,  372,  366,  373,  375,
      374,  376,  379,  372,  378,  373,  375,  374,  376,    0,
      377,  378,  379,  473,  377,  371,  474,    0,  380,  375,

      475,  476,  379,  372,  383,  373,  375,  374,  376,  379,
      382,  378,  382,  375,  377,  381,  380,  377,  380,  379,
      383,  377,  381,    0,  383,  380,  375,  475,  476,  379,
      385,  383,  382,  384,  385,  381,  386,  382,  387,  382,
        0,  377,  381,  380,  388,  380,  389,  383,  384,  381,
      386,  383,    0,  384,  385,    0,  386,  385,  387,  382,
      384,  385,  381,  386,  388,  387,  389,  390,  391,  392,
      394,  388,  391,  389,  390,  384,  393,  386,  393,  396,
      384,  385,  396,  386,  392,  387,  477,  390,    0,  392,
      394,  388,  391,  389,  390,  391,  392,  394,  393,  391,

      395,  390,  396,  393,  398,  393,  396,    0,  399,  396,
      397,  392,  401,  477,  390,  395,  392,  394,  478,  391,
      395,  397,  400,  406,  398,  393,  400,  395,  399,  396,
      397,  398,  401,    0,  402,  399,  402,  397,  403,  401,
        0,  480,  395,  406,  407,  478,  400,  395,  397,  400,
      406,  398,  403,  400,    0,  399,  402,  397,  403,  401,
      404,  402,  405,  402,  407,  403,  408,  404,  480,  410,
      406,  407,  410,  400,  408,  405,    0,  409,  412,  403,
      404,  412,  405,  402,  409,  403,  408,  404,    0,  405,
      411,  407,  410,  408,  404,  482,  410,  409,  412,  410,

      414,  408,  405,  415,  409,  412,  411,  404,  412,  405,
      411,  409,  413,  408,    0,  414,  413,  411,  415,  410,
      414,  416,  482,  415,  409,  412,  418,  414,    0,  417,
      415,  419,  413,  411,  416,  417,  418,  411,    0,  413,
      420,  416,  414,  413,  421,  415,  418,  414,  416,  417,
      415,  419,  425,  418,  423,  422,  417,  424,  419,  413,
      420,  416,  417,  418,  421,  422,  424,  420,  416,  427,
      423,  421,  425,  418,  423,  422,  417,  424,  419,  425,
      426,  423,  422,  431,  424,  431,  428,  420,  483,  427,
      428,  421,  422,  424,  430,  426,  427,  423,  430,  425,

      426,  423,  422,  431,  424,  484,  428,  426,  429,  429,
      431,  433,  431,  428,  435,  483,  427,  428,  430,  485,
      487,  430,  426,  432,  434,  430,  433,  426,  439,  429,
      431,  433,  484,  428,  435,  429,  429,  440,  433,  432,
      434,  435,  436,  432,  434,  430,  485,  487,  439,  436,
      432,  434,  437,  433,  438,  439,  429,  440,  433,  441,
      488,  435,  436,  441,  440,  437,  432,  434,  438,  436,
      432,  434,  437,  442,  438,  439,  436,  443,  441,  437,
        0,  438,  442,  441,  440,    0,  441,  488,  443,  436,
      441,  446,  437,  442,  444,  438,  489,  443,    0,  437,

      442,  438,  444,  445,  443,  441,  446,  445,  448,  442,
      441,  446,  449,    0,  444,  443,  447,  450,  446,  447,
      442,  444,  449,  489,  443,  451,    0,  445,  448,  444,
      445,    0,  449,  446,  445,  448,  447,  450,  446,  449,
      452,  444,  453,  447,  450,  451,  447,    0,    0,  449,
      454,  456,  451,  460,  445,  448,  490,  453,  452,  449,
      452,  455,  453,  447,  450,  454,  459,  452,  455,  453,
      454,  456,  451,  460,  461,  459,  458,  454,  456,  457,
      460,  455,    0,  490,  453,  452,  459,  452,  455,  453,
      457,  458,  454,  459,  461,  455,  458,  454,  456,  457,

      460,  461,  459,  458,    0,  462,  457,  465,  455,  464,
      463,  465,    0,  459,  462,  466,    0,  457,  458,  464,
      463,  461,  463,  458,  466,  462,  457,    0,  467,  464,
      463,  465,  462,    0,  465,  466,  464,  463,  465,  469,
        0,  462,  466,  468,  467,  492,  464,  463,  467,  463,
      493,  466,  462,    0,  469,  467,  464,  463,  465,  469,
      470,  468,  466,  468,  471,  472,  469,  471,  494,  470,
      468,  467,  492,  470,  497,  467,  498,  493,  472,  499,
      470,  469,  500,  501,  471,  472,  469,  470,  468,  502,
      468,  471,  472,  506,  471,  494,  470,  507,  509,  511,

      470,  497,  513,  498,  514,  472,  499,  470,  515,  500,
      501,  471,  472,  516,  517,  520,  502,  518,  524,  526,
      506,  527,  528,  528,  507,  509,  511,  529,  518,  513,
      530,  514,  532,  533,  534,  515,  535,  536,  539,  540,
      516,  517,  520,  541,  518,  524,  526,  542,  527,  528,
      528,  543,  544,  545,  529,  518,  546,  530,  548,  532,
      533,  534,  549,  535,  536,  539,  540,  550,  551,  554,
      541,  555,  556,  557,  542,  558,  559,  560,  543,  544,
      545,  561,  563,  546,  565,  548,    0,  570,    0,  549,
      571,    0,  568,  569,  550,  551,  554,  665,  555,  556,

      557,    0,  558,  559,  560,  568,  569,  570,  561,  563,
      571,  565,  568,  569,  570,  572,  573,  571,  574,  568,
      569,  576,  575,  667,  665,    0,  575,  668,  572,    0,
        0,  581,  568,  569,  570,  572,  573,  571,  574,  568,
      569,  576,  572,  573,  577,  574,  575,  578,  576,  575,
      667,  581,  577,  575,  668,  572,  580,  579,  581,    0,
      578,    0,  572,  573,  577,  574,  584,  578,  576,  583,
      580,  577,  579,  575,  578,  582,  580,  579,  581,  577,
      586,  584,  582,  580,  579,  583,  584,  578,  587,  583,
      587,  577,    0,  584,  578,  582,  583,  580,    0,  579,

      586,  585,  582,  580,  579,  585,  669,  586,  584,  582,
      587,  590,  583,  584,  588,  587,  583,  587,  588,  589,
      591,    0,  582,  670,  592,  585,  589,  586,  585,    0,
        0,  590,  585,  669,  588,  592,    0,  587,  590,  589,
      591,  588,    0,  593,  592,  588,  589,  591,  594,  598,
      670,  592,  585,  589,  593,  596,  597,  595,  590,  596,
      597,  588,  592,  593,  594,  599,  589,  591,  594,  598,
      593,  592,  595,  600,  601,  594,  598,  595,  601,  596,
      597,  593,  596,  597,  595,  599,  596,  597,  671,  603,
      593,  594,  599,  600,  604,  594,  598,  602,  601,  595,

      600,  601,  605,  604,  595,  601,  596,  597,  602,  603,
      672,  607,  599,  606,  604,  671,  603,  602,    0,  608,
      600,  604,  605,  606,  602,  601,  674,    0,  610,  605,
      604,  607,  609,  606,  614,  602,  603,  672,  607,  608,
      606,  604,    0,  611,  602,  609,  608,  610,  610,  605,
      606,  612,  609,  674,  614,  610,  611,    0,  607,  609,
      606,  614,  616,  611,  612,  617,  608,  613,  618,  613,
      611,  612,  609,  620,  610,  610,    0,  615,  612,  609,
      613,  614,  616,  611,  615,  617,  619,  613,  618,  616,
      611,  612,  617,  620,  613,  618,  613,  615,  612,  622,

      620,  619,  623,  621,  615,  624,  619,  613,  624,  616,
      621,  615,  617,  619,  613,  618,  623,  623,  625,  622,
      620,  626,  623,  621,  615,  624,  622,  628,  619,  623,
      621,  625,  624,  619,  627,  624,  627,  621,  625,  675,
      629,  626,  630,  623,  623,  625,  622,  628,  626,  623,
      621,  631,  624,  629,  628,  630,  627,  632,  625,  631,
      629,  627,  630,  627,    0,  625,  675,  629,  626,  630,
      633,  631,  634,  676,  628,  637,  634,  632,  631,    0,
      629,  635,  630,  627,  632,  635,  631,  629,  637,  630,
      633,  638,    0,  636,  642,  637,  634,  633,  631,  634,

      676,  636,  637,  634,  632,  635,  638,  678,  635,    0,
      640,  638,  635,  636,  642,  637,  639,  633,  638,  640,
      636,  642,  637,  634,  639,  641,    0,  641,  636,  643,
      640,    0,  635,  638,  678,  644,  639,  640,  638,  644,
      636,  642,    0,  639,  645,  647,  640,  641,  646,  643,
      648,  639,  641,  649,  641,  644,  643,  640,  646,  650,
      679,  650,  644,  639,  645,  647,  644,  649,  646,  651,
      648,  645,  647,  649,  641,  646,  643,  648,  651,  680,
      649,  650,  644,  652,  681,  646,  650,  679,  650,  651,
        0,  645,  647,  656,  649,  646,  651,  648,  653,  652,

      649,  657,  653,  652,  654,  651,  680,  655,  650,  655,
      652,  681,  659,  656,  682,  660,  651,  658,  661,  654,
      656,  657,  653,  662,  654,  653,  652,  655,  657,  653,
      652,  654,  659,  658,  655,  660,  655,  658,  661,  659,
      656,  682,  660,  662,  658,  661,  654,  683,  657,  653,
      662,  654,  684,  685,  655,  686,  687,  689,  690,  659,
      658,  692,  660,  695,  658,  661,  696,  697,  698,  703,
      662,  705,  706,  707,  683,  710,  711,  712,  713,  684,
      685,  714,  686,  687,  689,  690,  716,  717,  692,  718,
      695,  719,  720,  696,  697,  698,  703,  721,  705,  706,

      707,  722,  710,  711,  712,  713,  723,  724,  714,  726,
      727,  728,  730,  716,  717,  731,  718,    0,  719,  720,
      733,  734,    0,  735,  721,  736,  737,    0,  722,  738,
      739,  739,    0,  723,  724,  803,  726,  727,  728,  730,
      733,  734,  731,  735,  735,  736,  737,  733,  734,  738,
      735,  739,  736,  737,  740,  741,  738,  739,  739,  742,
      743,  805,  803,  740,  806,  741,    0,  733,  734,  746,
      735,  735,  736,  737,  740,  741,  738,  745,  739,  742,
      743,  740,  741,  744,  745,  747,  742,  743,  805,  746,
      740,  806,  741,  744,  748,  750,  746,  745,  751,  749,

        0,  740,  741,  744,  745,  747,  742,  743,  749,  748,
      744,  745,  747,  752,  748,  750,  746,  754,  751,  749,
      744,  748,  750,  753,  745,  751,  749,  756,  752,  756,
      744,  754,  747,  752,    0,  749,  748,  754,  753,    0,
      752,  748,  750,  753,  754,  751,  749,  755,  758,  756,
      753,  755,  757,  760,  756,  752,  756,  761,  754,  757,
      752,  759,    0,  759,  754,  753,  760,  755,  758,  763,
      753,  764,  757,  760,  755,  758,  756,  761,  755,  757,
      760,  759,  762,  766,  761,    0,  757,  807,  759,  763,
      759,  764,  765,  760,  755,  758,  763,  762,  764,  757,

      760,  767,  762,  766,  761,  769,  768,  765,  759,  762,
      766,  770,  765,  768,  807,  767,  763,  771,  764,  765,
        0,  767,    0,  772,  762,  769,  768,  773,  767,  762,
      766,  770,  769,  768,  765,  774,  777,  771,  770,  765,
      768,  775,  767,  772,  771,  775,  776,  773,  767,  776,
      772,  777,  769,  768,  773,  774,  777,  778,  770,  779,
      780,    0,  774,  777,  771,  775,  776,    0,  775,  783,
      772,  785,  775,  776,  773,  781,  776,  778,  777,  779,
      780,  782,  774,  777,  778,    0,  779,  780,  781,  783,
        0,  785,  775,  776,  782,  781,  783,  788,  785,  784,

        0,  782,  781,  784,  778,  786,  779,  780,  782,  786,
      787,  787,  788,  789,  789,  781,  783,  788,  785,  784,
        0,  782,  781,  790,  788,  795,  784,  790,  782,  786,
      784,  787,  786,  793,  789,  791,  786,  787,  787,  788,
      789,  789,  808,  810,  788,  795,  784,  790,  793,  791,
      790,  792,  795,  793,  790,  791,  786,  796,  787,  794,
      793,  789,  791,  794,  792,  798,  797,  797,  799,  808,
      810,  792,  795,    0,  790,  793,  791,  796,  792,  802,
      793,  811,  791,  794,  796,  798,  794,  797,  799,  800,
      794,  792,  798,  797,  797,  799,  801,  814,  792,  802,

      801,  818,  820,  800,  796,  821,  802,  824,  811,  800,
      794,  827,  798,  828,  797,  799,  800,  831,  832,  834,
      801,  835,  836,  801,  814,  838,  802,  801,  818,  820,
      800,  839,  821,  843,  824,  845,  800,  846,  827,  847,
      828,  852,    0,  853,  831,  832,  834,  801,  835,  836,
        0,  854,  838,  856,  858,  857,  855,  859,  839,  908,
      843,  858,  845,  853,  846,  855,  847,    0,  852,  857,
      853,  854,    0,  856,  858,  857,  855,  859,  854,  861,
      856,  858,  857,  855,  859,  860,  908,  860,  858,  862,
      853,  863,  855,  864,  861,  864,  857,  865,  854,  861,

      856,  858,  857,  855,  859,  866,  861,  860,  867,  862,
      868,  863,  860,  869,  860,  864,  862,  865,  863,    0,
      864,  861,  864,  872,  865,  866,  861,  873,  867,  874,
      868,  871,  866,  869,  860,  867,  862,  868,  863,  870,
      869,  875,  864,  872,  865,  876,  871,  873,  870,  874,
      872,  871,  866,  910,  873,  867,  874,  868,  871,  870,
      869,  875,  878,  879,  877,  876,  870,  880,  875,  916,
      872,    0,  876,  871,  873,  870,  874,  877,  871,  883,
      910,  882,  878,  879,  877,  882,  870,  880,  875,  878,
      879,  877,  876,  881,  880,  885,  916,  886,  887,  883,

      881,  884,    0,  890,  877,  882,  883,    0,  882,  878,
      879,  877,  882,  881,  880,  885,  884,  886,  887,  889,
      881,  884,  885,  890,  886,  887,  883,  881,  884,  888,
      890,  888,  882,  889,  891,  892,    0,  894,    0,  889,
      881,    0,  885,  884,  886,  887,  889,  918,  884,  895,
      890,  888,  893,  895,  891,  892,  888,  894,  888,  893,
      889,  891,  892,  896,  894,  898,  889,  896,  897,  899,
        0,  900,  893,  895,  918,  919,  895,  901,  888,  893,
      895,  891,  892,  897,  894,  898,  893,  896,  897,  899,
      896,  900,  898,  922,  896,  897,  899,  901,  900,  893,

      895,  902,  919,  925,  901,  926,  927,  929,  902,  930,
      897,  931,  898,    0,  896,  897,  899,  932,  900,  933,
      922,  902,  935,  937,  901,  955,    0,  929,  902,  930,
      925,  931,  926,  927,  929,  902,  930,  932,  931,  933,
      936,  934,  935,  937,  932,  934,  933,    0,  902,  935,
      937,  938,  955,  939,  929,  936,  930,  940,  931,  941,
      936,  942,    0,  942,  932,  934,  933,  936,  934,  935,
      937,  938,  934,  939,  943,  945,  944,  940,  938,  941,
      939,    0,  936,  942,  940,  946,  941,  936,  942,  944,
      942,  947,  934,  948,  943,  945,  944,  949,  938,  950,

      939,  943,  945,  944,  940,  946,  941,    0,  948,  953,
      942,  947,  946,  948,  951,  957,  944,  949,  947,  950,
      948,  943,  945,  944,  949,  952,  950,  951,  954,  953,
      959,  961,  946,  952,  951,  948,  953,  962,  947,  965,
      948,  951,  957,    0,  949,  952,  950,  964,  954,  967,
      966,  969,  952,  970,  951,  954,  953,  959,  961,  965,
      952,  951,  964,    0,  962,  966,  965,  964,  968,  967,
      966,  969,  952,  970,  964,  954,  967,  966,  969,  971,
      970,  968,  972,  973,  975,  978,  965,  979,  968,  964,
      971,    0,  966,  981,  964,  968,  967,  966,  969,  971,

      970,  982,  972,  985,  980,  978,  971,  979,  968,  972,
      973,  975,  978,  981,  979,  968,  986,  971,  980,    0,
      981,  982,    0,  985,  980,    0,  971,    0,  982,  972,
      985,  980,  978,    0,  979,    0,  986,    0,    0,    0,
      981,    0,    0,  986,    0,  980,    0,    0,  982,    0,
      985,  980,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  986,  988,    0,    0,  988,  989,    0,
      989,  989,  991,    0,  991,  991,  992,    0,  992,  992,
      993,    0,  993,  993,  994,    0,  994,  994,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1657 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

			int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 1944 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 988 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 987 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 130:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 137:
#line 196 "flex_lexer.l"
case 138:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2734 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 988 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 988 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 987);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    hsql_set_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 226 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

