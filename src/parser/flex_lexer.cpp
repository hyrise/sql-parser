#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 137
#define YY_END_OF_BUFFER 138
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[942] =
    {   0,
        0,    0,    2,    2,  138,  136,    4,    4,  136,  136,
      129,  136,  129,  129,  132,  129,  129,  129,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  129,    2,    2,    3,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
      124,    0,    0,  135,    1,  132,  131,  130,  126,  125,
      123,  127,  134,  134,  134,  134,  134,  134,  114,  134,

      115,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  116,  134,  134,  117,  118,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  119,  120,
      121,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  122,  134,  134,
      134,  134,  134,  134,  134,  134,  128,    2,    2,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  133,  130,  100,  134,
      101,  134,  134,  102,  134,  103,  134,  134,  134,  134,
      134,  134,  134,  134,  104,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  105,  134,  134,  134,  134,
      134,  134,  106,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  134,  107,  134,  134,  108,
      134,  134,  134,  134,  134,  134,  134,  134,  109,  134,
      134,  110,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  111,  134,  134,  134,  134,  112,  134,
      134,  134,  134,  113,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  134,  134,  134,  134,  134,  134,   73,  134,
       74,  134,  134,  134,  134,   75,  134,  134,  134,  134,
       76,  134,  134,  134,   77,   78,  134,  134,  134,  134,
      134,   79,   80,   81,  134,  134,   82,  134,   83,  134,
      134,  134,  134,  134,  134,  134,   84,  134,   85,   86,

       87,  134,   89,  134,  134,  134,  134,   90,  134,  134,
      134,  134,  134,   91,   92,  134,  134,  134,  134,  134,
      134,  134,   93,  134,  134,  134,  134,   94,   95,   96,
      134,  134,  134,  134,  134,  134,  134,   97,  134,   98,
      134,   99,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   54,   55,  134,   56,  134,  134,  134,  134,
      134,  134,   57,  134,  134,  134,   58,  134,  134,  134,
      134,  134,  134,  134,  134,  134,   59,  134,  134,   88,
      134,   60,   61,  134,  134,  134,  134,   62,   63,   64,
       65,  134,  134,  134,   66,   67,  134,  134,  134,  134,
      134,   68,  134,  134,  134,  134,   69,  134,  134,  134,
       70,  134,  134,  134,   71,  134,  134,   72,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  134,   30,  134,  134,   31,  134,
       32,  134,  134,   33,   34,  134,   35,   36,   37,  134,
       38,  134,   39,   40,  134,   41,   42,  134,  134,   43,
      134,  134,   44,  134,  134,  134,   45,  134,   46,   47,

       48,  134,   49,  134,  134,  134,   50,   51,   52,   53,
      134,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   15,
       16,   17,   18,  134,   19,  134,   20,   21,   22,   23,
      134,   24,  134,  134,   25,   26,  134,   27,   28,  134,
      134,  134,   29,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,  134,   10,
      134,   11,  134,   12,  134,  134,   13,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  134,    7,  134,    8,
        9,    2,    2,    2,    2,    2,    5,    6,    2,    2,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_uint16_t yy_base[949] =
    {   0,
        0,    0,   67,    0,  454, 3713,  133,  135,  423,    0,
     3713,  426,  131,  420,  133,  132,  405,  399,  129,  129,
      137,  135,  145,  179,  127,  184,  189,  131,  144,  201,
      200,  224,  193,  230,    0,  208,  246,  289,  241,  284,
      287,  329,    0,  200,  229,  375,  370,    0,  339,  268,
      319,  271,  271,  312,  303,  347,  414,  468,  520,  568,
      616,  274,  343,  664,  345,  278,  406,  364,  716,  764,
      422,  324,  419,  814,  866,  465,  424,  480,  223,  311,
     3713,  272,  265, 3713, 3713,  312,  259,  207, 3713, 3713,
     3713, 3713,    0,  147,  203,  343,  353,  229,  250,  352,

        0,  418,  463,  421,  283,  317,  518,  504,  346,  376,
      413,  431,  442,  531,  453,  462,  467,  479,  484,  486,
      520,  540,    0,  522,  517,  564,  529,  535,  550,  570,
      566,  587,  567,  575,  571,  576,  585,  598,  595,    0,
      604,  593,  604,  626,  624,  625,  623,  624,  626,  621,
      627,  646,  651,  643,  662,  662,  666,  665,  663,  676,
      683,  682,  680,  702,  690,  678, 3713,    0,  325,    0,
      206,  198,    0,    0,  331,  190,  161,    0,    0,    0,
        0,  704,  728,  725,  761,  806,  769,  820,  857,  766,
      868,  871,  900,  894,  908,  960,  912,  942,  944,  801,

      946,  970,  998,  979,  992, 1000, 1004, 1030, 1033, 1035,
     1054,  854, 1044, 1058, 1107, 1083, 1084,  916, 1014, 1112,
     1140, 1046, 1108, 1126, 1137, 1151, 1166, 1174, 1150, 1183,
     1180, 1191, 1192, 1216, 1214, 1206, 1229, 1237, 1248, 1254,
     1246, 1280, 1282, 1278, 1245, 1283, 1288, 1312, 1333, 1321,
     1334, 1336, 1331, 1322, 1357,    0, 3713,  145,    0,  694,
        0,  695,  689,    0,  723,    0,  720,  717,  737,  758,
      731,  755,  814,  805,    0,  822,  816,  842, 1072,  858,
      860,  877,  925,  913,  930,    0,  952,  976, 1099, 1084,
     1095, 1142,    0, 1164, 1183, 1227, 1244, 1287, 1292, 1304,

     1337, 1356, 1356, 1373, 1374, 1375, 1376, 1366, 1376,    0,
     1372, 1388, 1386, 1392, 1396, 1392, 1379, 1380,    0, 1390,
     1385, 1391, 1406, 1407, 1412, 1401, 1400, 1408, 1424, 1411,
     1425, 1429, 1430,    0, 1413, 1421, 1424, 1433,    0, 1430,
     1427, 1435, 1445,    0, 1437, 1438, 1439, 1455, 1443, 1443,
     1442, 1446, 1461, 1459,    0,  140, 1464, 1465, 1480, 1482,
     1483, 1493, 1498, 1495, 1496, 1508, 1524, 1534, 1536, 1547,
     1550, 1564, 1548, 1549, 1565, 1586, 1587, 1590, 1598, 1601,
     1603, 1620, 1619, 1622, 1636, 1624, 1654, 1641, 1653, 1657,
     1665, 1670, 1686, 1675, 1691, 1716, 1694, 1708, 1724, 1742,

     1727, 1729, 1732, 1740, 1758, 1745, 1773, 1757, 1781, 1770,
     1794, 1807, 1815, 1810, 1802, 1816, 1799, 1824, 1840, 1850,
     1848, 1852, 1869, 1873, 1874, 1878, 1906, 1861, 1904, 1890,
     1915, 1918, 1923, 1932, 1940, 1949, 1919, 1961, 1958, 1971,
     1957, 1975, 1992, 2003, 2006, 1994, 2011, 2009, 2037, 2034,
     2059, 2060, 1501, 1526, 1588, 1642, 1663, 1726,    0, 1790,
        0, 1848, 1914, 1921, 1983,    0, 2028, 2028, 2031, 2052,
        0, 2053, 2061, 2059,    0,    0, 2056, 2058, 2054, 2059,
     2081,    0,    0,    0, 2087, 2074,    0, 2079,    0, 2079,
     2091, 2085, 2081, 2089, 2090, 2106,    0, 2098,    0,    0,

        0, 2094,    0, 2104, 2113, 2100, 2104,    0, 2122, 2121,
     2109, 2110, 2116,    0,    0, 2130, 2132, 2123, 2120, 2119,
     2129, 2141,    0, 2142, 2139, 2145, 2142,    0,    0, 2140,
     2158, 2148, 2143, 2166, 2148, 2163, 2167,    0, 2152,    0,
     2171,    0, 2180, 2188, 2176, 2177, 2199, 2182, 2191, 2210,
     2205, 2214, 2231, 2240, 2236, 2242, 2259, 2248, 2265, 2274,
     2276, 2290, 2298, 2304, 2299, 2300, 2322, 2328, 2314, 2343,
     2344, 2332, 2353, 2354, 2372, 2376, 2362, 2377, 2378, 2402,
     2388, 2407, 2411, 2428, 2432, 2440, 2416, 2444, 2446, 2450,
     2456, 2474, 2461, 2485, 2482, 2484, 2486, 2490, 2520, 2495,

     2514, 2523, 2538, 2524, 2528, 2539, 2556, 2560, 2564, 2574,
     2582, 2598, 2572, 2588, 2593, 2606, 2612, 2610, 2614, 2628,
     2638, 2647, 2644, 2650, 2666, 2676, 2652, 2662, 2668, 2680,
     2690, 2692,    0,    0, 2195,    0, 2245, 2254, 2309, 2300,
     2346, 2394,    0, 2396, 2403, 2530,    0, 2563, 2591, 2698,
     2701, 2687, 2689, 2692, 2710, 2709,    0, 2716, 2707,    0,
     2706,    0,    0, 2707, 2724, 2712, 2723,    0,    0,    0,
        0, 2736, 2731, 2720,    0,    0, 2736, 2725, 2727, 2742,
     2740,    0, 2750, 2735, 2753, 2758, 2741, 2743, 2743, 2764,
        0, 2764, 2767, 2768,    0, 2756, 2776,    0, 2774, 2776,

     2784, 2780, 2786, 2788, 2790, 2809, 2814, 2792, 2820, 2828,
     2842, 2826, 2830, 2843, 2859, 2844, 2854, 2872, 2878, 2880,
     2884, 2896, 2882, 2908, 2913, 2897, 2932, 2918, 2922, 2936,
     2934, 2948, 2950, 2946, 2967, 2971, 2972, 2980, 2982, 2986,
     2988, 2990, 2996, 3011, 3021, 3005, 3022, 3020, 3050, 3039,
     3045, 3060, 3062, 3075, 3064, 3078, 3090, 3093, 3119, 3094,
     3096, 3124, 3108, 3127, 2775,    0, 2789, 2912, 3016, 3029,
        0, 3087, 3084,    0,    0, 3131,    0,    0,    0, 3130,
        0, 3123,    0,    0, 3113,    0,    0, 3121, 3136,    0,
     3135, 3152,    0, 3134, 3150, 3132,    0, 3155, 3144,    0,

        0, 3155,    0, 3168, 3171, 3153,    0,    0,    0,    0,
     3163, 3172, 3173, 3178, 3181, 3182, 3183, 3184, 3215, 3206,
     3207, 3212, 3218, 3224, 3236, 3237, 3241, 3246, 3249, 3247,
     3250, 3252, 3255, 3260, 3278, 3281, 3286, 3303, 3304, 3289,
     3314, 3292, 3295, 3320, 3345, 3332, 3335, 3344, 3368, 3349,
     3357, 3358, 3374, 3363, 3366, 3387, 3397, 3399,    0,    0,
        0,    0,    0, 3294,    0, 3296,    0,    0,    0,    0,
     3323,    0, 3385, 3400,    0,    0, 3388,    0,    0, 3395,
     3401, 3411,    0, 3412, 3420, 3422, 3423, 3428, 3441, 3431,
     3445, 3453, 3454, 3456, 3457, 3491, 3466, 3482, 3479, 3485,

     3490, 3508, 3494, 3507, 3520, 3531, 3525, 3536, 3456,    0,
     3482,    0, 3502,    0, 3499, 3519,    0, 3544, 3548, 3561,
     3553, 3569, 3565, 3570, 3587, 3574, 3577,    0, 3565,    0,
        0, 3593, 3599, 3610, 3602, 3611,    0,    0, 3615, 3623,
     3713, 3688, 3692,  136, 3696, 3700, 3704, 3708
    } ;

static yyconst flex_int16_t yy_def[949] =
    {   0,
      941,    1,  941,    3,  941,  941,  941,  941,  941,  942,
      941,  943,  941,  941,  941,  941,  941,  941,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  941,  945,  945,  941,  945,  946,  945,  947,  945,
      945,  945,  945,  945,  945,  948,  948,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  945,  941,
      941,  942,  943,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  941,  945,  945,  945,
      946,  947,  945,  945,  945,  945,  945,  945,  945,  945,
      945,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  945,  941,  941,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  945,  945,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,  944,  944,
      944,  944,  944,  944,  944,  944,  944,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  944,  944,  944,  944,
      944,   57,   57,   57,   57,   57,  944,  944,   57,   57,
        0,  941,  941,  941,  941,  941,  941,  941
    } ;

static yyconst flex_uint16_t yy_nxt[3781] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   35,   35,   35,    6,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   35,   35,   35,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,

       76,   77,   78,   72,   72,   72,   43,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       72,   72,   72,   79,   80,   80,   80,   80,   85,   93,
       86,   88,   86,   89,   90,   94,  100,   95,  106,  356,
      102,  119,  107,   96,  258,   97,  108,  120,  128,   98,
       99,  129,  109,  259,  103,  110,  101,  104,  105,  111,
      356,  112,   94,  100,   95,  106,  113,  102,  119,  107,
       96,  114,   97,  108,  120,  128,   98,   99,  129,  109,
      259,  103,  110,  101,  104,  105,  111,  121,  112,  176,

      115,  169,   80,  113,  173,  122,  116,  123,  114,  117,
      355,  139,  118,  124,  125,  126,  258,  133,  130,  140,
      127,  134,  131,  141,  121,  146,  142,  115,  132,  147,
       80,   80,  122,  116,  123,  260,  117,  135,  139,  118,
      124,  125,  126,  143,  133,  130,  140,  127,  134,  131,
      141,  136,  146,  142,  144,  132,  147,  137,  138,  265,
      145,  148,  260,  149,  135,  266,  150,  160,   87,  161,
      143,   84,  162,  151,  152,  174,  257,  175,  136,  177,
      175,  144,  178,  179,  137,  138,  265,  145,  148,  256,
      149,  182,  266,  150,  160,  218,  161,  163,  208,  162,

      151,  152,  153,  154,  209,  164,  155,  165,  166,  156,
      157,  182,   80,   80,  181,  182,  158,  275,  182,  159,
       88,   86,  218,  180,  163,  208,  169,   80,  176,  153,
      154,  209,  164,  155,  165,  166,  156,  157,  182,  177,
      175,  182,  182,  158,  275,  173,  159,  168,  168,  276,
      168,  168,  168,  168,  168,  168,  210,  168,  168,  168,
      182,  182,  182,  183,  211,  184,  263,  261,  182,  264,
      267,  185,  217,  186,  168,  262,  276,  187,  188,  283,
      182,  222,  182,  210,  268,  223,  170,  182,  182,  182,
      183,  211,  184,  263,  261,  167,  264,  267,  185,  217,

      186,  182,  262,  284,  187,  188,  283,  182,  222,  182,
       92,  268,  223,  168,  168,  168,   91,  168,  168,  168,
      168,  168,  168,  219,  168,  168,  168,  220,  182,   87,
      284,  189,   84,  221,   81,  232,  235,  252,  273,  182,
      236,  182,  269,  182,  285,  253,  233,  286,  274,  270,
      219,  190,  234,  941,  220,  941,  182,  287,  189,  182,
      221,  182,  232,  235,  252,  273,  182,  236,  182,  269,
      182,  285,  253,  233,  286,  274,  270,  292,  190,  234,
      168,  191,  182,  182,  287,  182,  182,  271,  182,  272,
      941,  249,  293,  250,  294,  192,  251,  182,  193,  194,

      254,  255,  182,  295,  292,  182,  941,  941,  191,  182,
      941,  296,  182,  297,  271,  941,  272,  182,  249,  293,
      250,  294,  192,  251,  182,  193,  194,  254,  255,  182,
      295,  277,  182,  195,  281,  282,  278,  196,  296,  941,
      297,  197,  279,  302,  182,  303,  288,  198,  289,  280,
      199,  298,  290,  941,  299,  308,  309,  182,  277,  291,
      195,  281,  282,  278,  196,  941,  300,  941,  197,  279,
      302,  301,  303,  288,  198,  289,  280,  199,  298,  290,
      304,  299,  308,  309,  182,  182,  291,  310,  311,  312,
      305,  313,  200,  300,  201,  306,  307,  316,  301,  202,

      314,  317,  315,  318,  203,  182,  941,  304,  319,  320,
      941,  321,  182,  322,  310,  311,  312,  305,  313,  200,
      323,  201,  306,  307,  316,  324,  202,  314,  317,  315,
      318,  203,  182,  182,  325,  319,  320,  204,  321,  326,
      322,  327,  331,  205,  332,  328,  206,  323,  335,  207,
      333,  329,  324,  182,  941,  941,  330,  336,  334,  337,
      182,  325,  941,  941,  204,  338,  326,  339,  327,  331,
      205,  332,  328,  206,  941,  335,  207,  333,  329,  342,
      182,  182,  212,  330,  336,  334,  337,  340,  213,  214,
      215,  343,  338,  344,  339,  216,  345,  346,  341,  348,

      347,  182,  941,  349,  350,  941,  342,  353,  182,  212,
      354,  453,  454,  455,  340,  213,  214,  215,  343,  351,
      344,  182,  216,  345,  346,  341,  348,  347,  182,  224,
      349,  350,  352,  182,  353,  941,  456,  354,  453,  454,
      455,  182,  182,  225,  357,  182,  351,  457,  182,  226,
      227,  941,  458,  182,  941,  941,  224,  358,  941,  352,
      182,  459,  182,  456,  462,  182,  941,  941,  182,  182,
      225,  357,  182,  460,  457,  461,  226,  227,  182,  458,
      182,  182,  228,  182,  358,  359,  182,  463,  459,  182,
      229,  462,  182,  360,  230,  941,  941,  231,  182,  363,

      460,  182,  461,  182,  941,  182,  182,  941,  182,  228,
      182,  941,  359,  182,  463,  941,  941,  229,  182,  361,
      360,  230,  362,  182,  231,  182,  363,  464,  182,  237,
      182,  238,  383,  182,  239,  364,  465,  182,  182,  466,
      467,  240,  241,  182,  941,  182,  361,  941,  941,  362,
      182,  182,  941,  941,  464,  468,  237,  182,  238,  383,
      941,  239,  364,  465,  182,  182,  466,  467,  240,  241,
      182,  182,  941,  471,  182,  365,  941,  472,  182,  242,
      243,  941,  468,  244,  182,  182,  245,  246,  182,  366,
      941,  182,  367,  247,  182,  369,  248,  370,  182,  368,

      471,  182,  365,  182,  472,  182,  242,  243,  182,  473,
      244,  182,  182,  245,  246,  182,  366,  371,  182,  367,
      247,  182,  369,  248,  370,  182,  368,  372,  373,  182,
      182,  182,  182,  182,  941,  182,  473,  182,  182,  474,
      374,  475,  379,  380,  371,  182,  941,  476,  941,  182,
      941,  941,  182,  408,  372,  373,  182,  941,  182,  182,
      182,  182,  384,  182,  182,  477,  474,  374,  475,  379,
      380,  382,  182,  375,  476,  381,  182,  182,  376,  182,
      408,  182,  941,  182,  377,  385,  182,  182,  182,  384,
      182,  378,  477,  478,  941,  941,  182,  182,  382,  941,

      375,  941,  381,  390,  182,  376,  182,  182,  182,  182,
      182,  377,  385,  386,  182,  387,  182,  182,  378,  388,
      478,  182,  391,  182,  182,  941,  389,  392,  393,  182,
      390,  182,  409,  941,  182,  182,  182,  182,  941,  941,
      386,  182,  387,  182,  182,  941,  388,  182,  182,  391,
      182,  182,  182,  389,  392,  393,  182,  394,  182,  409,
      395,  182,  182,  182,  182,  400,  396,  182,  182,  397,
      182,  182,  182,  941,  182,  182,  414,  182,  182,  182,
      398,  182,  941,  182,  394,  399,  401,  395,  182,  469,
      182,  182,  400,  396,  182,  182,  397,  182,  182,  182,

      182,  182,  182,  414,  470,  407,  941,  398,  182,  406,
      182,  941,  399,  401,  479,  480,  469,  941,  182,  481,
      182,  182,  182,  402,  182,  182,  941,  182,  182,  182,
      941,  470,  407,  403,  415,  410,  406,  411,  404,  405,
      941,  479,  480,  182,  182,  182,  481,  182,  182,  182,
      402,  182,  182,  412,  182,  413,  182,  182,  416,  482,
      403,  415,  410,  182,  411,  404,  405,  182,  182,  417,
      182,  182,  182,  941,  182,  418,  182,  182,  941,  419,
      412,  182,  413,  182,  182,  416,  482,  182,  182,  483,
      182,  182,  420,  941,  182,  182,  417,  182,  941,  421,

      182,  182,  418,  182,  182,  424,  419,  484,  182,  182,
      182,  182,  422,  941,  182,  182,  483,  182,  182,  420,
      182,  423,  941,  182,  182,  429,  421,  182,  182,  182,
      182,  182,  424,  425,  484,  182,  182,  426,  182,  422,
      427,  485,  941,  182,  182,  428,  182,  182,  423,  430,
      182,  182,  429,  182,  182,  182,  182,  941,  182,  435,
      425,  431,  440,  182,  426,  182,  182,  427,  485,  432,
      182,  182,  428,  182,  182,  433,  430,  486,  182,  941,
      182,  182,  182,  182,  434,  182,  435,  941,  431,  440,
      182,  182,  182,  182,  436,  182,  432,  182,  182,  182,

      182,  182,  433,  438,  486,  182,  437,  487,  441,  182,
      182,  434,  182,  488,  439,  182,  442,  182,  182,  182,
      182,  436,  182,  941,  182,  182,  182,  182,  941,  182,
      438,  941,  182,  437,  487,  441,  489,  446,  182,  451,
      488,  439,  182,  442,  182,  443,  182,  182,  449,  182,
      182,  182,  182,  182,  444,  447,  182,  445,  182,  182,
      448,  450,  941,  489,  446,  182,  451,  941,  182,  490,
      182,  182,  443,  182,  182,  449,  182,  182,  182,  491,
      182,  444,  447,  492,  445,  182,  182,  448,  450,  452,
      493,  494,  495,  496,  182,  182,  490,  182,  182,  498,

      182,  182,  499,  497,  500,  501,  491,  502,  503,  504,
      492,  505,  506,  507,  508,  509,  452,  493,  494,  495,
      496,  182,  510,  511,  512,  513,  498,  515,  516,  499,
      497,  500,  501,  517,  502,  503,  504,  518,  505,  506,
      507,  508,  509,  519,  514,  520,  521,  522,  523,  510,
      511,  512,  513,  524,  515,  516,  525,  526,  527,  528,
      517,  529,  530,  531,  518,  532,  534,  533,  535,  536,
      519,  514,  520,  521,  522,  523,  537,  538,  539,  542,
      524,  182,  543,  525,  526,  527,  528,  540,  529,  530,
      531,  541,  532,  534,  533,  535,  536,  182,  941,  544,

      182,  182,  182,  537,  538,  539,  542,  545,  182,  543,
      182,  546,  182,  182,  540,  182,  941,  182,  541,  182,
      182,  941,  941,  547,  182,  182,  544,  182,  182,  182,
      182,  633,  182,  182,  545,  182,  941,  182,  546,  182,
      182,  182,  182,  548,  182,  182,  182,  182,  549,  550,
      547,  551,  182,  182,  941,  941,  634,  182,  633,  182,
      182,  182,  182,  554,  182,  182,  556,  182,  182,  552,
      548,  182,  182,  182,  941,  549,  550,  941,  551,  553,
      182,  182,  182,  634,  182,  182,  182,  182,  182,  557,
      554,  182,  182,  556,  182,  555,  552,  941,  182,  558,

      182,  182,  182,  182,  559,  561,  553,  182,  182,  182,
      941,  182,  182,  182,  182,  562,  557,  564,  182,  560,
      182,  941,  555,  182,  182,  635,  558,  182,  182,  182,
      182,  559,  561,  563,  182,  182,  566,  182,  182,  182,
      182,  568,  562,  941,  564,  182,  560,  182,  565,  567,
      182,  182,  635,  182,  182,  941,  182,  182,  182,  182,
      563,  182,  182,  566,  182,  182,  182,  182,  568,  569,
      182,  182,  570,  182,  572,  565,  567,  571,  182,  636,
      182,  941,  182,  182,  182,  182,  182,  182,  182,  575,
      182,  182,  182,  637,  182,  573,  569,  182,  182,  570,

      182,  572,  182,  182,  571,  182,  636,  182,  182,  182,
      574,  182,  182,  941,  182,  578,  575,  182,  182,  182,
      637,  182,  573,  182,  576,  182,  941,  941,  182,  182,
      182,  182,  941,  182,  182,  182,  577,  574,  182,  182,
      579,  182,  578,  638,  182,  182,  583,  941,  941,  584,
      182,  576,  182,  182,  582,  182,  580,  585,  182,  182,
      182,  182,  182,  577,  182,  581,  182,  579,  182,  182,
      638,  182,  182,  583,  182,  586,  584,  182,  588,  182,
      182,  582,  182,  580,  585,  587,  182,  591,  182,  182,
      182,  182,  581,  182,  182,  182,  182,  941,  182,  589,

      941,  182,  586,  639,  182,  588,  182,  182,  941,  182,
      182,  182,  587,  590,  591,  592,  182,  182,  182,  182,
      941,  182,  182,  593,  182,  182,  589,  182,  594,  595,
      639,  182,  182,  182,  182,  596,  182,  182,  182,  182,
      590,  182,  592,  182,  182,  182,  182,  182,  598,  597,
      593,  182,  182,  182,  182,  594,  595,  182,  182,  182,
      182,  182,  596,  182,  941,  601,  182,  182,  182,  602,
      599,  182,  941,  640,  182,  598,  597,  182,  182,  182,
      182,  600,  603,  941,  182,  182,  182,  182,  182,  182,
      182,  182,  601,  609,  182,  182,  602,  599,  182,  605,

      640,  604,  606,  607,  182,  182,  182,  611,  600,  603,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  608,
      609,  182,  182,  182,  610,  182,  605,  182,  604,  606,
      607,  941,  612,  182,  611,  182,  182,  182,  182,  941,
      182,  182,  182,  182,  641,  941,  608,  941,  182,  182,
      182,  610,  182,  642,  182,  182,  182,  182,  613,  612,
      182,  941,  182,  182,  614,  941,  182,  182,  182,  182,
      182,  641,  615,  616,  620,  182,  182,  182,  182,  182,
      642,  941,  182,  182,  182,  613,  182,  182,  182,  617,
      618,  614,  182,  182,  182,  182,  182,  619,  182,  615,

      616,  620,  182,  941,  182,  182,  941,  625,  182,  182,
      941,  182,  182,  182,  643,  182,  617,  618,  621,  182,
      182,  182,  182,  182,  619,  182,  182,  941,  182,  182,
      622,  182,  623,  624,  625,  182,  182,  626,  182,  182,
      182,  643,  627,  182,  941,  621,  182,  182,  182,  941,
      182,  182,  644,  182,  182,  182,  182,  622,  182,  623,
      624,  645,  941,  646,  626,  647,  629,  182,  648,  627,
      182,  182,  628,  182,  182,  182,  182,  182,  182,  644,
      632,  182,  649,  650,  651,  630,  652,  653,  645,  631,
      646,  654,  647,  629,  655,  648,  182,  182,  182,  628,

      656,  182,  657,  182,  182,  658,  659,  632,  660,  649,
      650,  651,  630,  652,  653,  661,  631,  662,  654,  663,
      664,  655,  667,  182,  182,  665,  668,  656,  669,  657,
      670,  671,  658,  659,  672,  660,  666,  673,  674,  675,
      676,  677,  661,  678,  662,  679,  663,  664,  680,  667,
      681,  682,  665,  668,  683,  669,  684,  670,  671,  685,
      686,  672,  687,  666,  673,  674,  675,  676,  677,  688,
      678,  689,  679,  690,  691,  680,  692,  681,  682,  693,
      694,  683,  695,  684,  696,  697,  685,  686,  698,  687,
      941,  941,  941,  182,  182,  941,  688,  182,  689,  704,

      690,  691,  941,  692,  941,  182,  693,  694,  182,  695,
      699,  696,  697,  701,  702,  698,  182,  182,  700,  182,
      182,  182,  182,  705,  182,  182,  704,  182,  182,  703,
      941,  182,  182,  765,  941,  182,  182,  699,  941,  706,
      701,  702,  182,  182,  182,  700,  182,  182,  182,  182,
      705,  182,  182,  182,  182,  182,  703,  182,  182,  182,
      765,  707,  766,  182,  941,  182,  706,  709,  182,  182,
      941,  767,  708,  182,  182,  182,  182,  182,  182,  182,
      182,  711,  182,  710,  182,  182,  182,  713,  707,  766,
      941,  182,  182,  182,  709,  182,  182,  712,  767,  708,

      182,  941,  182,  182,  182,  714,  182,  182,  711,  182,
      710,  182,  182,  182,  713,  182,  182,  182,  182,  715,
      182,  182,  941,  182,  712,  768,  769,  182,  716,  182,
      941,  182,  714,  941,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  715,  719,  182,  182,
      717,  182,  768,  769,  182,  716,  718,  721,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  941,  182,  182,
      182,  182,  182,  770,  719,  720,  182,  717,  182,  182,
      182,  182,  941,  718,  721,  722,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,

      770,  941,  720,  724,  723,  726,  182,  182,  182,  182,
      941,  771,  722,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  772,  182,  182,  182,  773,  182,  725,
      724,  723,  726,  182,  941,  941,  182,  727,  771,  182,
      182,  182,  182,  941,  182,  182,  182,  728,  182,  182,
      772,  182,  182,  182,  773,  182,  725,  182,  729,  731,
      182,  182,  730,  182,  727,  182,  182,  182,  733,  182,
      732,  182,  182,  182,  728,  182,  182,  182,  182,  941,
      182,  182,  941,  182,  182,  729,  731,  182,  182,  730,
      182,  182,  182,  182,  182,  733,  182,  732,  182,  736,

      182,  182,  182,  182,  182,  182,  734,  182,  182,  735,
      182,  182,  740,  941,  182,  737,  738,  941,  182,  182,
      182,  182,  182,  182,  941,  182,  736,  182,  182,  182,
      182,  182,  182,  734,  182,  739,  735,  182,  182,  740,
      182,  182,  737,  738,  741,  182,  182,  774,  182,  182,
      182,  182,  744,  742,  182,  182,  182,  182,  182,  182,
      182,  182,  739,  743,  182,  182,  941,  182,  182,  745,
      941,  741,  182,  182,  774,  182,  182,  182,  182,  744,
      742,  182,  182,  182,  182,  746,  941,  182,  182,  182,
      743,  182,  182,  182,  747,  775,  745,  182,  941,  182,

      182,  182,  182,  182,  182,  751,  748,  749,  182,  182,
      182,  182,  746,  750,  752,  182,  182,  776,  182,  182,
      182,  747,  775,  753,  182,  182,  182,  182,  182,  182,
      182,  182,  751,  748,  749,  182,  182,  182,  182,  754,
      750,  752,  182,  182,  776,  182,  182,  182,  941,  182,
      753,  182,  182,  756,  182,  182,  182,  182,  182,  755,
      941,  182,  182,  759,  182,  182,  754,  182,  941,  762,
      182,  941,  182,  757,  182,  182,  182,  758,  182,  182,
      756,  182,  182,  182,  182,  182,  755,  182,  182,  182,
      759,  182,  182,  182,  182,  761,  762,  182,  760,  182,

      757,  763,  182,  182,  758,  182,  182,  764,  182,  182,
      182,  182,  182,  182,  182,  777,  182,  182,  778,  779,
      182,  780,  761,  781,  182,  760,  182,  182,  763,  182,
      182,  782,  182,  783,  764,  784,  182,  785,  786,  787,
      182,  788,  777,  789,  182,  778,  779,  790,  780,  791,
      781,  792,  793,  794,  182,  795,  182,  796,  782,  797,
      783,  798,  784,  799,  785,  786,  787,  800,  788,  801,
      789,  802,  803,  804,  790,  805,  791,  806,  792,  793,
      794,  807,  795,  808,  796,  809,  797,  810,  798,  811,
      799,  182,  859,  182,  800,  941,  801,  182,  802,  803,

      804,  182,  805,  813,  806,  814,  815,  182,  807,  818,
      808,  182,  809,  182,  810,  860,  811,  182,  182,  859,
      182,  182,  812,  182,  182,  182,  182,  182,  182,  182,
      813,  182,  814,  815,  182,  816,  818,  182,  182,  941,
      182,  817,  860,  821,  182,  182,  182,  182,  182,  812,
      182,  182,  182,  182,  182,  819,  182,  182,  182,  182,
      182,  824,  816,  182,  182,  182,  820,  182,  817,  941,
      821,  825,  182,  182,  182,  822,  182,  941,  182,  182,
      182,  182,  819,  941,  182,  823,  182,  182,  824,  182,
      182,  182,  182,  820,  182,  182,  182,  182,  825,  182,

      941,  182,  822,  182,  826,  829,  182,  182,  182,  182,
      827,  828,  823,  182,  182,  182,  182,  182,  182,  182,
      830,  182,  182,  182,  182,  182,  182,  831,  182,  861,
      182,  826,  829,  182,  182,  182,  182,  827,  828,  182,
      182,  182,  182,  832,  182,  182,  182,  830,  182,  182,
      182,  835,  182,  182,  831,  182,  861,  182,  941,  182,
      182,  182,  182,  182,  833,  182,  182,  182,  834,  182,
      832,  182,  182,  182,  837,  941,  182,  182,  835,  836,
      182,  941,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  833,  182,  838,  182,  834,  182,  182,  182,  182,

      182,  837,  839,  182,  182,  182,  836,  182,  182,  182,
      182,  182,  182,  841,  182,  182,  182,  182,  840,  182,
      838,  941,  844,  182,  182,  182,  182,  182,  182,  839,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      841,  842,  182,  845,  182,  840,  182,  862,  182,  844,
      182,  843,  182,  863,  182,  182,  182,  182,  182,  182,
      182,  848,  182,  846,  182,  182,  182,  182,  842,  182,
      845,  847,  941,  849,  862,  182,  182,  182,  843,  182,
      863,  182,  182,  182,  182,  182,  182,  182,  848,  182,
      846,  853,  182,  850,  182,  182,  852,  182,  847,  182,

      849,  182,  864,  182,  182,  851,  182,  182,  182,  182,
      854,  856,  182,  182,  182,  182,  865,  941,  853,  182,
      850,  858,  182,  852,  182,  182,  182,  182,  182,  864,
      182,  182,  851,  182,  182,  855,  182,  854,  856,  182,
      182,  182,  182,  865,  182,  182,  866,  867,  858,  868,
      869,  870,  182,  871,  182,  857,  182,  182,  182,  872,
      182,  182,  855,  182,  182,  873,  874,  875,  182,  876,
      877,  182,  182,  866,  867,  878,  868,  869,  870,  879,
      871,  880,  857,  182,  881,  882,  872,  883,  182,  884,
      182,  182,  873,  874,  875,  182,  876,  877,  886,  182,

      182,  182,  878,  941,  885,  941,  879,  888,  880,  182,
      182,  881,  882,  887,  883,  182,  884,  182,  182,  182,
      182,  182,  182,  182,  182,  886,  182,  182,  182,  182,
      889,  885,  182,  891,  888,  182,  182,  182,  890,  941,
      887,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  889,  892,  182,
      891,  182,  182,  182,  182,  890,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  893,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  892,  182,  182,  182,  894,
      182,  182,  182,  182,  182,  182,  182,  182,  896,  182,

      182,  182,  893,  182,  182,  182,  182,  909,  895,  900,
      182,  182,  182,  182,  182,  182,  894,  898,  182,  182,
      182,  182,  182,  182,  182,  896,  182,  897,  910,  182,
      182,  182,  901,  182,  909,  895,  900,  182,  911,  182,
      182,  182,  182,  941,  898,  182,  899,  182,  182,  182,
      182,  182,  182,  182,  897,  910,  182,  182,  182,  901,
      902,  182,  182,  903,  182,  911,  182,  182,  182,  182,
      905,  906,  182,  899,  182,  182,  182,  941,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  902,  182,  182,
      903,  182,  904,  182,  182,  182,  182,  905,  906,  182,

      182,  182,  182,  182,  182,  182,  907,  182,  182,  182,
      182,  182,  182,  182,  182,  912,  182,  913,  182,  904,
      914,  182,  182,  908,  182,  915,  916,  182,  917,  182,
      182,  182,  182,  907,  182,  941,  182,  182,  182,  182,
      182,  182,  912,  182,  913,  182,  941,  914,  182,  182,
      908,  182,  915,  916,  918,  917,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  941,
      182,  182,  182,  182,  182,  182,  182,  919,  182,  941,
      941,  918,  182,  182,  182,  182,  182,  182,  927,  182,
      182,  182,  182,  182,  182,  182,  922,  182,  182,  182,

      182,  182,  182,  182,  919,  182,  920,  182,  182,  182,
      182,  182,  921,  941,  928,  927,  182,  182,  182,  182,
      182,  182,  182,  922,  182,  182,  182,  182,  182,  182,
      182,  182,  929,  920,  182,  182,  930,  182,  182,  921,
      923,  928,  926,  182,  182,  182,  182,  931,  182,  182,
      924,  182,  182,  182,  182,  182,  925,  182,  182,  929,
      941,  182,  182,  930,  182,  182,  941,  923,  182,  926,
      182,  182,  182,  182,  931,  182,  932,  924,  182,  941,
      182,  182,  182,  925,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  933,  937,  182,  938,  182,  182,  934,

      182,  941,  182,  932,  182,  182,  182,  935,  182,  182,
      939,  182,  182,  182,  182,  936,  182,  182,  182,  182,
      933,  937,  941,  938,  182,  182,  934,  182,  182,  182,
      182,  182,  182,  182,  935,  941,  182,  939,  182,  182,
      182,  940,  936,  182,  941,  941,  182,  182,  182,  941,
      941,  182,  182,  941,  182,  182,  941,  182,  941,  182,
      182,  941,  941,  182,  941,  941,  182,  182,  940,  941,
      941,  941,  941,  941,  182,  182,  941,  941,  941,  182,
      941,  941,  941,  941,  941,  941,  941,  182,   82,  941,
      941,   82,   83,  941,   83,   83,  168,  941,  168,  168,

      171,  941,  171,  171,  172,  941,  172,  172,  182,  941,
      182,  182,    5,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941
    } ;

static yyconst flex_int16_t yy_chk[3781] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   13,  944,
       13,   15,   15,   16,   16,   19,   20,   19,   22,  356,
       21,   25,   22,   19,  258,   19,   22,   25,   28,   19,
       19,   29,   22,   94,   21,   22,   20,   21,   21,   23,
      177,   23,   19,   20,   19,   22,   23,   21,   25,   22,
       19,   23,   19,   22,   25,   28,   19,   19,   29,   22,
       94,   21,   22,   20,   21,   21,   23,   26,   23,  176,

       24,   44,   44,   23,  172,   26,   24,   27,   23,   24,
      171,   33,   24,   27,   27,   27,   88,   31,   30,   33,
       27,   31,   30,   33,   26,   36,   33,   24,   30,   36,
       45,   45,   26,   24,   27,   95,   24,   32,   33,   24,
       27,   27,   27,   34,   31,   30,   33,   27,   31,   30,
       33,   32,   36,   33,   34,   30,   36,   32,   32,   98,
       34,   37,   95,   37,   32,   99,   37,   39,   87,   39,
       34,   83,   39,   37,   37,   50,   82,   50,   32,   52,
       52,   34,   53,   53,   32,   32,   98,   34,   37,   79,
       37,   62,   99,   37,   39,   66,   39,   40,   62,   39,

       37,   37,   38,   38,   62,   40,   38,   41,   41,   38,
       38,   62,   80,   80,   55,   66,   38,  105,   62,   38,
       86,   86,   66,   54,   40,   62,  169,  169,   51,   38,
       38,   62,   40,   38,   41,   41,   38,   38,   62,  175,
      175,   72,   66,   38,  105,   49,   38,   56,   56,  106,
       56,   56,   56,   56,   56,   56,   63,   56,   56,   56,
       63,   72,   65,   56,   63,   56,   97,   96,   72,   97,
      100,   56,   65,   56,   47,   96,  106,   56,   56,  109,
       63,   68,   65,   63,  100,   68,   46,   63,   72,   65,
       56,   63,   56,   97,   96,   42,   97,  100,   56,   65,

       56,   68,   96,  110,   56,   56,  109,   63,   68,   65,
       18,  100,   68,   56,   57,   57,   17,   57,   57,   57,
       57,   57,   57,   67,   57,   57,   57,   67,   68,   14,
      110,   57,   12,   67,    9,   71,   73,   77,  104,   71,
       73,   77,  102,   67,  111,   77,   71,  112,  104,  102,
       67,   57,   71,    5,   67,    0,   73,  113,   57,   71,
       67,   77,   71,   73,   77,  104,   71,   73,   77,  102,
       67,  111,   77,   71,  112,  104,  102,  115,   57,   71,
       57,   58,   76,   73,  113,   58,   71,  103,   77,  103,
        0,   76,  116,   76,  117,   58,   76,   78,   58,   58,

       78,   78,   76,  118,  115,   58,    0,    0,   58,   76,
        0,  119,   58,  120,  103,    0,  103,   78,   76,  116,
       76,  117,   58,   76,   78,   58,   58,   78,   78,   76,
      118,  107,   58,   59,  108,  108,  107,   59,  119,    0,
      120,   59,  107,  124,   78,  125,  114,   59,  114,  107,
       59,  121,  114,    0,  121,  127,  128,   59,  107,  114,
       59,  108,  108,  107,   59,    0,  122,    0,   59,  107,
      124,  122,  125,  114,   59,  114,  107,   59,  121,  114,
      126,  121,  127,  128,   59,   60,  114,  129,  130,  131,
      126,  131,   60,  122,   60,  126,  126,  133,  122,   60,

      132,  134,  132,  135,   60,   60,    0,  126,  136,  137,
        0,  138,   60,  139,  129,  130,  131,  126,  131,   60,
      141,   60,  126,  126,  133,  142,   60,  132,  134,  132,
      135,   60,   60,   61,  143,  136,  137,   61,  138,  144,
      139,  145,  147,   61,  148,  145,   61,  141,  150,   61,
      149,  146,  142,   61,    0,    0,  146,  151,  149,  152,
       61,  143,    0,    0,   61,  153,  144,  154,  145,  147,
       61,  148,  145,   61,    0,  150,   61,  149,  146,  156,
       61,   64,   64,  146,  151,  149,  152,  155,   64,   64,
       64,  157,  153,  158,  154,   64,  159,  160,  155,  161,

      160,   64,    0,  162,  163,    0,  156,  165,   64,   64,
      166,  260,  262,  263,  155,   64,   64,   64,  157,  164,
      158,  182,   64,  159,  160,  155,  161,  160,   64,   69,
      162,  163,  164,   69,  165,    0,  265,  166,  260,  262,
      263,  182,  184,   69,  183,  183,  164,  267,  182,   69,
       69,    0,  268,   69,    0,    0,   69,  184,    0,  164,
       69,  269,  184,  265,  271,  183,    0,    0,  182,  184,
       69,  183,  183,  270,  267,  270,   69,   69,  185,  268,
       69,   70,   70,  190,  184,  185,  187,  272,  269,  184,
       70,  271,  183,  185,   70,    0,    0,   70,  185,  187,

      270,   70,  270,  190,    0,  185,  187,    0,   70,   70,
      190,    0,  185,  187,  272,    0,    0,   70,  200,  186,
      185,   70,  186,  186,   70,  185,  187,  273,   70,   74,
      190,   74,  200,  187,   74,  188,  274,  188,  200,  276,
      277,   74,   74,  186,    0,  200,  186,    0,    0,  186,
      186,   74,    0,    0,  273,  278,   74,  188,   74,  200,
        0,   74,  188,  274,  188,  200,  276,  277,   74,   74,
      186,  212,    0,  280,  189,  189,    0,  281,   74,   75,
       75,    0,  278,   75,  188,  191,   75,   75,  192,  189,
        0,  212,  191,   75,  189,  192,   75,  192,  212,  191,

      280,  189,  189,   75,  281,  191,   75,   75,  192,  282,
       75,  194,  191,   75,   75,  192,  189,  193,  212,  191,
       75,  189,  192,   75,  192,  195,  191,  193,  194,  197,
       75,  194,  191,  218,    0,  192,  282,  193,  194,  283,
      195,  284,  197,  197,  193,  195,    0,  285,    0,  197,
        0,    0,  195,  218,  193,  194,  197,    0,  194,  198,
      218,  199,  201,  201,  193,  287,  283,  195,  284,  197,
      197,  199,  195,  196,  285,  198,  197,  196,  196,  198,
      218,  199,    0,  201,  196,  202,  198,  202,  199,  201,
      201,  196,  287,  288,    0,    0,  204,  196,  199,    0,

      196,    0,  198,  204,  196,  196,  198,  202,  199,  205,
      201,  196,  202,  203,  202,  203,  204,  206,  196,  203,
      288,  207,  205,  204,  196,    0,  203,  206,  207,  205,
      204,  219,  219,    0,  202,  203,  205,  206,    0,    0,
      203,  207,  203,  204,  206,    0,  203,  208,  207,  205,
      209,  219,  210,  203,  206,  207,  205,  208,  219,  219,
      209,  213,  203,  222,  206,  213,  210,  208,  207,  210,
      209,  211,  210,    0,  208,  214,  222,  209,  219,  210,
      211,  213,    0,  222,  208,  211,  214,  209,  213,  279,
      222,  211,  213,  210,  208,  214,  210,  209,  211,  210,

      216,  217,  214,  222,  279,  217,    0,  211,  213,  216,
      222,    0,  211,  214,  289,  290,  279,    0,  211,  291,
      216,  217,  214,  215,  215,  223,    0,  216,  217,  220,
        0,  279,  217,  215,  223,  220,  216,  220,  215,  215,
        0,  289,  290,  224,  215,  223,  291,  216,  217,  220,
      215,  215,  223,  221,  225,  221,  220,  221,  224,  292,
      215,  223,  220,  224,  220,  215,  215,  229,  226,  225,
      224,  215,  223,    0,  225,  226,  220,  221,    0,  227,
      221,  225,  221,  227,  221,  224,  292,  229,  226,  294,
      224,  228,  228,    0,  229,  226,  225,  231,    0,  230,

      230,  225,  226,  227,  221,  233,  227,  295,  232,  233,
      227,  228,  231,    0,  229,  226,  294,  231,  228,  228,
      230,  232,    0,  236,  231,  236,  230,  230,  232,  233,
      227,  235,  233,  234,  295,  232,  233,  234,  228,  231,
      235,  296,    0,  236,  231,  235,  237,  230,  232,  237,
      236,  235,  236,  234,  238,  232,  233,    0,  235,  241,
      234,  238,  245,  241,  234,  239,  237,  235,  296,  238,
      236,  240,  235,  237,  238,  239,  237,  297,  235,    0,
      234,  238,  245,  241,  240,  239,  241,    0,  238,  245,
      241,  240,  239,  237,  242,  244,  238,  242,  240,  243,

      246,  238,  239,  244,  297,  247,  243,  298,  246,  245,
      241,  240,  239,  299,  244,  244,  247,  242,  240,  243,
      246,  242,  244,    0,  242,  247,  243,  246,    0,  248,
      244,    0,  247,  243,  298,  246,  300,  250,  250,  254,
      299,  244,  244,  247,  242,  248,  243,  246,  253,  248,
      249,  251,  247,  252,  249,  251,  248,  249,  250,  254,
      252,  253,    0,  300,  250,  250,  254,    0,  253,  301,
      249,  251,  248,  252,  255,  253,  248,  249,  251,  302,
      252,  249,  251,  303,  249,  250,  254,  252,  253,  255,
      304,  305,  306,  307,  255,  253,  301,  249,  251,  308,

      252,  255,  309,  307,  311,  312,  302,  313,  314,  315,
      303,  316,  317,  318,  320,  321,  255,  304,  305,  306,
      307,  255,  322,  323,  324,  325,  308,  326,  327,  309,
      307,  311,  312,  328,  313,  314,  315,  329,  316,  317,
      318,  320,  321,  330,  325,  331,  332,  333,  335,  322,
      323,  324,  325,  336,  326,  327,  337,  338,  340,  341,
      328,  342,  343,  345,  329,  346,  347,  346,  348,  349,
      330,  325,  331,  332,  333,  335,  350,  351,  352,  354,
      336,  357,  358,  337,  338,  340,  341,  353,  342,  343,
      345,  353,  346,  347,  346,  348,  349,  359,    0,  360,

      361,  357,  358,  350,  351,  352,  354,  361,  357,  358,
      362,  363,  364,  365,  353,  363,    0,  359,  353,  360,
      361,    0,    0,  365,  359,  366,  360,  361,  357,  358,
      362,  453,  364,  365,  361,  363,    0,  362,  363,  364,
      365,  367,  363,  366,  359,  366,  360,  361,  367,  368,
      365,  368,  366,  369,    0,    0,  454,  362,  453,  364,
      365,  367,  363,  371,  370,  373,  374,  371,  367,  369,
      366,  368,  366,  369,    0,  367,  368,    0,  368,  370,
      369,  372,  375,  454,  370,  373,  374,  371,  367,  375,
      371,  370,  373,  374,  371,  372,  369,    0,  368,  376,

      369,  372,  375,  376,  377,  378,  370,  378,  372,  375,
        0,  370,  373,  374,  371,  379,  375,  381,  380,  377,
      381,    0,  372,  376,  377,  455,  376,  378,  372,  375,
      376,  377,  378,  380,  378,  379,  383,  382,  380,  384,
      381,  386,  379,    0,  381,  380,  377,  381,  382,  385,
      376,  377,  455,  385,  378,    0,  383,  382,  388,  384,
      380,  386,  379,  383,  382,  380,  384,  381,  386,  387,
      389,  387,  388,  385,  390,  382,  385,  389,  388,  456,
      385,    0,  391,  383,  382,  388,  384,  392,  386,  394,
      389,  387,  394,  457,  390,  392,  387,  389,  387,  388,

      385,  390,  391,  393,  389,  388,  456,  392,  395,  391,
      393,  397,  394,    0,  392,  397,  394,  389,  387,  394,
      457,  390,  392,  393,  395,  398,    0,    0,  395,  391,
      393,  397,    0,  396,  392,  395,  396,  393,  397,  394,
      398,  399,  397,  458,  401,  398,  402,    0,    0,  403,
      393,  395,  398,  396,  401,  395,  399,  404,  397,  400,
      396,  399,  406,  396,  401,  400,  402,  398,  399,  403,
      458,  401,  398,  402,  408,  405,  403,  404,  406,  400,
      396,  401,  406,  399,  404,  405,  400,  410,  399,  406,
      407,  401,  400,  402,  408,  405,  403,    0,  409,  407,

        0,  408,  405,  460,  404,  406,  400,  410,    0,  406,
      407,  411,  405,  409,  410,  411,  417,  407,  409,  415,
        0,  408,  405,  412,  412,  409,  407,  414,  413,  414,
      460,  411,  413,  416,  410,  415,  417,  407,  411,  415,
      409,  418,  411,  417,  412,  409,  415,  414,  418,  416,
      412,  412,  413,  416,  414,  413,  414,  419,  411,  413,
      416,  418,  415,  417,    0,  421,  415,  420,  418,  422,
      419,  412,    0,  462,  414,  418,  416,  419,  428,  413,
      416,  420,  423,    0,  419,  421,  423,  420,  418,  422,
      424,  425,  421,  428,  420,  426,  422,  419,  428,  424,

      462,  423,  425,  426,  419,  428,  423,  430,  420,  423,
      424,  425,  421,  423,  420,  426,  422,  424,  425,  427,
      428,  429,  426,  427,  429,  428,  424,  430,  423,  425,
      426,    0,  431,  423,  430,  432,  437,  424,  425,    0,
      433,  429,  426,  427,  463,    0,  427,    0,  429,  434,
      427,  429,  431,  464,  430,  432,  437,  435,  433,  431,
      433,    0,  432,  437,  434,    0,  436,  433,  429,  434,
      427,  463,  435,  436,  441,  439,  434,  435,  438,  431,
      464,    0,  432,  437,  435,  433,  436,  433,  440,  438,
      439,  434,  442,  436,  441,  439,  434,  440,  438,  435,

      436,  441,  439,    0,  435,  438,    0,  446,  440,  443,
        0,  446,  442,  436,  465,  440,  438,  439,  443,  442,
      444,  441,  439,  445,  440,  438,  448,    0,  447,  443,
      444,  446,  444,  445,  446,  440,  443,  447,  446,  442,
      444,  465,  448,  445,    0,  443,  448,  444,  447,    0,
      445,  450,  467,  448,  449,  447,  443,  444,  446,  444,
      445,  468,    0,  469,  447,  470,  450,  444,  472,  448,
      445,  450,  449,  448,  449,  447,  451,  452,  450,  467,
      452,  449,  473,  474,  477,  451,  478,  479,  468,  451,
      469,  480,  470,  450,  481,  472,  451,  452,  450,  449,

      485,  449,  486,  451,  452,  488,  490,  452,  491,  473,
      474,  477,  451,  478,  479,  492,  451,  493,  480,  494,
      495,  481,  498,  451,  452,  496,  502,  485,  504,  486,
      505,  506,  488,  490,  507,  491,  496,  509,  510,  511,
      512,  513,  492,  516,  493,  517,  494,  495,  518,  498,
      519,  520,  496,  502,  521,  504,  522,  505,  506,  524,
      525,  507,  526,  496,  509,  510,  511,  512,  513,  527,
      516,  530,  517,  531,  532,  518,  533,  519,  520,  534,
      535,  521,  536,  522,  537,  539,  524,  525,  541,  526,
        0,    0,    0,  545,  546,    0,  527,  543,  530,  548,

      531,  532,    0,  533,    0,  544,  534,  535,  549,  536,
      543,  537,  539,  545,  546,  541,  547,  543,  544,  548,
      545,  546,  551,  550,  543,  544,  548,  550,  549,  547,
        0,  552,  544,  635,    0,  549,  547,  543,    0,  552,
      545,  546,  551,  547,  543,  544,  548,  550,  553,  551,
      550,  552,  544,  555,  550,  549,  547,  554,  552,  556,
      635,  553,  637,  547,    0,  558,  552,  555,  553,  551,
        0,  638,  554,  555,  550,  553,  557,  554,  552,  556,
      555,  558,  559,  557,  554,  558,  556,  560,  553,  637,
        0,  560,  558,  561,  555,  553,  557,  559,  638,  554,

      555,    0,  559,  557,  554,  562,  556,  562,  558,  559,
      557,  560,  558,  561,  560,  563,  565,  566,  560,  563,
      561,  564,    0,  557,  559,  639,  640,  562,  564,  559,
        0,  569,  562,    0,  562,  563,  565,  566,  560,  567,
      561,  564,  563,  565,  566,  568,  563,  569,  564,  572,
      567,  569,  639,  640,  562,  564,  568,  571,  569,  567,
      570,  571,  563,  565,  566,  568,  567,    0,  564,  572,
      573,  574,  568,  641,  569,  570,  572,  567,  569,  577,
      570,  571,    0,  568,  571,  575,  567,  570,  571,  575,
      573,  574,  568,  576,  578,  579,  572,  573,  574,  577,

      641,    0,  570,  578,  576,  581,  577,  570,  571,  575,
        0,  642,  575,  576,  578,  579,  575,  573,  574,  580,
      576,  578,  579,  644,  582,  581,  577,  645,  583,  580,
      578,  576,  581,  587,    0,    0,  575,  582,  642,  580,
      576,  578,  579,    0,  582,  584,  580,  583,  583,  585,
      644,  582,  581,  587,  645,  583,  580,  586,  584,  586,
      587,  588,  585,  589,  582,  584,  580,  590,  588,  585,
      586,  582,  584,  591,  583,  583,  585,  586,  593,    0,
      587,  588,    0,  589,  586,  584,  586,  590,  588,  585,
      589,  592,  584,  591,  590,  588,  585,  586,  593,  595,

      591,  596,  594,  597,  586,  593,  592,  598,  588,  594,
      589,  592,  600,    0,  590,  596,  597,    0,  592,  595,
      591,  596,  594,  597,    0,  593,  595,  598,  596,  594,
      597,  601,  600,  592,  598,  599,  594,  599,  592,  600,
      602,  604,  596,  597,  601,  605,  595,  646,  596,  594,
      597,  601,  606,  602,  598,  603,  606,  599,  601,  600,
      602,  604,  599,  603,  599,  605,    0,  602,  604,  607,
        0,  601,  605,  607,  646,  603,  606,  608,  601,  606,
      602,  609,  603,  606,  599,  608,    0,  602,  604,  613,
      603,  610,  605,  607,  609,  648,  607,  608,    0,  611,

      607,  609,  603,  606,  608,  614,  610,  611,  609,  613,
      615,  610,  608,  612,  615,  612,  613,  649,  610,  611,
      607,  609,  648,  616,  608,  614,  611,  618,  609,  617,
      615,  619,  614,  610,  611,  612,  613,  615,  610,  617,
      612,  615,  612,  616,  649,  620,  611,  618,    0,  617,
      616,  619,  614,  621,  618,  621,  617,  615,  619,  620,
        0,  623,  612,  624,  622,  620,  617,  624,    0,  627,
      616,    0,  620,  622,  618,  621,  617,  623,  619,  628,
      621,  623,  621,  625,  622,  629,  620,  624,  623,  627,
      624,  622,  620,  626,  624,  626,  627,  630,  625,  628,

      622,  629,  621,  625,  623,  629,  628,  631,  623,  632,
      625,  622,  629,  626,  624,  650,  627,  630,  651,  652,
      626,  653,  626,  654,  630,  625,  628,  631,  629,  632,
      625,  655,  629,  656,  631,  658,  632,  659,  661,  664,
      626,  665,  650,  666,  630,  651,  652,  667,  653,  672,
      654,  673,  674,  677,  631,  678,  632,  679,  655,  680,
      656,  681,  658,  683,  659,  661,  664,  684,  665,  685,
      666,  686,  687,  688,  667,  689,  672,  690,  673,  674,
      677,  692,  678,  693,  679,  694,  680,  696,  681,  697,
      683,  699,  765,  700,  684,    0,  685,  702,  686,  687,

      688,  701,  689,  703,  690,  704,  705,  705,  692,  708,
      693,  699,  694,  700,  696,  767,  697,  702,  699,  765,
      700,  701,  701,  703,  702,  704,  706,  705,  701,  708,
      703,  707,  704,  705,  705,  706,  708,  709,  699,    0,
      700,  707,  767,  712,  702,  710,  706,  713,  701,  701,
      703,  707,  704,  706,  705,  710,  708,  709,  707,  711,
      714,  716,  706,  712,  709,  710,  711,  713,  707,    0,
      712,  717,  710,  706,  713,  714,  715,    0,  707,  711,
      714,  716,  710,    0,  709,  715,  711,  714,  716,  718,
      712,  717,  710,  711,  713,  719,  715,  720,  717,  723,

        0,  721,  714,  715,  718,  721,  711,  714,  716,  718,
      719,  720,  715,  722,  726,  719,  718,  720,  717,  723,
      722,  721,  719,  715,  720,  724,  723,  724,  721,  768,
      725,  718,  721,  722,  726,  728,  718,  719,  720,  729,
      722,  726,  719,  725,  720,  724,  723,  722,  721,  727,
      725,  731,  724,  730,  724,  728,  768,  725,    0,  729,
      722,  726,  728,  734,  727,  732,  729,  733,  730,  727,
      725,  731,  724,  730,  733,    0,  727,  725,  731,  732,
      730,    0,  728,  734,  735,  732,  729,  733,  736,  737,
      734,  727,  732,  738,  733,  730,  727,  738,  731,  739,

      730,  733,  739,  740,  735,  741,  732,  742,  736,  737,
      734,  735,  732,  743,  733,  736,  737,  738,  740,  739,
      738,    0,  746,  740,  738,  741,  739,  742,  744,  739,
      740,  735,  741,  743,  742,  736,  737,  748,  745,  747,
      743,  744,  746,  747,  738,  740,  739,  769,  744,  746,
      740,  745,  741,  770,  742,  744,  750,  748,  745,  747,
      743,  751,  751,  749,  748,  745,  747,  749,  744,  746,
      747,  750,    0,  752,  769,  744,  750,  752,  745,  753,
      770,  755,  751,  750,  748,  745,  747,  749,  751,  751,
      749,  756,  754,  753,  749,  756,  755,  752,  750,  753,

      752,  755,  772,  750,  752,  754,  753,  757,  755,  751,
      758,  760,  754,  761,  749,  756,  773,    0,  756,  754,
      753,  763,  756,  755,  752,  763,  753,  757,  755,  772,
      758,  760,  754,  761,  757,  759,  759,  758,  760,  754,
      761,  762,  756,  773,  764,  763,  776,  780,  763,  782,
      785,  788,  763,  789,  757,  762,  759,  758,  760,  791,
      761,  762,  759,  759,  764,  792,  794,  795,  762,  796,
      798,  764,  763,  776,  780,  799,  782,  785,  788,  802,
      789,  804,  762,  759,  805,  806,  791,  811,  762,  812,
      813,  764,  792,  794,  795,  814,  796,  798,  815,  816,

      817,  818,  799,    0,  814,    0,  802,  817,  804,  812,
      813,  805,  806,  816,  811,  814,  812,  813,  815,  816,
      817,  818,  814,  820,  821,  815,  816,  817,  818,  822,
      819,  814,  819,  823,  817,  823,  812,  813,  820,    0,
      816,  824,  814,  820,  821,  815,  816,  817,  818,  822,
      820,  821,  819,  825,  826,  823,  822,  819,  827,  819,
      823,  824,  823,  828,  830,  820,  829,  831,  824,  832,
      820,  821,  833,  825,  826,  829,  822,  834,  827,  819,
      825,  826,  823,  828,  830,  827,  829,  831,  824,  832,
      828,  830,  833,  829,  831,  835,  832,  834,  836,  833,

      825,  826,  829,  837,  834,  827,  840,  864,  835,  842,
      828,  830,  843,  829,  831,  835,  832,  839,  836,  833,
      838,  839,  835,  837,  834,  836,  840,  838,  866,  842,
      837,  841,  843,  840,  864,  835,  842,  844,  871,  843,
      838,  839,  835,    0,  839,  836,  841,  838,  839,  846,
      837,  841,  847,  840,  838,  866,  842,  844,  841,  843,
      845,  848,  845,  846,  844,  871,  850,  838,  839,  846,
      851,  852,  847,  841,  851,  852,  846,    0,  841,  847,
      854,  848,  845,  855,  844,  849,  850,  845,  848,  845,
      846,  853,  849,  850,  851,  852,  846,  851,  852,  847,

      854,  851,  852,  855,  856,  849,  853,  854,  848,  845,
      855,  853,  849,  850,  857,  873,  858,  874,  853,  849,
      877,  851,  852,  858,  856,  880,  881,  854,  882,  884,
      855,  856,  849,  853,  857,    0,  858,  885,  853,  886,
      887,  857,  873,  858,  874,  888,    0,  877,  890,  884,
      858,  856,  880,  881,  889,  882,  884,  885,  889,  886,
      887,  857,  891,  858,  885,  888,  886,  887,  890,    0,
      892,  893,  888,  894,  895,  890,  884,  891,  889,    0,
        0,  889,  891,  897,  885,  889,  886,  887,  909,  891,
      892,  893,  888,  894,  895,  890,  899,  892,  893,  898,

      894,  895,  900,  897,  891,  889,  896,  901,  896,  891,
      897,  903,  898,    0,  911,  909,  899,  892,  893,  898,
      894,  895,  900,  899,  904,  902,  898,  901,  896,  900,
      897,  903,  913,  896,  901,  896,  915,  905,  903,  898,
      902,  911,  907,  899,  904,  902,  898,  916,  906,  900,
      905,  904,  902,  908,  901,  896,  906,  905,  903,  913,
        0,  918,  907,  915,  905,  919,    0,  902,  906,  907,
      921,  904,  902,  908,  916,  906,  918,  905,  920,    0,
      908,  918,  923,  906,  905,  919,  922,  924,  918,  907,
      921,  926,  919,  920,  927,  906,  929,  921,  920,  922,

      908,    0,  923,  918,  925,  920,  922,  924,  918,  923,
      932,  926,  919,  922,  924,  925,  933,  921,  926,  935,
      920,  927,    0,  929,  925,  920,  922,  934,  936,  923,
      932,  925,  939,  922,  924,    0,  933,  932,  926,  935,
      940,  934,  925,  933,    0,    0,  935,  934,  936,    0,
        0,  925,  939,    0,  934,  936,    0,  932,    0,  939,
      940,    0,    0,  933,    0,    0,  935,  940,  934,    0,
        0,    0,    0,    0,  934,  936,    0,    0,    0,  939,
        0,    0,    0,    0,    0,    0,    0,  940,  942,    0,
        0,  942,  943,    0,  943,  943,  945,    0,  945,  945,

      946,    0,  946,  946,  947,    0,  947,  947,  948,    0,
      948,  948,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1616 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 1903 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 942 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 941 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 123:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 130:
#line 189 "flex_lexer.l"
case 131:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2658 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 942 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 942 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 941);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 219 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

